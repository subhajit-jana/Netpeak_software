(()=>{var t,i={557:()=>{function t(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||e(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,i){return function(t){if(Array.isArray(t))return t}(t)||function(t,i){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var o,n,p,a,r=[],s=!0,d=!1;try{if(p=(e=e.call(t)).next,0===i){if(Object(e)!==e)return;s=!1}else for(;!(s=(o=p.call(e)).done)&&(r.push(o.value),r.length!==i);s=!0);}catch(t){d=!0,n=t}finally{try{if(!s&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(d)throw n}}return r}}(t,i)||e(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e(t,i){if(t){if("string"==typeof t)return o(t,i);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?o(t,i):void 0}}function o(t,i){(null==i||i>t.length)&&(i=t.length);for(var e=0,o=new Array(i);e<i;e++)o[e]=t[e];return o}function n(t,i,e){var o;return o=function(t,i){if("object"!=p(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var o=e.call(t,i||"default");if("object"!=p(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===i?String:Number)(t)}(i,"string"),(i="symbol"==p(o)?o:o+"")in t?Object.defineProperty(t,i,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[i]=e,t}function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}if(void 0===window.pixelAdded){var a=function(){try{if("app"!=ue||Hi("poptin_enable_console_messages")){for(var t,i=(new Error).stack.split("\n")[2].trim().replace(/^at\s+/,""),e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];(t=console).info.apply(t,o.concat(["\nCalled from:",i]))}}catch(t){}},r=function(t,i){console.log("cart trigger triggered"),console.log("cart trigger_poptins",On);var e={product_id:t.id,product_name:t.name,category:t.category},o=Hi("poptin_wix_cart_products")?JSON.parse(Ri("poptin_wix_cart_products")):[];if("add"==i){var n=Hi("poptin_wix_cart_total_value")?parseFloat(Ri("poptin_wix_cart_total_value")):0;if(n+=parseFloat(t.price)*t.quantity,Ei("poptin_wix_cart_total_value",n),o.length>0)if(o.some((function(i){return i.product_id===t.id}))){var p=o.findIndex((function(i){return i.product_id===t.id}));o[p].category=null==t?void 0:t.category}else o.push(e);else o.push(e);Ei("poptin_wix_cart_products",JSON.stringify(o)),On.length>0&&jQ224.each(On,(function(i,e){"added_product"==e.wix_cart_trigger_action&&null!=e.wix_cart_trigger_products?("any_product"==e.wix_cart_trigger_products||-1!=e.wix_cart_trigger_products.split(",").findIndex((function(i){return i.product_id===t.id})))&&at(e):(console.log("handleCartItemOrCartValueAction function invoked_from_add"),s(e))}))}else{if(-1!=(p=o.findIndex((function(i){return i.product_name==t.name}))))var a=o[p];o.splice(p,1),Ei("poptin_wix_cart_products",JSON.stringify(o)),jQ224.each(On,(function(t,i){if("removed_product"==i.wix_cart_trigger_action&&On.length>0&&null!=i.wix_cart_trigger_products)if("any_product"==i.wix_cart_trigger_products)at(i);else if("empty_cart"==i.wix_cart_trigger_products&&o.length<1)at(i);else{-1!=i.wix_cart_trigger_products.split(",").findIndex((function(t){return t.product_id===a.product_id}))&&at(i)}else s(i)}))}},s=function(t){if(("cart_item"==t.wix_cart_trigger_action||"cart_value"==t.wix_cart_trigger_action)&&null!=t.wix_cart_trigger_cart_spec_filter&&null!=t.wix_cart_trigger_cart_spec_value){var i=t.wix_cart_trigger_cart_spec_filter,e=t.wix_cart_trigger_cart_spec_value,o=Hi("poptin_wix_cart_products")?JSON.parse(Ri("poptin_wix_cart_products")):[],n="cart_item"==t.wix_cart_trigger_action?o.length:0;switch(console.log("cartItemOrValueCount_is",n),i){case"greater_than":n>e&&at(t);break;case"equal":n==e&&at(t);break;case"greater_than_or_equal":n>=e&&at(t)}}},d=function(){void 0!==de.id&&("undefined"!=typeof Storage?null==window.sessionStorage.getItem("poptin_client_id")&&window.sessionStorage.setItem("poptin_client_id",de.id):Hi("poptin_client_id")||Ei("poptin_client_id",de.id,365))},l=function(){var t=de.id;return null==de.id&&("undefined"!=typeof Storage&&null!=window.sessionStorage.getItem("poptin_client_id")?t=window.sessionStorage.getItem("poptin_client_id"):Hi("poptin_client_id")&&(t=Ri("poptin_client_id"))),t},c=function(){g(),m(),C(),S(),T(),z(),wt(),poptin_disable_localstorage||(h(),y(),v()),_(),u()},_=function(){var t=!1;if(void 0!==window.ShopifyAnalytics&&(void 0===(t=window.ShopifyAnalytics.meta.page.customerId)&&(t=!1),t&&"product"==window.ShopifyAnalytics.meta.page.resourceType)){var i=window.ShopifyAnalytics.meta.page.resourceId.toString(),e=window.ShopifyAnalytics.meta.product.type,o=window.ShopifyAnalytics.meta.product.variants[0].name;setTimeout((function(){var n={product_id:i,product_name:o,category:e},p=Hi("poptin_browse_abandonment_products")?JSON.parse(Ri("poptin_browse_abandonment_products")):[];if(p.length>0)if(p.some((function(t){return t.product_id===i}))){var a=p.findIndex((function(t){return t.product_id===i}));p[a].category=e}else p.push(n);else p.push(n);Ei("poptin_browse_abandonment_products",JSON.stringify(p)),jQ224.get(le+"/shopify/save/browse-abandonment?clientId="+l()+"&customer="+t.toString()+"&products="+JSON.stringify(p)+"&data_for=abandonment",{},"json")}),5e3)}},u=function(){var t=!1;void 0!==window.ShopifyAnalytics&&(void 0===(t=window.ShopifyAnalytics.meta.page.customerId)&&(t=!1),t&&(Hi("poptin_fetch_initial_shopify_cart_for_filter")||(f(),Ei("poptin_fetch_initial_shopify_cart_for_filter",!0)),function(t,i){"function"==typeof i&&(t.fetch=function(){var t=i.apply(this,arguments);return t.then((function(t){["".concat(window.location.origin,"/cart/add.js"),"".concat(window.location.origin,"/cart/add"),"".concat(window.location.origin,"/cart/update.js"),"".concat(window.location.origin,"/cart/update"),"".concat(window.location.origin,"/cart/change.js"),"".concat(window.location.origin,"/cart/change"),"".concat(window.location.origin,"/cart/clear.js"),"".concat(window.location.origin,"/cart/clear")].includes(t.url)&&t.clone().json().then((function(t){f()}))})),t})}(window,window.fetch)))},f=function(){jQ224.ajax({url:"/cart.js",type:"get",dataType:"json",async:!1},"json").done((function(t){var i=[],e=0;t.items.length>0&&(jQ224.each(t.items,(function(t,e){var o={product_id:e.product_id.toString(),product_name:e.product_title};i.push(o)})),e=t.total_price),jQ224.get(le+"/shopify/save/browse-abandonment?clientId="+l()+"&customer="+Qn.toString()+"&products="+JSON.stringify(i)+"&data_for=cart&total_cart_value="+e,{},"json")}))},g=function(){void 0!==window.Shopify&&window.Shopify.shop&&jQ224.ajax({url:W()+"cart.js",type:"get",dataType:"json",async:!1},"json").done((function(t){var i=t.total_price/100;vn.push({tag_input:"shpfy_value",pre:1,value:i}),vn.push({tag_input:"shpfy_count",pre:1,value:t.item_count}),jQ224.ajax({url:le+"/api/display/shopify/get-price-rules/"+l(),type:"get",async:!1,success:function(t){yn=t.price_rules;var e=null;jQ224(yn).each((function(t,o){if(null==e&&("shipping_line"==o.target_type&&"each"==o.allocation_method||"line_item"==o.target_type&&"across"==o.allocation_method)&&"all"==o.target_selection){var n=(e=o)&&e.prerequisite_subtotal_range&&e.prerequisite_subtotal_range.greater_than_or_equal_to?parseFloat(e.prerequisite_subtotal_range.greater_than_or_equal_to):0;vn.push({tag_input:"shpfy_thres",pre:1,value:n}),vn.push({tag_input:"shpfy_gap",pre:1,value:n-i})}}))}})}))},m=function(){var t=ui().length>1?ui():document.referrer,i=t&&t.startsWith("https://")?"secure":t&&t.startsWith("http://")?"unsecure":"";t=t.replace(/^https?:\/\//,""),document.referrer.length>1&&(Ei("poptin_referrer",t,.00138888888888889),i&&Ei("poptin_referrer_protocol",i,.00138888888888889)),setInterval((function(){Ei("poptin_referrer",t,.00138888888888889),i&&Ei("poptin_referrer_protocol",i,.00138888888888889)}),6e4)},h=function(){if(document.referrer&&-1!==document.referrer.indexOf(window.location.host)?document.referrer:null){var t=new URL(document.referrer),i=t.pathname+t.search,e=localStorage.getItem("poptin_previous_visited_pages");if(e&&e.length>0){var o=e.split("|");if(o.includes(i)){var n=o.indexOf(i);o.splice(n,1)}o.push(i),localStorage.setItem("poptin_previous_visited_pages",o.join("|"))}else localStorage.setItem("poptin_previous_visited_pages",i)}},v=function(){var t=document.location.href,i=localStorage.getItem("poptin_all_visited_pages");if(i&&i.length>0){var e=i.split("|");if(e.includes(t)){var o=e.indexOf(t);e.length-1!=o&&e.push(t)}else e.push(t);localStorage.setItem("poptin_all_visited_pages",e.join("|"))}else localStorage.setItem("poptin_all_visited_pages",t)},y=function(){if(document.referrer&&-1!==document.referrer.indexOf(window.location.host)?document.referrer:null){var t=new URL(document.referrer),i=t.pathname+t.search+";"+b(),e=localStorage.getItem("poptin_previous_visited_pages_with_timestamp");if(e&&e.length>0){var o=e.split("|");if(o.includes(i)){var n=o.indexOf(i);o.splice(n,1)}o.push(i),localStorage.setItem("poptin_previous_visited_pages_with_timestamp",o.join("|"))}else localStorage.setItem("poptin_previous_visited_pages_with_timestamp",i)}},b=function(){return new Intl.DateTimeFormat("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}).formatToParts(new Date).reduce((function(t,i){return"literal"===i.type?t.push("-"):t.push(i.value),t}),[]).join("")},w=function(){return localStorage.getItem("poptin_previous_visited_pages")},j=function(){return localStorage.getItem("poptin_all_visited_pages")},Q=function(){var t=window.location.pathname+";"+b(),i=localStorage.getItem("poptin_previous_visited_pages_with_timestamp");if(i&&i.length>0){var e=i.split("|");if(e.includes(t)){var o=e.indexOf(t);e.splice(o,1)}return e.push(t),e.join("|")}return t},k=function(){var t=window.location.pathname,i=localStorage.getItem("poptin_previous_visited_pages");if(i&&i.length>0){var e=i.split("|");if(e.includes(t)){var o=e.indexOf(t);e.splice(o,1)}return e.push(t),e.join("|")}return t},C=function(){var t=null!=previous_url_spa&&poptin_single_page_app?previous_url_spa:document.referrer,i=t&&t.startsWith("https://")?"secure":t&&t.startsWith("http://")?"unsecure":"";t=t.replace(/^https?:\/\//,""),Ei("poptin_previous_url",t,.00138888888888889),i&&Ei("poptin_previous_url_protocol",i,.00138888888888889)},S=function(){jQ224(document).on("mouseover","a:not(.poptin-click)",(function(t){-1===this.href.indexOf("/APIRequest/click/")&&-1===this.href.indexOf("/api/display/click/")||(jQ224(this).addClass("poptin-click"),jQ224(this).attr("data-href",jQ224(this).attr("href")),jQ224(this).attr("href","javascript:void(0);"))})),jQ224(document).on("click","a.poptin-click",(function(t){a("displayPoptinOnClick"),t.preventDefault();try{poptin_id=jQ224(this).attr("data-href").split("click/")[1],M(poptin_id)}catch(t){Wi("displayPoptinOnClick()->error()",t,"OK",this.href,!1)}}))},I=function(t){return!(!jQ224(".poptin-popup[data-poptin-id="+t+"] .poptin_winning_screen.poptin-visible").length&&!jQ224(".poptin-popup[data-poptin-id="+t+"] .poptin_losing_screen.poptin-visible").length)||!!jQ224(".poptin-popup[data-poptin-id="+t+"] .poptin_thank_you_screen.poptin-visible").length},T=function(){a("set: onTextClickClose()");try{jQ224(".o-close").off("click")}catch(t){a(t)}jQ224(document).on("click",".o-close",(function(t){poptin_id=jQ224(t.target).parents(".poptin-popup").attr("data-poptin-id"),zo[poptin_id].poptin_trigger.close_trigger="cancel_click",closePoptin(poptin_id)}))},P=function(t){a(t),jQ224.when(jQ224.ajax(t.poptin_url)).then((function(i,e,o){Oo[t.poptin_id].poptin=i,Ao[t.poptin_id].poptin=i}),(function(t,i,e){a(t)}))},D=function(t,i,e,o,n){if(e=null!=e&&e,o=null!=o&&o,n=null!=n&&n,a("initiatePullPoptinsRequestOnClick()"),poptin_id=t.split("click/")[1].substr(0,13),null!=Ao[poptin_id]&&Ao[poptin_id].display)e&&M(poptin_id);else{var p,r,s=window.location.href,d=gi()+" "+ki(),c=vi(),_=document.title,u=0,f=0,g=[],m="",h=window.navigator.language,v=(null===(p=window.navigator)||void 0===p||null===(p=p.userAgentData)||void 0===p?void 0:p.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.platform)||"Unknown",y="";if("undefined"!=typeof Shopify){var b=O();if(u=b.total_price||0,f=b.item_count||0,(g=b.items||[]).length>0)m=g.map((function(t,i,e){return t.variant_id})).join(","),y=g.map((function(t,i,e){return t.product_id})).join(",")}var x=null;"undefined"!=typeof poptin_landing_page&&(x="&from_landing_page=1");var k=new URLSearchParams({client_id:l(),domain:s,referrer:ui(),previous_url:fi(),cookies:d,triggers:c,if_mobile:Eo,page_title:_,poptin_display:i,origin_landing_page:yi(),cancel_visitor_count:o,previous_visited_pages:w(),previous_visited_pages_with_time_stamp:Q(),all_visited_pages:j(),store_integration:wn,store_integration_customer_id:jn,cart_total_price:u,cart_total_items:f,cart_products_ids_list:m,browser_language:h,operating_system:v,cart_products_org_ids_list:y,wix_cart_id:localStorage.getItem("poptin_wix_cart_id")});jQ224.get(t.replace("app","app")+"?"+k.toString()+x,{},"json").done((function(t){if(a(t),"not_allowed"===t.display)return"not_allowed"!=t.display||"Client restricted"!=t.message&&"You have been reached the max poptins views number"!=t.message||!0,a(t.display),!1;var i;Io=t.country,To=t.country_code,Xo=t.if_freemium,Ho=t.lang,L(Ho),n?M(i):jQ224.each(t.poptins,(function(t,o){Ao[(i=this).poptin_id]=i,e?1==landing_page_teaser_on?it(Ao[i.poptin_id],0):"undefined"!=typeof poptin_landing_page?Ao[poptin_id].display&&M(i.poptin_id):M(i.poptin_id):P(i)}))})).fail((function(t,i,e){}))}},O=function(){var t={};return jQ224.ajax({url:W()+"cart.js",type:"get",dataType:"json",async:!1},"json").done((function(i){t=i})).fail((function(t,i,e){a("Cart Error")})),t},z=function(){try{"undefined"==typeof poptin_landing_page?F():(jQ224(".landing-form").show(),D(poptin_landing_page_url,!1,!0))}catch(t){}},A=function(t,i,e){$href=le+"/api/display/click/"+t,D($href,!0,i,e)},M=function(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;null!=Ao[t]?(he=Ao[t]).display?void 0===jQ224(".poptin-popup[data-poptin-id="+he.poptin_id+"]")[0]&&(null==Oo&&(Oo=new Object),poptin_template="",null!=Oo[he.poptin_id]&&""!=Oo[he.poptin_id].poptin&&(poptin_template=Oo[he.poptin_id].poptin),Oo[he.poptin_id]=he,Oo[he.poptin_id].poptin=poptin_template,zo[he.poptin_id]={},E(he),R(he),zo[he.poptin_id].poptin_trigger={convert:!1,shown:!1,poptin_active:!0,scroll_flag:!0,mouse_leave_flag:!0,click_counter:0,trigger:"",close_trigger:""},jt(he,!0),bt(he,!0),at(he,!0),"embedded"!=he.poptin_type&&"fullpage"!=he.poptin_type&&ae(he),It(he),oe(he),ne(he)):poptin_display_trigger||A(t,!0,!1):A(t,!0,!1),i&&ri(e)},F=function(){if(console.log("initiatePullPoptinsRequest()"),Eo&&Eo&&window.history&&window.history.pushState&&"undefined"==typeof Ecwid){if(!poptin_single_page_app){var t=100;window.history.state&&window.history.state.page&&(t=window.history.state.page),window.history.pushState({page:t+1},"")}setTimeout((function(){a("pop_urls",Dn),(Dn="object"===p(Dn)?Dn:JSON.parse(Dn))[Dn.length-1]!=window.location.href&&(Dn.push(window.location.href),a("pop_urls2",Dn),sessionStorage.setItem("pop_urls",JSON.stringify(Dn)))}),300),"undefined"==typeof Ecwid&&window.addEventListener("popstate",(function(){Dn.pop(),a("pop_urls",Dn),sessionStorage.setItem("pop_urls",JSON.stringify(Dn))}))}var i=window.location.href,e=gi()+" "+Ii()+" "+Si()+" "+se("poptin_abtest_session_")+" "+ki(),o=vi(),n=Ti(),r=ui(),s=fi(),d=document.title;jQ224(document).ready((function(){var t=document.querySelectorAll(".poptin-embedded"),p=t.length,c=[];if(p)for(var _=0;_<p;_++)c.push(t[_].getAttribute("data-id"));var u=0,f=0,g=[],m="",h="";if("undefined"!=typeof Shopify){var v=O();if(u=v.total_price||0,f=v.item_count||0,(g=v.items||[]).length>0)m=g.map((function(t,i,e){return t.variant_id})).join(","),h=g.map((function(t,i,e){return t.product_id})).join(",")}var y=!!bn;jQ224(".poptin-embedded").empty(),jQ224.ajax({url:le+"/api/display/"+l(),type:"get",data:{domain:i,referrer:r,previous_url:s,cookies:e,triggers:o,cc:n,poptin_forms_id:c,if_mobile:Eo,page_title:d,origin_landing_page:yi(),if_page_refreshed:Ji(),poptin_viewed_url:bi(),previous_visited_pages:w(),previous_visited_pages_with_current_page:k(),previous_visited_pages_with_time_stamp:Q(),all_visited_pages:j(),store_integration:wn,store_integration_customer_id:jn,wix_cart_id:localStorage.getItem("poptin_wix_cart_id"),cart_total_items:f,cart_total_price:u,cart_products_ids_list:m,cart_products_org_ids_list:h,preview_poptin_id:bn,cancel_visitor_count:y,converted_email:localStorage.getItem("poptin_converted_email")},dataType:"json",async:!0},"json").done((function(t){var i;Oo=t.poptins,Xo=t.if_freemium,Io=t.country,To=t.country_code,a(t),"not_allowed"!==t.display?(jQ224.each(Oo,(function(i,e){this.ab_test_parent_id&&jQ224(".poptin-embedded[data-id='"+this.ab_test_parent_id+"']").attr("data-id",this.poptin_id),(this.display||this.is_teasers_on)&&("embedded"==this.poptin_type&&0==jQ224(".poptin-embedded[data-id='"+this.poptin_id+"']").length||(Ho=t.lang,L(t.lang),U(this),Ro=!0)),this.on_click&&(Ao[this.poptin_id]=this,this.display||(Ho=t.lang,L(t.lang),a(this),P(this)))})),void 0!==window.wixDevelopersAnalytics&&t.wix_cart_details&&(i=t.wix_cart_details,cartItems=[],i.lineItems.length>0&&(cartItems=i.lineItems.map((function(t){return{product_id:t.rootCatalogItemId,product_name:t.productName.original,category:null}}))),Ei("poptin_wix_cart_products",JSON.stringify(cartItems)),Ei("poptin_wix_cart_total_value",i.subtotal.amount)),Ro&&(Ho=t.lang,L(t.lang)),poptin_single_page_app&&setTimeout((function(){setInterval((function(){jQ224(".poptin-embedded").each((function(t){if(jQ224(this).is(":empty")){var i=jQ224(this).attr("data-id");poptin_display_form(i)}}))}),5e3)}),5e3)):t.is_client_restriction?(upgrade_popup_setting=t.client_restriction_setting,re(t),!0):"not_allowed"!=t.display||"Client restricted"!=t.message&&"You have been reached the max poptins views number"!=t.message||!0,N(t),wi()})).fail((function(t,i,e){a("initiatePullPoptinsRequest()->auto->->error()")}))}))},N=function(t){Hi("poptin_user_ip")||null==t.ip||Ei("poptin_user_ip",t.ip,365),(!Hi("poptin_user_country_code")&&null!=t.cc||Ri("poptin_user_country_code")!=t.cc&&null!=t.cc)&&Ei("poptin_user_country_code",t.cc,365)},L=function(t){winie=/Windows NT 6.1/i.test(navigator.userAgent)&&(/Trident/i.test(navigator.userAgent)||/MSIE/i.test(navigator.userAgent))?"-ie":"",font_link="",jQ224("#poptin_heb_fonts_preload").remove(),jQ224("#poptin_heb_fonts").remove(),font_link+='<link rel="preload" id="poptin_heb_fonts_preload" as="style"  href="'+_e+"/css/heb-fonts"+winie+'.min.css">',font_link+='<link rel="stylesheet" id="poptin_heb_fonts" type="text/css" href="'+_e+"/css/heb-fonts"+winie+'.min.css" defer>',poptin_disable_fa||0==jQ224("#poptin-fa-preload").length&&0==jQ224("#poptin-fa").length&&(jQ224("#poptin-fa-preload").remove(),jQ224("#poptin-fa").remove(),font_link+='<link rel="preload" id="poptin-fa-preload" as="style" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">',font_link+='<link rel="stylesheet" id="poptin-fa" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" defer>',font_link+='<link rel="preload" id="poptin-fa-brands-preload" as="style" href="https://cdn.popt.in/css/brands.min.css">',font_link+='<link rel="stylesheet" id="poptin-fa-brands" type="text/css" href="https://cdn.popt.in/css/brands.min.css" defer>'),le.indexOf("dev")>=0?0==jQ224("#poptin-css-file-preload").length&&0==jQ224("#poptin-css-file-preload").length&&(jQ224("#poptin-css-file-preload").remove(),jQ224("#poptin-css-file").remove(),font_link+='<link  rel="preload" as="style" id="poptin-css-file-preload"  href="'+ve+"/css/poptin-style-"+t+'.css?ver=10">',font_link+='<link rel="stylesheet" type="text/css" id="poptin-css-file" href="'+ve+"/css/poptin-style-"+t+'.css?ver=10" defer>'):0==jQ224("#poptin-css-file-preload").length&&0==jQ224("#poptin-css-file-preload").length&&(jQ224("#poptin-css-file-preload").remove(),jQ224("#poptin-css-file").remove(),font_link+='<link  rel="preload" as="style" id="poptin-css-file-preload"  href="'+_e+"/css/poptin-style-"+t+'.css?ver=10">',font_link+='<link  rel="stylesheet" type="text/css" id="poptin-css-file" href="'+_e+"/css/poptin-style-"+t+'.css?ver=10" defer>'),jQ224("#poptin_custom_fonts_preconnect, #poptin_custom_fonts_preload").remove(),jQ224("head").append('<link rel="preconnect" id="poptin_custom_fonts_preconnect" href="https://d362h7pxdteoyk.cloudfront.net/"></link>'),"en"==t?(jQ224("#poptin_poppins_font_preload").remove(),jQ224("#poptin_poppins_font_link").remove(),poptin_disable_fonts||(jQ224("head").append('<link rel="preload" id="poptin_poppins_font_preload" as="style" href="https://fonts.popt.in?family=Poppins&display=swap">'),jQ224("head").append('<link rel="stylesheet" id="poptin_poppins_font_link" href="https://fonts.popt.in?family=Poppins&display=swap">'))):(jQ224("#poptin_opensanshebrew_font_preload").remove(),jQ224("#poptin_opensanshebrew_font_link").remove(),jQ224("head").append('<link rel="preload" id="poptin_opensanshebrew_font_preload" as="style" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">'),jQ224("head").append('<link rel="stylesheet" id="poptin_opensanshebrew_font_link" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">')),jQ224("head").append(font_link),Y()},B=function(t){function i(t){!function(t){var i=jQ224("[data-poptin-id="+t.poptin_id+"]"),e=i.find("input#poptinDesignInputTextFieldPhone").get(0);"basic"==jQ224(e).attr("data-action-validate")?(jQ224(e).off("blur"),jQ224(e).on("blur",(function(){if(jQ224(".poptin-input-msg").remove(),e.value&&(a=e.value,!/^\+?[0-9-\s()]*$/.test(a)||e.value.length>15)){var t=parseInt(1e10*Math.random()),o=ft()?"יש להזין מספר טלפון תקין":"Please enter a valid phone number";jQ224(e).parent().append('<span id="m'+t+'" class="poptin-input-msg poptin-input-msg-2 poptin-input-error">'+o+"</span>");var n=jQ224(e).parents(".draggable-container"),p=parseFloat(i.attr("data-scale"));p>=1?(n.addClass("has-poptin-input-msg"),n.append(jQ224("#m"+t).clone().attr("id","c"+t)),jQ224("#c"+t).css({top:(jQ224("#m"+t).offset().top-n.offset().top)/p+3,left:(jQ224("#m"+t).offset().left-n.offset().left)/p,width:parseInt(jQ224("#m"+t).css("width"))+10,height:parseInt(jQ224("#m"+t).css("height"))})):n.removeClass("has-poptin-input-msg")}var a})),jQ224(e).on("input",(function(t){var i=e.value.replace(/[^\d()+\-\s]/g,"");e.value=i}))):"international"==jQ224(e).attr("data-action-validate")&&(jQ224(e).removeAttr("required"),jQ224(e).off("open:countrydropdown close:countrydropdown focus blur"),"en"==jQ224(i).find("#poptinDraggableContainer").attr("data-lang")?e.style.setProperty("padding-left","70px","important"):e.style.setProperty("padding-right","70px","important"),jQ224(e).parents(".form-input-class").get(0).style.setProperty("z-index","999998","important"),jQ224(e).on("open:countrydropdown",(function(){i.find(".inputs-container").css("z-index","999")})),jQ224(e).on("open:countrydropdown",(function(){i.find(".inputs-container").css("z-index",i.find(".inputs-container").attr("data-z-index"))})),jQ224(e).on("focus",(function(){jQ224(".poptin-input-msg").remove()})),0==jQ224(e).parents(".iti").length&&window.intlTelInput(e,{initialCountry:"zz"!==To.toLowerCase()?To:"us",autoPlaceholder:"aggressive",nationalMode:!0,utilsScript:"https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/utils.js"}).promise.then((function(){jQ224(e).on("blur",(function(){if("undefined"!=typeof intlTelInputUtils){var t="+"===e.value[0]?intlTelInputUtils.numberFormat.INTERNATIONAL:intlTelInputUtils.numberFormat.NATIONAL,o=i.find(".iti__selected-flag .iti__flag").attr("class").slice(-2),n=intlTelInputUtils.formatNumber(e.value,o,t);e.value=n;var p=intlTelInputUtils.formatNumber(e.value,o,intlTelInputUtils.numberFormat.INTERNATIONAL);jQ224(e).attr("data-int-phone",p);var a="",r=window.intlTelInputGlobals.getInstance(e);if(e.value&&(r.isValidNumber()||(a=ft()?"מספר לא תקין – יש לנסות שוב":"Invalid number - please try again")),jQ224(".poptin-input-msg").remove(),""!=a){var s=parseInt(1e10*Math.random());jQ224(e).parent().append('<span id="m'+s+'" class="poptin-input-msg poptin-input-msg-3 poptin-input-error">'+a+"</span>");var d=jQ224(e).parents(".draggable-container"),l=parseFloat(i.attr("data-scale"));l>=1?(d.addClass("has-poptin-input-msg"),d.append(jQ224("#m"+s).clone().attr("id","c"+s)),jQ224("#c"+s).css({top:(jQ224("#m"+s).offset().top-d.offset().top)/l+3,left:(jQ224("#m"+s).offset().left-d.offset().left)/l,width:parseInt(jQ224("#m"+s).css("width"))+10,height:parseInt(jQ224("#m"+s).css("height"))})):d.removeClass("has-poptin-input-msg")}}}))})),jQ224(e).on("input",(function(t){var i=e.value.replace(/[^0-9()\s-]/g,"");e.value=i})))}(t),function(t){var i=jQ224("[data-poptin-id="+t.poptin_id+"]"),e="[data-poptin-id="+t.poptin_id+'] [name="poptinDesignInputTextFieldEmail"][data-action-validate="check-typos"], [data-poptin-id='+t.poptin_id+'] [name="poptinDesignInputTextFieldEmail"][data-action-validate="typos-business"]',o=new EmailAutoFill({domains:[{name:"gmail.com",autoCompleteAfter:1,misspelledVariations:["gmial.com","gmai.com","gamil.com","gmal.com","gmail.cm","mgail.com","gmil.com","gmail.om","gmaill.com","gmaiil.com","gmaiill.com","gmi.com","gmail.co","gmali.com","gml.com","gma.com"]},{name:"yahoo.com",autoCompleteAfter:2,misspelledVariations:["yaho.com","yhoo.com","yaaho.com","yaahoo.com","yahu.com","yahuo.com","yahou.com","yah00.com","yaho0.com"]},{name:"icloud.com",autoCompleteAfter:2,misspelledVariations:["iclooud.com","iclud.com","iclod.com","icloudd.com","iccloud.com","iclloud.com","iclou.com","icl0ud.com"]},{name:"me.com",autoCompleteAfter:2},{name:"mac.com",autoCompleteAfter:2},{name:"outlook.com",autoCompleteAfter:2,misspelledVariations:["outlok.com","outluk.com","outloook.com","outloo.com","outlouk.com","outluok.com","outlk.com","oulook.com","otlook.com","outlk.com","outlo.com","outllook.com","0utlook.com","outl00k.com","outlo0k.com","out0olk.com"]},{name:"protonmail.com",autoCompleteAfter:2,misspelledVariations:["protonmal.com","pr0tonmail.com","prot0nmail.com","pr0t0nmail.com","prtonmail.com","protnmail.com","prootonmail.com","protunmial.com","pr0tunmial.com","prootonmail.com","protoonmail.com"]},{name:"zohocorp.com",autoCompleteAfter:2,misspelledVariations:["z0h0c0rp.com","zohocrp.com","zohocpr.com","zoh0crop.com"]},{name:"aol.com",autoCompleteAfter:2,misspelledVariations:["aaol.com","aool.com","a0l.com"]},{name:"hotmail.com",autoCompleteAfter:2,misspelledVariations:["h0tmail.com","hotmal.com","hotmial.com","hootmail.com"]}],subscribe:function(t){if(jQ224(".poptin-input-msg").remove(),"auto-fill"==t.type){var o=jQ224(e),n=o.clone(),p=o.parent().css("padding-left")||0;n.addClass("poptin-input-autofill").val("").attr("placeholder",t.outValue).attr("id","").attr("data-name","").attr("name","").css({left:p}),o.parent().prepend(n),(n=o.parent().find(".poptin-input-autofill")).get(0).style.setProperty("width","calc(100% - "+p+" - "+p+")","important"),n.get(0).style.setProperty("min-width","auto","important"),jQ224(document).on("keydown",e,(function(t){if((9==t.keyCode||39==t.keyCode)&&"poptinDesignInputTextFieldEmail"==o.attr("id")&&n.length&&o.val()!=n.attr("placeholder")&&n.attr("placeholder").includes(o.val()))return o.val(n.attr("placeholder")),n.remove(),!1}))}if("suggestion"==t.type){var a=parseInt(1e10*Math.random());jQ224(e).parent().append('<span id="m'+a+'" class="poptin-input-msg poptin-input-msg-1 poptin-input-info poptin-input-suggestion">Did you mean <span>'+t.outValue+"</span>?</span>");var r=jQ224(e).parents(".draggable-container"),s=parseFloat(i.attr("data-scale"));s>=1?(r.addClass("has-poptin-input-msg"),r.append(jQ224("#m"+a).clone().attr("id","c"+a)),jQ224("#c"+a).css({top:(jQ224("#m"+a).offset().top-r.offset().top)/s+3,left:(jQ224("#m"+a).offset().left-r.offset().left)/s,width:parseInt(jQ224("#m"+a).css("width"))+10,height:parseInt(jQ224("#m"+a).css("height"))})):r.removeClass("has-poptin-input-msg")}}});jQ224(e).on("keyup",(function(t){var i=jQ224(this).val();jQ224(".poptin-input-autofill").remove(),13==t.keyCode?setTimeout((function(){jQ224(".poptin-input-msg").remove()}),3e3):jQ224(".poptin-input-msg").remove(),o.dispatch("suggestion",i),o.dispatch("auto-fill",i)})),jQ224(e).on("blur",(function(t){jQ224(".poptin-input-autofill").remove(),setTimeout((function(){jQ224(".poptin-input-msg").remove()}),3e3)})),jQ224(e).on("focus",(function(t){jQ224(".poptin-input-autofill").remove(),jQ224(".poptin-input-msg").remove()})),jQ224(document).on("click",".poptin-input-suggestion",(function(t){return t.preventDefault(),jQ224(e).val(jQ224(this).find("span").text()),jQ224(this).remove(),!1}))}(t),function(t){var i=jQ224("[data-poptin-id="+t.poptin_id+"]"),e=i.find("input#poptinDesignBirthdayField");e.off("blur"),e.off("focus.validation"),e.on("focus.validation",(function(){jQ224(".poptin-input-msg").remove()})),e.off("blur.validation"),e.on("blur.validation",(function(){jQ224(".poptin-input-msg").remove();var t=e.val();if(t&&new Date(t)>=new Date){var o=ft()?"יש להזין תאריך לידה תקין.":"Please enter a valid birthday.",n=parseInt(1e10*Math.random());e.parent().append('<span id="m'+n+'" class="poptin-input-msg poptin-input-msg-7 poptin-input-error">'+o+"</span>");var p=e.parents(".draggable-container"),a=parseFloat(i.attr("data-scale"));return a>=1?(p.addClass("has-poptin-input-msg"),p.append(jQ224("#m"+n).clone().attr("id","c"+n)),jQ224("#c"+n).css({top:(jQ224("#m"+n).offset().top-p.offset().top)/a+3,left:(jQ224("#m"+n).offset().left-p.offset().left)/a,width:parseInt(jQ224("#m"+n).css("width"))+10,height:parseInt(jQ224("#m"+n).css("height"))})):p.removeClass("has-poptin-input-msg"),!1}}))}(t)}if(1==qo)i(t);else{jQ224("head").append('<link rel="stylesheet" href="'+_e+'/phone-validation/css/intlTelInput.css"/>');var e=document.createElement("script");e.onload=function(){setTimeout((function(){var e=document.createElement("script");e.onload=function(){setTimeout((function(){qo=!0,i(t)}),100)},e.async=!0,e.src="https://cdn.popt.in/validation/email/email-autofill.js",document.body.appendChild(e)}),100)},e.async=!0,e.src=_e+"/phone-validation/js/intlTelInput.min.js",document.body.appendChild(e)}},E=function(t){1==t.design_properties.timer_ver||0==t.design_properties.timer_ver&&(t.poptin_type+"_"+t.poptin_format=="lightbox_format_5"||t.poptin_type+"_"+t.poptin_format=="lightbox_format_11"||t.poptin_type+"_"+t.poptin_format=="bar_format_5"||t.poptin_type+"_"+t.poptin_format=="bar_format_10")?0==jQ224("#poptin-timer-v1").length&&jQ224("head").append('<link rel="stylesheet" id="poptin-timer-v1" type="text/css" href="'+_e+'/css/timer.css?ver=10" defer>'):2==t.design_properties.timer_ver&&0==jQ224("#poptin-timer-v2").length&&jQ224("head").append('<link rel="stylesheet" id="poptin-timer-v2" type="text/css" href="'+_e+'/css/v_2/timer.css?ver=10" defer>')},R=function(t){t.poptin_type+"_"+t.poptin_format=="gamified_format_3"&&jQ224("head").append('<link rel="stylesheet" id="poptin-timer-v1" type="text/css" href="'+ve+'/css/v_2/spin-wheel.css" defer>')},U=function(t){a("downloadPoptinTemplateFromS3-poptin_id: "+t.poptin_id),""==Oo[t.poptin_id].poptin&&jQ224.when(jQ224.ajax(t.poptin_url)).then((function(i,e,o){if(a("downloadPoptinTemplateFromS3->status: "+e),t.poptin=i,Oo[t.poptin_id].poptin=i,null!=zo[t.poptin_id]&&(zo[t.poptin_id].poptin=i),void 0!==window.Shopify&&window.Shopify.shop)if(jQ224(t.poptin).find("input#shopifyProductsJSON").length>0){Ut();var n=JSON.parse(jQ224(t.poptin).find("input#shopifyProductsJSON").val());!n||"last_visited"!=n.category&&"product_in_cart"!=n.category?(a("show teasers if products available for collections and manual_products"),it(t,0)):Ht(t,n).then((function(i){1==i.display&&(a("show teasers if products available"),it(t,0))}))}else it(t,0);else it(t,0);E(t),R(t),Qt(t.poptin_id),jt(t),bt(t),t.display&&H(t)}),(function(t,i,e){a("downloadPoptinTemplateFromS3->error: "+t)}))},H=function(t){a("setPoptinTrigger for: "+t.poptin_id);var i="embedded"==t.poptin_type;if(t.display_after_sec_active=i?0:t.display_after_sec_active,zo[t.poptin_id].poptin_trigger={convert:!1,poptin_active:!0,scroll_flag:!0,mouse_leave_flag:!0,click_counter:0,trigger:"",close_trigger:"",shown:!1},bn===t.poptin_id){var e=X(t);at(e)}else{if("yes"==t.display_after_exit_website_active)if(Eo){if(window.history&&window.history.pushState){if(!poptin_single_page_app){var o=100;window.history.state&&window.history.state.page&&(o=window.history.state.page),window.history.pushState({page:o+1},"")}window.addEventListener("popstate",(function(){!function(t){if(a("going back "+Dn.length),Dn.length<1&&""!==location.hash.split("#!/")[1]&&""===window.location.hash){if(Mn.ifActive()&&Mn.ifRelevent(t))return a("load after back button trigger"),!1;(zo[t.poptin_id]&&zo[t.poptin_id].poptin_trigger.mouse_leave_flag&&zo[t.poptin_id].poptin_trigger.poptin_active||!zo[t.poptin_id].poptin_trigger.shown)&&(a("load after back button trigger"),zo[t.poptin_id].poptin_trigger.poptin_active=!1,zo[t.poptin_id].poptin_trigger.trigger="close tab",at(t,!!i||null),zo[t.poptin_id].poptin_trigger.mouse_leave_flag=!1)}}(t)}))}}else jQ224(document).mouseleave((function(i){if(st(t)&&dt(t)){var e=i.clientY,o=document.body.clientWidth-i.pageX,n=jQ224(window).height()-i.clientY;i.pageX;if("select"==i.target.tagName.toLowerCase())return!1;if(o>0&&n>0&&e<=0){if(a("load after mouse leave trigger: "+t.poptin_id),Mn.ifActive()&&Mn.ifRelevent(t))return a("not"),!1;(zo[t.poptin_id]&&zo[t.poptin_id].poptin_trigger.mouse_leave_flag&&zo[t.poptin_id].poptin_trigger.poptin_active||!zo[t.poptin_id].poptin_trigger.shown)&&(a("yes"),zo[t.poptin_id].poptin_trigger.poptin_active=!1,zo[t.poptin_id].poptin_trigger.trigger="close tab",at(t),zo[t.poptin_id].poptin_trigger.mouse_leave_flag=!1)}}}));if("no"!=t.display_after_sec_active){if("website"==t.display_after_sec_active_on){if(!Hi("poptin_session_account_time_"+t.account_id)){var n={set_at:Date.now(),expiry_at:Date.now()+6e4};Ei("poptin_session_account_time_"+t.account_id,JSON.stringify(n),1/24/60)}setInterval((function(){if(Ri("poptin_session_account_time_"+t.account_id)){var i=JSON.parse(Ri("poptin_session_account_time_"+t.account_id));if((i.expiry_at-Date.now())/1e3<60){var e={set_at:i.set_at,expiry_at:Date.now()+6e4};Ei("poptin_session_account_time_"+t.account_id,JSON.stringify(e),1/24/60)}}else{e={set_at:Date.now(),expiry_at:Date.now()+6e4};Ei("poptin_session_account_time_"+t.account_id,JSON.stringify(e),1/24/60)}}),2e4);var p=JSON.parse(Ri("poptin_session_account_time_"+t.account_id)).set_at/1e3,r=Date.now()/1e3-p}var s="page"===t.display_after_sec_active_on?1e3*t.display_after_sec_active:1e3*(t.display_after_sec_active-r);poptinTimeDelayTrigger=window.setTimeout((function(){if(a("load after "+t.display_after_sec_active+" seconds trigger on "+t.display_after_sec_active_on),st(t)&&dt(t)){if(Mn.ifActive()&&Mn.ifRelevent(t))return!1;!zo[t.poptin_id].poptin_trigger.poptin_active&&zo[t.poptin_id].poptin_trigger.shown||(zo[t.poptin_id].poptin_trigger.poptin_active=!1,zo[t.poptin_id].poptin_trigger.trigger="after "+t.display_after_sec_active+" seconds",at(t))}}),s)}if("no"!=t.display_after_scroll_active&&!Cn){a(t.display_after_scroll_active);jQ224(document).height(),jQ224(window).height(),t.display_after_scroll_active;jQ224(window).on("scroll.poptinTriggerScrollEvent",(function(){var i=(jQ224(document).height()-jQ224(window).height())*t.display_after_scroll_active*.01;if(jQ224(window).scrollTop()>=i&&zo[t.poptin_id].poptin_trigger.scroll_flag&&(zo[t.poptin_id].poptin_trigger.scroll_flag,(zo[t.poptin_id].poptin_trigger.poptin_active||!zo[t.poptin_id].poptin_trigger.shown)&&(a("load after "+t.display_after_scroll_active+" scroll page trigger"),st(t)&&dt(t)))){if(Mn.ifActive()&&Mn.ifRelevent(t))return!1;zo[t.poptin_id].poptin_trigger.poptin_active=!1,zo[t.poptin_id].poptin_trigger.trigger="after "+t.display_after_scroll_active+"% scrolling",at(t),zo[t.poptin_id].poptin_trigger.scroll_flag=!1}setTimeout((function(){zo[t.poptin_id].poptin_trigger.scroll_flag}),300)}))}if("no"!=t.display_after_page_click_number_active&&jQ224(document).on("click tap",(function(){a(zo[t.poptin_id].poptin_trigger.click_counter),zo[t.poptin_id].poptin_trigger.click_counter++,zo[t.poptin_id].poptin_trigger.click_counter==t.display_after_page_click_number_active&&(!zo[t.poptin_id].poptin_trigger.poptin_active&&zo[t.poptin_id].poptin_trigger.shown||st(t)&&dt(t)&&(a("load after "+t.display_after_page_click_number_active+" clicks page trigger"),zo[t.poptin_id].poptin_trigger.trigger="after "+t.display_after_page_click_number_active+" clicks",Mn.ifActive()&&Mn.ifRelevent(t)||(zo[t.poptin_id].poptin_trigger.poptin_active=!1,at(t)),zo[t.poptin_id].poptin_trigger.click_counter=0))})),"no"!=t.display_after_visit_page_active)if("undefined"!=typeof Storage){if("disactive"!=window.sessionStorage.getItem("display_after_visit_page_active_"+t.poptin_id)){if(window.sessionStorage.getItem("page_url_"+t.poptin_id)!=window.location.href){var d=(window.sessionStorage.getItem("page_visit_"+t.poptin_id)?Number(window.sessionStorage.getItem("page_visit_"+t.poptin_id)):0)+1;window.sessionStorage.setItem("page_visit_"+t.poptin_id,d)}window.sessionStorage.getItem("page_visit_"+t.poptin_id)==t.display_after_visit_page_active&&window.sessionStorage.getItem("page_url_"+t.poptin_id)!=window.location.href?(a("load after "+t.display_after_visit_page_active+" clicks page trigger"),st(t)&&dt(t)&&(Mn.ifActive()&&Mn.ifRelevent(t)||(at(t),zo[t.poptin_id].poptin_trigger.poptin_active=!1,t.d_f_r.includes("display_everytime_everypage_5")||window.sessionStorage.setItem("display_after_visit_page_active_"+t.poptin_id,"disactive")),window.sessionStorage.setItem("page_visit_"+t.poptin_id,0),window.sessionStorage.setItem("page_url_"+t.poptin_id,window.location.href))):window.sessionStorage.setItem("page_url_"+t.poptin_id,window.location.href)}}else a("Sorry! No Web Storage support..");if("no"!=t.display_after_inactive_seconds_active){!function(){var i,e=!1;function o(){e=!0,st(t)&&dt(t)&&(at(t),zo[t.poptin_id].poptin_trigger.poptin_active=!1)}function n(){clearTimeout(i),i=e?null:setTimeout(o,1e3*t.display_after_inactive_seconds_active)}window.onload=n(),window.onmousemove=n,window.onmousedown=n,window.ontouchstart=n,window.onclick=n,window.onkeypress=n,window.addEventListener("scroll",n,!0)}()}t.shopify_cart_trigger_active&&(Hi("poptin_fetch_initial_shopify_cart")||jQ224.ajax({url:W()+"cart.js",type:"get",dataType:"json",async:!1},"json").done((function(t){var i=[];jQ224.each(t.items,(function(t,e){i.push(e.variant_id)})),Ei("poptin_fetch_initial_shopify_cart",!0),Ei("poptin_shopify_cart_product_id",i.join(","))})),function(i,e){"function"==typeof e&&(i.fetch=function(){var i=e.apply(this,arguments);return i.then((function(i){var e=W();["".concat(window.location.origin)+e+"cart/add.js","".concat(window.location.origin)+e+"cart/add","".concat(window.location.origin)+e+"cart/update.js","".concat(window.location.origin)+e+"cart/update","".concat(window.location.origin)+e+"cart/change.js","".concat(window.location.origin)+e+"cart/change","".concat(window.location.origin)+e+"cart/clear.js","".concat(window.location.origin)+e+"cart/clear"].includes(i.url)&&i.clone().json().then((function(e){J(i,t,"fetch",e)}))})),i})}(window,window.fetch),q(t)),t.wix_cart_trigger_active&&On.push(t)}},X=function(t){var i=document.createElement("div");i.innerHTML=t.poptin;var e=i.querySelector(".poptin-popup"),o=e.getAttribute("data-poptin-type"),n=e.getAttribute("data-poptin-location"),p="100%",a="unset",r=-50;switch(o){case"fullpage":r=10,p="100vw";break;case"bside":r=0;break;case"mobile":n.includes("top")&&(r=t.field_poptin_height+10);break;case"social":a=0}var s='\n            <div style="max-width: '.concat(p,'; height: auto; display: flex; justify-content: center;">\n                <span style="height:auto !important;width:auto!important;min-width:300px; background:#fff !important;border-radius:4px !important;padding:5px 10px !important;position:absolute !important;z-index: 9999999 !important;right:').concat(a,";font-size:12px !important;text-align:center !important;top:").concat(r,'px !important;">This is a preview of your pop-up. Please note that submission will not be functional.</span>\n           </div>');return e.innerHTML=s+e.innerHTML,t.poptin=i.innerHTML,t},W=function(){var t="/";return"undefined"!=typeof Shopify&&Shopify.routes&&Shopify.routes.root&&(t=Shopify.routes.root),t},q=function(t){a("Initialized XHR Listener"),xhook.after((function(i,e){_url=i.url,["/cart/add.js","/cart/add","/cart/update.js","/cart/update","/cart/change.js","/cart/change","/cart/clear.js","/cart/clear"].includes(_url)&&(a("add-to-cart url found, call global listener"),J(i,t,"xhr",e))}))},J=function(t,i,e){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,n=[],p=null,r=null;if(void 0!==t.isFetch&&(e="fetch"),"fetch"==e){n=["".concat(window.location.origin,"/cart/add.js"),"".concat(window.location.origin,"/cart/add"),"".concat(window.location.origin,"/cart/update.js"),"".concat(window.location.origin,"/cart/update"),"".concat(window.location.origin,"/cart/change.js"),"".concat(window.location.origin,"/cart/change"),"".concat(window.location.origin,"/cart/clear.js"),"".concat(window.location.origin,"/cart/clear")],p=t.url,r=o;var s=4}else{n=["/cart/add.js","/cart/add","/cart/update.js","/cart/update","/cart/change.js","/cart/change","/cart/clear.js","/cart/clear"],p=t._url;s=0}var d=setInterval((function(){"xhr"==e&&(p=t.url,s=void 0!==t.xhr.readyState?t.xhr.readyState:t.readyState),4==s&&(clearInterval(d),n.includes(p)&&"/cart.js"!=p&&jQ224.ajax({url:"/cart.js",type:"get",dataType:"json",async:!1},"json").done((function(o){if("added_product"==i.shopify_cart_trigger_action&&null!=i.shopify_cart_trigger_products){if(p==n[0]||p==n[1])if("xhr"==e&&(r=JSON.parse(void 0!==t.xhr.response?t.xhr.response:t.response)),"any_product"==i.shopify_cart_trigger_products)at(i);else{var a=i.shopify_cart_trigger_products.split(","),s=r.variant_id.toString()||r.product_id.toString();a.includes(s)&&at(i)}}else if("removed_product"==i.shopify_cart_trigger_action){if(p!=n[0]&&t!=n[1]){var d=Hi("poptin_shopify_cart_product_id")?Ri("poptin_shopify_cart_product_id").split(","):[],l=[];if(jQ224.each(o.items,(function(t,i){l.push(i.variant_id.toString()||i.product_id.toString())})),"any_product"==i.shopify_cart_trigger_products&&l.length<d.length)at(i);else if("empty_cart"==i.shopify_cart_trigger_products&&o.item_count<1)at(i);else{(d=Hi("poptin_shopify_cart_product_id")?Ri("poptin_shopify_cart_product_id").split(","):[]).length>0&&jQ224.each(d,(function(t,e){l.includes(e)||i.shopify_cart_trigger_products.split(",").includes(e)&&at(i)}))}}}else if(("cart_item"==i.shopify_cart_trigger_action||"cart_value"==i.shopify_cart_trigger_action)&&null!=i.shopify_cart_trigger_cart_spec_filter&&null!=i.shopify_cart_trigger_cart_spec_value){var c=i.shopify_cart_trigger_cart_spec_filter,_=i.shopify_cart_trigger_cart_spec_value,u="cart_item"==i.shopify_cart_trigger_action?o.item_count:o.total_price/100;switch(c){case"greater_than":u>_&&at(i);break;case"equal":u==_&&at(i);break;case"greater_than_or_equal":u>=_&&at(i)}}l=[];jQ224.each(o.items,(function(t,i){l.push(i.variant_id.toString())})),Ei("poptin_shopify_cart_product_id",l.join(","))})).fail((function(t,i,e){a("Cart Error")})))}),100)},G=function(){var t=window.navigator.userAgent,i=t.indexOf("MSIE");return i>0?parseInt(t.substring(i+5,t.indexOf(".",i))):navigator.userAgent.match(/Trident\/7\./)?11:0},Y=function(){if(a("setPoptinStyle()"),clearTimeout(poptinTimeDelayTrigger),poptinTimeDelayTrigger=null,0==jQ224("#setPoptinStyle").length&&(poptin_style='<style type="text/css" id="setPoptinStyle">.poptin-popup .close-x-button{min-height: initial;background-color:initial;}.draggable-container form{display:initial;background-color:initial;width: initial;height: initial;top: initial;position: initial;}.draggable-container:not(.poptin-tab-container) .draggable{border: none;}.draggable-container:not(.poptin-tab-container) .inputs-container input{background-image:none;background-color:#ffffff;background:#ffffff;border-radius:0px;}.empty-field{border:2px solid red !important}.empty-field::-webkit-input-placeholder{color:red;}.empty-field::-moz-placeholder{color:red;}.draggable-container:not(.poptin-tab-container) input, .draggable-container:not(.poptin-tab-container) button{background-image: none;padding: 0px;margin: 0px;box-sizing: border-box;-webkit-box-sizing: border-box;-moz-box-sizing: border-box;}.draggable-container:not(.poptin-tab-container) p{box-sizing: initial;-webkit-box-sizing: initial;-moz-box-sizing: initial;}.poptin-popup a{text-decoration: none;}.poptin-popup a:hover{text-decoration: underline;}</style>',"he"==Ho&&(poptin_style+='.draggable-container:not(.poptin-tab-container) p, .draggable-container:not(.poptin-tab-container) .inputs-container input{font-family: "Open Sans Hebrew !important";}'),jQ224("head").append(poptin_style)),!document.getElementById("poptin_animations")){var t="";le.indexOf("dev")>=0?(0==jQ224("#poptin_animations_preload").length&&(t='<link rel="preload" id="poptin_animations_preload" as="style"  href="'+ve+'/css/poptin-animations.css?ver=10">'),0==jQ224("#poptin_animations").length&&(t+='<link rel="stylesheet" type="text/css" id="poptin_animations" href="'+ve+'/css/poptin-animations.css?ver=10"  defer>')):(0==jQ224("#poptin_animations_preload").length&&(t='<link rel="preload" id="poptin_animations_preload" as="style"  href="'+_e+'/css/poptin-animations.css?ver=10">'),0==jQ224("#poptin_animations").length&&(t+='<link rel="stylesheet" type="text/css" id="poptin_animations" href="'+_e+'/css/poptin-animations.css?ver=10"  defer>')),t&&jQ224("head").append(t)}},V=function(t,i){return!t.js_filter.display_if_specific_js_active||($js_array=function(){for(var t in array=[],this)jQ224.inArray(p(this[t]),["number","string","boolean"])>-1&&array.push({key:t,value:String(this[t])});return array}(),$result_array=[],$js_array.length>0&&(jQ224.each(t.js_filter.display_if_specific_js,(function(t){this.js_name_pair.length>0&&this.js_value_pair.length>0&&this.js_show_pair.length>0&&($js_name_role_pair=this.js_name_pair.split("|:|"),$js_name_role=null!=$js_name_role_pair[0]?$js_name_role_pair[0]:"",$js_name_value=null!=$js_name_role_pair[1]?$js_name_role_pair[1]:"",$js_value_role_pair=this.js_value_pair.split("|:|"),$js_value_role=null!=$js_value_role_pair[0]?$js_value_role_pair[0]:"",$js_value_value=null!=$js_value_role_pair[1]?$js_value_role_pair[1]:"",$js_show_value=this.js_show_pair,"undefined"!==window.Function("return typeof "+$js_name_value)()?$js_name_value.indexOf(".")>-1?($js_name=!0,$js_value=tt($js_value_role,window.Function("return "+$js_name_value)(),$js_value_value),$result_array.push({rule:$js_name&&$js_value,show:$js_show_value})):jQ224.inArray(window.Function("return typeof "+$js_name_value)(),["number","string","boolean"])>-1?jQ224.each($js_array,(function(t){$js_name=tt($js_name_role,this.key,$js_name_value),$js_value=tt($js_value_role,this.value,$js_value_value),$result_array.push({rule:$js_name&&$js_value,show:$js_show_value})})):"object"==window.Function("typeof "+$js_name_value)()&&($js_name=!0,$js_value=tt($js_value_role,JSON.stringify(window.Function("return typeof "+$js_name_value)()),$js_value_value),$result_array.push({rule:$js_name&&$js_value,show:$js_show_value})):jQ224.each($js_array,(function(t){$js_name=tt($js_name_role,this.key,$js_name_value),$js_value=tt($js_value_role,this.value,$js_value_value),$result_array.push({rule:$js_name&&$js_value,show:$js_show_value})})))})),$js_array.length>0&&($flag=!1,$dont_show=!1,jQ224.each($result_array,(function(t){if(this.rule&&"dont_show"==this.show)return $flag=!1,$dont_show=!0,!1;$flag=!0})),$dont_show||jQ224.each($result_array,(function(t){if(this.rule&&"show"==this.show)return $flag=!0,!1;"show"==this.show&&($flag=!1)})),$flag)))},K=function(t,i){return!t.cookie_filter.display_if_specific_cookie_active||($cookies_array=hi(),$result_array=[],$cookies_array.length>0&&(jQ224.each(t.cookie_filter.display_if_specific_cookie,(function(t){this.cookie_name_pair.length>0&&this.cookie_value_pair.length>0&&this.cookie_show_pair.length>0&&($cookie_name_role_pair=this.cookie_name_pair.split("|:|"),$cookie_name_role=null!=$cookie_name_role_pair[0]?$cookie_name_role_pair[0]:"",$cookie_name_value=null!=$cookie_name_role_pair[1]?$cookie_name_role_pair[1]:"",$cookie_value_role_pair=this.cookie_value_pair.split("|:|"),$cookie_value_role=null!=$cookie_value_role_pair[0]?$cookie_value_role_pair[0]:"",$cookie_value_value=null!=$cookie_value_role_pair[1]?$cookie_value_role_pair[1]:"",$cookie_show_value=this.cookie_show_pair,jQ224.each($cookies_array,(function(t){$c_name=Z($cookie_name_role,this.key,$cookie_name_value),$c_value=Z($cookie_value_role,this.value,$cookie_value_value),$result_array.push({rule:$c_name&&$c_value,show:$cookie_show_value})})))})),$cookies_array.length>0&&($flag=!1,$dont_show=!1,jQ224.each($result_array,(function(t){if(this.rule&&"dont_show"==this.show)return $flag=!1,$dont_show=!0,!1;$flag=!0})),$dont_show||jQ224.each($result_array,(function(t){if(this.rule&&"show"==this.show)return $flag=!0,!1;"show"==this.show&&($flag=!1)})),$flag)))},Z=function(t,i,e){if($flag=!1,""!=t)switch(t){case"contain":$flag=i.indexOf(e)>-1;break;case"exact":$flag=i==e;break;case"start":$flag=i.startsWith(e);break;case"end":$flag=i.endsWith(e);break;case"greater_than":$flag=parseFloat(i)>parseFloat(e);break;case"less_than":$flag=parseFloat(i)<parseFloat(e);break;case"any_value":$flag=!0;break;default:return!0}return $flag},tt=function(t,i,e){if($flag=!1,i="[]"==i?"":String(i).toLowerCase(),e="[]"==e?"":String(e).toLowerCase(),""!=t)switch(t){case"contain":$flag=i.indexOf(e)>-1;break;case"exact":$flag=i==e;break;case"start":$flag=i.startsWith(e);break;case"end":$flag=i.endsWith(e);break;case"greater_than":$flag=parseFloat(i)>parseFloat(e);break;case"less_than":$flag=parseFloat(i)<parseFloat(e);break;case"any_value":$flag=!0;break;default:return!0}return $flag},it=function(t,i){var e=!1,o=!1;if(t.display&&K(t)&&V(t)&&st(t)&&(e=!0),a("fshow:"+i),t.is_teasers_on&&t.display&&e)if(a("extractTeaser"),""==t.poptin)jQ224.when(jQ224.ajax(t.poptin_url)).then((function(e,n,p){t.poptin=e,poptin_data=""==t.poptin?Oo[t.poptin_id].poptin:t.poptin;var a=jQ224(t.poptin).find("#poptinDraggableContainer-tab").get(0).outerHTML.replace('id="poptinDraggableContainer-tab"','id="poptinDraggableContainer-tab" data-load-poptin="'+t.poptin_id+'"'),r=jQ224(t.poptin).find(".poptin-custom-font").get(0).outerHTML;jQ224("body").append(r);var s=t.stop_showing_to_converted_users,d=Ri("poptin_conversion_"+t.poptin_id),l=!0;if(o=t.design_properties.switch_mobile_editor,1==s&&""!=d&&(l=!1),0==t.x_close_button&&Ri("poptin_c_p_o_x_c_"+t.poptin_id)&&"all@display_everytime_everypage_5"==t.d_f_r&&(l=!1),landing_page_teaser_on&&"undefined"!=typeof poptin_landing_page&&(l=!0),St(t)&&l){var c=void 0!==jQ224(t.poptin).attr("data-tabshow")?jQ224(t.poptin).attr("data-tabshow"):"always",_=rt(t);1==landing_page_teaser_on&&(_=!1),"after_close"==c&&1==landing_page_teaser_on&&(i=1),"always"==c?ot(i,t,a,o):"before_show"!=c||_?"after_close"==c&&1==i&&(1==landing_page_teaser_on?M(t.poptin_id):ot(i,t,a,o)):ot(i,t,a,o)}}),(function(t,i,e){}));else{poptin_data=""==t.poptin?Oo[t.poptin_id].poptin:t.poptin;var n=jQ224(t.poptin).find("#poptinDraggableContainer-tab").get(0).outerHTML.replace('id="poptinDraggableContainer-tab"','id="poptinDraggableContainer-tab" data-load-poptin="'+t.poptin_id+'"'),p=jQ224(t.poptin).find(".poptin-custom-font").get(0).outerHTML;jQ224("body").append(p);var r=t.stop_showing_to_converted_users,s=Ri("poptin_conversion_"+t.poptin_id),d=!0;if(o=t.design_properties.switch_mobile_editor,1==r&&""!=s&&(d=!1),0==t.x_close_button&&Ri("poptin_c_p_o_x_c_"+t.poptin_id)&&"all@display_everytime_everypage_5"==t.d_f_r&&(d=!1),landing_page_teaser_on&&"undefined"!=typeof poptin_landing_page&&(d=!0),St(t)&&d){var l=void 0!==jQ224(t.poptin).attr("data-tabshow")?jQ224(t.poptin).attr("data-tabshow"):"always",c=rt(t);1==landing_page_teaser_on&&(c=!1),"after_close"==l&&1==landing_page_teaser_on&&(i=1),"always"==l?ot(i,t,n,o):"before_show"!=l||c?"after_close"==l&&1==i&&(o=xo[t.poptin_id]?1:0,ot(i,t,n,o)):ot(i,t,n,o)}}},et=function(t){var i='#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]',e=jQ224(i);void 0!==jQ224(t.poptin).attr("data-tabeffect")&&(null!=e.attr("data-poptin-animate")&&""!=e.attr("data-poptin-animate")?(void 0!==Co[t.poptin_id]&&clearInterval(Co[t.poptin_id]),Co[t.poptin_id]=setInterval((function(){var t=e.attr("data-poptin-animate");e.toggleClass("no-animated"),e.toggleClass("poptin__animated animate__"+t)}),3e3)):jQ224(i).get(0).style.setProperty("display","block","important"))},ot=function(t,i,e,o){var n=(n=i.poptin).trim(),p=(jQ224(i.poptin).attr("data-tabshow"),JSON.parse(jQ224(n).find(" #tab_variations_hidden").val())),a=jQ224(n).attr("data-teaser-mobile-view"),r=(jQ224(n).attr("data-teaser-desktop-view"),p[a+"-mobile"]);void 0===a&&"mobile"!=i.poptin_type&&o&&(n=jQ224(n).get(1).outerHTML,r=p[(a=jQ224(n).attr("data-teaser-mobile-view"))+"-mobile"]);var s='#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]';jQ224(n+"#poptinMobileContainer-tab").remove(),jQ224(n+"#poptinDesktopContainer-tab").remove(),Eo&&"mobile"!=i.poptin_type&&o?(r=(r=r.replace('id="poptinDraggableContainer-tab"','id="poptinDraggableContainer-tab" data-load-poptin="'+i.poptin_id+'"')).replace('onclick="closeTabPoptinOnXclick();"',"onclick=\"closeTabPoptinOnXclick(this,'"+i.poptin_id+"');\""),jQ224(s).length>0&&jQ224(s).remove(),jQ224("body").append(r)):(e=e.replace('onclick="closeTabPoptinOnXclick();"',"onclick=\"closeTabPoptinOnXclick(this,'"+i.poptin_id+"');\""),jQ224(s).length>0&&jQ224(s).remove(),jQ224("body").append(e)),nt(i),jQ224(s).css("cursor","pointer"),jQ224(s+" .handle-icon").remove(),jQ224(s+" .pos-helper").remove(),jQ224(s+" .handle-icon-wrapper").remove(),jQ224(s).attr("data-load-poptin",i.poptin_id),jQ224(s).find('[contenteditable="true"]').prop("contenteditable",!1);jQ224(s).attr("data-poptin-tablocation");jQ224(s).get(0).style.setProperty("position","fixed","important"),jQ224(s).get(0).style.setProperty("z-index","999998","important"),jQ224(s).find(".draggable").each((function(t){jQ224(this).get(0).style.setProperty("position","absolute"),jQ224(this).get(0).style.setProperty("cursor","pointer"),jQ224(this).find(".fr-box").css("position","relative")})),jQ224(s).css("cursor","pointer"),jQ224(s).get(0).style.setProperty("display","none"),jQ224(s).get(0).style.setProperty("opacity","1"),setTimeout((function(){jQ224(s+" #closeTabXButton").length>0&&jQ224(s+" #closeTabXButton").get(0).style.setProperty("z-index","99","important"),et(i),pt(i,"entry")}),500),jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]:not(#closeTabXButton),#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]:not(#poptinFormCloseText)').on("click",(function(t){if(jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]').is(":visible")&&"close-icon"!=jQ224(t.target).attr("class")){jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]').hasClass("triangleTab")&&jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]').hide();var e=jQ224(".poptin-popup[data-poptin-id="+i.poptin_id+"]");jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+i.poptin_id+'"]').removeClass("poptin__animated"),0==e.length?M(i.poptin_id,!0,i):qi(i)}}))},nt=function(t){var i='#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]';jQ224("[data-load-poptin="+t.poptin_id+"] .froala-image-wrapper").each((function(){jQ224(this).find("img").css("width",jQ224(this).css("width")),jQ224(this).find("img").css("height",jQ224(this).css("height")),jQ224(this).find("img").attr("alt",t.poptin_name)})),jQ224(i).find("p, span, div:not(.poptin-credit), button, label, ul, ol, li, img, strong, i").each((function(t){var i="";jQ224.each(this.attributes,(function(t){if(this.specified&&"style"==this.name&&(i=(i=(i=(i=(i=this.value).replace(/ ?!important/g,"")).replace(/\;base64/g,":base64")).replace(/\;/g," !important;")).replace(/\:base64/g,";base64"),-1!==this.value.indexOf("font-family")))try{Ct(this.value)}catch(t){a(t)}})),jQ224(this).attr("style",i)}))},pt=function(t,i){var e=jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]');if(e.length){e.removeClass("poptin__animated");var o="";o="entry"==i?void 0!==jQ224(e).attr("data-teaser-entry")?jQ224(e).attr("data-teaser-entry"):"entry_effect-up":void 0!==jQ224(e).attr("data-teaser-exit")?jQ224(e).attr("data-teaser-exit"):"exit_effect-none";var n={effect:null,speed:"_default",delay:"-default"};switch(o.split("-")[1]){case"none":n.effect="_none";break;case"up":n.effect="_slideInDown";break;case"down":n.effect="_slideInUp";break;case"left":n.effect="_slideInLeft";break;case"right":n.effect="_slideInRight";break;case"blind":case"fold":n.effect="_flipInX";break;case"bounce":n.effect="_bounceIn";break;case"clip":case"size":case"scale-out":n.effect="_zoomIn";break;case"explode":case"fade":n.effect="_fadeIn";break;case"highlight":n.effect="_tada";break;case"puff":n.effect="_pulse";break;case"pulsate":n.effect="_flash";break;case"scale":n.effect="_heartBeat";break;case"shake":n.effect="_shakeX"}if("exit"==i){var p=n.effect;n.effect=p.replace("In","Out"),jQ224(e).addClass("poptin__animated"),-1!==n.effect.indexOf("slide")&&jQ224(e).addClass("animate__faster"),jQ224(e).addClass("animate_"+n.effect)}else try{a("Entry Animate"),jQ224(e).addClass("poptin-visible poptin__animated"),-1!==n.effect.indexOf("slide")&&jQ224(e).addClass("animate__faster"),jQ224(e).addClass("animate_"+n.effect),jQ224(e).css({display:"block"})}catch(t){a("Entry Animate err3"),jQ224(e).addClass("poptin-visible poptin__animated"),-1!==n.effect.indexOf("slide")&&jQ224(e).addClass("animate__faster"),jQ224(e).css({display:"block"})}setTimeout((function(){jQ224(e).removeClass("poptin__animated"),jQ224(e).removeClass((function(t,i){return(i.match(/\banimate_\S+/g)||[]).join(" ")})),"exit"==i&&jQ224(e).css({display:"none"}),"entry"==i&&jQ224(e).is(":hidden")&&(jQ224(e).addClass("poptin__animated"),a("animateClass.effect:"+n.effect),jQ224(e).addClass("animate_"+n.effect),jQ224(e).css({display:"block"}))}),1e3)}},at=function(t,i){function e(){if(a("appendPoptin"),a("appendPoptin:"+i),a("poptin.poptin_type:"+t.poptin_type),null!=i)if(""==t.poptin&&""==Oo[t.poptin_id].poptin)jQ224.when(jQ224.ajax(t.poptin_url)).then((function(e,o,n){(t.poptin=e,"embedded"==t.poptin_type)?jQ224(".poptin-embedded[data-id='"+t.poptin_id+"']").append(t.poptin):jQ224("body").append(t.poptin);zo[t.poptin_id].poptin=t.poptin,Oo[t.poptin_id].poptin=t.poptin,ut(t,i)}),(function(t,i,e){a(t)}));else{if(poptin_data=""==t.poptin?Oo[t.poptin_id].poptin:t.poptin,"embedded"==t.poptin_type)jQ224(".poptin-embedded[data-id='"+t.poptin_id+"']").append(t.poptin);else jQ224("body").append(t.poptin);zo[t.poptin_id].poptin=t.poptin,ut(t,i)}else K(t)&&V(t)&&(""==t.poptin&&""==Oo[t.poptin_id].poptin?jQ224.when(jQ224.ajax(t.poptin_url)).then((function(e,o,n){t.poptin=e,Oo[t.poptin_id].poptin=e,Mn.checkQueue(t,i)}),(function(t,i,e){a(t)})):(t.poptin=""==t.poptin?Oo[t.poptin_id].poptin:t.poptin,Mn.checkQueue(t,i)))}a("Adblock trigger:"+t.display_if_adblock_active),"yes"==t.display_if_adblock_active?jQ224.when(jQ224.getScript("https://display.popt.in/js/webads.js")).then((function(){})).fail(e):e()},rt=function(t){return Hi("poptin_o_a_d_"+t.poptin_id)},st=function(t){if(!t.engagement_with_other_poptin_filter_active||null==t.engagement_with_other_poptin_filter)return!0;var i=t.engagement_with_other_poptin_filter.split("|"),e=!!i&&i[0],o=!!i&&i[1],n=!!i&&i[2],p=!!i&&i[3],a=[];"embedded"==n?jQ224.each(Oo,(function(i,e){t.poptin_id!=this.poptin_id&&"embedded"==this.poptin_type&&("any"!=p?this.poptin_id==p&&a.push(this):a.push(this))})):jQ224.each(Oo,(function(i,e){t.poptin_id!=this.poptin_id&&"embedded"!=this.poptin_type&&("any"!=p?this.poptin_id==p&&a.push(this):a.push(this))}));var r=!1;if(a.length>0)switch(o){case"seen_poptin":jQ224.each(a,(function(t,i){rt(this)&&(r=!0)}));break;case"not_seen":jQ224.each(a,(function(t,i){(function(t){return!Hi("poptin_o_a_d_"+t.poptin_id)})(this)&&(r=!0)}));break;case"closed":jQ224.each(a,(function(t,i){(function(t){return Hi("poptin_c_p_o_x_c_"+t.poptin_id)})(this)&&(r=!0)}));break;case"converted":jQ224.each(a,(function(t,i){(function(t){return Hi("poptin_conversion_"+t.poptin_id)})(this)&&(r=!0)}))}return r?"show"==e:"show"!=e},dt=function(t){var i=!0;if(!t.source_code_target_active||null==t.source_code_target_html)return!0;var e=jQ224("html").html(),o=(e=e.replace(/(<!--.*?-->)|(<!--[\S\s]+?-->)|(<!--[\S\s]*?$)/g,"")).replace(/\s/g,"").toLowerCase(),n=t.source_code_target_html.replace(/\s/g,"").toLowerCase();return o.includes(n)&&"show"==t.source_code_target_role?i=!0:o.includes(n)&&"dont_show"==t.source_code_target_role?i=!1:o.includes(n)||"show"!=t.source_code_target_role?o.includes(n)||"dont_show"!=t.source_code_target_role||(i=!0):i=!1,i},lt=function(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1]?yi():window.location.href;if(i){var e=new RegExp("[?&]"+t+"=([^&#]*)","i").exec(i);return e?decodeURI(e[1]):null}return null},ct=function(t){var i=".poptin-popup[data-poptin-id='"+t.poptin_id+"'] ",e=jQ224(i).attr("data-pop-lang");if(jQ224(i).length){if(jQ224(i).find(".field-radio, .field-checkbox").each((function(){var t=jQ224(this).attr("id");t&&jQ224(this).find("input").attr({name:t})})),!Xo){var o=new Array;if((p=jQ224(i).find(".dynamic-text-tags-input")).length&&(p=p.text(),o=null!=p&&""!=p?JSON.parse(p):new Array),vn.push({tag_input:"country",pre:1,value:Io}),o=o.concat(vn),jQ224(o).each((function(t){var n,p=o[t].tag_input,a=o[t].pre;""!=p&&("?"==(p=p.replace(/[()]/g,"")).substring(0,1)?(n=null!=(n=lt(p.substring(1)))?n:o[t].class_input,p="\\"+p):a?(n=o[t].value,2==a&&(n=n[e||"en"])):n=jQ224(o[t].class_input).text(),p="{{"+p+"}}",jQ224(i).find(".froala-editor-text, .froala-editor-ticker").each((function(){var t=new RegExp(p,"gm");jQ224(this).find(".fr-marker").remove(),jQ224(this).html(jQ224(this).html().replace(t,n))})))})),(p=jQ224(i).find(".dynamic-input-tags-input")).length){var p=p.text();o=null!=p&&""!=p?JSON.parse(p):new Array,jQ224(o).each((function(t){if(""!=(e=o[t].class_input)){var e,n=o[t].tag_input,p=void 0!==o[t].tag_label?o[t].tag_label:"",a="poptinDesignInputCustomField-CUSTOM_"+(""!=p?p.toUpperCase():""),r='input[name="'+p+'"]',s=null;if("?"==(e=e.replace(/[()]/g,"")).substring(0,1)?s=lt(e.substring(1)):"."!=e.substring(0,1)&&"#"!=e.substring(0,1)||(s=jQ224(o[t].class_input).text()),s){var d=jQ224(i).find("input#"+n+", textarea#"+n+", select#"+n+", input#"+a+", textarea#"+a+", select#"+a+", input#"+a);d.val(s),d.addClass("has-updated"),""!=p&&jQ224(i).find(r).length&&(jQ224(i).find(r).val(s),jQ224(i).find(r).addClass("has-updated"));var l=jQ224(i).find('[name="'+n+'"]');if(l.length)if("radio"==l.attr("type")||"checkbox"==l.attr("type"))if("poptinDesignInputTextFieldCheckbox"!=n)(c=jQ224(i).find('[name="'+n+'"][value="'+s+'"]')).addClass("has-updated"),!c.length||(c.get(0).checked=!0);else if("poptinDesignInputTextFieldCheckbox"==n&&"true"==s){var c;(c=jQ224(i).find('[name="'+n+'"]')).addClass("has-updated"),!c.length||(c.get(0).checked=!0)}}}}))}jQ224(i).find(".froala-image-wrapper").each((function(){var t=jQ224(this).attr("data-selector");null!=t&&""!=t&&jQ224(this).find("img").attr("src",jQ224(t).attr("src"))}))}jQ224(i+" > div:not(.poptin-tab-container) .inputs-container select option[value='child-default']").val(""),jQ224(i+" > div:not(.poptin-tab-container) .inputs-container input[type='number']").attr("step","0.01"),jQ224(i+" > div:not(.poptin-tab-container) .inputs-container input[type='number']").on("keydown",(function(t){if(8===t.keyCode||9===t.keyCode||46===t.keyCode||110===t.keyCode||190===t.keyCode||189===t.keyCode||109===t.keyCode||!0===t.ctrlKey&&(65===t.keyCode||67===t.keyCode||86===t.keyCode||88===t.keyCode)||t.keyCode>=35&&t.keyCode<=40)return!0;(t.shiftKey||t.keyCode<48||t.keyCode>57)&&(t.keyCode<96||t.keyCode>105)&&t.preventDefault()})),jQ224(i+" > div:not(.poptin-tab-container) .inputs-container input[type='number']").on("blur",(function(t){var i=jQ224(this).val();if("."!==i){var e=parseFloat(i);if(isNaN(e))jQ224(this).val("");else if(Number.isInteger(e))jQ224(this).val(e.toString());else{var o=Math.round(100*(e+Number.EPSILON))/100;jQ224(this).val(o.toString())}}else jQ224(this).val("0")})),jQ224(i+" > div:not(.poptin-tab-container) [name='poptinDesignInputTextFieldCheckbox'][data-action-validate='true']").each((function(){jQ224(this).prop("checked",!0),this.checked=!0})),jQ224(i+".inputs-container input[name='poptinDesignInputTextFieldName'][required='required']").attr("pattern","^(?=.[^\\d^<>]{1,40}$).*\\S+.*$"),jQ224(i+".inputs-container input[name='poptinDesignInputTextFieldName'][required='required']").attr("title","Please enter at least 2 or more characters"),jQ224(i+".inputs-container input[name='poptinDesignInputTextFieldEmail'][data-action-validate]").not('[data-action-validate="no-validation"]').attr("type","email"),jQ224(i+".inputs-container input[data-name='poptinDesignWebsiteField'][data-action-validate]").attr("type","url"),jQ224(i+".inputs-container input[data-input-type='url'][data-action-validate]").attr("type","url");var r=jQ224(i+".inputs-container input[name='poptinDesignInputTextFieldPhone'][data-action-validate='true'], "+i+".draggable-container .inputs-container input[name='poptinDesignInputTextFieldPhone'][data-action-validate='basic']");r.attr("pattern","^[\\+\\(\\)\\-\\d](?:[\\+\\(\\)\\-\\d]| (?![ ])){5,13}[\\+\\(\\)\\-\\d]$"),r.attr("title",ft()?"יש להזין בין 7 ל-15 ספרות ,ולהימנע משימוש באותיות או סימנים":"Please enter 7 to 15 digits and avoid using letters or symbols");var s="[data-poptin-id="+t.poptin_id+"]  > div:not(.poptin-tab-container) .inputs-container .form-input-class.field-checkbox[data-action-required='true'] input";jQ224(document).on("change",s,(function(){var t=jQ224(this).parent().parent();t.find("input").is(":checked")?t.find("input").prop("required",!1):t.find(".checkbox-child-field:first-child input").attr("required",!0).attr("required",!0)})),jQ224(i+" > div:not(.poptin-tab-container) .facebook-messanger-conversion-wrap").remove();var d=jQ224(i+".inputs-container").find("input[data-name='poptinDesignDateField'], input[data-input-type='date']");if(No){if(d.length>0){var l=document.createElement("link");l.setAttribute("rel","stylesheet"),l.setAttribute("type","text/css"),l.setAttribute("href","https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css"),document.head.appendChild(l);var c=document.createElement("script");c.type="text/javascript",c.src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.0/moment.min.js",document.body.appendChild(c),setTimeout((function(){var t=document.createElement("script");t.type="text/javascript",t.onload=function(){for(var t=0;t<d.length;t++)new Pikaday({field:d[t],yearRange:80,formatStrict:!0,format:"DD/MM/YYYY"})},t.src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js",document.body.appendChild(t)}),500),setTimeout((function(){jQ224(".pika-single").css("z-index",9999999999)}),500)}}else setTimeout((function(){var t=jQ224(i+".inputs-container").find("input[data-name='poptinDesignDateField'], input[data-input-type='date']"),e=t.css("height");t.css("line-height",e),t.on("focus",(function(){"text"==jQ224(this).attr("type")&&(jQ224(this).attr("type","date"),jQ224(this).focus().click())})),Lo||t.on("blur",(function(){jQ224(this).attr("type",""==jQ224(this).val()?"text":"date")}))}),500);jQ224.each(["custom","multiple","default","single"],(function(t,e){var o="custom"==e,p="single"==e,a=jQ224(i+".draggable-container .inputs-container select"+(p?"":"[data-"+(o?"action-search":"multiple")+"='true']"));jQ224(a).each((function(){var t=jQ224(this),a=t.data("multiple");jQ224(i+".draggable-container .inputs-container").css("z-index","9999999");var r=t.get(0).id;if(0==document.querySelectorAll(".wrapper-"+r).length){var s=function(t,i){var e=t.css(i);return e!==d(t,i)?e:null},d=function(t,i){var e=jQ224('<div style="opacity:0;width:0px;height:0px;overflow:hidden;"></div>').appendTo("body"),o=e.css(i);return e.remove(),o},l=t.parent(),c="he"==Ho?"חיפוש":"Search...",_="he"==Ho?"לא נמצאו תוצאות":"No results found";o?a?l.prepend('<div class="poptin-custom-select wrapper-'+r+'"><input type="text" data-select-type="'+e+'" placeholder="'+c+'" class="poptin-multi-select-input poptin-custom-select-input" data-gramm_editor="false" autocomplete="off" data-select="'+r+'" autocomplete="off"><div class="poptin-opt-group-wrapper"><div class="poptin-opt-group"></div></div></div>'):l.prepend('<div class="poptin-custom-select wrapper-'+r+'"><input type="text" data-select-type="'+e+'" placeholder="'+c+'" class="poptin-custom-select-input" data-gramm_editor="false" autocomplete="off" data-select="'+r+'" autocomplete="off"><div class="poptin-opt-group-wrapper"><div class="poptin-opt-group"></div></div></div>'):p?l.prepend('<div class="poptin-single-select wrapper-'+r+'"><input type="text" data-select-type="'+e+'" placeholder="'+(t.attr("data-placeholder")||"")+'" class="poptin-single-select-input" data-gramm_editor="false" autocomplete="off" data-select="'+r+'" autocomplete="off"><div class="poptin-opt-group-wrapper"><div class="poptin-opt-group"></div></div></div>'):l.prepend('<div class="poptin-multi-select wrapper-'+r+'"><input type="text" data-select-type="'+e+'" placeholder="'+(t.attr("data-placeholder")||"")+'" class="poptin-multi-select-input" data-gramm_editor="false" autocomplete="off" data-select="'+r+'" autocomplete="off"><div class="poptin-opt-group-wrapper"><div class="poptin-opt-group"></div></div></div>');var u=document.querySelectorAll(".wrapper-"+r)[0],f=jQ224(u).find(".poptin-opt-group");t.find("option").each((function(){"child-default"==this.value&&(this.value=""),""!=this.value&&(o?a?f.append('<label class="poptin-custom-option"><input type="checkbox" value="'+this.value+'" id="'+this.id+'"><span>'+this.innerText+"</span></label>"):f.append('<span class="poptin-custom-option" data-value="'+this.value+'">'+this.innerText+"</span>"):p?f.append('<span class="poptin-custom-option" data-value="'+this.value+'">'+this.innerText+"</span>"):f.append('<label class="poptin-custom-option"><input type="checkbox" value="'+this.value+'" id="'+this.id+'"><span>'+this.innerText+"</span></label>"))})),o&&f.append('<span class="poptin-custom-option no-result" data-value="">'+_+"</span>"),l.find(".poptin-custom-select, .poptin-single-select, .poptin-multi-select, .poptin-opt-group-wrapper").css({"padding-right":l.css("padding-right"),"padding-left":l.css("padding-left")});var g=parseInt(t.css("padding-left"),10),m=parseInt(t.css("padding-right"),10),h=Math.min(g,m);jQ224(u).find("input").attr("style",t.attr("style")).css({"padding-right":h+"px","padding-left":h+"px"}),f.css(n(n(n({"font-family":s(t,"font-family"),"font-size":s(t,"font-size"),color:s(t,"color"),background:"#ffffff"},"color","#000000"),"direction",s(t,"direction")),"text-align",s(t,"text-align")));var v=t.css("border-radius");v&&parseInt(v)>0&&f.css("border-radius","10px")}}))})),jQ224(document).ready((function(){jQ224(document).off("keydown.dropdownNav").on("keydown.dropdownNav",".poptin-custom-select-input, .poptin-single-select-input, .poptin-multi-select-input",(function(t){if(["ArrowDown","ArrowUp","Enter"].includes(t.key)){t.preventDefault();var i=jQ224(this).parents(".form-input-class"),e=i.find(".poptin-opt-group"),o=e.find(".poptin-custom-option:visible"),n=o.index(o.filter(".focused"));if("ArrowDown"===t.key||"ArrowUp"===t.key)o.removeClass("focused"),n=-1===n?"ArrowDown"===t.key?0:o.length-1:"ArrowDown"===t.key?(n+1)%o.length:(n-1+o.length)%o.length,o.eq(n).addClass("focused");else if("Enter"===t.key){var p;if((p=o.filter(".focused")).length)if(i.find(".poptin-multi-select").length){var a=p.find('input[type="checkbox"]');a.prop("checked",!a.prop("checked")).trigger("change")}else p.click()}(p=o.filter(".focused")).length&&e.scrollTop(e.scrollTop()+p.position().top-e.height()/2+p.height()/2)}})),jQ224(document).off("click.reopenDropdown").on("click.reopenDropdown",".poptin-custom-select-input, .poptin-single-select-input, .poptin-multi-select-input",(function(t){t.preventDefault(),t.stopImmediatePropagation();var i=jQ224(this).parents(".form-input-class");i.hasClass("opened")||jQ224(".form-input-class.opened").removeClass("opened"),jQ224(this).hasClass("poptin-custom-select-input")?i.addClass("opened"):i.toggleClass("opened",!i.first().hasClass("opened")),jQ224(i).find(".poptin-custom-option").is(":visible")?jQ224(i).find(".no-result").css("display","none"):jQ224(i).find(".no-result").css("display","block"),jQ224(".inputs-container").addClass("opened")})),jQ224(document).off("click.closeDropdown").on("click.closeDropdown",(function(t){jQ224(t.target).closest(".form-input-class").length||(jQ224(".form-input-class, .inputs-container").removeClass("opened"),jQ224(".poptin-custom-select-input, .poptin-multi-select-input").removeAttr("disabled"))}))})),jQ224(document).on("keyup",".poptin-custom-select-input",(function(t){var i=jQ224(t.target).attr("data-select"),e=document.querySelectorAll(".wrapper-"+i)[0],o=e.querySelectorAll(".poptin-custom-option"),n=o.length,p=t.target.value.toUpperCase();jQ224(e).find(".no-result, .poptin-custom-option").hide();for(var r=0;r<n;r++){var s=o[r].textContent||o[r].innerText,d=!0;try{null!=jQ224(e).attr("data-current-parent")&&(d=!1,null!=o[r].getAttribute("class")&&o[r].getAttribute("class").indexOf("custom-opt-")>-1&&(d=o[r].getAttribute("class").split("custom-opt-")[1].split(" ")[0]==jQ224(e).attr("data-current-parent")))}catch(t){a(t)}d&&s.toUpperCase().indexOf(p)>-1?o[r].style.display="":o[r].style.display="none"}jQ224(e).find(".poptin-custom-option").is(":visible")||jQ224(e).find(".no-result").css("display","block")})),jQ224(document).on("click",(function(t){var i=jQ224(t.target),e=i.parents(".form-input-class");0==e.length&&(jQ224(".form-input-class, .inputs-container").removeClass("opened"),jQ224(".poptin-custom-select-input, .poptin-multi-select-input").removeAttr("disabled"),jQ224('.poptin-multi-select input[type="checkbox"], .poptin-custom-select input[type="checkbox"]').trigger("change")),(e.find(".poptin-custom-select").length||e.find(".poptin-single-select").length)&&i.hasClass("poptin-custom-option")&&(e.find("select").val(i.attr("data-value")),e.find(".poptin-multi-select-input").length||(jQ224(".form-input-class, .inputs-container").removeClass("opened"),jQ224(".poptin-custom-select-input, .poptin-multi-select-input").removeAttr("disabled"))),e.find(".poptin-multi-select").length&&(e.find("select").val(i.attr("data-value")),jQ224(".poptin-custom-select-input, .poptin-multi-select-input").removeAttr("disabled"))}));jQ224(document).on("focus",".poptin-custom-select-input",(function(){var t=jQ224(this).parents(".form-input-class");jQ224(".form-input-class").not(t).removeClass("opened"),t.toggleClass("opened",!t.first().hasClass("opened")),jQ224(".inputs-container").addClass("opened")})),jQ224(document).on("change",'.poptin-multi-select input[type="checkbox"], .poptin-custom-select input[type="checkbox"]',(function(t){var i=jQ224(t.target).parents(".field-multi-select"),e=i.attr("id");e=e.includes("poptinDesignInputCustomField-")?e.split("poptinDesignInputCustomField-")[1]:e,Sn[e]=[],In[e]=[],i.find('.poptin-multi-select input[type="checkbox"]:checked, .poptin-custom-select input[type="checkbox"]:checked').each((function(){Sn[e].push(jQ224(this).parent().text().trim()),In[e].push(jQ224(this).val())})),i.find(".poptin-multi-select-input").val(Sn[e].join(", ")),i.find(".poptin-design-fields-form").val(In[e][0]),i.find(".poptin-custom-select-input").val(Sn[e].join(", ")),Sn[e].length?i.addClass("has-values"):i.removeClass("has-values")})),jQ224(document).on("focus",".poptin-custom-select-input",(function(){var t=jQ224(this).parents(".form-input-class");t.addClass("opened"),jQ224(t).find(".poptin-custom-option").is(":visible")?jQ224(t).find(".no-result").css("display","none"):jQ224(t).find(".no-result").css("display","block")})),jQ224(i+".inputs-container").find("input, textarea, select").each((function(){jQ224(this).attr("required")&&jQ224(this).attr("aria-required","true")})),jQ224(i+".inputs-container [data-action-default-hidden-value]").each((function(){jQ224(this).val(jQ224(this).attr("data-action-default-hidden-value"))}))}},_t=function(t,i,e){jQ224(e).find("audio, video").each((function(){jQ224(this).attr(t)&&(jQ224(this).prop(t,!1),jQ224(this).attr(i,!0),"autoplay"==i?jQ224(this).get(0).play():jQ224(this).get(0).pause())}))},ut=function(t,i){window.fakeEmailDomains||jQ224.ajax({url:"https://cdn.popt.in/validation/email/validation-emails.txt",type:"GET",dataType:"text",async:!1}).done((function(t){window.fakeEmailDomains=t.split("\n")})).fail((function(t){a("Failed to fetch domains",t)})),a("setPoptin poptinid: "+t.poptin_id);var e="embedded"==t.poptin_type;if(e&&"undefined"!=typeof poptin_landing_page){var o=jQ224(window).height();jQ224("body").css({height:o-20})}var p=".poptin-popup[data-poptin-id='"+t.poptin_id+"'] ",r=jQ224(p).find(".draggable-container:not(.poptin-tab-container) .redirect-url-blank"),s=r.length?r.get(0).outerHTML:"";jQ224(p+"#poptinMobileContainer").length&&(xo[t.poptin_id]=!0,Eo&&"mobile"!=t.poptin_type?(jQ224(p+"#poptinMobileContainer").length&&jQ224(p+"#poptinDraggableContainer").replaceWith(jQ224(p+"#poptinMobileContainer").get(0).outerHTML.replace(/poptinMobileContainer/gm,"poptinDraggableContainer")),jQ224(p+"#poptinMobileThankYouScreen").length&&jQ224(p+"#poptinThankYouScreen").replaceWith(jQ224(p+"#poptinMobileThankYouScreen").get(0).outerHTML.replace(/poptinMobileThankYouScreen/gm,"poptinThankYouScreen")),jQ224(p+"#poptinMobilePlayScreen").length&&jQ224(p+"#poptinPlayScreen").replaceWith(jQ224(p+"#poptinMobilePlayScreen").get(0).outerHTML.replace(/poptinMobilePlayScreen/gm,"poptinPlayScreen")),jQ224(p+"#poptinMobileWinningScreen").length&&jQ224(p+"#poptinWinningScreen").replaceWith(jQ224(p+"#poptinMobileWinningScreen").get(0).outerHTML.replace(/poptinMobileWinningScreen/gm,"poptinWinningScreen")),jQ224(p+"#poptinMobileLosingScreen").length&&jQ224(p+"#poptinLosingScreen").replaceWith(jQ224(p+"#poptinMobileLosingScreen").get(0).outerHTML.replace(/poptinMobileLosingScreen/gm,"poptinLosingScreen")),jQ224(p+"#poptinMobileContainer").remove(),jQ224(p+"#poptinMobileThankYouScreen").remove(),jQ224(p+"#poptinMobilePlayScreen").remove(),jQ224(p+"#poptinMobileWinningScreen").remove(),jQ224(p+"#poptinMobileLosingScreen").remove(),t.poptin=jQ224(p).get(0).outerHTML):jQ224(p+"#poptinMobileContainer, #poptinMobileThankYouScreen, #poptinMobilePlayScreen, #poptinMobileWinningScreen, #poptinMobileLosingScreen").remove()),jQ224(p).append(s),0==jQ224(p).find("#poptinEncPze").length&&jQ224(p).find("#gamifiedPrizeJSON").length&&(jQ224(p).find("#gamifiedPrizeJSON").attr("id","poptinEncPze"),jQ224(p).find("#poptinEncPze").removeAttr("class"),jQ224(p).find("#poptinEncPze").val(Vi(jQ224(p).find("#poptinEncPze").val()))),_t("autoplay","data-autoplay",p+"#poptinThankYouScreen");var d=si(t.poptin),l=d.width,c=d.height;null==i?(poptin_width=l||zo[t.poptin_id].poptin_size.width,poptin_height=c||zo[t.poptin_id].poptin_size.height,zo[t.poptin_id].poptin_area_flag=!1,di(t),a("click undefined:"+i)):(a("click true:"+i),poptin_width=l||jo.width,poptin_height=c||jo.height,poptin_area_flag=!1,di(t,!0)),jQ224(p+"#poptinThankYouScreen").addClass("poptin_thank_you_screen").removeClass("draggable-container"),jQ224(p+"#poptinPlayScreen").addClass("poptin_play_screen").removeClass("draggable-container"),jQ224(p+"#poptinWinningScreen").addClass("poptin_winning_screen").removeClass("draggable-container"),jQ224(p+"#poptinLosingScreen").addClass("poptin_losing_screen").removeClass("draggable-container"),"gamified"!=t.poptin_type||"format_1"!=t.poptin_format&&"format_2"!=t.poptin_format&&("format_3"!=t.poptin_format||t.design_properties.disable_post_play_screen)?jQ224(p+".draggable-container:not(.poptin-tab-container)").html('<form method="POST" action="#" id="poptinFormSubmit'+t.poptin_id+'">'+jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").html()+"</form>"):jQ224(p+".poptin_play_screen").html('<form method="POST" action="#" id="poptinFormSubmit'+t.poptin_id+'">'+jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").html()+"</form>"),jQ224(p+".poptin_thank_you_screen").hide(),jQ224(p+".poptin_play_screen").hide(),jQ224(p+".poptin_winning_screen").hide(),jQ224(p+".poptin_losing_screen").hide(),jQ224(p).find(".froala-editor-link").each((function(){jQ224(this).parent().hasClass("poptin-form-link-button")||jQ224(this).on("click",(function(){setTimeout((function(){closePoptin(t.poptin_id)}),500)}))})),ct(t),"gamified"==t.poptin_type&&"format_3"==t.poptin_format&&(t.wheel_has_coupon=!!jQ224(p+".poptin_winning_screen").find(".froala-editor-coupon").length,t.design_properties.disable_post_play_screen&&0!=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDraggableContainer #poptinFormSubmitText").length||ee(t)),jQ224(p).find(".submitDarkColor").length&&(jQ224(".froala-editor-button").each((function(){jQ224(this).parent().attr("data-bg",jQ224(this).css("background-color"))})),jQ224("div.poptin-form-submit-button").mouseenter((function(){jQ224(this).find(".froala-editor-button").css("background-color","")})).mouseleave((function(){jQ224(this).find(".froala-editor-button").length&&jQ224(this).find(".froala-editor-button").get(0).style.setProperty("background-color",jQ224(this).attr("data-bg"),"important")}))),jQ224(p).find(".closeDarkColor").length&&(jQ224(".froala-editor-button").each((function(){jQ224(this).parent().attr("data-bg",jQ224(this).css("background-color"))})),jQ224("div.poptin-form-close-button").mouseenter((function(){jQ224(this).find(".froala-editor-button").css("background-color","")})).mouseleave((function(){jQ224(this).find(".froala-editor-button").length&&jQ224(this).find(".froala-editor-button").get(0).style.setProperty("background-color",jQ224(this).attr("data-bg"),"important")})));var _=window.location.href,u=window.location.pathname+window.location.search;u="/"==u[0]?u.substr(1):u,jQ224(".redirect-url-blank").length>0&&jQ224(".redirect-url-blank").each((function(){var t=jQ224(this).attr("href");if(t&&_){var i=t.replace("{conversion_url}","conversion_url="+encodeURI(_));i=(i=(i=i.replace("%7Bconversion_url%7D","conversion_url="+encodeURI(_))).replace("{path_url}","path_url="+encodeURI(u))).replace("%7Bpath_url%7D","path_url="+encodeURI(u)),jQ224(this).attr("href",i)}})),jQ224(".poptin-form-link-button").length>0&&jQ224(".poptin-form-link-button").each((function(){var t=jQ224(this).attr("id"),i=t.substring(11,10),e="poptinForm2ndlinkbtnText"==t?"btn2ndDarkColor":"poptinForm3ndlinkbtnText"==t?"btn3rdDarkColor":"poptinForm4thlinkbtnText"==t?"btn4thDarkColor":"poptinForm5thlinkbtnText"==t?"btn5thDarkColor":"btn6thDarkColor",o=jQ224(this).attr("data-btnurl");if(o&&_){var n=o.replace("{conversion_url}","conversion_url="+encodeURI(_));n=(n=(n=n.replace("%7Bconversion_url%7D","conversion_url="+encodeURI(_))).replace("{path_url}","path_url="+encodeURI(u))).replace("%7Bpath_url%7D","path_url="+encodeURI(u)),jQ224(this).attr("data-btnurl",n)}jQ224(p).find("."+e).length&&(jQ224("#"+t+" .froala-editor-link").each((function(){jQ224(this).parent().attr("data-bg-"+i+"color",jQ224(this).css("background-color"))})),jQ224("#"+t).mouseenter((function(){jQ224(this).find(".froala-editor-link").css("background-color","")})).mouseleave((function(){jQ224(this).find(".froala-editor-link").length&&jQ224(this).find(".froala-editor-link").get(0).style.setProperty("background-color",jQ224(this).attr("data-bg-"+i+"color"),"important")})))})),"lightbox"!=t.poptin_type&&"gamified"!=t.poptin_type||(null==i&&(zo[t.poptin_id].poptin_size.height=c,zo[t.poptin_id].poptin_size.width=l),poptin_width=l||800,poptin_height=c||500,"format_3"!=t.poptin_format&&"format_9"!=t.poptin_format||poptin_height||(poptin_width=poptin_height)),jQ224(".froala-editor-text, .froala-editor-ticker, .froala-editor-link").each((function(){var t=jQ224(this).get(0).innerText.replace(/&nbsp;/gi," ");jQ224(this).parents(".draggable").attr("aria-label",t)})),jQ224(".froala-editor-button").each((function(){var t=jQ224(this).get(0).innerText.replace(/&nbsp;/gi," "),i=jQ224(this).parent().find("input");i.length?i.attr("aria-label",t):jQ224(this).parent().attr("aria-label",t)})),jQ224(p).attr("data-poptin-type",t.poptin_type).attr("data-poptin-format",t.poptin_format).attr("data-poptin-type-format",t.poptin_type+"_"+t.poptin_format),t.design_properties&&jQ224(p).attr("data-poptin-location",t.design_properties.poptin_location),jQ224(p).addClass("poptin-live"),jQ224(p).css({display:"none",margin:"0px auto",transform:"translate(0,0)",transition:"transform .3s ease-out","min-width":poptin_width+"px","max-width":poptin_width+"px",width:poptin_width+"px","min-height":poptin_height+"px","max-height":poptin_height+"px",height:poptin_height+"px","z-index":"999999999999999",position:e?"absolute":"fixed",overflow:"visible",left:"0px",top:"0px",bottom:"0px",right:"0px","line-height":"normal","transform-origin":"bottom"}),jQ224(p+".draggable-container:not(.poptin-tab-container)").css({width:poptin_width+"px","background-clip":"padding-box"}),jQ224(p+".alternative-background").css("box-shadow","0 3px 12px rgba(0,0,0,.5)"),jQ224(".poptin-popup.no-box-shadow .alternative-background").css("box-shadow",""),jQ224(p+" #poptinDraggableContainer .alternative-background").length&&!jQ224(p+" #poptinThankYouScreen .alternative-background").length&&jQ224(p+" #poptinThankYouScreen").prepend(jQ224(p+" #poptinDraggableContainer .alternative-background").clone()),jQ224(p+" #poptinMobileContainer .alternative-background").length&&!jQ224(p+" #poptinMobileThankYouScreen .alternative-background").length&&jQ224(p+" #poptinMobileThankYouScreen").prepend(jQ224(p+" #poptinMobileContainer .alternative-background").clone());var f=p+".close-icon, .poptin-popup[data-poptin-id="+t.poptin_id+"] #closeXButton, .poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinFormCloseText";jQ224(f).attr("title",ft()?"סגור":"Close").attr("data-title",ft()?"סגור":"Close"),jQ224(f).mouseenter((function(t){jQ224(f).attr("title","")})),jQ224(f).mouseleave((function(t){jQ224(f).attr("title",jQ224(f).attr("data-title"))}));var g=p+"#poptinFormSubmitText";if(jQ224(g).attr("title",ft()?"שלח":"Submit").attr("data-title",ft()?"שלח":"Submit"),jQ224(g).find("#poptinFormSubmitButton").val(ft()?"שלח":"Submit"),jQ224(g).mouseenter((function(t){jQ224(g).attr("title","")})),jQ224(g).mouseleave((function(t){jQ224(g).attr("title",jQ224(g).attr("data-title"))})),jQ224(".redirect-url-blank").each((function(){jQ224(this).html(jQ224(this).attr("href"))})),"embedded"==t.poptin_type){var m=jQ224(p).parent();0!=jQ224(p).parent().height()&&m.css("height")!=m.css("line-height")||(jQ224(p).parent().css({height:poptin_height+"px"}),jQ224(p+"#closeXButton, "+p+"#closeSkipButton").remove(),jQ224(p).css("transform","scale(1, 0)"),jQ224(p).attr("data-scale",1))}if(jQ224(p+".froala-image-wrapper").each((function(){var t=jQ224(this).find("a");if(t.length){var i=jQ224(this).find(".froala-img-overlay").clone();jQ224(this).find(".froala-img-overlay").remove(),t.prepend(i)}})),("social"==t.poptin_type&&("format_3"==t.poptin_format||"format_6"==t.poptin_format)||"sside"==t.poptin_type&&"format_19"==t.poptin_format)&&jQ224(".poptin-credit").css(n({bottom:"auto"},"bottom","")),"mobile"==t.poptin_type&&"format_6"==t.poptin_format&&jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .draggable:not(#closeXButton)").addClass("poptin-form-submit-button"),null!=t.design_properties&&("closing_options-x"==t.design_properties.poptin_design_close_options_type?jQ224(p).find('[id="closeSkipButton"]').remove():"closing_options-button"==t.design_properties.poptin_design_close_options_type?jQ224(p).find('[id="closeXButton"]').remove():"closing_options-"==t.design_properties.poptin_design_close_options_type&&jQ224(p).find('[id="closeXButton"], [id="closeSkipButton"]').remove()),jQ224(p).find('[id="closeXButton"], [id="closeSkipButton"]').each((function(){if(this_close_icon=jQ224(this).find(".close-icon"),this_close_icon_width=parseInt(this_close_icon.css("width")),!this_close_icon.hasClass("updated")&&32==this_close_icon_width){this_close_icon_width=44,this_close_icon.addClass("updated");var t=this_close_icon_width+"px",i={width:t,height:t,"line-height":t,"font-size":t};this_close_icon.css(i),jQ224(this).css(i),parseInt(jQ224(this).css("left"))+this_close_icon_width>poptin_width&&jQ224(this).css("left",poptin_width-this_close_icon_width+"px")}})),"bar"==t.poptin_type&&jQ224(p).css({width:"1920px","max-width":"1920px",height:jQ224(p+"#poptinDraggableContainer").height(),"max-height":jQ224(p+"#poptinDraggableContainer").height()}),(Bo||Eo)&&jQ224(p).addClass("clean-timer"),Eo&&jQ224(p).length&&jQ224(p).html(jQ224(p).html().replace(/(web.whatsapp.com)/g,"api.whatsapp.com")),t.poptin_type in Zo&&Zo[t.poptin_type]>=parseInt(t.poptin_format.split("_")[1]))jQ224(p).addClass("old-popup").removeClass("new-popup");else{jQ224(p).addClass("new-popup").removeClass("old-popup");var h=jQ224(p).find("#poptinDraggableContainer").attr("data-lang");(!h||"he"!=h)&&"en"==Ho?poptin_disable_fonts||(jQ224(p).css("font-family","Poppins"),0==jQ224("#poptin_poppins_font_preload").length&&jQ224("head").append('<link rel="preload" id="poptin_poppins_font_preload" as="style" href="https://fonts.popt.in?family=Poppins&display=swap">'),0==jQ224("#poptin_poppins_font_link").length&&jQ224("head").append('<link rel="stylesheet" id="poptin_poppins_font_link" href="https://fonts.popt.in?family=Poppins&display=swap">')):(jQ224(p).css("font-family","Open Sans Hebrew"),0==jQ224("#poptin_opensanshebrew_font_preload").length&&jQ224("head").append('<link rel="preload" id="poptin_opensanshebrew_font_preload" as="style" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">'),0==jQ224("#poptin_opensanshebrew_font_link").length&&jQ224("head").append('<link rel="stylesheet" id="poptin_opensanshebrew_font_link" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">'))}if(jQ224(".poptin-popup #closeXButton").css({"z-index":""}),jQ224(".poptin-popup.old-popup #closeXButton").css({left:"auto",right:"auto"}),jQ224(".no-show-icon").css("position","relative"),jQ224(".flip .no-show-icon").css("position","absolute"),null!=Do[t.poptin_type+"_"+t.poptin_format]&&"vertical"==Do[t.poptin_type+"_"+t.poptin_format].type&&jQ224(p+".inputs-container input:not([type='checkbox'])").css("width",""),"lightbox"!=t.poptin_type&&"gamified"!=t.poptin_type||(this_pop_width=jQ224(p+".draggable-container:not(.poptin-tab-container)").attr("data-width"),null!=this_pop_width&&""!=this_pop_width||(jQ224(p).css({right:"0",left:"0",top:(jQ224(window).height()-500)/2}),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"], .poptin-popup[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").css("width",800),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"], .poptin-popup[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").css("height",500))),"on"==t.design_properties.field_checkbox_required&&jQ224("[data-poptin-id="+t.poptin_id+'] input[name="poptinDesignInputTextFieldCheckbox"]').prop("required",!0),"on"==t.design_properties.field_checkbox_default_marked&&jQ224("[data-poptin-id="+t.poptin_id+'] input[name="poptinDesignInputTextFieldCheckbox"]').prop("checked",!0),jQ224(".poptin-form-close-button").click((function(){var i=jQ224(this).data(),e=jQ224(this).parents(".poptin-popup").attr("data-poptin-id");if(I(e)||$i(e),i.countConversion&&!0===i.countConversion){var o=jQ224(this).attr("id");"poptinFormCloseText"===o&&Gt(t,null,o="close_btn",this)}else if(i.linkUrl&&1==i.linkUrl)closePoptin(e,!0),i.btnurl&&(-1==i.btnurl.indexOf("http://")&&-1==i.btnurl.indexOf("https://")&&(i.btnurl="//"+i.btnurl),i.btntarget?window.open(i.btnurl,"_blank"):window.location.href=i.btnurl);else if(i.launchPoptin&&1==i.launchPoptin){closePoptin(e,!0);var n={redirectFromBtns:!0};n.poptin_from=e,n.poptin_to=i.launchPoptinId,i.launchPoptinId&&pi(n)}else closePoptin(e)})),jQ224(".poptin-form-close-button").on("keydown",(function(t){32!==t.keyCode&&13!==t.keyCode||jQ224(t.target).click()})),timer_container=jQ224(".timer-container"),timer_container.css({position:""}),timer_container&&timer_container.attr("style")&&-1==timer_container.attr("style").indexOf("left")&&(points_count=0,jQ224(".timer-points").each((function(){jQ224(this).is(":visible")&&points_count++})),timer_left="260px",points_count>1&&(timer_left="114px"),timer_container.css({left:timer_left})),gt(t),"lightbox"!=t.poptin_type||"format_3"!=t.poptin_format&&"format_9"!=t.poptin_format){var v=jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)");jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen:not('.edited')").css({height:v.css("height"),"background-image":v.css("background-image"),"background-size":v.css("background-size"),"background-color":v.css("background-color"),background:("none"!=v.css("background-image")?v.css("background-image"):"")+" "+v.css("background-color")}),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen:not('.edited')").css({height:v.css("height"),"background-image":v.css("background-image"),"background-size":v.css("background-size"),"background-color":v.css("background-color"),background:("none"!=v.css("background-image")?v.css("background-image"):"")+" "+v.css("background-color")}),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen:not('.edited')").css({height:v.css("height"),"background-image":v.css("background-image"),"background-size":v.css("background-size"),"background-color":v.css("background-color"),background:("none"!=v.css("background-image")?v.css("background-image"):"")+" "+v.css("background-color")}),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen:not('.edited')").css({height:v.css("height"),"background-image":v.css("background-image"),"background-size":v.css("background-size"),"background-color":v.css("background-color"),background:("none"!=v.css("background-image")?v.css("background-image"):"")+" "+v.css("background-color")}),v.css({background:("none"!=v.css("background-image")?v.css("background-image"):"")+" "+v.css("background-color")})}else jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen").prepend(jQ224("[data-poptin-id="+t.poptin_id+"] #liteboxFormat3Circle").clone(!0));if(jQ224(".poptin-form-submit-button *, .poptin-form-close-button *, [data-poptin-id="+t.poptin_id+"] .o-close, [data-poptin-id="+t.poptin_id+"] .o-close *").css("cursor","pointer"),"mobile"!=t.poptin_type||"format_1"!=t.poptin_format&&"format_6"!=t.poptin_format||(poptin_style='<style type="text/css">.draggable-container:not(.poptin-tab-container) .fa-phone-square:before{color:'+jQ224("[data-poptin-id="+t.poptin_id+"] .fa-phone-square").css("color")+" !important}</style>",jQ224("body").append(poptin_style)),xt(t,i),direction=t.design_properties.poptin_design_entry_effect.split("-")[1],!parseInt(t.design_properties.poptin_design_content_lock))if(null!=t.design_properties.poptin_design_auto_close&&setTimeout((function(){a("close poptin auto after "+t.design_properties.poptin_design_auto_close_sec+" seconds"),zo[t.poptin_id].poptin_trigger.close_trigger="auto_close",closePoptin(t.poptin_id)}),1e3*parseInt(t.design_properties.poptin_design_auto_close_sec)),parseInt(t.design_properties.poptin_design_close_on_screen_click)&&(jQ224(p).on("mouseenter",(function(e){null==i?(zo[t.poptin_id].poptin_trigger||(zo[t.poptin_id].poptin_trigger={}),zo[t.poptin_id].poptin_trigger.poptin_area_flag=!0):poptin_area_flag=!0})).on("mouseleave",(function(e){null==i?(zo[t.poptin_id].poptin_trigger||(zo[t.poptin_id].poptin_trigger={}),zo[t.poptin_id].poptin_trigger.poptin_area_flag=!1):poptin_area_flag=!1})),jQ224(window).click((function(e){if("lightbox"!=t.poptin_type&&"gamified"!=t.poptin_type)jQ224(e.target).closest(".poptin-popup[data-poptin-id="+t.poptin_id+"]").length||(i?poptin_area_flag:zo[t.poptin_id].poptin_area_flag)||jQ224(p).is(":visible")&&(a("close poptin poptin_design_close_on_screen_click1"),zo[t.poptin_id].poptin_trigger.close_trigger="bg_click",closePoptin(t.poptin_id,!1,!0),setTimeout((function(){$i(t.poptin_id)}),1e3));else{var o=jQ224(e.target).closest(".poptin-popup").attr("data-poptin-id");jQ224(e.target).closest(".poptin-popup[data-poptin-id="+t.poptin_id+"]").length||o!=t.poptin_id&&void 0!==o||(null==i?zo[t.poptin_id].poptin_trigger.poptin_area_flag:poptin_area_flag)||jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").is(":visible")&&(a("close poptin"+t.poptin_id+" poptin_design_close_on_screen_click2"),zo[t.poptin_id].poptin_trigger.close_trigger="bg_click",closePoptin(t.poptin_id,!1,!0),setTimeout((function(){$i(t.poptin_id)}),1e3))}}))),"closing_options-"!=t.design_properties.poptin_design_close_options_type)if("closing_options-x"==t.design_properties.poptin_design_close_options_type?(jQ224("[data-poptin-id="+t.poptin_id+"] #closeSkipButton").remove(),t.poptin_type in Zo&&Zo[t.poptin_type]>=parseInt(t.poptin_format.split("_")[1])?jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container), .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_play_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").prepend(we):jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),null==t.design_properties.poptin_design_show_x_comment||Eo||t.design_properties.poptin_design_show_x_comment.length>=1&&(jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").prepend(Qe),$note=jQ224("[data-poptin-id="+t.poptin_id+"] .close-button-note"),$note.text(t.design_properties.poptin_design_show_x_comment),(t.design_properties.poptin_location.indexOf("right")>-1||"bar"==t.poptin_type)&&jQ224("[data-poptin-id="+t.poptin_id+"] .close-button-note").css("right","0px"),t.design_properties.poptin_location.indexOf("top")>-1?jQ224("[data-poptin-id="+t.poptin_id+"] .close-button-note").css("top","0px"):setTimeout((function(){$margin=-1*parseInt($note.css("top"))>=$note.height()?$note.css("top"):"-"+($note.height()+-1*parseInt($note.css("top"))/1.5)+"px",$note.css("top","-65px")}),100),yt(t))):"closing_options-button"==t.design_properties.poptin_design_close_options_type&&(jQ224("[data-poptin-id="+t.poptin_id+"] #closeXButton").remove(),t.poptin_type in Zo&&Zo[t.poptin_type]>=parseInt(t.poptin_format.split("_")[1])?null!=t.design_properties.poptin_design_show_x_comment?jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container), .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_play_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen, .poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").prepend('<button type="button" id="closeXButton" onclick="closePoptinOnXclick(this);" class="close-x-button"  style="width: initial;text-align: right;display:none; margin-top: -2px;-webkit-appearance: none;padding: 5px;cursor: pointer;background: 0 0;border: 0;float: right;font-size: 25px;line-height: 0.5;color: #000;text-shadow: 0 1px 0 #fff;filter: alpha(opacity=20);opacity: 0.7;text-transform: none;overflow: visible;font-family: inherit;margin: 0;font: inherit;align-items: flex-start;text-align: center;text-indent: 0px;letter-spacing: normal;word-spacing: normal;text-rendering: auto;webkit-writing-mode: horizontal-tb;font-weight:bold;z-index: 9999;position: relative;">'+(t.design_properties.poptin_design_show_x_comment||("en"==Ho?Jo:Go))+"</button>"):jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").prepend(je):jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))}))),null!=t.design_properties.poptin_design_show_x_after_sec&&0!=t.design_properties.poptin_design_show_x_after_sec)if("closing_options-button"==t.design_properties.poptin_design_close_options_type){jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button:not(#closeSkipButton)").remove(),zo[t.poptin_id].poptin_trigger.skip_button_sec_counter=parseInt(t.design_properties.poptin_design_show_x_after_sec);var y="";y="en"==Ho?(t.design_properties.poptin_design_show_x_comment||("en"==Ho?Jo:Go))+" ("+zo[t.poptin_id].poptin_trigger.skip_button_sec_counter+")":"("+zo[t.poptin_id].poptin_trigger.skip_button_sec_counter+") "+(t.design_properties.poptin_design_show_x_comment||("en"==Ho?Jo:Go)),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").prepend('<button type="button" id="closeXButton" onclick="closePoptinOnXclick(this);" class="close-x-button"  style="width: initial;text-align: right;display:none; margin-top: -2px;-webkit-appearance: none;padding: 5px;cursor: pointer;background: 0 0;border: 0;float: right;font-size: 25px;line-height: 0.5;color: #000;text-shadow: 0 1px 0 #fff;filter: alpha(opacity=20);opacity: 0.7;text-transform: none;overflow: visible;font-family: inherit;margin: 0;font: inherit;align-items: flex-start;text-align: center;text-indent: 0px;letter-spacing: normal;word-spacing: normal;text-rendering: auto;webkit-writing-mode: horizontal-tb;font-weight:bold;z-index: 9999;position: relative;">'+y+"</button>"),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").css({display:"block",opacity:"0.5",cursor:"not-allowed"}).prop("disabled",!0);var b=setInterval((function(){if(0==zo[t.poptin_id].poptin_trigger.skip_button_sec_counter){clearInterval(b);var i="";"closing_options-x"==t.design_properties.poptin_design_close_options_type?i="&times;":"closing_options-button"==t.design_properties.poptin_design_close_options_type&&(i="en"==Ho?Jo:Go),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").html(i).css({opacity:"1",cursor:"pointer"}).prop("disabled",!1)}else{zo[t.poptin_id].poptin_trigger.skip_button_sec_counter--;var e="";e="en"==Ho?t.design_properties.poptin_design_show_x_comment+" ("+zo[t.poptin_id].poptin_trigger.skip_button_sec_counter+")":"("+zo[t.poptin_id].poptin_trigger.skip_button_sec_counter+") "+t.design_properties.poptin_design_show_x_comment,jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").html(e)}"browsing"==jQ224("[data-poptin-id="+t.poptin_id+"]").attr("data-poptin-type")&&"right-top"==jQ224("[data-poptin-id="+t.poptin_id+"]").attr("data-poptin-location")&&jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").css("padding","5px 5px 5px 20px")}),1e3)}else{jQ224("[data-poptin-id="+t.poptin_id+"] #closeSkipButton").remove();var w=jQ224(p+".draggable-container:not(.poptin-tab-container) .close-x-button, .poptin-popup[data-poptin-id="+t.poptin_id+"] > .close-x-button");0==G()&&w.hide(),setTimeout((function(){a("show poptin x button after "+t.design_properties.poptin_design_show_x_after_sec+" seconds"),w.show(100)}),1e3*parseInt(t.design_properties.poptin_design_show_x_after_sec))}else jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").show(100);else jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").remove();So=300;var j=jQ224(p);if(j.find(".froala-editor-video").length||j.find(".draggable.image-change-video").length){var Q="",x=j.data("autoplay");Lo||"true"!=x&&1!=x||(Q="&mute=1"),j.find("#poptin"+j.data("source")).attr("src",j.data("url")+Q).parent().css("display","block"),j.find(".draggable.image-change-video").remove(),j.find(".froala-video-wrapper").css("display","none")}if(j.find(".fr-shopify-products").length>0&&j.find("#shopifyProductsJSON").length>0&&jQ224(p+" .fr-shopify-products .fr-shopify-item").css({position:"relative","z-index":2}),"lightbox"==t.poptin_type)"format_3"!=t.poptin_format&&"format_9"!=t.poptin_format||jQ224(p+".draggable-container:not(.poptin-tab-container)").css({"box-shadow":"none"});else if("bar"==t.poptin_type)if("center-top"===t.design_properties.poptin_location)j.css({top:"0px",bottom:""});else j.css({top:"",bottom:"0px"});else if("sside"==t.poptin_type||"social"==t.poptin_type){switch(t.design_properties.poptin_location){case"left-top":j.css({left:"0px",right:"",margin:"0px",top:"0px",bottom:""});break;case"left-midlle":j.css({left:"0px",right:"",margin:"0px",top:(window.innerHeight-poptin_height)/2+"px",bottom:""});break;case"left-bottom":j.css({left:"0px",right:"",margin:"0px",bottom:"0px",top:""});break;case"center-top":j.css({left:(window.innerWidth-poptin_width)/2,right:"",margin:"0px",top:"0px",bottom:""});break;case"center-midlle":j.css({left:(window.innerWidth-poptin_width)/2,right:"",margin:"0px",top:(window.innerHeight-poptin_height)/2+"px",bottom:""});break;case"center-bottom":j.css({left:(window.innerWidth-poptin_width)/2,right:"",margin:"0px",bottom:"0px",top:""});break;case"right-top":j.css({left:"",right:"0px",margin:"0px",top:"0px",bottom:""});break;case"right-midlle":j.css({left:"",right:"0px",margin:"0px",top:(window.innerHeight-poptin_height)/2+"px",bottom:""});break;case"right-bottom":j.css({left:"",right:"0px",bottom:"0px",top:""})}"social"==t.poptin_type&&("format_1"==t.poptin_format||"format_5"==t.poptin_format?j.find(".close-x-button").css({position:"absolute",top:"0px",right:"0px","z-index":"1","line-height":"26px"}):"format_3"!=t.poptin_format&&"format_7"!=t.poptin_format||(j.css({"box-shadow":"none !important",opacity:"0",visability:"hidden"}),j.find("img").first().remove()))}else if("bside"==t.poptin_type)"left"!==t.design_properties.poptin_location?j.css({left:"",top:"",right:"0px",bottom:"0px"}):j.css({right:"",top:"",left:"0px",bottom:"0px"});else if("browsing"==t.poptin_type||"fullpage"==t.poptin_type||"mobile"==t.poptin_type)if(j.css({bottom:"",right:""}),"mobile"==t.poptin_type&&("format_3"!=t.poptin_format&&"format_8"!=t.poptin_format||(jQ224(p+".draggable-container:not(.poptin-tab-container)").css({"box-shadow":"none"}),j.css({bottom:"0px",right:"0px"}))),"fullpage"==t.poptin_type&&(vt()&&jQ224(p+".draggable-container:not(.poptin-tab-container) .close-x-button").css({"padding-right":"25px"}),"format_3"!=t.poptin_format&&"format_7"!=t.poptin_format||jQ224(p+".poptin-popup > div").css({"background-image":""})),"browsing"==t.poptin_type&&(jQ224(p+".draggable-container:not(.poptin-tab-container) .close-x-button").css({"padding-right":"15px"}),jQ224(p).hasClass("old-popup")&&"right-top"==t.design_properties.poptin_location&&(j.css({left:"",right:"0px","-moz-transform":"scaleX(-1)","-o-transform":"scaleX(-1)","-webkit-transform":"scaleX(-1)",transform:"scaleX(-1)",filter:"FlipH","-ms-filter":"FlipH"}),j.find("p").css({"-moz-transform":"scaleX(-1)","-o-transform":"scaleX(-1)","-webkit-transform":"scaleX(-1)",transform:"scaleX(-1)",filter:"FlipH","-ms-filter":"FlipH"}),setTimeout((function(){j.find(".poptin-credit").css("transform","scaleX(-1)")}),300))),"mobile"==t.poptin_type)switch(t.design_properties.poptin_location){case"center-top":j.css({top:"0px"});break;case"center-midlle":j.css({top:(window.innerHeight-poptin_height)/2+"px"});break;case"center-bottom":j.css({top:window.innerHeight-poptin_height+"px"})}else j.css({top:"0px"});else"gamified"==t.poptin_type&&"format_1"==t.poptin_format&&(jQ224(p+" .fr-giftbox-images .fr-giftbox").css({cursor:"pointer",position:"relative","z-index":2}),jQ224(p+" .fr-giftbox-images .fr-giftbox img.giftbox-img").css({cursor:"pointer"}));function k(){"fullpage"==t.poptin_type&&(jQ224(p).css("opacity",0),Pt(t,i,1),setTimeout((function(){mt(t)}),300)),resize_delay=100,"fullpage"==t.poptin_type&&(resize_delay=350),setTimeout((function(){li(t,i),ci(t,i),"fullpage"!=t.poptin_type&&setTimeout((function(){Pt(t,i,1),setTimeout((function(){mt(t)}),300)}),300)}),resize_delay),Ui(t)}jQ224(p+" .fr-shopify-products")&&jQ224(p+" .fr-shopify-products").length>0?(void 0!==window.Shopify&&window.Shopify.shop||"undefined"!=typeof poptin_landing_page&&1==poptin_landing_page)&&(a("process shopify ajax"),Ut(),Rt(t),Ht(t).then((function(t){1==t.display&&(a("show popup if products available"),k())})).catch((function(t){console.log("Error while processing shopify ajax: ",t)}))):k(),Eo&&t.poptin_type+"_"+t.poptin_format=="gamified_format_2"&&jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinDraggableContainer').length&&(gn=window.scrollY,Cn=!0,jQ224("html, body").css({overflow:"hidden",height:"100vh"})),t.poptin_type+"_"+t.poptin_format=="gamified_format_2"&&jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinDraggableContainer').length&&jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinDraggableContainer .poptin-couponbg-wrapper').css({position:"absolute"})},ft=function(){return"he"==Ho},gt=function(t){Eo&&(a("setTelForMobile"),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDesignInputTextFieldPhone").attr("type","tel"))},mt=function(t){jQ224('.poptin-popup [role="application"]').removeAttr("role"),jQ224(".poptin-popup").attr("role","application"),jQ224(".poptin-popup form").attr("role","form");var i=500+100*++Po,e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"),o=1==e.attr("data-has-tabindex"),n=o?i+parseInt(e.attr("data-lowest-tabindex")):i;jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] > *").each((function(){jQ224(this).find(".inputs-container input, .inputs-container select, .inputs-container textarea").each((function(t){var e=jQ224(this).attr("data-placeholder");if(e||(e=jQ224(this).attr("placeholder")),jQ224(this).parent().hasClass("field-consent-checkbox")&&(e=ft()?"צ'קבוקס לדיוור":"Consent Checkbox"),null!=e){var n=!0,p=jQ224(this).css("direction");null!=p&&"ltr"==p&&(n=!1),-1==e.indexOf("*")&&jQ224(this).prop("required")&&(ft()&&n?e="*"+e:e+="*",jQ224(this).attr({"aria-required":!0}));var a=jQ224(this).attr("data-tabindex"),r=o?a?i+parseInt(a):i:i++;jQ224(this).attr({tabindex:r,"aria-label":e,placeholder:e})}})),jQ224(this).find(".poptin-checkbox-wrapper input").each((function(t){var e=jQ224(this).attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++,p=jQ224(this).parent().find(".froala-editor-text").text();jQ224(this).attr({tabindex:n,"aria-label":p,placeholder:p})})),jQ224(this).find(".flip-timer-container").each((function(t){var e=jQ224(this).attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++;jQ224(this).attr({tabindex:n})})),jQ224(this).find(".froala-editor-coupon").each((function(t){var e=jQ224(this).text();if(e){e=e.split("").join(","),e=ft()?e+" קופון":"Coupon "+e;var n=jQ224(this).parents(".poptin-coupon-element").attr("data-tabindex"),p=o?n?i+parseInt(n):i:i++;jQ224(this).parents(".poptin-coupon-element").attr({tabindex:p,"aria-label":e})}})),jQ224(this).find(".froala-image-wrapper img").each((function(t){var e=jQ224(this).attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++;jQ224(this).attr({tabindex:n})})),jQ224(this).find(".froala-editor-text, .froala-editor-ticker").each((function(t){if(0==jQ224(this).parents(".flip-timer-container, .poptin-checkbox-wrapper").length){var e=jQ224(this).parents(".draggable").attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++;jQ224(this).parents(".draggable").attr({tabindex:n})}})),jQ224(this).find("input.poptin-form-submit-button").each((function(t){jQ224(this).attr("role","button");var e=jQ224(this).parent().find(".froala-editor-button").attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++;jQ224(this).attr({tabindex:n})})),jQ224(this).find(".poptin-form-close-button, .poptin-form-link-button").each((function(t){jQ224(this).attr("role",jQ224(this).get(0).className.includes("link")?"link":"button");var e=jQ224(this).attr("data-tabindex"),n=o?e?i+parseInt(e):i:i++;jQ224(this).attr({tabindex:n})})),jQ224(this).find(".close-x-button").each((function(t){jQ224(this).wrapInner('<span aria-hidden="true"></span>');var e="he"==Ho?"סגור פופאפ":"Close popup",n=jQ224(this).attr("data-tabindex"),p=o?n?i+parseInt(n):i:i++;jQ224(this).attr({tabindex:p,"aria-label":e})}))}));var p=o?i+parseInt(e.attr("data-highest-tabindex")):i;if(!o){var a=1==isPoptinLandingPage?"":":not([data-poptin-type='embedded'])",r=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"+a+" .inputs-container input.poptin-design-fields-form").first();"date"==r.data("input-type")||r.focus()}e.append('\n\t\t\t<span class="poptin-tabindex-start" tabindex="'+(n-1)+'" aria-label="Dialog popup start"></span>\n\t\t\t<span class="poptin-tabindex-end" tabindex="'+(p+1)+'" aria-label="Dialog popup end"></span>\n\t\t'),setTimeout((function(){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .inputs-container input:focus").length>0;if(o)jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]:not([data-poptin-type='embedded']) .poptin-tabindex-start").focus();else if(!i){var e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]:not([data-poptin-type='embedded']) .inputs-container input.poptin-design-fields-form").first();"date"==e.data("input-type")||e.focus()}}),2e3);var s="fullpage"==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-poptin-type"),d=!1;jQ224(document).on("keyup keydown",(function(t){"keydown"==t.type&&16==t.keyCode&&(d=!0),"keyup"==t.type&&16==t.keyCode&&(d=!1)})),jQ224(document).on("keydown",".poptin-popup[data-poptin-id="+t.poptin_id+"] .inputs-container .froala-editor-input > .form-input-class:first-child input:first-child, .poptin-popup[data-poptin-id="+t.poptin_id+"] .inputs-container .form-input-class:first-child select, .poptin-popup[data-poptin-id="+t.poptin_id+"] .inputs-container .form-input-class:first-child textarea",(function(i){if(9==i.keyCode&&d)return setTimeout((function(){s?jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] > #closeXButton").focus():jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDraggableContainer #closeXButton").focus()}),100),!1})),jQ224(document).on("keydown",".poptin-popup[data-poptin-id="+t.poptin_id+"] #closeXButton",(function(i){if(13!=i.keyCode&&32!=i.keyCode||jQ224(this).trigger("click"),9==i.keyCode&&!d&&!o)return setTimeout((function(){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .inputs-container");i.find(".form-input-class:first-child").length?i.find(".form-input-class:first-child").find("input.poptin-design-fields-form, textarea.poptin-design-fields-form").first().focus():i.find("input.poptin-design-fields-form, textarea.poptin-design-fields-form").first().focus()}),100),!1})),jQ224(document).keyup((function(i){if("Escape"===i.key&&"embedded"!=t.poptin_type){var o="#closeXButton";jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #closeSkipButton").length>0&&(o="#closeSkipButton"),t&&t.poptin_id&&o&&setTimeout((function(){closePoptinOnXclick(".poptin-popup[data-poptin-id="+t.poptin_id+"] "+o)}),800)}if(9==i.keyCode){var a=document.activeElement,r=e.find("[tabindex="+n+"]"),s=e.find("[tabindex="+p+"]"),l=jQ224(a).hasClass("poptin-tabindex-end"),c=jQ224(a).hasClass("poptin-tabindex-start");d?c&&s.focus():l&&r.focus()}}))},ht=function(){var t="א".search(/[\u0590-\u05FF]/);return x=document.querySelector('meta[http-equiv="Content-Type"]'),t>=0&&(x=document.querySelector('meta[http-equiv="Content-Type"]'),null==x||x.content.toLowerCase().indexOf("utf-8")>0)},vt=function(){return jQ224("body").get(0).scrollHeight>jQ224(window).height()},yt=function(t){var i=jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button"),e=jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-button-note");e&&i.on("mouseover",(function(){if(this_scale=zo[t.poptin_id].poptin_scale,"lightbox"==t.poptin_type&&Zo.lightbox<=parseInt(t.poptin_format.split("_")[1]));else if(i)jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) #closeButtonNote").css({left:i.position().left/this_scale+i.outerWidth()-e.outerWidth()+1,top:i.position().top/this_scale-e.outerHeight()-3,right:""});else{var o=jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").attr("data-width");jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) #closeButtonNote").css({left:o/this_scale-e.outerWidth()+1,top:3-e.outerHeight(),right:""})}e.css("display","block")})).on("mouseout",(function(){e.css("display","none")}))},bt=function(t,i){try{"undefined"!=typeof Storage&&t?(a("setAutoPilot2"),void 0===t.auto_pilot_trigger||null!=window.sessionStorage.getItem("apt_"+t.poptin_id)&&null!=window.sessionStorage.getItem("apt_"+t.poptin_id)||(a(t.auto_pilot_trigger),window.sessionStorage.setItem("apt_"+t.poptin_id,t.auto_pilot_trigger))):a("Sorry! No Web Storage support add/or poptin..")}catch(t){a(t)}},wt=function(){try{"undefined"!=typeof Storage?null!=window.sessionStorage.getItem("poptin_origin_landing_page")&&null!=window.sessionStorage.getItem("poptin_origin_landing_page")||window.sessionStorage.setItem("poptin_origin_landing_page",window.location.href):a("Sorry! No Web Storage support..")}catch(t){a(t)}},jt=function(t,i){var e={},o=si(t.poptin),n=o.width,p=o.height;void 0!==t&&("lightbox"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size.height=p,zo[t.poptin_id].poptin_size.width=n),null!=n&&""!=n&&"undefined"!=n&&(Se=n),null!=p&&""!=p&&"undefined"!=p&&(Ie=p,"format_3"!=t.poptin_format&&"format_9"!=t.poptin_format||(Se=Ie)),null==i&&(zo[t.poptin_id].poptin_size={width:Se,height:Ie}),e.width=Se,e.height=Ie):"bar"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size={width:Te,height:Pe}),e.width=Te,e.height=Pe,"format_1"==t.poptin_format||"format_6"==t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Te,height:Pe}),e.height=Pe):"format_2"==t.poptin_format||"format_3"==t.poptin_format||"format_7"==t.poptin_format||"format_8"==t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Te,height:De}),e.height=De):"format_4"==t.poptin_format||"format_9"==t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Te,height:Oe}),e.height=Oe):"format_5"!=t.poptin_format&&"format_10"!=t.poptin_format||(null==i&&(zo[t.poptin_id].poptin_size={width:Te,height:ze}),e.height=ze)):"sside"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:$e,height:Ne}),e.width=Fe,e.height=Ne):"format_4"===t.poptin_format||"format_8"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Le,height:Be}),e.width=Le,e.height=Be):"format_19"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Ee,height:Re}),e.width=Ee,e.height=Re):(null==i&&(zo[t.poptin_id].poptin_size={width:Fe,height:Ne}),e.width=$e,e.height=Ne):"bside"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size={width:Ue,height:He}),e.width=Ue,e.height=He):"browsing"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size={width:Ae,height:Me}),e.width=Ae,e.height=Me):"fullpage"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size={width:Xe,height:We}),e.width="100%",e.height="100%","format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(null==i&&(zo[t.poptin_id].poptin_size={width:qe,height:Je}),e.width=qe,e.height=Je)):"content"==t.poptin_type?null==i&&(zo[t.poptin_id].poptin_size={width:Xe,height:We}):"social"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:eo,height:io}),e.width=eo,e.height=io):"format_2"===t.poptin_format||"format_6"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:no,height:oo}),e.width=no,e.height=oo):"format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(null==i&&(zo[t.poptin_id].poptin_size={width:ao,height:po}),e.width=ao,e.height=po):"mobile"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size={width:Ge,height:Ye}),e.width=Ge,e.height=Ye,"format_3"===t.poptin_format||"format_8"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Ve,height:Ke}),e.width=Ve,e.height=Ke):"format_4"===t.poptin_format||"format_9"===t.poptin_format?(null==i&&(zo[t.poptin_id].poptin_size={width:Ge,height:Ze}),e.height=Ze):"format_5"!==t.poptin_format&&"format_10"!==t.poptin_format||(null==i&&(zo[t.poptin_id].poptin_size={width:Ge,height:to}),e.height=to)):"embedded"==t.poptin_type?("format_1"===t.poptin_format?(e.width=ro,e.height=so):"format_2"===t.poptin_format?(e.width=lo,e.height=co):"format_3"===t.poptin_format?(e.width=_o,e.height=uo):"format_4"===t.poptin_format?(e.width=fo,e.height=go):"format_5"===t.poptin_format?(e.width=mo,e.height=ho):"format_6"===t.poptin_format?(e.width=vo,e.height=yo):"format_7"===t.poptin_format&&(e.width=bo,e.height=wo),null==i&&(zo[t.poptin_id].poptin_size={width:e.width,height:e.height})):"gamified"==t.poptin_type&&(null==i&&(zo[t.poptin_id].poptin_size.height=p,zo[t.poptin_id].poptin_size.width=n),null!=n&&""!=n&&"undefined"!=n&&(Se=n),null!=p&&""!=p&&"undefined"!=p&&(Ie=p),null==i&&(zo[t.poptin_id].poptin_size={width:Se,height:Ie}),e.width=Se,e.height=Ie),zo[t.poptin_id].poptin_size=e)},Qt=function(t){zo[t]={poptin_size:{},poptin_trigger:{},poptin_center:{}}},xt=function(t,i){var e=!1,o=(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("top"),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("bottom")),n={lightbox:"10px",mobile:"10px",sside:"0px",gamified:"10px"};if($o&&jQ224.inArray(t.poptin_type,["lightbox","mobile","sside","gamified"])>-1){try{jQ224("[data-poptin-id="+t.poptin_id+"] .inputs-container input").off("click"),jQ224(window).off("click")}catch(t){a(t)}jQ224("[data-poptin-id="+t.poptin_id+"] .inputs-container input").on("click",(function(i){e||("sside"!=t.poptin_type||"format_4"!==t.poptin_format&&"format_8"!==t.poptin_format?-1==t.design_properties.poptin_location.indexOf("top")&&(t.design_properties.poptin_location.indexOf("bottom")>-1?jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").animate({top:n[t.poptin_type]},300):jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").animate({top:parseInt(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("top"))-100+"px"},300)):jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").animate({top:"-100px"},300),e=!0)})),jQ224(window).on("click",(function(i){0==jQ224(i.target).parents(".inputs-container").length&&e&&(-1!=t.design_properties.poptin_location.indexOf("top")&&("sside"!=t.poptin_type||"format_4"!==t.poptin_format&&"format_8"!==t.poptin_format)||(t.design_properties.poptin_location.indexOf("bottom")>-1?(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("top",""),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").animate({bottom:o},300)):jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").animate({top:parseInt(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("top"))+100+"px"},300)),e=!1)}))}},kt=function(t){a("insertPoptinCredit"),jQ224("[data-poptin-id="+t.poptin_id+"]").children("div, form").append(xe),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin-credit a").attr("href",("en"==Ho?be:ye)+"?src="+window.location.host)},Ct=function(t){split=t.split("font-family")[1].split(";")[0];var i=split.replace("!important","").replace(/\:/g,"").replace(/\"/g,"").replace(/\'/g,"").trim(),e=jQ224(".poptin-popup").attr("data-custom-fonts");if(null!=e&&e.split(",").includes(i))return!1;var o=i.replace(/\s/g,"+");jQ224("link").each((function(){if(this_href=jQ224(this).attr("href").toLowerCase(),-1==this_href.indexOf("zp46sc6gwsi2qkvolzdb2kg52u0yffwh.lambda-url.us-west-2.on.aws")&&-1==this_href.indexOf(o.toLowerCase())&&-1==zn.indexOf(o))if(zn.push(o),"Open+Sans+Hebrew"==o)0==jQ224("#poptin_opensanshebrew_font_preload").length&&jQ224("head").append('<link rel="preload" id="poptin_opensanshebrew_font_preload" as="style" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">'),0==jQ224("#poptin_opensanshebrew_font_link").length&&jQ224("head").append('<link rel="stylesheet" id="poptin_opensanshebrew_font_link" href="https://fonts.popt.in/?family=Open%20Sans%20Hebrew&display=swap">');else{var t=o.toLowerCase().replace(/[^\w ]+/g,"").replace(/ +/g,"-");if(font_preload_id="poptin-preload-"+t,font_link_id="poptin-link-"+t,!An.includes(i))return!1;poptin_disable_fonts?poptin_disable_fonts&&"poppins"!==t&&(0==jQ224("#"+font_preload_id).length&&jQ224("head").append('<link rel="preload" id="'+font_preload_id+'" as="style" href="https://fonts.popt.in?family='+o+'&display=swap">'),0==jQ224("#"+font_link_id).length&&jQ224("head").append('<link rel="stylesheet" id="'+font_link_id+'"  href="https://fonts.popt.in?family='+o+'&display=swap" type="text/css">')):(0==jQ224("#"+font_preload_id).length&&jQ224("head").append('<link rel="preload" id="'+font_preload_id+'" as="style" href="https://fonts.popt.in?family='+o+'&display=swap">'),0==jQ224("#"+font_link_id).length&&jQ224("head").append('<link rel="stylesheet" id="'+font_link_id+'"  href="https://fonts.popt.in?family='+o+'&display=swap" type="text/css">'))}}))},St=function(t){return!!t.is_teasers_on},It=function(t){jQ224("[data-poptin-id="+t.poptin_id+"] .froala-editor-ticker").length>0&&setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .froala-editor-ticker").each((function(t){var i=jQ224(this).parent(".poptin-newsticker-element").width(),e=jQ224(this).data(),o=(e.duration?e.duration:7e3)/400,n=e.direction?e.direction:"left";jQ224(this).css({overflow:"hidden",width:i+"px",position:"relative"}),jQ224(this).wrapInner('<div class="js-poptinNewsTicker-wrapper dir-'+n+'"><div class="js-poptinNewsTicker" style="margin-right: 0px;margin-left: 0px;;white-space: nowrap;"></div></div>'),jQ224(this).find(".js-poptinNewsTicker-wrapper").css({"animation-duration":o+"s","-moz-animation-duration":o+"s","-webkit-animation-duration":o+"s"})}))}),100)},Tt=function(t,i){return i=i||{},Object.assign({poptin_id:t.poptin_id,poptin_name:t.poptin_name,poptin_target:t.poptin_target,poptin_type:t.poptin_type,account_id:t.account_id},i)},Pt=function(t,i,e){Mt(t)&&(a("showPoptin: "+t.poptin_id),At(t),function(t){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin-credit").remove(),a("clearPoptinCredit1"),t.if_poptin_credit&&kt(t)}(t),"social_proof"==t.poptin_target?setSocialProofBehaverInterval(t,i):(!function(t){jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinMobileContainer-tab").remove(),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDesktopContainer-tab").remove(),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDraggableContainer-tab").remove()}(t),qi(t,"entry"),zo[t.poptin_id].poptin_trigger.shown=!0),Dt(t),Gi(t),"gamified"==t.poptin_type&&"format_1"==t.poptin_format&&(Yi(t),Zi(t)),"embedded"!=t.poptin_type&&"fullpage"!=t.poptin_type&&ae(t),It(t),function(t){t.poptin_type+"_"+t.poptin_format=="gamified_format_2"&&(window.countScratchProgress=function(i){Number(i)<=50&&(jQ224("[data-poptin-id="+t.poptin_id+"] #poptinScratchArea").hide(),setTimeout((function(){jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinDraggableContainer').removeClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),t.design_properties&&t.design_properties.disable_post_play_screen&&1==t.design_properties.disable_post_play_screen?(ni(t),qt(t)):(jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800))}),3e3))},poptinScratchCardInit("",t.poptin_id))}(t),oe(t),ne(t),Ot(t),zt(t),Et(t,i),t.is_teasers_on?t.is_teasers_on&&jQ224('div#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]').length>0?void 0!==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-tabshow")&&"after_close"!=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-tabshow")&&ri(t):t.is_teasers_on&&0==jQ224('div#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]').length&&jQ224('.poptin-popup.poptin-live[data-poptin-id="'+t.poptin_id+'"]').length>0&&ri(t):ri(t))},Dt=function(t){t.poptin_type+"_"+t.poptin_format=="social_format_3"||t.poptin_type+"_"+t.poptin_format=="social_format_7"?(a("ingectFacebookChat"),inject_chat_sdk=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .facebook-plugin").attr("data-facebook-chat-plugin"),inject_chat_sdk.indexOf("sdk.js")>0&&(inject_chat_sdk=inject_chat_sdk.replace("sdk.js","sdk/xfbml.customerchat.js")),jQ224("body").append(inject_chat_sdk)):t.poptin_type+"_"+t.poptin_format!="social_format_4"&&t.poptin_type+"_"+t.poptin_format!="social_format_8"||(a("ingectFacebookSendToMessangerPlugin"),Ko=t.poptin_id+"-"+l()+"-"+Math.random().toString(36),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .facebook-plugin .fb-send-to-messenger").attr("data-ref",Ko),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .ui-wrapper").remove(),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .facebook-plugin").is(":empty")||jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .facebook-messanger-conversion-img").remove(),setTimeout((function(){jQ224("body").append(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .facebook-plugin").attr("data-facebook-send-to-messanger-plugin"))}),750))},Ot=function(t){a("pushHtmlDown"),("bar"==t.poptin_type&&"center-top"==t.design_properties.poptin_location||"1"==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-wellcome-screen"))&&(jQ224("html").animate({"padding-top":jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]")[0].getBoundingClientRect().height+"px"},300),Uo=!0)},zt=function(t){vt()&&"fullpage"==t.poptin_type&&setTimeout((function(){jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").css("padding-right",1920==screen.width?"46px":"20px")}),300)},At=function(t){jQ224("[data-poptin-id="+t.poptin_id+"] .froala-image-wrapper").each((function(){var i=jQ224(this).find("img");i.css("width",jQ224(this).css("width")),i.css("height",jQ224(this).css("height")),i.attr("alt",i.attr("alt")||t.poptin_name),i.css("max-width",jQ224(this).css("width"))})),jQ224(".froala-editor-button").css("width","100%"),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").find("p, input, a, span, div, button, label, ul, ol, li, img, strong, i").each((function(i){if(jQ224(this).is("a")&&jQ224(this).css("cursor","pointer"),jQ224(this).parents("a").length&&jQ224(this).css("cursor",""),!poptin_loadcontrol_fix){var e=jQ224(this).get(0).style.width,o="closeXButton"==jQ224(this).attr("id");if(""!=e&&!o){if(e.indexOf("px")>-1){e=parseInt(e);var n=si(t.poptin).width;n&&(e=Math.min(n,e)),e+="px"}t.poptin_type+"_"+t.poptin_format!="social_format_6"&&t.poptin_type+"_"+t.poptin_format!="sside_format_19"&&jQ224(this).is("img")}}var p="";jQ224.each(this.attributes,(function(t){if(this.specified&&"style"==this.name&&(p=(p=(p=(p=(p=this.value).replace(/ ?!important/g,"")).replace(/\;base64/g,":base64")).replace(/\;/g," !important;")).replace(/\:base64/g,";base64"),-1!==this.value.indexOf("font-family")))try{Ct(this.value)}catch(t){a(t)}})),jQ224(this).attr("style",p)})),jQ224('#poptinDesignInputTextFieldCheckbox .form-input-class, .poptin-popup input[type="radio"], .poptin-popup input[type="checkbox"]').css({width:"","max-width":""}),jQ224(".field-consent-checkbox input").each((function(){jQ224(this).css("width",jQ224(this).css("height"))}))},Mt=function(t){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .timer-container");if(i.length&&i.hasClass(".timer-started"))return!1;if(i.addClass(".timer-started"),1==t.design_properties.timer_ver||2==t.design_properties.timer_ver||0==t.design_properties.timer_ver&&(t.poptin_type+"_"+t.poptin_format=="embedded_format_5"||t.poptin_type+"_"+t.poptin_format=="lightbox_format_5"||t.poptin_type+"_"+t.poptin_format=="lightbox_format_11"||t.poptin_type+"_"+t.poptin_format=="bar_format_5"||t.poptin_type+"_"+t.poptin_format=="bar_format_10")){var e=1;2==t.design_properties.timer_ver&&(e=2);var o=t.design_properties.timer.split("@"),n=o[1].split("|");if("timerTime"==o[0]){var p=60*parseInt(n[0])+parseInt(n[1]),r=new Date((new Date).getTime()+1e3*p);Nt(t.poptin_id,r,t,e)}else{r=new Date(n[0]+" "+n[1]+" GMT"+("0"==n[2]?"+0":n[2]));if(a(n[0]+" "+n[1]+" GMT"+n[2]),a("0"==n[2]?"yes":"no"),a(r),!Bt(t,r))return!i.length;Nt(t.poptin_id,r,t,e)}}return!0},Ft=function(t,i,e){if(void 0!==t){var o=jQ224(".poptin-popup[data-poptin-id="+i+"]");o.find(".flip-timer-container").addClass("play");var n=Lt(t),p=parseInt(o.find(".secondPlay .flip-item.active .up .inn").text()),r=Math.abs((isNaN(p)?0:p)-n.seconds);a("secTimeDiff",r,p),(r||"program"==e)&&(o.find(".secondPlay .flip-item").removeClass("before"),o.find(".secondPlay .flip-item").removeClass("active"),o.find(".secondPlay .flip-item .up .inn").each((function(){parseInt(jQ224(this).text())==n.seconds&&jQ224(this).closest(".flip-item").prev().addClass("before").next(".flip-item").addClass("active")})));var s=parseInt(o.find(".minutePlay .flip-item.active .up .inn").text()),d=Math.abs((isNaN(s)?0:s)-n.minutes);a("minTimeDiff",d,s),(d||"program"==e)&&(o.find(".minutePlay .flip-item").removeClass("before"),o.find(".minutePlay .flip-item").removeClass("active"),o.find(".minutePlay .flip-item .up .inn").each((function(){parseInt(jQ224(this).text())==n.minutes&&jQ224(this).closest(".flip-item").prev().addClass("before").next(".flip-item").addClass("active")})));var l=parseInt(o.find(".hoursPlay .flip-item.active .up .inn").text()),c=Math.abs((isNaN(l)?0:l)-n.hours);a("hrTimeDiff",c,l),(c||"program"==e)&&(o.find(".hoursPlay .flip-item").removeClass("before"),o.find(".hoursPlay .flip-item").removeClass("active"),o.find(".hoursPlay .flip-item .up .inn").each((function(){parseInt(jQ224(this).text())==n.hours&&jQ224(this).closest(".flip-item").prev().addClass("before").next(".flip-item").addClass("active")})));var _=parseInt(o.find(".daysPlay .flip-item.active .up .inn").text()),u=Math.abs((isNaN(_)?0:_)-n.days);a("dayTimeDiff",u,_),(u||"program"==e)&&(jQ224("#poptinDraggableContainer .daysPlay .flip-item").removeClass("before"),jQ224("#poptinDraggableContainer .daysPlay .flip-item").removeClass("active"),jQ224("#poptinDraggableContainer .daysPlay .flip-item .up .inn").each((function(){parseInt(jQ224(this).text())==n.days&&(a(parseInt(jQ224(this).text()),n.days),jQ224(this).closest(".flip-item").prev().addClass("before").next(".flip-item").addClass("active"))})))}},$t=function(t){return("0"+t).slice(-2)},Nt=function(t,i,e,o){var n=jQ224(".poptin-popup[data-poptin-id="+t+"]");if(a("initializeClock() | endtime: "+i+", poptin_id: "+t),jQ224(".poptin-popup[data-poptin-id="+t+"]").show(),2==o){var p=function(){if(jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").length>0){var e=Lt(i);if(0==e||e.total<1e3){zo[t].poptin_trigger.close_trigger="timer",closePoptin(t);try{clearInterval(g)}catch(t){}}else!function(t,i){var e=jQ224(".poptin-popup[data-poptin-id="+i+"]");e.find(".flip-timer-container").removeClass("play");var o=e.find(".secondPlay .flip-item.active");null==o.html()?(o=e.find(".secondPlay .flip-item").eq(0)).addClass("before").removeClass("active").next(".flip-item").addClass("active").closest(".flip-timer-container").addClass("play"):o.is(":last-child")?(e.find(".secondPlay .flip-item").removeClass("before"),o.addClass("before").removeClass("active"),(o=e.find(".secondPlay .flip-item").eq(0)).addClass("active").closest(".flip-timer-container").addClass("play")):(e.find(".secondPlay .flip-item").removeClass("before"),o.addClass("before").removeClass("active").next(".flip-item").addClass("active").closest(".flip-timer-container").addClass("play"))}(0,t),0==e.seconds&&e.minutes>=0&&(a("Play minutes"),function(t,i){var e=jQ224(".poptin-popup[data-poptin-id="+i+"]");e.find(".flip-timer-container").removeClass("play");var o=e.find(".minutePlay .flip-item.active");null==o.html()?(o=e.find(".minutePlay .flip-item").eq(0)).addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play"):o.is(":last-child")?(e.find(".minutePlay .flip-item").removeClass("before"),o.addClass("before").removeClass("active"),(o=e.find(".minutePlay .flip-item").eq(0)).addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")):(e.find(".minutePlay .flip-item").removeClass("before"),o.addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")),setTimeout((function(){e.find(".minutePlay .flip-item.perspective").removeClass("perspective")}),1e3)}(0,t)),0==e.seconds&&0==e.minutes&&e.hours>=0&&(a("Play hours"),function(t,i){var e=jQ224(".poptin-popup[data-poptin-id="+i+"]");e.find(".flip-timer-container").removeClass("play");var o=e.find(".hoursPlay .flip-item.active");null==o.html()?(o=e.find(".hoursPlay .flip-item").eq(0)).addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play"):o.is(":last-child")?(e.find(".hoursPlay .flip-item").removeClass("before"),o.addClass("before").removeClass("active"),(o=e.find(".hoursPlay .flip-item").eq(0)).addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")):(e.find(".hoursPlay .flip-item").removeClass("before"),o.addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")),setTimeout((function(){e.find(".hoursPlay .flip-item.perspective").removeClass("perspective")}),1e3)}(0,t)),0==e.seconds&&0==e.minutes&&e.hours>=0&&e.days>=0&&(a("Play days"),function(t,i){var e=jQ224(".poptin-popup[data-poptin-id="+i+"]");e.find(".flip-timer-container").removeClass("play");var o=e.find(".daysPlay .flip-item.active");null==o.html()?(o=e.find(".daysPlay .flip-item").eq(0)).addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play"):o.is(":last-child")?(e.find(".daysPlay .flip-item").removeClass("before"),o.addClass("before").removeClass("active"),(o=e.find(".daysPlay .flip-item").eq(0)).addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")):(e.find(".daysPlay .flip-item").removeClass("before"),o.addClass("before").addClass("perspective").removeClass("active").next(".flip-item").addClass("active").addClass("perspective").closest(".flip-timer-container").addClass("play")),setTimeout((function(){e.find(".daysPlay .flip-item.perspective").removeClass("perspective")}),1e3)}(0,t));var o="";if(n.find("#timerHours").is(":visible")){var p=n.find(".daysPlay");o+=(p.find(".flip-item.active .up").text()||p.find(".flip-item:first-child .up").text())+" "+p.find(".froala-editor-text").text()+", ";var r=n.find(".hoursPlay");o+=(r.find(".flip-item.active .up").text()||24)+" "+r.find(".froala-editor-text").text()+", "}var d=n.find(".minutePlay");o+=(d.find(".flip-item.active .up").text()||59)+" "+d.find(".froala-editor-text").text()+", ";var l=n.find(".secondPlay");o+=l.find(".flip-item.active .up").text()+" "+l.find(".froala-editor-text").text(),o=ft()?o+" טיימר":"Timer "+o,s.attr("aria-label",o)}else clearInterval(g)};jQ224(window).on("blur focus hover",(function(e){if(n.find(".flip-timer-container").attr("data-prev-type")!=e.type&&"focus"===e.type)Ft(i,t,"window");n.find(".flip-timer-container").attr("data-prev-type",e.type)})),jQ224(".poptin-popup[data-poptin-id="+t+"] .timer-container").addClass("timer-started");var r=Lt(i);a("getTimeRemaining",r);var s=jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container"),d=s.find(".daysPlay, .hoursPlay, .minutePlay, .secondPlay");d.find(".flip-item").after('<div class="flip-item-holder"></div>'),d.find(".flip-item").remove();for(var l=r.days;l>=0;l--){var c=$t(l);s.find(".daysPlay .flip-item-holder").append('<div class="flip-item"><div class="anim-wrap"><div class="up"><div class="shadow"></div><div class="inn">'+c+'</div></div><div class="down"><div class="shadow"></div><div class="inn">'+c+"</div></div></div></div>")}for(l=23;l>=0;l--){c=$t(l);s.find(".hoursPlay .flip-item-holder").append('<div class="flip-item"><div class="anim-wrap"><div class="up"><div class="shadow"></div><div class="inn">'+c+'</div></div><div class="down"><div class="shadow"></div><div class="inn">'+c+"</div></div></div></div>")}for(l=59;l>=0;l--){c=$t(l);s.find(".minutePlay .flip-item-holder").append('<div class="flip-item"><div class="anim-wrap"><div class="up"><div class="shadow"></div><div class="inn">'+c+'</div></div><div class="down"><div class="shadow"></div><div class="inn">'+c+"</div></div></div></div>")}for(l=59;l>=0;l--){c=$t(l);s.find(".secondPlay .flip-item-holder").append('<div class="flip-item"><div class="anim-wrap"><div class="up"><div class="shadow"></div><div class="inn">'+c+'</div></div><div class="down"><div class="shadow"></div><div class="inn">'+c+"</div></div></div><div>")}var _="rgba(0, 0, 0, 0)"==d.css("background-color")?"rgb(255, 255, 255)":d.css("background-color");a("flip_wrap",_),s.find(".flip-item").css("border-radius",d.css("border-radius")),s.find(".flip-item .anim-wrap > div").css("background-color",_),jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").addClass("reset"),Ft(i,t,"program"),p();try{clearInterval(g)}catch(t){}jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").length>0&&(g=setInterval(p,1e3)),setTimeout((function(){jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").removeClass("reset")}),1e3)}else{var u=function(){var e=Lt(i);if(jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").length>0){var o=("0"+e.days).slice(-2),n=("0"+e.hours).slice(-2),p=("0"+e.minutes).slice(-2),a=("0"+e.seconds).slice(-2);if(f.find("#timerDays .first").text(o[0]),f.find("#timerDays .second").text(o[1]),f.find("#timerHours .first").text(n[0]),f.find("#timerHours .second").text(n[1]),f.find("#timerMinutes .first").text(p[0]),f.find("#timerMinutes .second").text(p[1]),f.find("#timerSeconds .first").text(a[0]),f.find("#timerSeconds .second").text(a[1]),0==e||e.total<1e3){zo[t].poptin_trigger.close_trigger="timer",closePoptin(t);try{clearInterval(g)}catch(t){}}}else clearInterval(g)},f=jQ224(".poptin-popup[data-poptin-id="+t+"] .timer-container");if(u(),jQ224(".poptin-popup[data-poptin-id="+t+"] .flip-timer-container").length>0)var g=setInterval(u,1e3)}},Lt=function(t){var i=t.getTime()-(new Date).getTime();return{total:i,days:Math.floor(i/864e5),hours:Math.floor(i/36e5%24),minutes:Math.floor(i/1e3/60%60),seconds:Math.floor(i/1e3%60)}},Bt=function(t,i){return!(i.getTime()-(new Date).getTime()<=0||"Invalid Date"==i)},Et=function(t,i){a("poptinFormClickSubmit: "+t.poptin_id);try{jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"]').off("click")}catch(t){a(t)}jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"]').on("click",(function(e){try{jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"]').off("submit")}catch(t){a(t)}if(jQ224(e.target).hasClass("poptin-form-submit-button")||jQ224(e.target).parents(".poptin-form-submit-button").length>0)if("P"==jQ224(e.target).prop("tagName")||"P"==jQ224(e.target).parents(".poptin-form-submit-button").prop("tagName")||"DIV"==jQ224(e.target).prop("tagName")&&jQ224(e.target).hasClass("draggable")||"DIV"==jQ224(e.target).parents(".poptin-form-submit-button").prop("tagName")&&jQ224(e.target).parents(".poptin-form-submit-button").hasClass("draggable")||"IMG"==jQ224(e.target).prop("tagName")||"mobile"==t.poptin_type&&"format_1"==t.poptin_format||"mobile"==t.poptin_type&&"format_2"==t.poptin_format||"mobile"==t.poptin_type&&"format_6"==t.poptin_format||"mobile"==t.poptin_type&&"format_7"==t.poptin_format||"mobile"==t.poptin_type&&"format_11"==t.poptin_format)try{var o=jQ224("[data-poptin-id="+t.poptin_id+"]"),n=jQ224(e.target).parents('[data-poptin-id="'+t.poptin_id+'"].poptin-popup');if(jQ224(".poptin-popup").remove("active"),n.addClass("active"),e.preventDefault(),("mobile"==t.poptin_type&&"format_1"==t.poptin_format||"mobile"==t.poptin_type&&"format_6"==t.poptin_format||"mobile"==t.poptin_type&&"format_11"==t.poptin_format)&&(jQ224('[data-poptin-id="'+t.poptin_id+'"] a').hasClass("fa-phone-square")?zo[t.poptin_id].redirect_url=jQ224('[data-poptin-id="'+t.poptin_id+'"] .fa-phone-square').attr("href"):jQ224('[data-poptin-id="'+t.poptin_id+'"] a.call-link').length?zo[t.poptin_id].redirect_url=jQ224('[data-poptin-id="'+t.poptin_id+'"] .call-link').attr("href"):jQ224('[data-poptin-id="'+t.poptin_id+'"] .fa-phone').length?zo[t.poptin_id].redirect_url=jQ224('[data-poptin-id="'+t.poptin_id+'"] .fa-phone').parent().attr("href"):zo[t.poptin_id].redirect_url=jQ224('[data-poptin-id="'+t.poptin_id+'"] .fa-phone-square').parent().attr("href")),a("poptinFormTriggerSubmit"+t.poptin_id+" submit"),jQ224('[data-poptin-id="'+t.poptin_id+'"] .inputs-container [data-name="poptinDesignHiddenField"]').each((function(){jQ224(this).val(jQ224(this).val()||" ")})),"gamified"!=t.poptin_type||t.design_properties.disable_post_play_screen)p=jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinDraggableContainer form');else var p=jQ224('[data-poptin-id="'+t.poptin_id+'"] #poptinPlayScreen form');var r=p.find(".form-input-class.field-checkbox[data-action-required='true'] .checkbox-child-field input:checked"),s=p.find(".form-input-class.field-radio[data-action-required='true'] .radio-child-field input:checked"),d=p.find(".form-input-class.field-checkbox[data-action-required='true'] .checkbox-child-field input").first();0==r.length&&d.prop("required",!0).attr("required",!0);var l=p.find(".form-input-class.field-radio[data-action-required='true'] .radio-child-field input").first();0==s.length&&l.prop("required",!0).attr("required",!0);var c=n.find("input#poptinDesignInputTextFieldPhone");if(c.length&&"advanced"==c.attr("data-action-validate")){var _=!0;if(jQ224(".poptin-input-msg").remove(),(h=c.val())&&h.length&&null==h.match(/--+/g)&&0==h.replace(/(\d+|-)/g,"").length){var u=(h=h.replace(/-/g,"").toString()).substring(0,2),f=h.substring(0,3);(["02","03","04","08","09"].includes(u)&&null!=h.match(/^\w{3}\w{3}\w{3}$/g)||["050","051","052","053","054","055","058","072","073","074","076","077","079"].includes(f)&&null!=h.match(/^\w{3}\w{3}\w{4}$/g))&&(_=!1)}if(_){var g=parseInt(1e10*Math.random());jQ224(c).parent().append('<span id="m'+g+'" class="poptin-input-msg poptin-input-msg-4 poptin-input-error">מספר הטלפון שגוי</span>');var m=jQ224(c).parents(".draggable-container");return(z=parseFloat(o.attr("data-scale")))>=1?(m.addClass("has-poptin-input-msg"),m.append(jQ224("#m"+g).clone().attr("id","c"+g)),jQ224("#c"+g).css({top:(jQ224("#m"+g).offset().top-m.offset().top)/z+3,left:(jQ224("#m"+g).offset().left-m.offset().left)/z,width:parseInt(jQ224("#m"+g).css("width"))+10,height:parseInt(jQ224("#m"+g).css("height"))})):m.removeClass("has-poptin-input-msg"),!1}}else if(c.length&&"international"==c.attr("data-action-validate")){jQ224(".poptin-input-msg").remove();var h=c.val(),v=c.get(0),y="",b="+"===v.value[0]?intlTelInputUtils.numberFormat.INTERNATIONAL:intlTelInputUtils.numberFormat.NATIONAL,w=n.find(".iti__selected-flag .iti__flag").attr("class").slice(-2),j=intlTelInputUtils.formatNumber(v.value,w,b);v.value=j;var Q=window.intlTelInputGlobals.getInstance(v);if(v.value.length||"true"!=c.attr("data-action-required")?v.value.length&&!Q.isValidNumber()&&(y=ft()?"מספר לא תקין – יש לנסות שוב.":"Invalid number - please try again"):y=ft()?"יש להזין מספר טלפון תקין":"Please enter a valid phone number",jQ224(".poptin-input-msg").remove(),""!=y){g=parseInt(1e10*Math.random());jQ224(v).parent().append('<span id="m'+g+'" class="poptin-input-msg poptin-input-msg-5 poptin-input-error">'+y+"</span>");m=jQ224(v).parents(".draggable-container");return(z=parseFloat(o.attr("data-scale")))>=1?(m.addClass("has-poptin-input-msg"),m.append(jQ224("#m"+g).clone().attr("id","c"+g)),jQ224("#c"+g).css({top:(jQ224("#m"+g).offset().top-m.offset().top)/z+3,left:(jQ224("#m"+g).offset().left-m.offset().left)/z,width:parseInt(jQ224("#m"+g).css("width"))+10,height:parseInt(jQ224("#m"+g).css("height"))})):m.removeClass("has-poptin-input-msg"),!1}}var x=n.find("input#poptinDesignInputTextFieldEmail");if(x.length){var k=x.attr("data-action-validate"),C=(k=k||"check-typos").includes("typos"),S=k.includes("business");if(C||S){var I=!1;jQ224(".poptin-input-msg").remove();var T=x.val(),P="";if(T&&T.length&&(!C||/^[a-zA-Z0-9+._/\\\-@ ()\[\]]+$/.test(A=T)&&/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(\.[a-zA-Z]{2,})*$/.test(A)||(P=ft()?"יש שגיאות כתיב במייל.":"There are typos in the email",I=!0),S&&!function(t){var i=t.split("@")[1];return!fakeEmailDomains.includes(i)}(T)&&(P=ft()?"רק מיילים עסקיים מותרים.":"Only business emails are allowed",I=!0)),I){g=parseInt(1e10*Math.random());jQ224(x).parent().append('<span id="m'+g+'" class="poptin-input-msg poptin-input-msg-6 poptin-input-error">'+P+"</span>");m=jQ224(x).parents(".draggable-container");return(z=parseFloat(o.attr("data-scale")))>=1?(m.addClass("has-poptin-input-msg"),m.append(jQ224("#m"+g).clone().attr("id","c"+g)),jQ224("#c"+g).css({top:(jQ224("#m"+g).offset().top-m.offset().top)/z+3,left:(jQ224("#m"+g).offset().left-m.offset().left)/z,width:parseInt(jQ224("#m"+g).css("width"))+10,height:parseInt(jQ224("#m"+g).css("height"))})):m.removeClass("has-poptin-input-msg"),!1}}}var D=n.find("input#poptinDesignBirthdayField");if(D.length){jQ224(".poptin-input-msg").remove();var O=D.val();if(O)if(new Date(O)>=new Date){P=ft()?"יש להזין תאריך לידה תקין.":"Please enter a valid birthday.",g=parseInt(1e10*Math.random());D.parent().append('<span id="m'+g+'" class="poptin-input-msg poptin-input-msg-7 poptin-input-error">'+P+"</span>");var z;m=D.parents(".draggable-container");return(z=parseFloat(o.attr("data-scale")))>=1?(m.addClass("has-poptin-input-msg"),m.append(jQ224("#m"+g).clone().attr("id","c"+g)),jQ224("#c"+g).css({top:(jQ224("#m"+g).offset().top-m.offset().top)/z+3,left:(jQ224("#m"+g).offset().left-m.offset().left)/z,width:parseInt(jQ224("#m"+g).css("width"))+10,height:parseInt(jQ224("#m"+g).css("height"))})):m.removeClass("has-poptin-input-msg"),!1}}if(n.find(".poptin-input-error").length)return!1;if(p[0].checkValidity())Mo&&(Mo=!1,"gamified"==t.poptin_type&&"format_3"==t.poptin_format&&t.design_properties.disable_post_play_screen&&ee(t,!0),Jt(t,i),setTimeout((function(){Mo=!0}),Fo));else try{p[0].reportValidity()}catch(e){p.find("input, textarea").each((function(){jQ224(this)[0].checkValidity()}))}return!1}catch(i){Wi("poptinConversion()->call to mobile",i,"OK",!1,t)}else jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"]').on("submit",(function(e){return e.preventDefault(),a("poptinFormClickSubmit"+t.poptin_id+" submit"),Mo&&(Mo=!1,Jt(t,i),setTimeout((function(){Mo=!0}),Fo)),!1}));var A}))},Rt=function(t){jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .fr-shopify-item-btn a").on("click",(function(i){var e={};e.button_text=jQ224(this).text(),e.product_url=jQ224(this).attr("data-url"),e.product_name=jQ224(this).attr("data-product-name"),e.product_id=jQ224(this).attr("data-product-id"),e.variant_id=jQ224(this).attr("data-variant-id"),e.buttons_action=jQ224(this).attr("data-buttons-action"),t.shopify_product_settings=e,Gt(t,null,"shopify_products",this)}))},Ut=function(){if(window.ShopifyAnalytics){var t=window.ShopifyAnalytics.meta.page.pageType;if(void 0!==t&&"product"==t){var i=Hi("poptin_shopify_recent_product_id")?Ri("poptin_shopify_recent_product_id").split(","):[];if(ShopifyAnalytics.meta.product&&void 0!==ShopifyAnalytics.meta.selectedVariantId){var e=ShopifyAnalytics.meta.selectedVariantId.toString();(!i.includes(e)||i.length>2&&i[2]==e)&&i.unshift(e),i.length>3&&i.pop()}Ei("poptin_shopify_recent_product_id",i.join(","))}}},Ht=function(t,i){return new Promise((function(e,o){var n,p,a,r,s,d={};jQ224("input#shopifyProductsJSON").length>0&&(d=JSON.parse(jQ224("#shopifyProductsJSON").val())),i&&i.category&&(d=i);var l={category:null===(n=d)||void 0===n?void 0:n.category,products:null===(p=d)||void 0===p?void 0:p.manual_products,limit:"manual"==(null===(a=d)||void 0===a?void 0:a.category)?null===(r=d)||void 0===r?void 0:r.manual_products.length:null===(s=d)||void 0===s?void 0:s.count};if("last_visited"==l.category){var c,_,u=Hi("poptin_shopify_recent_product_id")?Ri("poptin_shopify_recent_product_id").split(","):[];if(l.products=u,l.limit=u.length<=(null===(c=d)||void 0===c?void 0:c.count)?u.length:null===(_=d)||void 0===_?void 0:_.count,d.category="manual",d.category_original="last_visited",d.manual_products=l.products,"undefined"!=typeof poptin_landing_page&&1==poptin_landing_page&&e({display:!0}),u.length<=0)return e({display:!1}),!1;u.length>0&&i&&e({display:!0}),i||Xt(t,d,(function(i){var o,n=null!=i&&null!==(o=i.data)&&void 0!==o&&o.products?i.data.products:[];window.shopifyProductCurrency=i.currency?i.currency:"USD",Wt(t.poptin_id,n,t),e({display:!0})}))}else"product_in_cart"==l.category?void 0!==window.Shopify&&window.Shopify.shop?jQ224.ajax({url:W()+"cart.js",type:"get",dataType:"json",async:!1},"json").done((function(o){o.items.length>0&&(productVariantIds=[],o.items.forEach((function(t){return productVariantIds.push(t.variant_id.toString())})),l.products=productVariantIds.reverse(),d.category="manual",d.manual_products=l.products.slice(0,3),i?e({display:!0}):Xt(t,d,(function(i){window.shopifyProductCurrency=i.currency?i.currency:"USD",Wt(t.poptin_id,i.data.products,t,productVariantIds),e({display:!0})}))),0==o.item_count&&null!=t&&t.is_teasers_on&&!i&&(d.category="product_collection",Xt(t,d,(function(i){window.shopifyProductCurrency=i.currency?i.currency:"USD",Wt(t.poptin_id,i.data.products,t),e({display:!0})})))})).fail((function(t){console.log("Failed to fetch shopify data"),o(t)})):"undefined"!=typeof poptin_landing_page&&1==poptin_landing_page&&e({display:!0}):"manual"!=l.category&&"product_collection"!=l.category||(e({display:!0}),i||Xt(t,d,(function(i){var o,n=null!=i&&null!==(o=i.data)&&void 0!==o&&o.products?i.data.products:[];window.shopifyProductCurrency=i.currency?i.currency:"USD",Wt(t.poptin_id,n,t),e({display:!0})})))}))},Xt=function(t,i,e){jQ224.ajax({url:le+"/api/display/shopify/product-recommendation/"+t.poptin_id,type:"post",data:i,async:!0},"json").done((function(t){1==t.success&&e(t)})).fail((function(t){console.log("Failed to fetch shopify data"),reject(t)}))},Wt=function(t,i,e,o){var n={vertical:{1:[100,150,200,250,300]},horizontal:{1:[150,180,200,280,350],2:[200,300,400,550,750],3:[400,450,620,680,800]}};if(e&&"fullpage"==e.poptin_type&&(n.horizontal[1]=[150,180,200,400,600],n.horizontal[2]=[250,300,400,800,100],n.horizontal[3]=[400,500,620,900,1200]),jQ224("#shopifyProductsJSON").length>0)var p=JSON.parse(jQ224("#shopifyProductsJSON").val());var a=0,r=[],s=[];s="last_visited"==p.category?Hi("poptin_shopify_recent_product_id")?Ri("poptin_shopify_recent_product_id").split(","):[]:"manual"==p.category?p.manual_products.length?p.manual_products:[]:"product_in_cart"==p.category&&null!=o&&o.length?o:[],i.length>0&&(i.forEach((function(t){t.variants&&t.variants.length>0&&t.variants.forEach((function(i){var e={};-1==s.indexOf(i.id.toString())&&0!=s||(e.product_id=t.id,e.variant_id=i.id,e.image=t.image,e.desc=t.body_html,e.title=t.title+(i.title&&"Default Title"!=i.title?" - "+i.title:""),e.handle=t.handle,e.inventory_quantity=i.inventory_quantity,e.price=i.presentment_prices&&i.presentment_prices.length>0&&i.presentment_prices[0].price&&i.presentment_prices[0].price.amount?i.presentment_prices[0].price.amount:i.price,e.currency_symbol=window.shopifyProductCurrency?window.shopifyProductCurrency:"USD",e.compare_at_price=i.compare_at_price,r.length<=3&&r.push(e))}))})),setTimeout((function(){var i={AED:"د.إ",AFN:"؋",ALL:"L",AMD:"֏",ANG:"ƒ",AOA:"Kz",ARS:"$",AUD:"$",AWG:"ƒ",AZN:"₼",BAM:"KM",BBD:"$",BDT:"৳",BGN:"лв",BHD:".د.ب",BIF:"FBu",BMD:"$",BND:"$",BOB:"$b",BOV:"BOV",BRL:"R$",BSD:"$",BTC:"₿",BTN:"Nu.",BWP:"P",BYN:"Br",BYR:"Br",BZD:"BZ$",CAD:"$",CDF:"FC",CHE:"CHE",CHF:"CHF",CHW:"CHW",CLF:"CLF",CLP:"$",CNY:"¥",COP:"$",COU:"COU",CRC:"₡",CUC:"$",CUP:"₱",CVE:"$",CZK:"Kč",DJF:"Fdj",DKK:"kr",DOP:"RD$",DZD:"دج",EEK:"kr",EGP:"£",ERN:"Nfk",ETB:"Br",ETH:"Ξ",EUR:"€",FJD:"$",FKP:"£",GBP:"£",GEL:"₾",GGP:"£",GHC:"₵",GHS:"GH₵",GIP:"£",GMD:"D",GNF:"FG",GTQ:"Q",GYD:"$",HKD:"$",HNL:"L",HRK:"kn",HTG:"G",HUF:"Ft",IDR:"Rp",ILS:"₪",IMP:"£",INR:"₹",IQD:"ع.د",IRR:"﷼",ISK:"kr",JEP:"£",JMD:"J$",JOD:"JD",JPY:"¥",KES:"KSh",KGS:"лв",KHR:"៛",KMF:"CF",KPW:"₩",KRW:"₩",KWD:"KD",KYD:"$",KZT:"₸",LAK:"₭",LBP:"£",LKR:"₨",LRD:"$",LSL:"M",LTC:"Ł",LTL:"Lt",LVL:"Ls",LYD:"LD",MAD:"MAD",MDL:"lei",MGA:"Ar",MKD:"ден",MMK:"K",MNT:"₮",MOP:"MOP$",MRO:"UM",MRU:"UM",MUR:"₨",MVR:"Rf",MWK:"MK",MXN:"$",MXV:"MXV",MYR:"RM",MZN:"MT",NAD:"$",NGN:"₦",NIO:"C$",NOK:"kr",NPR:"₨",NZD:"$",OMR:"﷼",PAB:"B/.",PEN:"S/.",PGK:"K",PHP:"₱",PKR:"₨",PLN:"zł",PYG:"Gs",QAR:"﷼",RMB:"￥",RON:"lei",RSD:"Дин.",RUB:"₽",RWF:"R₣",SAR:"﷼",SBD:"$",SCR:"₨",SDG:"ج.س.",SEK:"kr",SGD:"S$",SHP:"£",SLL:"Le",SOS:"S",SRD:"$",SSP:"£",STD:"Db",STN:"Db",SVC:"$",SYP:"£",SZL:"E",THB:"฿",TJS:"SM",TMT:"T",TND:"د.ت",TOP:"T$",TRL:"₤",TRY:"₺",TTD:"TT$",TVD:"$",TWD:"NT$",TZS:"TSh",UAH:"₴",UGX:"USh",USD:"$",UYI:"UYI",UYU:"$U",UYW:"UYW",UZS:"лв",VEF:"Bs",VES:"Bs.S",VND:"₫",VUV:"VT",WST:"WS$",XAF:"FCFA",XBT:"Ƀ",XCD:"$",XOF:"CFA",XPF:"₣",XSU:"Sucre",XUA:"XUA",YER:"﷼",ZAR:"R",ZMW:"ZK",ZWD:"Z$",ZWL:"$"},o=ft()?"יחידות במלאי":"remaining items";r.forEach((function(e){var n=jQ224(".poptin-popup[data-poptin-id="+t+"] .fr-shopify-products .fr-shopify-item:nth-child("+(a+1)+")"),r=e.currency_symbol?e.currency_symbol:"USD",s=i[r];if(e.image&&e.image.src?n.find(".fr-shopify-item-img img").attr("src",e.image.src):n.find(".fr-shopify-item-img img").attr("src",_e+"/css/images/v_2/product-no-img.png"),e.title?(e.title.length>50&&(e.title=e.title.substring(0,50)+"..."),n.find(".fr-shopify-item-title").text(e.title)):n.find(".fr-shopify-item-title").css("display","none"),e.desc?n.find(".fr-shopify-item-desc").text(e.desc):n.find(".fr-shopify-item-desc").text("").css("display","none"),e.handle){var d=window.location.origin+"/products/"+e.handle;e.variant_id&&(d=d+"?variant="+e.variant_id),n.find(".fr-shopify-item-btn a").attr("data-url",d)}e.price?n.find(".fr-shopify-item-price .before-disc").text(s+e.price):n.find(".fr-shopify-item-price .before-disc").css("display","none"),e.price?n.find(".fr-shopify-item-price .after-disc").text(s+e.compare_at_price):n.find(".fr-shopify-item-price .after-disc").css("display","none"),e.inventory_quantity?n.find(".fr-shopify-item-inventory-quantity").text(e.inventory_quantity+" "+o):n.find(".fr-shopify-item-inventory-quantity").css("display","none"),n.find(".fr-shopify-item-btn a").attr("data-product-name",e.title),n.find(".fr-shopify-item-btn a").attr("data-product-id",e.product_id),n.find(".fr-shopify-item-btn a").attr("data-variant-id",e.variant_id),n.find(".fr-shopify-item-btn a").attr("data-buttons-action",p.buttons_action),a+=1}));var s=3;p.count<3&&(s=p.count),("manual"==p.category&&r.length<=3||r.length<p.count)&&(s=r.length),function(i,o){var a=jQ224(".poptin-popup[data-poptin-id="+t+"]  .froala-shopify-wrapper").attr("data-size");a=a?a.split("-")[1]:"3",1==o?jQ224(".poptin-popup[data-poptin-id="+t+"] .fr-shopify-products .fr-shopify-item:not(:first-child)").remove():2==o&&jQ224(".poptin-popup[data-poptin-id="+t+"] .fr-shopify-products .fr-shopify-item:not(:first-child):not(:nth-child(2))").remove();if(jQ224(".poptin-popup[data-poptin-id="+t+"]  .froala-shopify-wrapper").css("width",n[i][o][a-1]+"px"),r.length<p.count&&"manual"!=p.category){var s=jQ224("[data-poptin-id="+e.poptin_id+"]").width()-jQ224("[data-poptin-id="+e.poptin_id+"] .froala-shopify-wrapper").width();jQ224("[data-poptin-id="+e.poptin_id+"] .froala-shopify-wrapper").css({left:s/2+"px"})}}("horizontal",s)}),500))},qt=function(t){a("ifLinkConversion"),jQ224("[data-poptin-id="+t.poptin_id+"]").find("#redirectBlank").length>0?(a("ifLinkConversion1"),ti(t,"click","#redirectBlank")):jQ224("[data-poptin-id="+t.poptin_id+"]").find(".redirect-url-blank").length>0?(a("ifLinkConversion2"),ti(t,"click",".redirect-url-blank")):t.gamified_prize&&1==t.gamified_prize.redirect_to&&null!=t.gamified_prize.redirect_to_options.redirect_to_url&&(a("ifLinkConversion3"),ti(t,"direct","gamified"))},Jt=function(t,i){var e=jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"] .inputs-container');if(!function(t,i){var e=!1,o=0,n=jQ224("[data-poptin-id="+t.poptin_id+"] #poptinFormSubmit"+t.poptin_id+" .poptin-design-fields-form:not(#poptinDesignInputTextFieldCheckbox)");return n.length>0?n.each((function(t){var i=this.value;0==o&&(jQ224("#"+this.id).is(":checked")||"checkbox"!=jQ224("#"+this.id).attr("type")&&"radio"!=jQ224("#"+this.id).attr("type")?"checkbox"==jQ224("#"+this.id).attr("type")&&"radio"==jQ224("#"+this.id).attr("type")||""===i||(e=!0,o=1):e=!1)})):e=!0,e}(t)){Eo||(e.addClass("poptin__animated animate__shakeX"),setTimeout((function(){e.removeClass("poptin__animated"),e.removeClass((function(t,i){return(i.match(/\banimate_\S+/g)||[]).join(" ")}))}),1e3));var o=jQ224('[data-poptin-id="'+t.poptin_id+'"] [id="poptinFormSubmit'+t.poptin_id+'"]'),n=o.find("input#poptinDesignInputTextFieldEmail");if(1==n.length)n.attr("data-border",n.css("border")),n.css("border","none").addClass("empty-field");else{var p=o.find(".inputs-container input").first();p.attr("data-border",p.css("border")),p.css("border","none").addClass("empty-field")}return function(t){try{jQ224("[data-poptin-id="+t.poptin_id+"] .inputs-container input").off("keyup keydown")}catch(t){a(t)}jQ224("[data-poptin-id="+t.poptin_id+"] .inputs-container input").on("keyup",(function(t){if(jQ224(this).hasClass("empty-field")){jQ224(this).removeClass("empty-field");var i=jQ224(this).attr("data-border");i&&jQ224(this).css("border",i)}}))}(t),!1}a("submitPoptin: "+t.poptin_id),zo[t.poptin_id].poptin_trigger.convert=!0;try{Gt(t,i)}catch(i){Wi("submitPoptin()->poptinConversion()",i,"","",t),Zt(t)}if(t.poptin_type+"_"+t.poptin_format!="social_format_2"&&t.poptin_type+"_"+t.poptin_format!="social_format_6"&&t.poptin_type+"_"+t.poptin_format!="sside_format_19"&&oi(t,i),"gamified"==t.poptin_type&&t.gamified_prize&&1==t.gamified_prize.redirect_to&&null!=t.gamified_prize.redirect_to_options.redirect_to_url)if(a("ifLinkConversion3"),"format_3"==t.poptin_format&&t.design_properties.disable_post_play_screen){var r=t.gamified_prize.redirect_to_options.redirect_close_delay;setTimeout((function(){ti(t,"direct","gamified")}),r?1e3*(parseInt(r)+(t.design_properties.disable_post_play_screen?8:0)):1e3*(t.wheel_has_coupon?3*Qo:Qo))}else ti(t,"direct","gamified")},Gt=function(t,i){var e,o,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",p=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;jQ224(".poptin-input-autofill").remove(),jQ224(".poptin-input-suggestion").remove(),a("poptinConversion: "+t.poptin_id),jQ224('[data-poptin-id="'+t.poptin_id+'"].poptin-popup').addClass("poptin-submitted");var r=jQ224('[data-poptin-id="'+t.poptin_id+'"].poptin-popup div#'+(""!=n?n:"poptinFormSubmitText")),s="";r.length&&"coupon"!=n?s=(r=r.first()).text().trim():"shopify_products"==n&&(s=t.shopify_product_settings.button_text);var d={event_name:"poptinSubmit",button_text:s};if("shopify_products"==n&&(d.shopify=t.shopify_product_settings),"coupon"!=n){var c=new CustomEvent("poptinSubmit",{bubbles:!0,detail:Tt(t,d)});document.dispatchEvent(c),"function"==typeof onpoptinSubmit&&onpoptinSubmit(t.poptin_id),jQ224("[data-poptin-id="+t.poptin_id+"] #poptinFormSubmit"+t.poptin_id+" .poptin-design-fields-form").each((function(t){-1!==this.id.indexOf("FreeField")&&(jQ224(this).css("display","none"),val=jQ224(this).val(),placeolder=jQ224(this).attr("placeholder"),jQ224(this).val("a:"+placeolder+"=&=b:"+val))}))}trigger=null==t.auto_pilot_trigger?"false":t.auto_pilot_trigger,checkbox_checked=jQ224('[data-poptin-id="'+t.poptin_id+'"] form > #poptinDesignInputTextFieldCheckbox input').prop("checked"),poptin_params={url:window.location.href,p_target:t.poptin_target,checkbox_checked,referrer:ui(),previous_url:fi(),trigger,poptin_id:t.poptin_id,title:document.title,client_id:l(),visitor:Eo?"mobile":"desktop",facebook_messanger_data_ref:Ko,origin_landing_page:yi(),previous_visited_pages:w(),previous_visited_pages_with_current_page:k(),previous_visited_pages_with_time_stamp:Q(),all_visited_pages:j(),store_integration:wn,store_integration_customer_id:jn,browser_language:window.navigator.language,operating_system:(null===(e=window.navigator)||void 0===e||null===(e=e.userAgentData)||void 0===e?void 0:e.platform)||(null===(o=window.navigator)||void 0===o?void 0:o.platform)||"Unknown"};var _=new Array,u=["poptinDesignInputTextFieldName","poptinDesignInputTextFieldEmail","poptinDesignInputTextFieldPhone","poptinDesignInputTextFieldMessage","poptinDesignInputTextFieldCheckbox"],f={},g={},m=jQ224("[data-poptin-id="+t.poptin_id+"].active").length?".active":"";if("coupon"!=n){for(var h in jQ224("[data-poptin-id="+t.poptin_id+"]"+m+" #poptinFormSubmit"+t.poptin_id+" .poptin-design-fields-form").each((function(){var t=!1,i=this.type,e=this.id,o=this.name,n=this.value,p=(n=jQ224(this).attr("data-array-value")?JSON.parse(n):n,jQ224(this).attr("data-placeholder")||jQ224(this).attr("placeholder")||o);if(jQ224.inArray(o,u)>-1||o.indexOf("FreeField")>-1&&-1==this.id.indexOf("poptinDesignInputTextFieldText")){"checkbox"===i||"poptinDesignInputTextFieldMessage"==o&&("select-multiple"===i||"select-one"===i)?(In[o]||(In[o]=[]),"select-one"===i||"select-multiple"===i?jQ224(this).find("option:selected").each((function(){var t=jQ224(this).val();In[o].includes(t)||In[o].push(t)})):"checkbox"===i&&jQ224(this).get(0).checked&&(In[o].includes(n)||In[o].push(n)),n=In[o]):"radio"===i&&(jQ224(this).get(0).checked||(t=!0)),"poptinDesignInputTextFieldPhone"==o&&void 0!==jQ224(this).attr("data-int-phone")&&(n=jQ224(this).attr("data-int-phone")),t||(poptin_params[o]=n,_.push({type:i,name:o.split("poptinDesignInput")[1].toLowerCase(),placeholder:p,value:n}))}else{if("radio"!=i&&"checkbox"!=i||(this.checked||(t=!0),p=jQ224(this).parentsUntil(".child-field-wrapper").parent().siblings("label.child-field-question").text(),n=jQ224(this).val()),jQ224(this).is("select")){p=jQ224(this).attr("data-placeholder");var a=jQ224(this).find(":selected");if(a.length&&a.attr("id")&&"-child-default"!=a.attr("id").substr(-14)?n=jQ224(this).find(":selected").val():t=!0,"true"==jQ224(this).attr("data-multiple")){jQ224(this).attr("multiple","true");var r=jQ224(this).parents(".field-multi-select").attr("id");r=r.includes("poptinDesignInputCustomField-")?r.split("poptinDesignInputCustomField-")[1]:r,t=!(n=In[r])}}0==t&&jQ224(this).parents(".form-input-class").hasClass("prop-boolean")&&(n="1"==n),"date"==jQ224(this).attr("data-input-type")&&""==n&&(t=!0),t||("checkbox"!=i&&"radio"!=i||(e=o),null==f[o]?(n="poptinDesignInputTextFieldCheckbox"==o?checkbox_checked:n,f[o]={id:e,type:i,name:o,placeholder:p,value:n},"poptinDesignInputCustomField-CUSTOM_UTM_"!=o.substring(0,40)||jQ224(this).hasClass("has-updated")||(n=lt(o.substring(36),!0))&&(f[o].value=n)):"checkbox"==i?(Array.isArray(f[o].value)||(f[o].value=[f[o].value]),f[o].value.push(n)):f[o].placeholder=f[o].placeholder+", "+p),o in g||(g[o]={id:e,type:i,name:o,placeholder:p,value:""}),_.push(f[o])}})),jQ224(_).each((function(){var i=this.value,e=this.name.replace(/textfield/g,"");e="{{_"+e+"}}",jQ224("[data-poptin-id="+t.poptin_id+"]").find(".froala-editor-text, .froala-editor-ticker").each((function(){var t=new RegExp(e,"gm");jQ224(this).find(".fr-marker").remove(),jQ224(this).html(jQ224(this).html().replace(t,i))}))})),f=f||{},g)h in f||(f[h]=g[h]);try{f=Object.values(f)}catch(t){var v=Object.keys(f).map((function(t){return f[t]}));f=v}var y={text:0,number:0,textarea:0,date:0,url:0,radio:0,checkbox:0,hidden:0,tel:0,select:0},b={},x={},C={};if(jQ224(f).each((function(i){var e=f[i].type,o=f[i].name,n=f[i].id,p=f[i].value,a=f[i].placeholder;if(n.includes("-child-")&&(n=n.split("-child-")[0]),"radio"===e){var r=o.includes("-child-")?o.split("-child-")[0]:o;void 0===b[r]&&(b[r]={id:n,type:"radio",name:r,placeholder:a,value:""});var s=jQ224("#"+f[i].id).closest(".form-input-class"),d=s.length&&s.hasClass("prop-boolean"),l=jQ224('input[name="'.concat(r,'"]')).filter(":checked"),c=l.length>0,_=c?l.val():"";b[r].value=c?d?"1"===_||"true"===_:_:"",delete f[i]}if("checkbox"===e){var u=o;void 0===x[u]&&(x[u]={id:n,type:"checkbox",name:u,placeholder:a,values:[],value:[]}),Array.isArray(p)?x[u].values=p:p&&x[u].values.push(p),delete f[i]}e.indexOf("select")>-1&&(e="select"),("url"==jQ224(f[i]).attr("data-input-type")||o.indexOf("poptinDesignWebsiteField")>-1)&&(e="url"),("date"==jQ224(f[i]).attr("data-input-type")||o.indexOf("poptinDesignDateField")>-1)&&(e="date"),y[e]=y[e]+1,"poptinDesignInputTextFieldCheckbox"==n?o="consent":"poptinDesignInputTextFieldFirstName"==n?C[o="first_name"]=p:"poptinDesignInputTextFieldLastName"==n?C[o="last_name"]=p:o=e+"_"+y[e],f[i]&&"radio"!==e&&"checkbox"!==e&&(f[i].id=n,f[i].name=o,f[i].type=e,f[i].value=p),"hidden"==e&&p&&p.indexOf("{{prize_code}}")>-1&&(f[i].name="prize_code",f[i].value=t.gamified_prize?t.gamified_prize.code:""),"hidden"==e&&p&&p.indexOf("{{prize_label}}")>-1&&(f[i].name="prize_label",f[i].value=t.gamified_prize?t.gamified_prize.label:"")})),f=f.filter((function(t){return void 0!==t})),Object.values(b).forEach((function(t){f.push(t)})),Object.values(x).forEach((function(t){t.value=t.values.length>0?t.values:[],delete t.values,f.push(t)})),t.shopify_product_settings&&t.shopify_product_settings.product_name){var S={id:"poptinShopifyRecomProductName",name:"product_name",placeholder:"Product name",type:"hidden",value:t.shopify_product_settings.product_name};f.push(S)}C.first_name&&C.last_name&&(poptin_params.poptinDesignInputTextFieldName=C.first_name+" "+C.last_name),poptin_params.newExtraFields=JSON.stringify(f),poptin_params.leader_request_cookie=mi(),poptin_params.extra_button=n,poptinSubmitted[t.poptin_id]={poptin_id:poptin_params.poptin_id,client_id:void 0!==poptin_params.client_id?poptin_params.client_id:"",referrer:poptin_params.referrer,previous_url:poptin_params.previous_url,page_title:poptin_params.title,page_url:poptin_params.url,consent:poptin_params.checkbox_checked,previous_visited_pages:poptin_params.previous_visited_pages,previous_visited_pages_with_current_page:poptin_params.previous_visited_pages_with_current_page,previous_visited_pages_with_time_stamp:poptin_params.previous_visited_pages_with_time_stamp,all_visited_pages:poptin_params.all_visited_pages,fields:_}}"coupon"==n&&(poptin_params.coupon=t.design_properties.coupon,poptin_params.extra_button="coupon"),ko[t.poptin_id]&&void 0!==ko[t.poptin_id].poptin_view_id&&(poptin_params.poptin_view_id=ko[t.poptin_id].poptin_view_id),tn=ei(t),a(poptin_params),bn!==t.poptin_id&&jQ224.ajax({type:"GET",async:!0,cache:!0,data:poptin_params,url:le+"/api/display/conversion/"+t.viewer_id,success:function(i){if(a("poptinConversion()->success()"),i.success)try{ai(t,i,n),void 0!==poptin_params.poptinDesignInputTextFieldEmail&&localStorage.setItem("poptin_converted_email",poptin_params.poptinDesignInputTextFieldEmail.toLowerCase());var e=Ni();e.length>0&&jQ224.each(e,(function(t,i){Qi("closed",i.value)}))}catch(e){Wi("poptinConversion()->handleConversionSuccess",e,"OK",i,t,poptin_params)}},error:function(i,e,o){Wi("poptinConversion()->error()",o,e,i.responseText,t)},complete:function(i){if("coupon"!=n){if(a("poptinConversion()>complete()"),"shopify"==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-redirect-poptin")&&("undefined"==typeof Shopify||t.shopify_product_settings&&t.shopify_product_settings.product_url||1==t.design_properties.poptin_design_thank_screen||(a("handeShopifyAddToCart()"),Kt(t,!0,"",n,p))),"undefined"!=typeof Shopify&&t.shopify_product_settings&&t.shopify_product_settings.product_url&&"no_buttons"!=t.shopify_product_settings.buttons_action)return a("redirectShopifyProducts"),Vt(t),!1;""!==n?pe(t,p):Zt(t)}}},"JSON")},Yt=function(t){jQ224(".poptin-popup[data-poptin-id="+t+"], .poptin-popup-background[data-poptin-id="+t+"]").remove()},Vt=function(t){if("add_to_cart"==t.shopify_product_settings.buttons_action||"add_to_cart_redirect"==t.shopify_product_settings.buttons_action)jQ224.ajax({url:"/cart/add.js",type:"POST",async:!1,data:{items:[{quantity:1,id:t.shopify_product_settings.variant_id}]},complete:function(i){"add_to_cart_redirect"==t.shopify_product_settings.buttons_action?window.location.href=window.location.origin+"/cart":"add_to_cart"==t.shopify_product_settings.buttons_action&&window.location.reload()}});else if("redirect"==t.shopify_product_settings.buttons_action||"redirect_blank"==t.shopify_product_settings.buttons_action)if("redirect_blank"==t.shopify_product_settings.buttons_action){var i="poptin_spr_"+t.shopify_product_settings.product_id+"_"+t.shopify_product_settings.variant_id,e='<a id="'+i+'" href="'+t.shopify_product_settings.product_url+'" target="_blank"></a>';jQ224("body").append(e),jQ224("#"+i)[0].click(),jQ224("#"+i)[0].remove()}else window.location.href=t.shopify_product_settings.product_url;closePoptin(t.poptin_id)},Kt=function(t,i){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(a("handeShopifyAddToCart: "+t.poptin_id),i)var p=null!=t.design_properties.add_to_cart?t.design_properties.add_to_cart.split("@"):"";else if("poptinForm2ndlinkbtnText"===e)p=null!=t.design_properties.shopify_add_to_cart_2?t.design_properties.shopify_add_to_cart_2.split("@"):"";else if("poptinForm3ndlinkbtnText"===e)p=null!=t.design_properties.shopify_add_to_cart_3?t.design_properties.shopify_add_to_cart_3.split("@"):"";else if("poptinForm4thlinkbtnText"===e)p=null!=t.design_properties.shopify_add_to_cart_4?t.design_properties.shopify_add_to_cart_4.split("@"):"";else if("poptinForm5thlinkbtnText"===e)p=null!=t.design_properties.shopify_add_to_cart_5?t.design_properties.shopify_add_to_cart_5.split("@"):"";else if("poptinForm6thlinkbtnText"===e)p=null!=t.design_properties.shopify_add_to_cart_6?t.design_properties.shopify_add_to_cart_6.split("@"):"";if(p&&Array.isArray(p)){var r=p[0]||0,s=p[1]||0,d=parseInt(p[2])||0;p[3];jQ224.ajax({url:"/cart/add.js",type:"POST",async:!1,data:{items:[{quantity:s,id:r}]},statusCode:{422:function(t,i,e){console.log("422 error")}},complete:function(t){if(1===d){var i="/"==W()?"":W(),e=window.location.protocol+"//"+Shopify.shop+i+"/cart";window.location.assign(e)}else window.location.reload()}})}else""!==o?pe(t,n):Zt(t)},Zt=function(t){a("redirectAfterConversion: "+t.poptin_id);var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]");null==zo[t.poptin_id].redirect_flag||zo[t.poptin_id].redirect_flag||("true"!=(i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]")).attr("data-redirect-poptin")&&"shopify"!=i.attr("data-redirect-poptin")||13!=i.attr("data-redirect-poptin-id").length)&&setTimeout((function(){void 0===zo[t.poptin_id].redirect_url||null==zo[t.poptin_id].redirect_flag||zo[t.poptin_id].redirect_flag||("true"==i.attr("data-redirect-poptin")&&13==i.attr("data-redirect-poptin-id").length||"true"!=i.attr("data-redirect-poptin"))&&ti(t,"direct",!1)}),50);"mobile"==t.poptin_type&&("format_1"==t.poptin_format||"format_6"==t.poptin_format||"format_11"==t.poptin_format||"true"!=i.attr("data-redirect-poptin")&&"shopify"!=i.attr("data-redirect-poptin")&&void 0!==t.design_properties.poptin_design_redirect)&&setTimeout((function(){ti(t,"direct",!1)}),50)},ti=function(t,i,e){if(a("poptinRedirectToUrl"),t.design_properties.poptin_design_redirect_send_form_data)if(a("poptinRedirectToUrl1"),"click"==i){a("poptinRedirectToUrl1.1");var o=jQ224("[data-poptin-id="+t.poptin_id+"]").find(e).attr("href");tn=""==tn?ei(t):tn;var n=(o=ii(o,tn)).split("?"),p=n[0];n.shift();var r=o=p+"?"+n.join("&"),s=0;Eo&&(a("poptinRedirectToUrl1.1 ifMobilePoptin"),jQ224("[data-poptin-id="+t.poptin_id+"]").append('<a id="poptin-mob-redirection-'+t.poptin_id+'" href="'+r+'" style="display:none"></a>'),document.getElementById("poptin-mob-redirection-"+t.poptin_id).click()),null!=t.design_properties.poptin_design_thank_screen&&null!=t.design_properties.poptin_design_thank_screen_auto_close&&null!=t.design_properties.poptin_design_thank_screen_auto_close_sec&&(s=parseInt(t.design_properties.poptin_design_thank_screen_auto_close_sec)),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"]").find(e).attr("href",o),jQ224("[data-poptin-id="+t.poptin_id+"]").find(e)[0].click(),zo[t.poptin_id].redirect_flag=!0}),1e3*s)}else{a("poptinRedirectToUrl1.2");var d=zo[t.poptin_id].redirect_url+tn;Eo&&(jQ224("[data-poptin-id="+t.poptin_id+"]").append('<a id="poptin-mob-redirection-'+t.poptin_id+'" href="'+d+'" style="display:none"></a>'),document.getElementById("poptin-mob-redirection-"+t.poptin_id).click()),setTimeout((function(){window.location.href=d}),200)}else{var l=jQ224("[data-poptin-id="+t.poptin_id+"]").find(".redirect-url-blank").prop("target");if(a("poptinRedirectToUrl2"),"click"===i){a("poptinRedirectToUrl2.1"),zo[t.poptin_id].redirect_flag=!0;s=0;null!=t.design_properties.poptin_design_thank_screen&&null!=t.design_properties.poptin_design_thank_screen_auto_close&&null!=t.design_properties.poptin_design_thank_screen_auto_close_sec&&(s=parseInt(t.design_properties.poptin_design_thank_screen_auto_close_sec)),setTimeout((function(){a("poptinRedirectToUrl2.1 timeout");var i=window.location.href,o=window.location.pathname+window.location.search,n=zo[t.poptin_id].redirect_url,p=jQ224("[data-poptin-id="+t.poptin_id+"]").find(e),r=p.prop("target"),s=p.attr("href");"_BLANK"==r&&n?(n=(n=(n=(n=n.replace("{conversion_url}","conversion_url="+encodeURI(i))).replace("%7Bconversion_url%7D","conversion_url="+encodeURI(i))).replace("{path_url}","path_url="+encodeURI(o))).replace("%7Bpath_url%7D","path_url="+encodeURI(o)),window.open(n,"_blank")):"_BLANK"==r?window.open(s,"_blank"):window.location.href=s,Eo&&n&&(a("poptinRedirectToUrl2.1 timeout ifMobilePoptin"),jQ224("[data-poptin-id="+t.poptin_id+"]").append('<a id="poptin-mob-redirection-'+t.poptin_id+'" href="'+n+'" style="display:none"></a>'))}),1e3*s)}else if("gamified"===e){a("poptinRedirectToUrl2.2");var c=t.wheel_has_coupon?3*Qo:Qo;t.gamified_prize&&1==t.gamified_prize.redirect_to&&1==t.gamified_prize.redirect_to_options.redirect_close&&null!=t.gamified_prize.redirect_to_options.redirect_close_delay&&(c=parseInt(t.gamified_prize.redirect_to_options.redirect_close_delay)),setTimeout((function(){window.location.href=t.gamified_prize.redirect_to_options.redirect_to_url}),1e3*c)}else{a("poptinRedirectToUrl2.3");var _=zo[t.poptin_id].redirect_url;Eo&&(a("poptinRedirectToUrl2.2 ifMobilePoptin"),jQ224("[data-poptin-id="+t.poptin_id+"]").append('<a id="poptin-mob-redirection-'+t.poptin_id+'" href="'+_+'" style="display:none"></a>'),document.getElementById("poptin-mob-redirection-"+t.poptin_id).click()),l&&"_blank"===l.toLowerCase()?window.open(_,"_blank"):setTimeout((function(){window.location.href=_}),200)}}},ii=function(t,i){return new_conversion_query=i,a("url.indexOf('?')",t.indexOf("?")),-1!==t.indexOf("?")&&(new_conversion_query="?"==i[0]?"&"+i.slice(1):i),t+new_conversion_query},ei=function(t){var i=new Array,e=new Array,o={},p=new Array;for(var a in jQ224("[data-poptin-id="+t.poptin_id+"] #poptinFormSubmit"+t.poptin_id+" .poptin-design-fields-form").each((function(){var t="",i=0,a=this.type,r=this.id,s=this.name,d="",l=jQ224(this).attr("placeholder"),c=this.value;if(void 0===p[s]&&(p[s]=""),s.indexOf("poptinDesignInputTextField")>=0?(t=s.split("poptinDesignInputTextField")[1],"poptinDesignInputTextFieldCheckbox"==r?(t="consent",p[s]=this.checked?"yes":"no"):p[s]=c,i=1):s.indexOf("poptinDesignInputFreeField")>=0?(t=s.split("poptinDesignInput")[1],p[s]=c.indexOf("=&=b:")>-1?c.split("=&=b:")[1]:c,i=o[t]=(o[t]||0)+1):s.indexOf("poptinDesignRadioField")>=0||s.indexOf("poptinDesignCheckboxField")>=0?this.checked&&(t=s,p[s]=c.indexOf("=&=b:")>-1?c.split("=&=b:")[1]:c,i=o[t]=(o[t]||0)+1):"SELECT"==this.tagName?(t=l,p[s]=c):(r.includes("poptinDesignInputCustomField-CUSTOM_")?d=r.split("poptinDesignInputCustomField-CUSTOM_")[1]:r.includes("poptinDesignPreferenceField")?(s="poptinDesignPreferenceField",d="Preference"):d=l,t=null==s?this.tagName:s,"checkbox"==a?("string"==typeof p[s]&&(p[s]=new Array),this.checked&&p[s].push(c)):"radio"==a?this.checked&&(p[s]=c):p[s]=c,i=o[this.type]=(o[this.type]||0)+1),"true"==jQ224(this).attr("data-multiple")){var _=jQ224(this).parent(),u=[],f=[];_.find('.poptin-multi-select input[type="checkbox"]:checked').each((function(){u.push(jQ224(this).parent().text().trim()),f.push(jQ224(this).val())})),p[s]=f.join(",")}""!==(t=t?t.toLowerCase().replace(/[^a-zA-Z0-9]/g,"_").replace(/_+/g,"_").replace(/^_+|_+$/g,""):"")&&""!==p[s]&&(p[s]=(p[s],p[s]),e[t]=e[t]?e[t]:new Array,s.indexOf("poptinDesignSelectField")>-1&&(a="select"),s.indexOf("poptinDesignWebsiteField")>-1&&(a="url"),e[t]=n(n(n(n(n({count:i,type:a,id:r,field_key:t},"type",a),"name",s),"short_name",d),"placeholder",l),"value",p[s]))})),e)if(e.hasOwnProperty(a)){var r=e[a];a.indexOf("poptindesign")>-1&&(a=r.short_name&&""!=r.short_name?r.short_name.toLowerCase():r.type+"_"+r.count),i.push(encodeURI(a)+"="+encodeURI(r.value))}return query_fields=i.length>0?"?"+i.join("&"):"",query_fields},oi=function(t,i){var e=0;if(a("afterPoptinSubmit: "+t.poptin_id),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").find("audio, video").remove(),"shopify"!=jQ224("[data-poptin-id="+t.poptin_id+"]").attr("data-redirect-poptin")&&void 0!==t.design_properties.poptin_design_redirect&&("mobile"==t.poptin_type&&null!=t.design_properties.poptin_design_redirect_url.match(/^[0-9*+-]+$/)?(redirect_phone=t.design_properties.poptin_design_redirect_url,zo[t.poptin_id].redirect_url=redirect_phone.match("^tel:")?redirect_phone:"tel:"+redirect_phone):t.poptin_type+"_"+t.poptin_format!="social_format_2"&&t.poptin_type+"_"+t.poptin_format!="social_format_6"&&t.poptin_type+"_"+t.poptin_format!="sside_format_19"&&(redirect_url=t.design_properties.poptin_design_redirect_url,redirect_url.match("^tel:")||redirect_url.match("^sms:")?zo[t.poptin_id].redirect_url=redirect_url:zo[t.poptin_id].redirect_url=/^https?:\/\//i.test(redirect_url)?redirect_url:"http://"+redirect_url,zo[t.poptin_id].redirect_flag=!1)),null!=t.design_properties.poptin_design_thank_screen){if(null!=t.design_properties.poptin_design_thank_screen_auto_close?null==i?zo[t.poptin_id].poptin_trigger.close_thank_screen_sec=null!=t.design_properties.poptin_design_thank_screen_auto_close_sec?parseInt(t.design_properties.poptin_design_thank_screen_auto_close_sec):5:e=null!=t.design_properties.poptin_design_thank_screen_auto_close_sec?parseInt(t.design_properties.poptin_design_thank_screen_auto_close_sec):5:null==i?zo[t.poptin_id].poptin_trigger.close_thank_screen_sec=60:e=600,"fullpage"==t.poptin_type){var o=jQ224("[data-poptin-id="+t.poptin_id+"] > #closeXButton").css("left");jQ224("[data-poptin-id="+t.poptin_id+"] > #closeXButton").remove();var n=jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen #closeXButton").get(0).outerHTML;jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen #closeXButton").remove(),jQ224("[data-poptin-id="+t.poptin_id+"]").prepend(n),jQ224("#closeXButton, #closeSkipButton").each((function(){jQ224(this).css({position:"fixed",right:"auto",left:o,margin:"auto"})}))}jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").css("display","none").find(".draggable.image-change-video").remove(),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").show(100),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800),t.poptin_type in Zo&&Zo[t.poptin_type]>=parseInt(t.poptin_format.split("_")[1])||jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),_t("data-autoplay","autoplay","[data-poptin-id="+t.poptin_id+"] #poptinThankYouScreen"),"fullpage"==t.poptin_type&&vt()&&jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container) .close-x-button").css({"padding-right":"25px"}),parseInt(t.design_properties.poptin_design_close_on_screen_click)&&(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").on("mouseenter",(function(e){null==i?(zo[t.poptin_id].poptin_trigger||(zo[t.poptin_id].poptin_trigger={}),zo[t.poptin_id].poptin_trigger.poptin_area_flag_submit=!0):poptin_area_flag_submit=!0})).on("mouseleave",(function(e){null==i?(zo[t.poptin_id].poptin_trigger||(zo[t.poptin_id].poptin_trigger={}),zo[t.poptin_id].poptin_trigger.poptin_area_flag_submit=!1):poptin_area_flag_submit=!1})),"lightbox"==t.poptin_type&&jQ224(document).click((function(e){jQ224(e.target).closest(".poptin-popup[data-poptin-id="+t.poptin_id+"]").length||(null==i?zo[t.poptin_id].poptin_trigger.poptin_area_flag_submit:poptin_area_flag_submit)||jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").is(":visible")&&(a("close poptin"+t.poptin_id+" poptin_design_close_on_screen_click3"),zo[t.poptin_id].poptin_trigger.close_trigger="bg_click",closePoptin(t.poptin_id,!1,!0))})))}else if(null==t.design_properties.poptin_design_thank_screen&&"gamified"==t.poptin_type){if(("format_1"==t.poptin_format||"format_3"==t.poptin_format)&&t.gamified_prize||"format_3"==t.poptin_format&&t.design_properties.disable_post_play_screen){t.gamified_prize&&t.gamified_prize.redirect_to&&1==t.gamified_prize.redirect_to?null==i?zo[t.poptin_id].poptin_trigger.close_screen_sec=null!=t.gamified_prize.redirect_to_options.redirect_close_delay?parseInt(t.gamified_prize.redirect_to_options.redirect_close_delay):1:closeScreenSec=null!=t.gamified_prize.redirect_to_options.redirect_close_delay?parseInt(t.gamified_prize.redirect_to_options.redirect_close_delay):1:null==i?zo[t.poptin_id].poptin_trigger.close_screen_sec=60:closeScreenSec=600;var p=0;t.design_properties.disable_post_play_screen&&(p=8e3),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").css("display","none"),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),1==t.gamified_prize.is_winner?ni(t):(jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800))}),p)}"format_2"==t.poptin_format&&(jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").css("display","none"),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"))}else!function(t){if("lead"==t.poptin_target){var i=ft()&&ht()?"נשלח בהצלחה!":"Sent successfully!",e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"),o=e.find("#poptinFormSubmitText .froala-editor-button"),n=o.find("p span"),p="inherit",a="direction:"+(ft()&&ht()?"rtl":"ltr");n.length>0&&(p=n.css("color")),0==o.length&&(o=e.find("#poptinFormSubmitText"));var r='<span role="alert" style="color:'+p+";font-size:18px;"+a+'">'+i+"</span>";o.text("").append(r),e.find("input.poptin-form-submit-button").hide()}}(t),null==i?zo[t.poptin_id].poptin_trigger.close_thank_screen_sec=ft()&&"click"!=t.poptin_target?2:.1:e=ft()&&"click"!=t.poptin_target?2:1;if("gamified"==t.poptin_type&&"format_2"!=t.poptin_format&&t.gamified_prize){var r=zo[t.poptin_id].poptin_trigger.close_screen_sec;r=(r=null==i&&null!=r?r:closeScreenSec)||(t.wheel_has_coupon?3*Qo:Qo),1==t.gamified_prize.redirect_to&&null!=t.gamified_prize.redirect_to_options.redirect_to_url||setTimeout((function(){zo[t.poptin_id].poptin_trigger.close_trigger="submit",closePoptin(t.poptin_id)}),1e3*r)}else if("gamified"!==t.poptin_type||"gamified"==t.poptin_type&&"format_2"!==t.poptin_format){var s,d;(null==t||null===(s=t.design_properties)||void 0===s||!s.poptin_design_thank_screen||null!=t&&null!==(d=t.design_properties)&&void 0!==d&&d.poptin_design_thank_screen_auto_close)&&setTimeout((function(){zo[t.poptin_id].poptin_trigger.close_trigger="submit",closePoptin(t.poptin_id)}),1e3*(null==i?zo[t.poptin_id].poptin_trigger.close_thank_screen_sec:e))}},ni=function(t){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen p").each((function(){var i;-1!=(i=jQ224(this).html()).indexOf("{{prize_label}}")&&t.gamified_prize.label&&jQ224(this).html(i.replace("{{prize_label}}",t.gamified_prize.label)),-1!=(i=jQ224(this).html()).indexOf("{{prize_code}}")&&t.gamified_prize.code&&jQ224(this).html(i.replace("{{prize_code}}",t.gamified_prize.code))})),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_winning_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800)},pi=function(t){if(a("redirectToPoptin"),t.redirectFromBtns)zo[t.poptin_from].redirect_flag=!0,$href=le+"/api/display/click/"+t.poptin_to,D($href,!1,!0);else{var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]");"true"==i.attr("data-redirect-poptin")&&13==i.attr("data-redirect-poptin-id").length&&(zo[t.poptin_id].redirect_flag=!0,$href=le+"/api/display/click/"+i.attr("data-redirect-poptin-id"),D($href,!1,!0))}},ai=function(t,i){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];t.poptin_type+"_"+t.poptin_format!="social_format_2"&&t.poptin_type+"_"+t.poptin_format!="social_format_6"&&t.poptin_type+"_"+t.poptin_format!="sside_format_19"&&(conversion_id=i.conversion_id,Ei("poptin_conversion_"+t.poptin_id,conversion_id,365)),void 0!==i.integration.conversion_code&&jQ224(i.integration.conversion_code).each((function(t,i){jQ224("head").append(i)})),window.location.href.indexOf("biu.ac.il")>-1&&"lead"==t.poptin_target&&(window.location.href=ce+"/integrations/barilan/"+i.conversion_id+"/"),e||t.poptin_type+"_"+t.poptin_format!="gamified_format_3"&&qt(t)},ri=function(t){if(t.poptin_id!==bn){Ai(t),Mi(t),function(t){try{"undefined"!=typeof Storage?null!=window.sessionStorage.getItem("poptin_viewed_url_"+t.poptin_id)&&null!=window.sessionStorage.getItem("poptin_viewed_url_"+t.poptin_id)||window.sessionStorage.setItem("poptin_viewed_url_"+t.poptin_id,window.location.href):a("Sorry! No Web Storage support..")}catch(t){a(t)}}(t),Li(t),Fi(t),trigger=null==t.auto_pilot_trigger?"false":t.auto_pilot_trigger,type=Eo?"mobile":"desktop",landing_page=window.location.href;var i=new URLSearchParams({viewer_id:t.viewer_id,trigger,client_id:l(),type,url:landing_page,store_integration:wn,store_integration_customer_id:jn,converted_email:localStorage.getItem("poptin_converted_email")});jQ224.ajax({url:"".concat(le,"/api/display/viewed/").concat(t.poptin_id,"?").concat(i.toString()),async:!0,cache:!0,dataType:"json",type:"get"},"json").done((function(i){ko[t.poptin_id]={poptin_view_id:i.poptin_view_id},a(i);var e=new CustomEvent("poptinView",{bubbles:!0,detail:Tt(t,{event_name:"poptinView"})});document.dispatchEvent(e)})).fail((function(t,i,e){}))}},si=function(t){var i,e;t=(t="string"==typeof t?t:t.poptin).trim();var o=parseInt(jQ224(t).find(".draggable-container:not(.poptin-tab-container)").attr("data-width")),n=parseInt(jQ224(t).find(".draggable-container:not(.poptin-tab-container)").attr("data-height"));return isNaN(o)||null==o||""==o||"undefined"==o||(i=o),isNaN(n)||null==n||""==n||"undefined"==n||(e=n),{width:i,height:e}},di=function(t,i){var e=si(t.poptin),o=e.width,n=e.height;o&&n&&!isNaN(o)&&!isNaN(n)||("lightbox"==t.poptin_type?(o=o||Se,n=n||Ie):"bar"==t.poptin_type?(o=o||Te,"format_1"==t.poptin_format||"format_6"==t.poptin_format?n=n||Pe:"format_2"==t.poptin_format||"format_3"==t.poptin_format||"format_7"==t.poptin_format||"format_8"==t.poptin_format?n=n||De:"format_4"==t.poptin_format||"format_9"==t.poptin_format?n=n||Oe:"format_5"!=t.poptin_format&&"format_10"!=t.poptin_format||(n=n||ze)):"sside"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(o=o||Fe,n=n||Ne):"format_4"===t.poptin_format||"format_8"===t.poptin_format?(o=o||Le,n=n||Be):"format_19"===t.poptin_format?(o=o||Ee,n=n||Re):(o=o||$e,n=n||Ne):"bside"==t.poptin_type?(o=o||Ue,n=n||He):"browsing"==t.poptin_type?(o=o||Ae,n=n||Me):"fullpage"==t.poptin_type?(o=o||"100%",n=n||"100%","format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(o=o||qe,n=n||Je)):"social"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(o=o||eo,n=n||io):"format_2"===t.poptin_format||"format_6"===t.poptin_format?(o=o||no,n=n||oo):"format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(o=o||ao,n=n||po):"mobile"==t.poptin_type?(o=o||Ge,n=n||Ye,"format_3"===t.poptin_format||"format_8"===t.poptin_format?(o=o||Ve,n=n||Ke):"format_4"===t.poptin_format||"format_9"===t.poptin_format?n=n||Ze:"format_5"!==t.poptin_format&&"format_10"!==t.poptin_format||(n=n||to)):"embedded"==t.poptin_type?"format_1"===t.poptin_format?(o=o||ro,n=n||so):"format_2"===t.poptin_format?(o=o||lo,n=n||co):"format_3"===t.poptin_format?(o=o||_o,n=n||uo):"format_4"===t.poptin_format?(o=o||fo,n=n||go):"format_5"===t.poptin_format?(o=o||mo,n=n||ho):"format_6"===t.poptin_format?(o=o||vo,n=n||yo):"format_7"===t.poptin_format&&(o=o||bo,n=n||wo):"gamified"==t.poptin_type&&(o=o||Se,n=n||Ie)),"lightbox"==t.poptin_type?(null==i&&(zo[t.poptin_id].poptin_size.height=n,zo[t.poptin_id].poptin_size.width=o),"format_3"!=t.poptin_format&&"format_9"!=t.poptin_format||(Se=Ie),null==i&&(zo[t.poptin_id].position_center={left:(ke-Se)/2,up:(Ce-Ie)/2}),{left:(ke-Se)/2,up:(Ce-Ie)/2}):"bar"==t.poptin_type?(null==i&&(zo[t.poptin_id].position_center={left:(ke-1920)/2,up:(Ce-100)/2}),{left:(ke-1920)/2,up:(Ce-100)/2}):"mobile"!=t.poptin_type||"format_3"!=t.poptin_format&&"format_8"!=t.poptin_format?"gamified"==t.poptin_type&&(null==i&&(zo[t.poptin_id].poptin_size.height=n,zo[t.poptin_id].poptin_size.width=o),null==i&&(zo[t.poptin_id].position_center={left:(ke-Se)/2,up:(Ce-Ie)/2}),{left:(ke-Se)/2,up:(Ce-Ie)/2}):(ke=Math.min(ke,jQ224("body").outerWidth()),null==i&&(zo[t.poptin_id].position_center={left:(ke-390)/2,up:(Ce-242)/2}),{left:(ke-390)/2,up:(Ce-242)/2})},li=function(t,i){jQ224(window).resize((function(){("fullpage"!=t.poptin_type&&"browsing"!=t.poptin_type||"fullpage"!=t.poptin_type||-1===jQ224.inArray(t.poptin_format,Zo.fullpage))&&setTimeout((function(){ci(t,i)}),100)}))},ci=function(t,i){var e="embedded"==t.poptin_type,o=e?jQ224(".poptin-embedded[data-id='"+t.poptin_id+"']"):jQ224(window);if_responsice_flag=!1;var n=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]");t.is_new=!!n.hasClass("new-popup"),"lightbox"!=t.poptin_type&&"gamified"!=t.poptin_type||isNaN(parseInt(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-width")))&&(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-width",800),n.find(".draggable-container:not(.poptin-tab-container)").attr("data-height",500));var p=zo[t.poptin_id].poptin_size.width,a=zo[t.poptin_id].poptin_size.height,r=si(t.poptin);p=r.width||p,a=r.height||a,(isNaN(p)||isNaN(a))&&("lightbox"==t.poptin_type?(p=Se,a=Ie):"bar"==t.poptin_type?(p=Te,"format_1"==t.poptin_format||"format_6"==t.poptin_format?a=Pe:"format_2"==t.poptin_format||"format_3"==t.poptin_format||"format_7"==t.poptin_format||"format_8"==t.poptin_format?a=De:"format_4"==t.poptin_format||"format_9"==t.poptin_format?a=Oe:"format_5"!=t.poptin_format&&"format_10"!=t.poptin_format||(a=ze)):"sside"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(p=Fe,a=Ne):"format_4"===t.poptin_format||"format_8"===t.poptin_format?(p=Le,a=Be):"format_19"===t.poptin_format?(p=Ee,a=Re):(p=$e,a=Ne):"bside"==t.poptin_type?(p=Ue,a=He):"browsing"==t.poptin_type?(p=Ae,a=Me):"fullpage"==t.poptin_type?(p="100%",a="100%","format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(p=qe,a=Je)):"social"==t.poptin_type?"format_1"===t.poptin_format||"format_5"===t.poptin_format?(p=eo,a=io):"format_2"===t.poptin_format||"format_6"===t.poptin_format?(p=no,a=oo):"format_4"!==t.poptin_format&&"format_8"!==t.poptin_format||(p=ao,a=po):"mobile"==t.poptin_type?(p=Ge,a=Ye,"format_3"===t.poptin_format||"format_8"===t.poptin_format?(p=Ve,a=Ke):"format_4"===t.poptin_format||"format_9"===t.poptin_format?a=Ze:"format_5"!==t.poptin_format&&"format_10"!==t.poptin_format||(a=to)):"embedded"==t.poptin_type?"format_1"===t.poptin_format?(p=ro,a=so):"format_2"===t.poptin_format?(p=lo,a=co):"format_3"===t.poptin_format?(p=_o,a=uo):"format_4"===t.poptin_format?(p=fo,a=go):"format_5"===t.poptin_format?(p=mo,a=ho):"format_6"===t.poptin_format?(p=vo,a=yo):"format_7"===t.poptin_format&&(p=bo,a=wo):"gamified"==t.poptin_type&&(p=Se,a=Ie)),n.find(".draggable-container:not(.poptin-tab-container)").attr("data-width",p),n.find(".draggable-container:not(.poptin-tab-container)").attr("data-height",a);var s=jQ224("body").outerWidth()+20<jQ224(window).outerWidth()?Math.min(jQ224(window).outerWidth(),jQ224("body").outerWidth()):jQ224(window).outerWidth();if(this_comparable_width=e?o.width():s,this_comparable_height=e?0!=o.height()?o.height():a:window.innerHeight,window_width=o.width(),window_height=e?o.height():window.innerHeight,"fullpage"!=t.poptin_type){var d=1;if(jQ224(".enable-snapping").addClass("element-notinside"),jQ224(".elem-outofboundry").addClass("element-notinside"),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .element-notinside:not(.hiddenSnappingElem):visible").length>0)var l=function(t){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"),e=0,o=0,n=new Array,p=0,a=i.css("width");return i.css("width"),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .element-notinside:not(.hiddenSnappingElem):visible").each((function(){var t=function(t,i){if(void 0!==i[0]&&void 0!==t[0]){var e=i[0].getBoundingClientRect(),o=t[0].getBoundingClientRect(),n="",p=0;return o.left<e.left?(n="left",p=e.left-o.left):o.right>e.right&&(n="right",p=o.right-e.right),{direction:n,elem_diff:p}}return{}}(jQ224(this),i.find(".poptin-visible"));parseInt(jQ224(this).css("width")),jQ224.isEmptyObject(t)||("left"==t.direction&&(e=t.elem_diff),"right"==t.direction&&(e=t.elem_diff),o=e,n.push(o))})),n.length>0&&(p=Math.max.apply(Math,n)),{new_width:parseInt(a)+2*p,max_el_left_add:p}}(t),c=function(t){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"),e=0,o=0,n=new Array,p=0,a=i.css("height");return i.css("height"),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .element-notinside:not(.hiddenSnappingElem):visible").each((function(){var t=function(t,i){if(void 0!==i[0]&&void 0!==t[0]){var e=i[0].getBoundingClientRect(),o=t[0].getBoundingClientRect(),n="",p=0;return o.top<e.top?(n="top",p=e.top-o.top):o.bottom>e.bottom&&(n="bottom",p=e.bottom-o.bottom),{direction:n,elem_diff:p}}return{}}(jQ224(this),i.find(".poptin-visible"));parseInt(jQ224(this).css("height")),jQ224.isEmptyObject(t)||("top"==t.direction&&(e=t.elem_diff),"bottom"==t.direction&&(e=t.elem_diff),o=e,n.push(o))})),n.length>0&&(p=Math.max.apply(Math,n)),parseInt(a)+2*p}(t),_=Math.min((this_comparable_width-l.max_el_left_add)/l.new_width,d),u=Math.min(this_comparable_height/c,d);else _=Math.min(this_comparable_width/p,d),u=Math.min(this_comparable_height/a,d);("lightbox"==t.poptin_type||"bside"==t.poptin_type||"sside"==t.poptin_type||t.is_new||"gamified"==t.poptin_type)&&(_=Math.min(_,u));var f={width:p+"px",height:a+"px","max-width":p+"px","max-height":a+"px"};if("browsing"!=t.poptin_type&&(f.transform="scale("+_+")"),"embedded"==t.poptin_type&&(f["transform-origin"]="center center 0px",0==_&&(_=1,f.transform="scale("+_+")")),n.css(f),n.attr("data-scale",_),1==_&&n.css("transform","none"),"bside"!=t.poptin_type&&"sside"!=t.poptin_type||(t.design_properties.poptin_location.indexOf("left")<0?n.css({left:"auto",right:(this_comparable_width-u*p)/2+"px"}):n.css({right:"auto",left:(this_comparable_width-u*p)/2+"px"}),n.css({top:(this_comparable_height-u*a)/2+"px"})),"sside"==t.poptin_type&&null!=n.get(0)&&(n.get(0).style.setProperty("transform-origin",""),this_comparable_height<a)){var g=t.design_properties.poptin_location;g.indexOf("midlle")>=0&&(n.get(0).style.setProperty("top","0px","important"),n.get(0).style.setProperty("bottom","auto","important"),n.get(0).style.setProperty("transform-origin",g.split("-")[0]+" top 0","important")),g.indexOf("center")>=0&&n.css({left:"auto",right:(this_comparable_width-p)/2+"px"})}"lightbox"==t.poptin_type||"gamified"==t.poptin_type?(this_css={},p>this_comparable_width?this_css={left:(p-this_comparable_width)/-2+"px",right:""}:this_css={left:"0px",right:"0px"},n.css(this_css),n.animate({top:(a-this_comparable_height)/-2+"px"},So),n.css(this_css)):"bar"==t.poptin_type?(n.css({left:(p-jQ224(window).width())/-2+"px"}),"center-top"==t.design_properties.poptin_location?(n.css({top:(a-_*a)/-2+"px"}),_i(t)):"center-bottom"==t.design_properties.poptin_location?n.css({top:"auto"}):n.css({top:window.innerHeight-(_*a+(1-_)*a/2)+"px"}),n.css("right","")):"bside"==t.poptin_type||("mobile"==t.poptin_type?("100%"!==jQ224("html").css("min-width")&&n.css({left:(p-_*p)/-2+"px"}),n.css("right","")):t.poptin_type)}if("lightbox"==t.poptin_type||"gamified"==t.poptin_type){this_poptin_width=parseInt(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-width")),this_poptin_height=parseInt(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-height")),p=this_poptin_width||p,a=this_poptin_height||a;d=1;this_comparable_width<p&&(this_comparable_width*=.9);_=Math.min(this_comparable_width/p,d),u=Math.min(this_comparable_height/a,d);new_scale=Math.min(_,u),zo[t.poptin_id].poptin_scale=new_scale,n.attr("data-scale",new_scale),void 0!==n.get(0)&&(n.get(0).style.setProperty("width",p+"px","important"),n.get(0).style.setProperty("max-width",p+"px","important"),n.get(0).style.setProperty("height",a+"px","important"))}if("embedded"==t.poptin_type){var m=(n.parent().width()-p)/2,h=(n.parent().height()-a)/2;(m=m>=0?0:m)<0?n.css({top:h+"px",left:m+"px",right:"auto"}):(n.css({top:h+"px",left:"0px",right:"0px"}),"right"==n.attr("data-form-align")?n.css({left:"auto",right:"0px"}):"left"==n.attr("data-form-align")&&n.css({left:"0px",right:"auto"}))}if("mobile"==t.poptin_type){this_poptin_width=parseInt(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-width")),this_poptin_height=parseInt(n.find(".draggable-container:not(.poptin-tab-container)").attr("data-height")),p=this_poptin_width||p,a=this_poptin_height||a;d=1,_=1;_=this_comparable_width>p?this_comparable_width/p:Math.min(this_comparable_width/p,d),new_scale=_,zo[t.poptin_id].poptin_scale=new_scale,new_scale>=1&&(new_scale=1),n.css({transform:"scale("+new_scale+")",left:(this_comparable_width-p)/2}),1==new_scale&&n.css("transform","none"),n.attr("data-scale",new_scale),void 0!==n.get(0)&&(n.get(0).style.setProperty("width",p+"px","important"),n.get(0).style.setProperty("max-width",p+"px","important"),n.get(0).style.setProperty("height",a+"px","important"))}if("fullpage"==t.poptin_type){ieVersion=G(),n.addClass("ie"+ieVersion),pop_wrappers_container=n.find(".draggable-container:not(.poptin-tab-container) > form, .poptin_thank_you_screen"),pop_wrappers_container.css("opacity","0");try{clearTimeout(Wo[t.poptin_id])}catch(t){}var v=parseInt(n.attr("data-poptin-format").split("_")[1]);Wo[t.poptin_id]=v&&v<9?setTimeout((function(){p=1920,a=1080;this_comparable_width<p&&(this_comparable_width=this_comparable_width);var i=Math.min(this_comparable_width/p,1),e=Math.min(this_comparable_height/a,1);new_scale=Math.min(i,e),zo[t.poptin_id].poptin_scale=new_scale,n.attr("data-scale",new_scale),n.css({width:"",height:"","max-width":"","max-height":""});var o=n.find(".draggable-container:not(.poptin-tab-container)").css("background-color");"rgba(0, 0, 0, 0)"!=o&&n.css({"background-color":o}),n.find(".draggable-container:not(.poptin-tab-container), .poptin_thank_you_screen").css({width:p+"px","max-width":p+"px",height:a+"px","max-height":a+"px",left:Math.floor((this_comparable_width-p)/2)+"px",top:Math.floor((this_comparable_height-a)/2)+"px","background-color":""}),n.animate({opacity:1},250,(function(){n.find(".draggable-container:not(.poptin-tab-container), .poptin_thank_you_screen").css({transform:"scale("+new_scale+")"}),n.find(".draggable-container:not(.poptin-tab-container), .poptin_thank_you_screen").attr("data-scale",new_scale),1==new_scale&&n.css("transform","none");var t=n.find(".draggable-container:not(.poptin-tab-container) #closeXButton");n.find(".poptin_thank_you_screen #closeXButton").length||n.find(".poptin_thank_you_screen").prepend(t.clone()),jQ224("#closeXButton, #closeSkipButton").each((function(){var t=parseInt(jQ224(this).attr("data-original-pos"));if(t||(t=jQ224(this).position().left,jQ224(this).attr("data-original-pos",t)),t+jQ224(this).width()+50>p){var i=(this_comparable_width-p*new_scale)/2/new_scale;jQ224(this).css({position:"fixed",right:"auto",left:t+i+"px"})}})),pop_wrappers_container.animate({opacity:1},100)}))}),250):setTimeout((function(){jQ224(window).width()<p?n.css({width:"100%"}):window.innerWidth>p&&n.css({width:"100%","max-width":"100%"}),window.innerHeight>a&&(n.css({height:"100%"}),n.find(".draggable-container:not(.poptin-tab-container)").first().css({height:"100%","max-height":"100%"})),window.innerHeight<a&&n.css({height:window.innerHeight+"px"});var i,e,o=null,r=null,s=null,d=null;jQ224("[data-poptin-id="+t.poptin_id+"] #poptinFormSubmit"+t.poptin_id+", [data-poptin-id="+t.poptin_id+"] .poptin_thank_you_screen, [data-poptin-id="+t.poptin_id+"] .poptin_play_screen, [data-poptin-id="+t.poptin_id+"] .poptin_winning_screen, [data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").each((function(){jQ224(this).children().each((function(t){return jQ224(this).is(".draggable, .inputs-container, .redirect-url-blank, #closeSkipButton")?!!jQ224(this).is(":visible")&&(this_left=jQ224(this).position().left,this_top=jQ224(this).position().top,this_right=this_left+jQ224(this).width(),this_bottom=this_top+jQ224(this).height(),o=null!=o?Math.min(o,this_left):this_left,s=null!=s?Math.min(s,this_top):this_top,r=null!=r?Math.max(r,this_right):this_right,void(d=null!=d?Math.max(d,this_bottom):this_bottom)):(jQ224(this).remove(),!1)})),Eo&&(o-=jQ224(window).width()/10,r+=jQ224(window).width()/10)})),"format_3"!=t.poptin_format&&"format_4"!=t.poptin_format||!0,!0,"format_1"==t.poptin_format?(i=600,e=950):"format_2"==t.poptin_format?(i=900,e=950):"format_3"==t.poptin_format||"format_4"==t.poptin_format?(i=1130,e=1e3):(i=1920,e=1080);var l=1,c=1;jQ224(window).width()<i&&(l=Math.min(jQ224(window).width()/i,1)),window.innerHeight<e&&(c=Math.min(window.innerHeight/e,1)),new_scale=Math.min(l,c);var _=n.find("#poptinDraggableContainer"),u=n.find("#poptinThankYouScreen"),f=n.find("#poptinPlayScreen"),g=n.find("#poptinWinningScreen"),m=n.find("#poptinLosingScreen");setTimeout((function(){container_width="100%",container_margin="auto",Xe<ke/window.devicePixelRatio?(11==ieVersion&&(container_width=Xe),n.addClass("with-margin")):n.addClass("full-width"),n.hasClass("bg-moved")||(n.css({background:_.css("background"),"background-color":_.css("background-color"),"background-image":_.css("background-image"),"max-width":"initial",height:"100%"}),n.addClass("bg-moved")),container_css={width:container_width,background:"none","background-color":"none","background-image":"none",transform:"scale("+new_scale+")",margin:container_margin},_.css(container_css),_.attr("data-scale",new_scale),1==new_scale&&_.css("transform","none"),u.css(container_css),u.attr("data-scale",new_scale),f.css(container_css),f.attr("data-scale",new_scale),g.css(container_css),g.attr("data-scale",new_scale),m.css(container_css),m.attr("data-scale",new_scale),el_width=r-o,drag_cont_width=n.find("#poptinDraggableContainer").width(),el_left=(drag_cont_width-el_width)/2,jQ224("[data-poptin-id="+t.poptin_id+"] #poptinFormSubmit"+t.poptin_id).css({width:el_width+"px",position:"absolute",left:el_left+"px"}),setTimeout((function(){var o=n.find("#poptinDraggableContainer #closeXButton").css({position:"absolute !important",top:"40px !important",right:"40px !important"});n.find("#poptinDraggableContainer #closeXButton").remove(),n.prepend(o);var p=n.find(".poptin-credit");n.find(".poptin-credit").remove(),n.prepend(p),this_container_css={"box-shadow":"",top:(window.innerHeight-e)/2+"px",left:(window.innerWidth-i)/2+"px",width:""},_.css(this_container_css),_.find("form").css({width:"",left:""}),u.css(this_container_css),f.css(this_container_css),g.css(this_container_css),m.css(this_container_css),"1"==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-wellcome-screen")&&jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css("position","absolute"),n.animate({opacity:1},250,(function(){n.find(".draggable-container:not(.poptin-tab-container) #closeXButton"),n.find(".poptin_thank_you_screen #closeXButton");n.find(".poptin_play_screen #closeXButton").remove(),n.find(".poptin_winning_screen #closeXButton").remove(),n.find(".poptin_losing_screen #closeXButton").remove(),jQ224("#closeXButton").each((function(){if(jQ224(this).offset().left+jQ224(this).width()+50>window.innerWidth){var t=window.innerWidth-jQ224(this).width()-10;jQ224(this).css({position:"fixed",right:"auto",left:t+"px"})}})),jQ224("#closeSkipButton").each((function(){if(jQ224(this).offset().left+jQ224(this).width()+50>window.innerWidth){window.innerWidth,jQ224(this).width();jQ224(this).css({position:"fixed",right:"10px",top:"5px"})}})),pop_wrappers_container.animate({opacity:1},100)}))}),500)}),500)}),100)}},_i=function(t){setTimeout((function(){a("barHtmlPadding()"),padding_top=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").height()*parseFloat(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-scale")),jQ224("html").animate({"padding-top":Math.floor(padding_top)+"px"},300)}),300)},ui=function(){var t=Ri("poptin_referrer");if(t&&/^https?:\/\//.test(t)){var i=t.startsWith("https://")?"secure":"unsecure";Ei("poptin_referrer_protocol",i,.00138888888888889),t=t.replace(/^https?:\/\//,""),Ei("poptin_referrer",t,.00138888888888889)}var e=Ri("poptin_referrer_protocol")&&"secure"==Ri("poptin_referrer_protocol")?"https://":"http://";return Ri("poptin_referrer")?-1!==Ri("poptin_referrer").indexOf(window.location.host)?"":e+Ri("poptin_referrer"):""},fi=function(){var t=Ri("poptin_previous_url");if(t&&/^https?:\/\//.test(t)){var i=t.startsWith("https://")?"secure":"unsecure";Ei("poptin_previous_url_protocol",i,.00138888888888889),t=t.replace(/^https?:\/\//,""),Ei("poptin_previous_url",t,.00138888888888889)}var e=Ri("poptin_previous_url_protocol")&&"secure"==Ri("poptin_previous_url_protocol")?"https://":"http://";return Ri("poptin_previous_url")&&-1!==Ri("poptin_previous_url").indexOf(window.location.host)?e+Ri("poptin_previous_url"):""},gi=function(){cookies=document.cookie.split(";"),relevent_cookie="";for(var t=0;t<cookies.length;t++)-1!==cookies[t].split("=")[0].indexOf("poptin")&&(relevent_cookie+=cookies[t]);return relevent_cookie},mi=function(){cookies=document.cookie.split(";"),relevent_cookie="";for(var t=0;t<cookies.length;t++)cookies[t].split("=")[0].startsWith(" cc_")&&(relevent_cookie+=cookies[t]);return relevent_cookie},hi=function(){cookies=document.cookie.split(";"),array=[];for(var t=0;t<cookies.length;t++)pair=cookies[t].split("="),$key=null==pair[0]?"":pair[0].trim(),$value=null==pair[1]?"":pair[1].trim(),""!=$key&&array.push({key:$key,value:$value});return array},vi=function(){ap_triggers="";try{"undefined"!=typeof Storage?jQ224.each(window.sessionStorage,(function(t,i){-1!==t.indexOf("apt_")&&(ap_triggers+=t+":"+i+"|")})):a("Sorry! No Web Storage support..")}catch(t){a(t)}return ap_triggers},yi=function(){var t="";try{"undefined"!=typeof Storage?null!=window.sessionStorage.getItem("poptin_origin_landing_page")&&null!=window.sessionStorage.getItem("poptin_origin_landing_page")&&(t=window.sessionStorage.getItem("poptin_origin_landing_page")):a("Sorry! No Web Storage support..")}catch(t){a(t)}return t},bi=function(t){var i=window.location.href;try{"undefined"!=typeof Storage&&t?null!=window.sessionStorage.getItem("poptin_viewed_url_"+t.poptin_id)&&null!=window.sessionStorage.getItem("poptin_viewed_url_"+t.poptin_id)&&(i=window.sessionStorage.getItem("poptin_viewed_url_"+t.poptin_id)):a("Sorry! No Web Storage support or poptin..")}catch(t){a(t)}return i},wi=function(){(Oo instanceof Object||Oo instanceof Array)&&jQ224.each(Oo,(function(t,i){null!=this.d_f_a&&this.d_f_a&&this.d_f_r.indexOf("display_once_every_few_visiting_4")>-1&&(Hi("poptin_d_r_v_"+this.poptin_id)?window.sessionStorage.getItem("first_visit_"+this.poptin_id)||(value=parseInt(Ri("poptin_d_r_v_"+this.poptin_id))+1,Ei("poptin_d_r_v_"+this.poptin_id,value,365),window.sessionStorage.setItem("first_visit_"+this.poptin_id,1)):(Ei("poptin_d_r_v_"+this.poptin_id,0,365),window.sessionStorage.setItem("first_visit_"+this.poptin_id,1))),null!=this.d_f_a&&this.d_f_a&&this.d_f_r.indexOf("display_once_every_few_days_3")>-1&&(Hi("poptin_d_a_x_v_"+this.poptin_id)||(value=Xi(),Ei("poptin_d_a_x_v_"+this.poptin_id,value,365))),window.sessionStorage.getItem("poptin_pageviews_"+this.poptin_id)?window.sessionStorage.setItem("poptin_pageviews_"+this.poptin_id,parseInt(window.sessionStorage.getItem("poptin_pageviews_"+this.poptin_id))+1):window.sessionStorage.setItem("poptin_pageviews_"+this.poptin_id,0),Hi("poptin_o_v_"+this.poptin_id)||xi(this),setInterval((function(){xi(this)}),6e4),Hi("poptin_session_account_"+this.account_id)||Ei("poptin_session_account_"+this.account_id,!0,30),this.poptin_new_session&&Ci()})),Hi("poptin_session")||Ei("poptin_session",!0,.02083333333333333),Hi("poptin_c_visitor")||Ei("poptin_c_visitor",!0,30),"undefined"!=typeof Storage&&null==window.sessionStorage.getItem("poptin_every_visit_session")&&(window.sessionStorage.setItem("poptin_every_visit_session",Date()),ji()),Di()},ji=function(){if(null!=localStorage.getItem("poptin_converted_email")||0!=Qn||0!=kn){var t=encodeURIComponent(localStorage.getItem("poptin_converted_email")),i=new URLSearchParams({email:t,url:document.location.hostname,store_integration:wn,store_integration_customer_id:jn});jQ224.ajax({url:"".concat(le,"/api/display/total-website-session/").concat(l(),"?").concat(i.toString()),type:"get",dataType:"json",async:!1},"json").done((function(t){a("Total website session recorded")}))}},Qi=function(t,i){if(null!=localStorage.getItem("poptin_converted_email")||0!=Qn||0!=kn){var e=encodeURIComponent(localStorage.getItem("poptin_converted_email")),o=new URLSearchParams({email:e,poptin_id:i,activity:t,url:document.location.hostname,store_integration:wn,store_integration_customer_id:jn});jQ224.ajax({url:"".concat(le,"/api/display/conversion-activities/").concat(l(),"?").concat(o.toString()),type:"get",dataType:"json",async:!1},"json")}},xi=function(t){if(!Hi("poptin_o_v_"+t.poptin_id)&&void 0!==t&&t.display){var i=t.viewer_id;Ei("poptin_o_v_"+t.poptin_id,i,.02083333333333333)}},ki=function(){return"undefined"!=typeof Storage?null==window.sessionStorage.getItem("poptin_custom_new_visitor_session")?"":"poptin_custom_new_visitor_session=true":""},Ci=function(){"undefined"!=typeof Storage&&null==window.sessionStorage.getItem("poptin_custom_new_visitor_session")&&window.sessionStorage.setItem("poptin_custom_new_visitor_session",Date())},Si=function(){return poptin_viewed_session="",poptin_once=1,"undefined"!=typeof Storage?(jQ224.each(sessionStorage,(function(t,i){t.indexOf("poptin_viewed_session")>=0&&(1==poptin_once?(poptin_viewed_session+=t+"="+i,poptin_once=0):poptin_viewed_session+=" "+t+"="+i)})),""==poptin_viewed_session?"poptin_viewed_session=false":poptin_viewed_session):"poptin_viewed_session=false"},Ii=function(){return"undefined"!=typeof Storage?null==window.sessionStorage.getItem("poptin_new_user")?"":"poptin_new_user=true":""},Ti=function(){return!!Hi("poptin_user_country_code")&&Ri("poptin_user_country_code")},Pi=function(){Hi("poptin_user_id")?(Hi("poptin_old_user")||(zi(),Oi()),Bi()):Hi("poptin_old_user")||(zi(),Oi(),Hi("poptin_user_id")||Ei("poptin_user_id",Math.random().toString(36).slice(-16),365)),Hi("poptin_last_visit")||Ci()},Di=function(){current_date=(new Date).toJSON().slice(0,10).replace(/-/g,"-"),Ei("poptin_last_visit",current_date,365)},Oi=function(){Hi("poptin_old_user")||(Ei("poptin_old_user",!0,2),setInterval((function(){Ei("poptin_old_user",!0,2)}),6e4))},zi=function(){"undefined"!=typeof Storage&&null==window.sessionStorage.getItem("poptin_new_user")&&window.sessionStorage.setItem("poptin_new_user",Date())},Ai=function(t){if(!Hi("poptin_o_a_d_"+t.poptin_id)&&void 0!==t&&t.display&&t.cookie!="poptin_o_a_d_"+t.poptin_id){var i=t.viewer_id;Ei("poptin_o_a_d_"+t.poptin_id,i,1),Qi("viewed",t.poptin_id)}},Mi=function(t){"undefined"!=typeof Storage&&null==window.sessionStorage.getItem("poptin_viewed_session_"+t.poptin_id)&&window.sessionStorage.setItem("poptin_viewed_session_"+t.poptin_id,!0)},Fi=function(t){ab_test_parent_id=!1,"undefined"!=typeof Storage&&(0==t.ab_test&&null!=t.ab_test_parent_id?ab_test_parent_id=t.ab_test_parent_id:1==t.ab_test&&(ab_test_parent_id=t.poptin_id),ab_test_parent_id&&null==window.sessionStorage.getItem("poptin_abtest_session_"+ab_test_parent_id)&&window.sessionStorage.setItem("poptin_abtest_session_"+ab_test_parent_id,t.poptin_id))},$i=function(t){Hi("poptin_c_p_o_x_c_"+t)||void 0===t||(Ei("poptin_c_p_o_x_c_"+t,t,1),Qi("closed",t))},Ni=function(){var t=document.cookie.split("; ");return t.filter((function(t){return t.startsWith("poptin_c_p_o_x_c_")})).map((function(t){var e=i(t.split("="),2);return{name:e[0],value:e[1]}}))},Li=function(t){if(void 0!==t&&null!=t.d_f_a&&t.d_f_a&&t.d_f_r.indexOf("display_once_a_visitor_2")>-1){var i=t.viewer_id;Ei("poptin_o_a_v_"+t.poptin_id,i,.020833333),setInterval((function(){Ei("poptin_o_a_v_"+t.poptin_id,i,.020833333)}),6e4)}},Bi=function(){cookies=document.cookie.split(";");for(var t={},i=0;i<cookies.length;i++)-1!==cookies[i].split("=")[0].indexOf("poptin_o_a_v_")&&(t.poptin_id=cookies[i].split("poptin_o_a_v_")[1].split("=")[0],t.viewer_id=cookies[i].split("=")[1],Li(t))},Ei=function(t,i,e){var o=new Date;o.setTime(o.getTime()+24*e*60*60*1e3);var n="expires="+o.toUTCString();document.cookie=t+"="+i+"; "+n+"; path=/; SameSite=Lax"},Ri=function(t){for(var i=t+"=",e=document.cookie.split(";"),o=0;o<e.length;o++){for(var n=e[o];" "==n.charAt(0);)n=n.substring(1);if(0==n.indexOf(i))return n.substring(i.length,n.length)}return""},Ui=function(t){t.cookie=="poptin_d_r_v_"+t.poptin_id&&Ei("poptin_d_r_v_"+t.poptin_id,0,365),t.cookie=="poptin_d_a_x_v_"+t.poptin_id&&(value=Xi(),Ei("poptin_d_a_x_v_"+t.poptin_id,value,365))},Hi=function(t){var i=Ri(t);return""!=i&&null!==i},Xi=function(){return today=new Date,dd=today.getDate(),mm=today.getMonth()+1,yyyy=today.getFullYear(),dd<10&&(dd="0"+dd),mm<10&&(mm="0"+mm),yyyy+"-"+mm+"-"+dd},Wi=function(t,i,e,o,n){a("monitorError:",t,i,e,o,n)},qi=function(t,i){var e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]"),o=e.attr("data-scale");if(e.length){var n=e.find(".draggable-container:not(.poptin-tab-container)");if("embedded"==t.poptin_type){var p="scale("+o+", 0)",r=t.design_properties.poptin_design_entry_effect,s=r?r.split("-")[1]:"";"undefined"==typeof poptin_landing_page&&"none"!=s||(p="scale("+o+")"),e.css({display:"block",transform:p}),e.attr("data-scale",o),1==p&&e.css("transform","none"),e.find("#poptinDraggableContainer").css({display:"block"}),jQ224(window).scroll((function(){e.length&&e.parent().length&&((void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop)>=e.parent().offset().top-window.innerHeight/1.5&&!e.hasClass("scrolled")&&(e.addClass("scrolled"),s&&"none"!=s?(e.addClass("poptin-visible poptin__animated"),e.addClass("animate__zoomIn")):e.addClass("poptin-visible poptin__animated"),e.css("transform",null!=o?"scale("+o+")":"none")))})),1==p&&e.css("transform","none"),B(t),ct(t)}else{if(t.poptin_type+"_"+t.poptin_format=="social_format_3"||t.poptin_type+"_"+t.poptin_format=="social_format_7")return!1;var d={effect:null,speed:"_default",delay:"-default"};if("exit"==i&&t.design_properties.poptin_design_exit_effect)s=t.design_properties.poptin_design_exit_effect.split("-")[1];else if(t.design_properties.poptin_design_entry_effect)jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").outerWidth,jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").outerHeight,s=t.design_properties.poptin_design_entry_effect.split("-")[1];switch(s){case"none":d.effect="_none";break;case"up":d.effect="_slideInDown";break;case"down":d.effect="_slideInUp";break;case"left":d.effect="_slideInLeft";break;case"right":d.effect="_slideInRight";break;case"blind":case"fold":d.effect="_flipInX";break;case"bounce":d.effect="_bounceIn";break;case"clip":case"size":case"scale-out":d.effect="_zoomIn";break;case"explode":case"fade":d.effect="_fadeIn";break;case"highlight":d.effect="_tada";break;case"puff":d.effect="_pulse";break;case"pulsate":d.effect="_flash";break;case"scale":d.effect="_heartBeat";break;case"shake":d.effect="_shakeX"}var l=".poptin-popup[data-poptin-id='"+t.poptin_id+"'] .draggable-container:not(.poptin-tab-container)";if("exit"==i){var c=d.effect;d.effect=c.replace("In","Out"),l=l+", .poptin-popup[data-poptin-id='"+t.poptin_id+"'] .poptin_thank_you_screen, .poptin-popup[data-poptin-id='"+t.poptin_id+"'] .poptin_play_screen, .poptin-popup[data-poptin-id='"+t.poptin_id+"'] .poptin_winning_screen, .poptin-popup[data-poptin-id='"+t.poptin_id+"'] .poptin_losing_screen",jQ224(l).addClass("poptin__animated"),-1!==d.effect.indexOf("slide")&&jQ224(l).addClass("animate__faster"),jQ224(l).addClass("animate_"+d.effect)}else{if(void 0===jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").attr("style")?jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").addClass("no-backdrop-bg"):jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg"),"gamified"==t.poptin_type&&jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").length>0){var _=jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").attr("style"),u=jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").attr("data-overlay");void 0!==_?-1==_.indexOf("background-color")&&void 0===u&&jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg"):jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg")}if(void 0!==jQ224(".poptin-live[data-poptin-id="+t.poptin_id+"]").attr("data-bg-animation")&&("wheel"!=jQ224(".poptin-live[data-poptin-id="+t.poptin_id+"]").attr("data-bg-animation")&&"rain"!=jQ224(".poptin-live[data-poptin-id="+t.poptin_id+"]").attr("data-bg-animation")||jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg")),"gamified"==t.poptin_type&&jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").length>0){_=jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").attr("style"),u=jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").attr("data-overlay");void 0!==_?-1==_.indexOf("background-color")&&void 0===u&&jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg"):jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").removeClass("no-backdrop-bg")}jQ224(".poptin-popup-background[data-poptin-id="+t.poptin_id+"]").css("display","block"),n.css({display:"none"}),e.css({display:"block"});try{a("Entry Animate"),jQ224(l).addClass("poptin-visible poptin__animated"),-1!==d.effect.indexOf("slide")&&jQ224(l).addClass("animate__faster"),jQ224(l).addClass("animate_"+d.effect),ci(t),poptinVisible(t.poptin_id)}catch(i){a("Entry Animate err3"),jQ224(l).addClass("poptin-visible poptin__animated"),-1!==d.effect.indexOf("slide")&&jQ224(l).addClass("animate__faster"),ci(t),jQ224(l).show(500,(function(){poptinVisible(t.poptin_id)}))}setTimeout((function(){"lightbox"!=t.poptin_type&&"gamified"!=t.poptin_type||jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .draggable-container:not(.poptin-tab-container)").animate({top:"0px",left:"0px"},300),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").css({"box-shadow":t.poptin_type+"_"+t.poptin_format=="social_format_2"||"browsing"==t.poptin_type||"lightbox"==t.poptin_type&&"format_3"==t.poptin_format||"lightbox"==t.poptin_type&&"format_9"==t.poptin_format||"bar"==t.poptin_type&&"center-top"==t.design_properties.poptin_location||t.poptin_type+"_"+t.poptin_format=="mobile_format_3"||t.poptin_type+"_"+t.poptin_format=="mobile_format_7"||t.poptin_type+"_"+t.poptin_format=="lightbox_format_4"||t.poptin_type+"_"+t.poptin_format=="lightbox_format_10"?"":"0 3px 9px rgba(0,0,0,.5)"}),B(t),ct(t)}),600)}}"exit"!=i&&function(t){void 0!==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-hastab")&&1==jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").attr("data-hastab")&&(jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+t.poptin_id+'"]').addClass("popup-loaded"),pt(t,"exit"))}(t);var f=t.design_properties;t.is_teasers_on&&(f.poptin_design_auto_close||f.poptin_design_close_on_screen_click)||setTimeout((function(){jQ224(l).removeClass("poptin__animated"),jQ224(l).removeClass((function(t,i){return(i.match(/\banimate_\S+/g)||[]).join(" ")}))}),1e3)}},Ji=function(){return!(!window.performance||1!=performance.navigation.type)},Gi=function(t){jQ224("style.animatebtnCss").remove();var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinFormSubmitText .froala-editor-button");if(i.length&&void 0!==i.attr("data-poptin-animate")&&null!=i.attr("data-poptin-animate")){var e=i.attr("data-poptin-animate");Nn=setInterval((function(){i.toggleClass("poptin__animated animate__"+e)}),3e3)}var o=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinFormCloseText .froala-editor-button");if(o.length&&void 0!==o.attr("data-poptin-animate")&&null!=o.attr("data-poptin-animate")){var n=o.attr("data-poptin-animate");Ln=setInterval((function(){o.toggleClass("poptin__animated animate__"+n)}),3e3)}var p=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-link");p.length&&void 0!==p.attr("data-poptin-animate")&&null!=p.attr("data-poptin-animate")&&jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-link").each((function(){var i=jQ224(this).attr("data-poptin-animate"),e=jQ224(this).parent().attr("id");En[t.poptin_id+"_"+e]=setInterval((function(){jQ224("#"+e).find(".froala-editor-link").toggleClass("poptin__animated animate__"+i)}),3e3)}))},Yi=function(t){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-giftbox-wrapper .fr-giftbox-images .giftbox-img"),e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-giftbox-wrapper .fr-giftbox-images").attr("data-poptin-animate"),o=i.length?i.length:1;i.length>0&&e&&(Bn=setInterval((function(){i.toggleClass("poptin__animated animate__"+e)}),1e3*o))},Vi=function(i){return e=(new TextEncoder).encode(i),o=String.fromCodePoint.apply(String,t(e)),btoa(o);var e,o},Ki=function(t){return(new TextDecoder).decode((i=atob(t),Uint8Array.from(i,(function(t){return t.codePointAt(0)}))));var i},Zi=function(t){var i=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-giftbox-wrapper .fr-giftbox-images").attr("data-poptin-animate"),e=(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-giftbox-wrapper .fr-giftbox-images .giftbox-img"),{}),o=jQ224("#poptinEncPze").val(),n=jQ224("#gamifiedPrizeJSON").length>0?JSON.parse(jQ224("#gamifiedPrizeJSON").val()):o?JSON.parse(Ki(o)):[];jQ224.each(n.prizes,(function(t,i){e[t]=i.chances?Number(i.chances)/100:0})),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .fr-giftbox-images .fr-giftbox").on("click",(function(o){try{clearInterval(Bn)}catch(t){}jQ224(this).attr("data-prize");jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .fr-giftbox-images .giftbox-img").removeClass("poptin__animated animate__"+i).css({"animation-delay":"0s","-webkit-animation-delay":"0s","-moz-animation-delay":"0s","-ms-animation-delay":"0s"}),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .fr-giftbox-images .giftbox-img"),jQ224(o.target).addClass("poptin__animated animate__tada"),setTimeout((function(){jQ224(o.target).removeClass("poptin__animated animate__tada")}),1e3);var p=te(e);(a("prizeWinner",p),a("prizeJSONGotSelected",n.prizes[p]),t.gamified_prize=n.prizes[p],t.gamified_prize.prize_id=p,p&&0==n.prizes[p].loosing_option)?(a("Win"),t.gamified_prize.is_winner=!0,jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen p").each((function(){var t=jQ224(this).html();-1!=t.indexOf("{{prize_label}}")&&n.prizes[p].label&&jQ224(this).html(t.replace("{{prize_label}}",n.prizes[p].label)),-1!=t.indexOf("{{prize_code}}")&&n.prizes[p].code&&jQ224(this).html(t.replace("{{prize_code}}",n.prizes[p].code))})),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").css("display","none").find(".draggable.image-change-video").remove(),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),t.design_properties&&t.design_properties.disable_post_play_screen&&1==t.design_properties.disable_post_play_screen?(ni(t),qt(t)):(jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800)),jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").show(100)}),1e3)):(a("lose"),t.gamified_prize.is_winner=!1,setTimeout((function(){if(jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").css("display","none").find(".draggable.image-change-video").remove(),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800),jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").show(100),t.gamified_prize&&1==t.gamified_prize.redirect_to&&null!=t.gamified_prize.redirect_to_options.redirect_to_url){a("ifLinkConversion3");var i=t.gamified_prize.redirect_to_options.redirect_close_delay?0:1e3*(t.wheel_has_coupon?3*Qo:Qo);setTimeout((function(){ti(t,"direct","gamified")}),i)}}),1e3))}))},te=function(t){var i,e=0,o=Math.random();for(i in t)if(o<=(e+=t[i]))return i},ie=function(t,i,e,o,n,p){var r=te(n),s=0,d=function(o){Object.hasOwnProperty.call(n,o)&&(o==r&&(a(o,s,p.prizes[o],r),e=24+s,jQ224(".spin-wheel-animation-"+t.poptin_id).remove(),jQ224(i).append('<style class="spin-wheel-animation" id="spin-wheel-animation-'+t.poptin_id+'">\n\t\t\t\t\t\t@keyframes spinning {\n\t\t\t\t\t\t\tfrom { transform: rotate(0); }\n\t\t\t\t\t\t\tto { transform: rotate(-'+30*e+"deg); }\n\t\t\t\t\t\t}\n\t\t\t\t\t</style>"),jQ224(i).find(".pop-wheel-wrap").toggleClass("pop-spinning"),jQ224(document).off("click",i+" .pop-wheel-overlay"),setTimeout((function(){r&&0==p.prizes[r].loosing_option?(a("Win"),t.gamified_prize.is_winner=!0,jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen p").each((function(){var t=jQ224(this).html();-1!=t.indexOf("{{prize_label}}")&&p.prizes[o].label&&jQ224(this).html(t.replace("{{prize_label}}",p.prizes[o].label)),-1!=t.indexOf("{{prize_code}}")&&p.prizes[o].code&&jQ224(this).html(t.replace("{{prize_code}}",p.prizes[o].code))})),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").css("display","none").find(".draggable.image-change-video").remove(),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),t.design_properties&&t.design_properties.disable_post_play_screen&&1==t.design_properties.disable_post_play_screen?(ni(t),qt(t)):(jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_play_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800)),jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").show(100)}),1e3)):(a("lose"),t.gamified_prize.is_winner=!1,setTimeout((function(){if(jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").css("display","none").find(".draggable.image-change-video").remove(),jQ224("[data-poptin-id="+t.poptin_id+"] .draggable-container").removeClass("poptin-visible poptin__animated"),jQ224("[data-poptin-id="+t.poptin_id+"]").css("box-shadow",""),jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").addClass("poptin-visible poptin__animated animate__fadeIn animate__faster"),setTimeout((function(){jQ224("[data-poptin-id="+t.poptin_id+"] .poptin_losing_screen").removeClass("poptin__animated animate__fadeIn animate__faster")}),800),jQ224(document).on("click",'[data-poptin-id="'+t.poptin_id+'"] #closeXButton',(function(){closePoptinOnXclick(jQ224(this).get(0))})),jQ224("[data-poptin-id="+t.poptin_id+"] .close-x-button").show(100),t.gamified_prize&&1==t.gamified_prize.redirect_to&&null!=t.gamified_prize.redirect_to_options.redirect_to_url){a("ifLinkConversion3");var i=t.gamified_prize.redirect_to_options.redirect_close_delay?1e3*(t.design_properties.disable_post_play_screen?8:0):1e3*(t.wheel_has_coupon?3*Qo:Qo);setTimeout((function(){ti(t,"direct","gamified")}),i)}}),1e3))}),7e3),t.gamified_prize=p.prizes[o],t.gamified_prize.prize_id=o,o==r||0==p.prizes[o].loosing_option?(a("Win"),t.gamified_prize.is_winner=!0):(a("lose"),t.gamified_prize.is_winner=!1)),s+=1)};for(var l in n)d(l)},ee=function(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="[data-poptin-id="+t.poptin_id+"]",o=(jQ224(e).find(".pop-wheel-wrap"),{}),n=jQ224("#poptinEncPze").val(),p=jQ224("#gamifiedPrizeJSON").length>0?JSON.parse(jQ224("#gamifiedPrizeJSON").val()):n?JSON.parse(Ki(n)):[];jQ224.each(p.prizes,(function(t,i){o[t]=i.chances?Number(i.chances)/100:0})),t.design_properties.disable_post_play_screen&&0!=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #poptinDraggableContainer #poptinFormSubmitText").length?i&&ie(t,e,0,0,o,p):jQ224(e).on("click",".pop-wheel-overlay",(function(){ie(t,e,0,0,o,p),jQ224(document).off("click",e+" .pop-wheel-overlay")}))},oe=function(t){var i="";jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-coupon").each((function(){if(i=jQ224(this).text(),t.design_properties.coupon&&""!=t.design_properties.coupon){t.design_properties.coupon.coupon_type;i=t.design_properties.coupon.code;var e=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-coupon p").text();jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-coupon p").html(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-coupon p").html().replace(e,i))}jQ224(this).attr("data-cc",i),jQ224(this).css("cursor","pointer"),jQ224(this).find("p").css("cursor","pointer"),jQ224(this).find("span").css("cursor","pointer"),""==i&&jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-coupon-element").remove()})),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .froala-editor-coupon").on("click",(function(i){jQ224("#holdcoupontext").remove(),jQ224(".poptin-coupon-tooltip").remove();var e=jQ224(this).text(),o={event_name:"couponCopy",coupon_code:e};t.gamified_prize&&(o.prize_label=t.gamified_prize.label);var n=new CustomEvent("couponCopy",{bubbles:!0,detail:Tt(t,o)});document.dispatchEvent(n);jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").append('<input type="text" id="holdcoupontext" aria-label="Coupon" />'),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] #holdcoupontext").val(e).select(),document.execCommand("Copy");var p='<span style="position: absolute;background: #000;width: 70px;height: 24px;line-height: 25px;color: #fff;font-size: 12px;border-radius: 6px;top: -30px;left: calc(50% - 35px);display:none;" class="poptin-coupon-tooltip">'+("en"==Ho?Yo:Vo)+"</span>";jQ224(this).parent().append(p),jQ224(this).parent().find(".poptin-coupon-tooltip").fadeIn(),setTimeout((function(){jQ224(".poptin-coupon-tooltip").fadeOut(300)}),500),jQ224("#holdcoupontext").remove();var a=jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-coupon-element").attr("data-count-conversion");if(void 0!==a&&"true"==a){Gt(t,null,"coupon",this)}}))},ne=function(t){return jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-form-link-button").length>0&&(jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-form-link-button").each((function(){var t=jQ224(this).attr("id"),i=jQ224(this).attr("data-btnurl");jQ224(this).attr("data-btntarget");if(jQ224(this).find("a").length>0){i=jQ224(this).find("a").attr("href"),void 0!==jQ224(this).find("a").attr("target")&&("_blank",jQ224("#"+t).attr("data-btntarget","_blank")),jQ224("#"+t).attr("data-btnurl",i);var e=jQ224(this).find("a").text();jQ224(this).find("a").parent().html(e)}jQ224(this).css("cursor","pointer"),jQ224(this).find("p, input, a, span, div, br, img").css("cursor","pointer")})),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-form-link-button").on("click",(function(i){i.stopImmediatePropagation();var e=jQ224(this).data();jQ224(this).parents(".poptin-popup").attr("data-poptin-id");if(e.countConversion&&!0===e.countConversion){var o=jQ224(this).attr("id");"poptinFormCloseText"===o&&(o="close_btn"),Gt(t,null,o,this)}else jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"]").addClass("poptin-redirected"),pe(t,this)})),jQ224(".poptin-popup[data-poptin-id="+t.poptin_id+"] .poptin-form-link-button").on("keydown",(function(t){32!==t.keyCode&&13!==t.keyCode||jQ224(t.target).click()}))),!1},pe=function(t,i){var e=jQ224(i).data(),o=jQ224(i).parents(".poptin-popup").attr("data-poptin-id");if(e.btnurl&&!e.launchPoptin||e.linkUrl&&1==e.linkUrl){if(closePoptin(o,!0),e.btnurl){if(-1==e.btnurl.indexOf("http://")&&-1==e.btnurl.indexOf("https://")){var n=e.btnurl;"-1"!=n.indexOf("tel:")||"-1"!=n.indexOf("sms:")?e.btnurl=e.btnurl:e.btnurl="//"+e.btnurl}e.btntarget?setTimeout((function(){window.open(e.btnurl,"_blank")}),100):window.location.href=e.btnurl}}else if(e.launchPoptin&&1==e.launchPoptin){closePoptin(o,!0);var p={redirectFromBtns:!0};p.poptin_from=o,p.poptin_to=e.launchPoptinId,e.launchPoptinId&&pi(p)}else e.shopifyCart&&1==e.shopifyCart?(a("Add to cart"),a(t),"undefined"!=typeof Shopify&&(a("handeShopifyAddToCart()"),Kt(t,!1,jQ224(i).attr("id")))):closePoptin(o)},ae=function t(i){var e=[],o=jQ224(".poptin-popup[data-poptin-id="+i.poptin_id+"]").attr("data-bg-animation");"embedded"!=i.poptin_type&&"fullpage"!=i.poptin_type||(o="");var n="modelBackdrip",p="bgeffect_canvas_"+i.poptin_id;if(void 0!==o&&""!=typeof o){switch(o){case"wheel":e.push(new Wheel(25e-5*window.innerWidth*window.innerHeight,n,p));break;case"starry-sky":e.push(new StarrySky(n,p));break;case"ball":e.push(new Balls(n,p)),e[e.length-1].play();break;case"snow":e.push(new Snows(parseInt(5e-4*window.innerWidth*window.innerHeight),n,p)),e[e.length-1].start();break;case"rain":e.push(new Rain("01",n,p));break;case"confetti":startConfetti(n,p)}if("starry-sky"==o)jQ224("#"+n+"[data-poptin-id="+i.poptin_id+"]").css("opacity",.7);else if("rain"==o||"wheel"==o)jQ224("#"+n+"[data-poptin-id="+i.poptin_id+"]").css("opacity",.5);else{var a="gamified"!=i.poptin_type?1:.5;(void 0===jQ224(".poptin-popup-background[data-poptin-id="+i.poptin_id+"]").attr("style")||void 0!==jQ224(".poptin-popup-background[data-poptin-id="+i.poptin_id+"]").attr("style")&&-1==jQ224(".poptin-popup-background[data-poptin-id="+i.poptin_id+"]").attr("style").indexOf("background-color"))&&(a=.5),jQ224("#"+n+"[data-poptin-id="+i.poptin_id+"]").css("opacity",a)}setInterval((function(){jQ224("#bgeffect_canvas_"+i.poptin_id).length||t(i)}),10)}},re=function(t){jQ224("body").append(t.client_restriction_setting.upgrade_popup)},se=function(t){for(var i=" ",e=0;e<window.sessionStorage.length;e++){var o=window.sessionStorage.key(e);o.includes(t)&&(i+=o+"="+window.sessionStorage.getItem(o)+" ")}return i.slice(0,-1)};window.pixelAdded=!0;var de=new Object,le="",ce="https://app.popt.in",_e="",ue="app",fe="fa0205f2-ca63-4204-9a04-7349bf31417d";if("192.168.10.10"==window.location.hostname)_e=le="http://192.168.10.10";else if(".test"==window.location.hostname.slice(-5))le="https://"+window.location.hostname,_e=le,Hi("poptin_cdn_server")&&(_e="https://"+Ri("poptin_cdn_server"),le="https://"+Ri("poptin_cdn_server"));else if("dev"==ue&&".test"!=window.location.hostname.slice(-5)){var ge="https://"+window.location.hostname,me=new URLSearchParams(window.location.search);me.has("cdn")?ge="https://"+me.get("cdn"):Hi("poptin_cdn_server")&&(ge="https://"+Ri("poptin_cdn_server")),le=ge,_e=ge,"popages.com"==window.location.hostname&&(_e=le="https://dev2.dev.popt.in")}else"app"==ue&&(le="https://display.popt.in",_e="https://cdn.popt.in");var he,ve=le,ye="https://www.poptin.co.il/",be="https://www.poptin.com/",we='<button type="button" id="closeXButton" onclick="closePoptinOnXclick(this);" class="close-x-button" style="text-align: right; margin-top: -2px;-webkit-appearance: none;cursor: pointer;background: 0 0;border: 0;float: right;padding:0px;font-size: 20px;line-height: 0.5;color: #000;text-shadow: #fff 0px 0px 10px;filter: alpha(opacity=20);text-transform: none;overflow: visible;margin: 0;font-size:53px;line-height: 31px;z-index: 9999;position: relative;">&times;</button>',je='<button type="button" id="closeSkipButton" onclick="closePoptinOnXclick(this);" class="close-x-button" style="text-align: right; margin-top: -2px;-webkit-appearance: none;padding: 5px;cursor: pointer;background: 0 0;border: 0;float: right;font-size: 25px;line-height: 0.5;color: #000;text-shadow: 0 1px 0 #fff;filter: alpha(opacity=20);opacity: 0.7;text-transform: none;overflow: visible;margin: 0;font-weight:bold;z-index: 9999;position: relative;">Skip</button>',Qe='<div id="closeButtonNote" class="close-button-note" style="display:none;text-align: center;padding: 9px 14px;position: absolute;top: -65px;right:0px;background: white;border-radius: 6px;word-wrap: break-word;max-width: 200px;border: 1px solid rgba(0,0,0,.2);opacity: 1;z-index:8999"></div>',xe='<div class="poptin-credit" style="z-index:100000;position: absolute;bottom: 0px;left: 0px;line-height: 0px;"><a href="https://www.poptin.co.il" target="_BLANK"><img src="'+_e+'/css/images/credit.png" alt="Powered by poptin" style="width: 118px;height: 20px;"></a></div>',ke=window.screen.availWidth,Ce=window.innerHeight,Se=800,Ie=500,Te=1920,Pe=100,De=197,Oe=50,ze=105,Ae=285,Me=186,Fe=500,$e=300,Ne=200,Le=300,Be=450,Ee=70,Re=70,Ue=402,He=1080,Xe=1920,We=1080,qe=screen.width,Je=screen.height,Ge=483,Ye=150,Ve=390,Ke=242,Ze=100,to=75,io=214,eo=340,oo=70,no=70,po=300,ao=300,ro=365,so=370,lo=770,co=160,_o=370,uo=635,fo=370,go=570,mo=335,ho=520,vo=770,yo=192,bo=800,wo=500,jo=new Object,Qo=4;window.poptin_loadcontrol_fix=!!window.poptin_loadcontrol_fix&&window.poptin_loadcontrol_fix,window.poptin_disable_fa=!!window.poptin_disable_fa&&window.poptin_disable_fa,window.poptin_disable_localstorage=!!window.poptin_disable_localstorage&&window.poptin_disable_localstorage,window.poptin_single_page_app=!!window.poptin_single_page_app&&window.poptin_single_page_app,window.landing_page_teaser_on=!!window.landing_page_teaser_on&&window.landing_page_teaser_on,window.upgrade_popup_setting=window.upgrade_popup_setting?window.upgrade_popup_setting:null,window.previous_url_spa=window.previous_url_spa?window.previous_url_spa:null,window.poptinTimeDelayTrigger=window.poptinTimeDelayTrigger?window.poptinTimeDelayTrigger:null,window.poptinExitPopupShown=!!window.poptinExitPopupShown&&window.poptinExitPopupShown,window.poptin_display_trigger=!!window.poptin_display_trigger&&window.poptin_display_trigger,window.poptin_disable_fonts=!!window.poptin_disable_fonts&&window.poptin_disable_fonts;var xo={},ko=[],Co=[];window.updateClockInterval=0;var So=300,Io="",To="",Po=0,Do={browsing_format_1:{type:"vertical"},browsing_format_2:{type:"vertical"},browsing_format_3:{type:"vertical"},bside_format_1:{type:"vertical"},bside_format_2:{type:"vertical"},bside_format_3:{type:"vertical"},bside_format_4:{type:"vertical"},bside_format_5:{type:"vertical"},bside_format_6:{type:"vertical"},bside_format_7:{type:"vertical"},bside_format_8:{type:"vertical"},bside_format_9:{type:"vertical"},lightbox_format_1:{type:"vertical"},lightbox_format_2:{type:"horizontal"},lightbox_format_3:{type:"vertical"},lightbox_format_4:{type:"horizontal"},lightbox_format_5:{type:"horizontal"},lightbox_format_6:{type:"horizontal"},lightbox_format_7:{type:"vertical"},lightbox_format_8:{type:"horizontal"},lightbox_format_9:{type:"vertical"},lightbox_format_10:{type:"horizontal"},lightbox_format_11:{type:"horizontal"},lightbox_format_12:{type:"horizontal"},lightbox_format_13:{type:"vertical"},lightbox_format_14:{type:"horizontal"},lightbox_format_15:{type:"horizontal"},lightbox_format_16:{type:"horizontal"},lightbox_format_17:{type:"vertical"},lightbox_format_18:{type:"horizontal"},lightbox_format_19:{type:"vertical"},lightbox_format_20:{type:"vertical"},lightbox_format_21:{type:"vertical"},lightbox_format_22:{type:"vertical"},sside_format_1:{type:"vertical"},sside_format_2:{type:"vertical"},sside_format_3:{type:"vertical"},sside_format_4:{type:"vertical"},sside_format_5:{type:"vertical"},sside_format_6:{type:"vertical"},sside_format_7:{type:"vertical"},sside_format_8:{type:"vertical"},sside_format_9:{type:"vertical"},sside_format_10:{type:"vertical"},sside_format_11:{type:"vertical"},sside_format_12:{type:"vertical"},sside_format_13:{type:"vertical"},sside_format_14:{type:"vertical"},sside_format_15:{type:"vertical"},sside_format_16:{type:"vertical"},sside_format_17:{type:"vertical"},sside_format_18:{type:"vertical"},sside_format_19:{type:"vertical"},social_format_1:{type:"vertical"},social_format_2:{type:"vertical"},social_format_3:{type:"vertical"},social_format_4:{type:"vertical"},social_format_5:{type:"vertical"},social_format_6:{type:"vertical"},social_format_7:{type:"vertical"},social_format_8:{type:"vertical"},bar_format_1:{type:"horizontal"},bar_format_2:{type:"horizontal"},bar_format_3:{type:"horizontal"},bar_format_4:{type:"horizontal"},bar_format_5:{type:"horizontal"},bar_format_6:{type:"horizontal"},bar_format_7:{type:"horizontal"},bar_format_8:{type:"horizontal"},bar_format_9:{type:"horizontal"},bar_format_10:{type:"horizontal"},bar_format_11:{type:"horizontal"},bar_format_12:{type:"horizontal"},bar_format_13:{type:"horizontal"},bar_format_14:{type:"horizontal"},bar_format_15:{type:"horizontal"},bar_format_16:{type:"horizontal"},bar_format_17:{type:"horizontal"},fullpage_format_1:{type:"vertical"},fullpage_format_2:{type:"vertical"},fullpage_format_3:{type:"horizontal"},fullpage_format_4:{type:"horizontal"},fullpage_format_5:{type:"vertical"},fullpage_format_6:{type:"vertical"},fullpage_format_7:{type:"vertical"},fullpage_format_8:{type:"horizontal"},fullpage_format_9:{type:"vertical"},fullpage_format_10:{type:"vertical"},fullpage_format_11:{type:"vertical"},fullpage_format_12:{type:"vertical"},mobile_format_1:{type:"horizontal"},mobile_format_2:{type:"horizontal"},mobile_format_3:{type:"vertical"},mobile_format_4:{type:"horizontal"},mobile_format_5:{type:"horizontal"},mobile_format_6:{type:"horizontal"},mobile_format_7:{type:"horizontal"},mobile_format_8:{type:"vertical"},mobile_format_9:{type:"horizontal"},mobile_format_10:{type:"horizontal"},mobile_format_11:{type:"horizontal"},mobile_format_12:{type:"horizontal"},mobile_format_13:{type:"vertical"},mobile_format_14:{type:"horizontal"},mobile_format_15:{type:"horizontal"},mobile_format_16:{type:"horizontal"},mobile_format_17:{type:"horizontal"},embedded_format_1:{type:"vertical"},embedded_format_2:{type:"horizontal"},embedded_format_3:{type:"vertical"},embedded_format_4:{type:"vertical"},embedded_format_5:{type:"vertical"},embedded_format_6:{type:"horizontal"},embedded_format_7:{type:"vertical"},gamified_format_1:{type:"vertical"},gamified_format_2:{type:"vertical"},gamified_format_3:{type:"vertical"}};window.jQ224=null;var Oo,zo=new Array,Ao=new Object,Mo=!0,Fo=2e3,$o=!!/Android/i.test(navigator.userAgent),No=/(iPad|iPhone|iPod)/g.test(navigator.userAgent),Lo=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,Bo=(/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor),navigator.vendor&&navigator.vendor.indexOf("Apple")>-1&&navigator.userAgent&&-1==navigator.userAgent.indexOf("CriOS")&&-1==navigator.userAgent.indexOf("FxiOS")),Eo=/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()),Ro=!1,Uo=!1,Ho="en",Xo=null;window.poptinSubmitted=new Array;var Wo=new Array,qo=!1,Jo="Skip",Go="דלג",Yo="Copied",Vo="הועתק",Ko="",Zo={mobile:5,fullpage:4,browsing:1,sside:4,bside:3,social:4,bar:5,lightbox:6},tn="",en=(new Date).getFullYear(),on={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],he:["יום ראשון","יום שני","יום שלישי","יום רביעי","יום חמישי","יום שישי","יום שבת"]},nn={en:["January","February","March","April","May","June","July","August","September","October","November","December"],he:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"]},pn=new Date;pn.setMonth(pn.getMonth()-1),pn={en:nn.en[pn.getMonth()],he:nn.he[pn.getMonth()],xx:pn.toLocaleString("default",{month:"long"})};var an=new Date;an={en:nn.en[an.getMonth()],he:nn.he[an.getMonth()],xx:an.toLocaleString("default",{month:"long"})};var rn=new Date;rn.setMonth(rn.getMonth()+1),rn={en:nn.en[rn.getMonth()],he:nn.he[rn.getMonth()],xx:rn.toLocaleString("default",{month:"long"})};var sn=new Date;sn.setDate(sn.getDate()-1);var dn=sn.getDate()+"/"+sn.getMonth()+"/"+sn.getFullYear(),ln=sn.getMonth()+"/"+sn.getDate()+"/"+sn.getFullYear();sn={en:on.en[sn.getDay()],he:on.he[sn.getDay()]};var cn=new Date;cn.setDate(cn.getDate());var _n=cn.getDate()+"/"+cn.getMonth()+"/"+cn.getFullYear(),un=cn.getMonth()+"/"+cn.getDate()+"/"+cn.getFullYear();cn={en:on.en[cn.getDay()],he:on.he[cn.getDay()]};var fn=new Date;fn.setDate(fn.getDate()+1);var gn,mn=fn.getDate()+"/"+fn.getMonth()+"/"+fn.getFullYear(),hn=fn.getMonth()+"/"+fn.getDate()+"/"+fn.getFullYear(),vn=[{tag_input:"curr_year",pre:1,value:en},{tag_input:"prev_mon",pre:2,value:pn},{tag_input:"curr_mon",pre:2,value:an},{tag_input:"next_mon",pre:2,value:rn},{tag_input:"yest_day",pre:2,value:sn},{tag_input:"today_day",pre:2,value:cn},{tag_input:"tomo_day",pre:2,value:fn={en:on.en[fn.getDay()],he:on.he[fn.getDay()]}},{tag_input:"yest_dmy",pre:1,value:dn},{tag_input:"yest_mdy",pre:1,value:ln},{tag_input:"today_dmy",pre:1,value:_n},{tag_input:"today_mdy",pre:1,value:un},{tag_input:"tomo_dmy",pre:1,value:mn},{tag_input:"tomo_mdy",pre:1,value:hn}],yn=[],bn=new URLSearchParams(window.location.search).get("ppt-preview"),wn=null,jn=null,Qn=0;if(window.ShopifyAnalytics&&(wn="shopify",void 0===(Qn=jn=window.ShopifyAnalytics.meta.page.customerId)&&(Qn=jn=0)),void 0!==window.wixDevelopersAnalytics){var xn=function(){var t=document.location.host;fetch("https://".concat(t,"/_api/apps/current-member/").concat(fe)).then((function(t){return t.json()})).then((function(t){kn=jn=t.hasOwnProperty("member")&&t.member.hasOwnProperty("id")&&t.member.id?t.member.id:0}))};wn="wix",xn(),window.wixDevelopersAnalytics.register(fe,(function(t,i){switch(t){case"CustomEvent":"Log in Submit"==i.eventAction.trim()&&setTimeout(xn,2e3);break;case"ViewContent":"Stores"==i.origin&&i.id&&i.name&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(t&&null!=t&&t.id&&t.name&&(void 0!==kn&&0!=kn||attempWixLogin(),kn&&0!=kn)){var i={product_id:t.id,product_name:t.name,category:null==t?void 0:t.category},e=Hi("poptin_browse_abandonment_products")?JSON.parse(Ri("poptin_browse_abandonment_products")):[];if(e.length>0)if(e.some((function(i){return i.product_id===t.id}))){var o=e.findIndex((function(i){return i.product_id===t.id}));e[o].category=null==t?void 0:t.category}else e.push(i);else e.push(i);Ei("poptin_browse_abandonment_products",JSON.stringify(e));var n={client_id:l(),customer_id:kn,products:e,source_table:"browse_abandonment"};jQ224.ajax({url:"".concat(le,"/wix/save-ordered-products"),type:"POST",contentType:"application/json",data:JSON.stringify(n),dataType:"json"},"json")}}(i);break;case"AddToCart":(!localStorage.getItem("poptin_wix_cart_id")||localStorage.getItem("poptin_wix_cart_id")&&localStorage.getItem("poptin_wix_cart_id")!=i.cartId)&&localStorage.setItem("poptin_wix_cart_id",i.cartId),r(i,"add");break;case"RemoveFromCart":r(i,"remove");break;default:console.log("Handle default event with this event name",t),console.log("Handle default event with this event data",i)}}));var kn=0}"function"!=typeof poptinVisible&&(window.poptinVisible=function(t){a("Showing "+t)});var Cn=!1,Sn=[],In=[];"function"!=typeof onpoptinClose&&(window.onpoptinClose=function(t){a("Closing "+t),Eo&&he.poptin_type+"_"+he.poptin_format=="gamified_format_2"&&(jQ224("html, body").css({overflow:"auto",height:"auto"}),gn&&(window.scrollTo(0,gn),Cn=!1));var i=window.location.href,e=new URLSearchParams({client_id:l(),url:i,converted_email:localStorage.getItem("poptin_converted_email"),store_integration:wn,store_integration_customer_id:jn});jQ224.ajax({url:"".concat(le,"/api/display/closed/").concat(t,"?").concat(e.toString()),async:!0,cache:!0,dataType:"json",type:"get"},"json")}),"function"!=typeof onpoptinSubmit&&(window.onpoptinSubmit=function(t){a("Submitting "+t)});var Tn=0;window.poptinStarted=!!window.poptinStarted&&window.poptinStarted;var Pn=[],Dn=sessionStorage.getItem("pop_urls")||"[]";sessionStorage.getItem("pop_landed_url");"function"!=typeof runPoptinNow&&(window.runPoptinNow=function(){void 0!==window.Shopify&&window.Shopify.shop?window.Shopify.customerPrivacy&&"no"==window.Shopify.customerPrivacy.getTrackingConsent()||(window.Shopify.customerPrivacy&&"yes"==window.Shopify.customerPrivacy.getTrackingConsent()?runPoptinNowStart():shopifyCookieInterval=setInterval((function(){window.Shopify.customerPrivacy&&window.Shopify.customerPrivacy.userCanBeTracked()?(clearInterval(shopifyCookieInterval),runPoptinNowStart()):(window.Shopify.customerPrivacy&&!window.Shopify.customerPrivacy.userCanBeTracked()||runPoptinNowStart(),clearInterval(shopifyCookieInterval))}),1e3)):runPoptinNowStart()}),"function"!=typeof runPoptinNowStart&&(window.runPoptinNowStart=function(){if(poptinStarted)return!1;poptinStarted=!0,console.log("runPoptinNow");var t=Array(),i="";if(null==document.getElementById("pixel-script-poptin")||null==document.getElementById("pixel-script-poptin")){t=document.getElementsByTagName("script");for(var e=0;e<t.length;e++){var o=t[e].src;if(o&&-1!==o.indexOf("popt.in/pixel.js")){!0,i=o;break}}}else i=document.getElementById("pixel-script-poptin").src;if(i.length>0){if((i=i.split("?")[1]).indexOf("&")>-1){i=i.split("&");for(e=0;e<i.length;e++){void 0!==(n=i[e].split("="))[0]&&void 0!==n[1]&&(de[n[0]]=decodeURIComponent(n[1]))}}else{var n;void 0!==(n=i.split("="))[0]&&void 0!==n[1]&&(de[n[0]]=decodeURIComponent(n[1]))}!function(){function t(){jQ224=jQuery.noConflict(!0),jQ224.ui=window.jQuery.ui,c()}function i(){jQ224=jQuery.noConflict(!0),jQ224.ui=void 0!==window.$&&void 0!==window.$.ui?window.$.ui:void 0,c()}function e(){jQ224=jQuery.noConflict(!0),c()}function o(t){document.getElementById("poptin_jQuery")&&document.getElementById("poptin_jQuery").remove();var i=document.createElement("script");if(i.setAttribute("type","text/javascript"),i.setAttribute("id","poptin_jQuery"),i.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.0/jquery.min.js"),i.setAttribute("async","true"),i.readyState?i.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||t()}:i.onload=t,(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(i),void 0!==window.Shopify&&window.Shopify.shop){document.getElementById("poptin_xhook")&&document.getElementById("poptin_xhook").remove();var e=document.createElement("script");e.setAttribute("id","poptin_xhook"),e.setAttribute("src","//unpkg.com/xhook@latest/dist/xhook.min.js"),(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(e)}if(document.getElementById("poptin_googleapis"),!document.getElementById("poptin_cloudflare")){var o=this.document.createElement("link");o.setAttribute("rel","preconnect"),o.setAttribute("id","poptin_cloudflare"),o.setAttribute("href","https://cdnjs.cloudflare.com"),(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(o)}if(!document.getElementById("poptin_css_link")){var n=this.document.createElement("link");n.setAttribute("rel","preconnect"),n.setAttribute("id","poptin_css_link"),n.setAttribute("href",ve),(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(n)}}console.log("poptinInit loading"),Pi(),d(),function(){try{if(!poptinAfterPageLoad||"noConflict"!=poptinAfterPageLoad&&"noJqueryUi"!=poptinAfterPageLoad)void 0!==window.$&&void 0!==window.$.ui?o(i):void 0!==window.jQuery&&void 0!==window.jQuery.ui?o(t):o(e);else{var n=!0;void 0!==window.$?(jQ_ver_arr=$.fn.jquery.split("."),jQ_ver_arr[0]>1||1==jQ_ver_arr[0]&&jQ_ver_arr[1]>7?jQ224="noJqueryUi"==poptinAfterPageLoad?$:$.noConflict():n=!1):void 0!==window.jQuery&&(jQ_ver_arr=jQuery.fn.jquery.split("."),jQ_ver_arr[0]>1||1==jQ_ver_arr[0]&&jQ_ver_arr[1]>7?jQ224="noJqueryUi"==poptinAfterPageLoad?jQuery:jQuery.noConflict():n=!1),n||"noJqueryUi"==poptinAfterPageLoad?c():console.log("Upgrade your jQuery to atleast 1.7 to show poptins")}}catch(t){o(e)}}()}()}else a("Poptin pixel Code not exist")}),"function"!=typeof pageLoadCheck&&(window.pageLoadCheck=function(t){if(2==++Tn)runPoptinNow();else{try{clearTimeout(Pn[t])}catch(t){}Pn[t]=setTimeout((function(){runPoptinNow()}),1e3)}}),window.isPoptinLandingPage=!!window.isPoptinLandingPage&&window.isPoptinLandingPage,window.poptinAfterPageLoad=!!window.poptinAfterPageLoad&&window.poptinAfterPageLoad,poptinAfterPageLoad?(poptinAfterPageLoad=Hi("poptinAfterPageLoad_debug")?Hi("poptinAfterPageLoad_debug"):poptinAfterPageLoad,console.log("poptinAfterPageLoad"),setTimeout((function(){"complete"==document.readyState?runPoptinNow():window.addEventListener||window.hasOwnProperty("onload")?(window.addEventListener("load",(function(){pageLoadCheck("check1")}),!0),window.onload=function(){pageLoadCheck("check2")}):runPoptinNow()}),1500*("noJqueryUi"==poptinAfterPageLoad||"noConflict"==poptinAfterPageLoad?0:1))):runPoptinNow(),"function"!=typeof closePoptinOnXclick&&(window.closePoptinOnXclick=function(t){if(poptin_id=jQ224(event.target).parents(".poptin-popup").attr("data-poptin-id"),zo[poptin_id]&&zo[poptin_id].poptin_trigger?zo[poptin_id].poptin_trigger.close_trigger="x_click":poptin_id&&zo[poptin_id]&&(zo[poptin_id].poptin_trigger={},zo[poptin_id].poptin_trigger.close_trigger="x_click"),poptin_id){var i=!I(poptin_id);closePoptin(poptin_id,!0),setTimeout((function(){i&&$i(poptin_id)}),1e3)}}),"function"!=typeof closeTabPoptinOnXclick&&(window.closeTabPoptinOnXclick=function(t,i){if(1==landing_page_teaser_on)var e=Ao[i];else e=Oo[i];return pt(e,"exit"),void 0!==Co[i]&&clearInterval(Co[i]),!1}),"function"!=typeof poptin_display&&(window.poptin_display=function(t){poptin_display_trigger=!0,$href=le+"/api/display/click/"+t,D($href,!0,!0,!1)}),"function"!=typeof poptin_display_form&&(window.poptin_display_form=function(t){poptin_display_trigger=!0,$href=le+"/api/display/click/"+t,D($href,!0,!0,!1,!0)});var On=[],zn=["Verdana,+Geneva,+sans-serif","Arial,+Helvetica,+sans-serif","Arial+Black,+Gadget,+sans-serif","Comic+Sans+MS,+cursive,+sans-serif","Georgia,+serif","Impact,+Charcoal,+sans-serif","Lucida+Sans+Unicode,+Lucida+Grande,+sans-serif","Palatino+Linotype,+Book+Antiqua,+Palatino,+serif","Tahoma,+Geneva,+sans-serif","Times+New+Roman,+Times,+serif","Trebuchet+MS,+Helvetica,+sans-serif"],An=["Aclonica","Alef","Allan","Allerta Stencil","Allerta","Amaranth","Amatica SC","Annie Use Your Telescope","Anonymous Pro","Anton","Architects Daughter","Arimo","Artifika","Arvo","Asap","Asset","Assistant","Astloch","Bangers","Bentham","Bevan","Bigshot One","Bowlby One SC","Bowlby One","Brawler","Cabin","Calligraffitti","Candal","Cantarell","Cardo","Carter One","Caudex","Cedarville Cursive","Cherry Cream Soda","Chewy","Coda","Coming Soon","Copse","Corben","Cousine","Covered By Your Grace","Crafty Girls","Crimson Text","Crushed","Cuprum","Damion","Dancing Script","David Libre","Dawning of a New Day","Didact Gothic","DM Sans","Dosis","Droid Sans","Droid Sans Mono","Droid Serif","DM Serif Display","EB Garamond","Exo","Expletus Sans","Fontdiner Swanky","Forum","Francois One","Frank Ruhl Libre","Geo","Give You Glory","Goblin One","Goudy Bookletter 1911","Gravitas One","Gruppo","Hammersmith One","Heebo","Holtwood One SC","Homemade Apple","Inconsolata","Indie Flower","IM Fell DW Pica","IM Fell DW Pica SC","IM Fell Double Pica","IM Fell Double Pica SC","IM Fell English","IM Fell English SC","IM Fell French Canon","IM Fell French Canon SC","IM Fell Great Primer","IM Fell Great Primer SC","Irish Grover","Irish Growler","Istok Web","Josefin Sans","Josefin Slab","Judson","Jura","Just Another Hand","Just Me Again Down Here","Kameron","Kenia","Kranky","Kreon","Kristi","La Belle Aurore","Lato","League Script","Lekton","Libre Baskerville","Limelight","Lobster","Lobster Two","Lora","Love Ya Like A Sister","Loved by the King","Luckiest Guy","Maiden Orange","Mako","Maven Pro","Meddon","MedievalSharp","Megrim","Merriweather","Metrophobic","Michroma","Miltonian Tattoo","Miltonian","Miriam Libre","Modern Antiqua","Molengo","Monofett","Montserrat","Mountains of Christmas","Muli","Neucha","Neuton","News Cycle","Nixie One","Nobile","Nova Cut","Nova Flat","Nova Mono","Nova Oval","Nova Round","Nova Script","Nova Slim","Nova Square","Nunito","Nunito Sans","OFL Sorts Mill Goudy TT","Old Standard TT","Open Sans","Open Sans Condensed","Open Sans Hebrew","Orbitron","Oswald","Over the Rainbow","Pacifico","Patrick Hand","Paytone One","Permanent Marker","Philosopher","Play","Playfair Display","Podkova","Poppins","PT Sans","PT Sans Narrow","PT Serif","PT Serif Caption","Puritan","Quattrocento","Quattrocento Sans","Quicksand","Radley","Raleway","Redressed","Reenie Beanie","Rock Salt","Rokkitt","Roboto","Rubik","Ruslan Display","Schoolbell","Secular One","Shadows Into Light","Shanti","Sigmar One","Six Caps","Slackey","Smythe","Source Sans Pro","Special Elite","Stardos Stencil","Sue Ellen Francisco","Suez One","Sunshiney","Swanky and Moo Moo","Syncopate","Tangerine","Tenor Sans","Terminal Dosis Light","The Girl Next Door","Tinos","Ubuntu","Ultra","Unkempt","UnifrakturCook","UnifrakturMaguntia","Varela","Varela Round","Vibur","Vollkorn","VT323","Waiting for the Sunrise","Wallpoet","Walter Turncoat","Wire One","Yanone Kaffeesatz","Yeseva One","Zeyada","Zilla Slab"];"function"!=typeof closePoptin&&(window.closePoptin=function(t,i){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(i){if(jQ224("[data-poptin-id="+t+"]").find("audio, video").remove(),0==jQ224("[data-poptin-id="+t+"]").length)return!1;i=i||!1;a("closePoptin: "+t),(jQ224(".poptin-popup[data-poptin-id="+t+"][data-poptin-location='center-top'][data-poptin-type='bar']").length>0||"1"==jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-wellcome-screen"))&&Uo&&jQ224("html").animate({"padding-top":"0px"},500),jQ224(".poptin-embedded[data-id='"+t+"']").slideUp();try{clearInterval(Nn)}catch(t){}try{clearInterval(Ln)}catch(t){}try{clearInterval(Bn)}catch(t){}try{var o=jQ224(".poptin-popup[data-poptin-id="+t+"] .froala-editor-link");o.length&&void 0!==o.attr("data-poptin-animate")&&null!=o.attr("data-poptin-animate")&&jQ224(".poptin-popup[data-poptin-id="+t+"] .froala-editor-link").each((function(){var i=jQ224(this).parent().attr("id");clearInterval(En[t+"_"+i])}))}catch(t){}1==landing_page_teaser_on?jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+he.poptin_id+'"]').length>0?"before_show"!=jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-tabshow")&&(pt(he,"entry"),et(he)):it(he,1):void 0!==jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-hastab")&&1==jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-hastab")&&(he=Oo[t],("after_close"==jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-tabshow")||"always"==jQ224(".poptin-popup[data-poptin-id="+t+"]").attr("data-tabshow"))&&(jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+he.poptin_id+'"]').length>0&&jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+he.poptin_id+'"]').hasClass("popup-loaded")?(jQ224('#poptinDraggableContainer-tab[data-load-poptin="'+he.poptin_id+'"]').removeClass("popup-loaded"),"all@display_everytime_everypage_5"==he.d_f_r?0!=he.x_close_button&&(pt(he,"entry"),et(he)):(pt(he,"entry"),et(he))):it(he,1)));var n=0;(he=Oo[t]).poptin_type&&"embedded"!=he.poptin_type&&"fullpage"!=he.poptin_type&&(he.design_properties&&he.design_properties.poptin_design_exit_effect&&"exit_effect-none"==he.design_properties.poptin_design_exit_effect||!he.design_properties.poptin_design_exit_effect?n=0:(qi(he,"exit"),n=800)),setTimeout((function(){i?Yt(t):he.is_teasers_on?setTimeout((function(){Yt(t)}),1500):(jQ224(".poptin-popup[data-poptin-id="+t+"], .poptin-popup-background[data-poptin-id="+t+"]").fadeOut("fast"),setTimeout((function(){Yt(t)}),e?200:5e3)),jQ224("#bgeffect_canvas_"+t).remove()}),n),Mn.firePoptin(t);var p=jQ224(".poptin-popup[data-poptin-id="+t+"]");if(p.hasClass("poptin-submitted")||p.hasClass("poptin-redirected"))"gamified"==he.poptin_type&&jQ224(".poptin-popup[data-poptin-id="+t+"]").removeClass("poptin-submitted poptin-redirected");else{var r=new CustomEvent("poptinClose",{bubbles:!0,detail:Tt(he,{event_name:"poptinClose"})});document.dispatchEvent(r),onpoptinClose(t)}void 0!==he.design_properties.poptin_design_redirect&&1==zo[t].poptin_trigger.convert&&pi(he)}(i)}),PoptinQueue=function(){this.active=!1,this.poptins=[],this.ifActive=function(){return this.active},this.getActive=function(){return this.active},this.setActive=function(t){this.active=t},this.ifRelevent=function(t){return"lightbox"==t.poptin_type||"gamified"==t.poptin_type||"fullpage"==t.poptin_type},this.checkQueue=function(t,i){var e="embedded"!=t.poptin_type?jQ224("body"):jQ224(".poptin-embedded[data-id='"+t.poptin_id+"']");if(this.getActive())if(this.ifRelevent(t));else{if(jQ224('[data-poptin-id="'+t.poptin_id+'"]').length>0)return!1;e.append(t.poptin),zo[t.poptin_id].poptin=t.poptin,ut(t,i)}else{if(this.ifRelevent(t)&&this.setActive(!0),jQ224('[data-poptin-id="'+t.poptin_id+'"]').length>0)return!1;if(!t.poptin.includes("data-poptin-id"))return!1;e.append(t.poptin),zo[t.poptin_id].poptin=t.poptin,ut(t,i)}},this.firePoptin=function(t){he=Oo[t],this.ifActive()&&this.ifRelevent(he)&&this.setActive(!1)}};var Mn=new PoptinQueue,Fn=location.href;if("undefined"!=typeof poptin_single_page_app&&poptin_single_page_app&&(poptin_single_page_app=Hi("poptin_single_page_app_debug")?Hi("poptin_single_page_app_debug"):poptin_single_page_app),"undefined"!=typeof poptin_single_page_app&&poptin_single_page_app){var $n=history.pushState;history.pushState=function(){var t=document.location.pathname,i=localStorage.getItem("poptin_previous_visited_pages");if(i&&i.length>0){var e=i.split("|");e.includes(t)||e.push(t),localStorage.setItem("poptin_previous_visited_pages",e.join("|"))}else localStorage.setItem("poptin_previous_visited_pages",t);previous_url_spa=document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.hash,C(),$n.apply(history,arguments),Hi("poptin_single_page_app_debug")&&a("detect_url_change"),jQ224("#poptinDraggableContainer-tab").remove(),jQ224(".poptin-popup").remove(),jQ224("#modelBackdrip").remove(),poptinStarted=!1,jQ224(document).unbind(),jQ224(window).off("scroll.poptinTriggerScrollEvent"),clearTimeout(poptinTimeDelayTrigger),poptinTimeDelayTrigger=null,runPoptinNow(),Mn=new PoptinQueue},window.addEventListener("popstate",(function(t){a("old location: "+Fn),jQ224("#poptinDraggableContainer-tab").remove(),jQ224(".poptin-popup").remove(),jQ224("#modelBackdrip").remove(),poptinStarted=!1,jQ224(document).unbind(),runPoptinNow(),Fn=document.location,a("new location: "+Fn),Mn=new PoptinQueue}))}var Nn,Ln,Bn,En=[];"function"!=typeof poptinClientLimitLogStatus&&(window.poptinClientLimitLogStatus=function(t){a("poptinClientLimitLogStatus: "+t),jQ224("#poptinUpgradePoptin").hide(),jQ224("#popupRemindMe").hide(),status=t,log_id=upgrade_popup_setting.id,jQ224.ajax({url:le+"/api/display/limitLogs/"+l()+"?status="+status+"&id="+log_id,async:!0,cache:!0,dataType:"json",type:"get"},"json").done((function(t){a(t)})).fail((function(t,i,e){}))}),"function"!=typeof closeUpgradePopup&&(window.closeUpgradePopup=function(){jQ224("#poptinUpgradePoptin").hide(),upgrade_popup_setting.mote_than_two_days&&jQ224("body").append(upgrade_popup_setting.remindme_popup)}),"function"!=typeof poptinUpgradeDontRemindMe&&(window.poptinUpgradeDontRemindMe=function(t){poptinClientLimitLogStatus(t)}),"function"!=typeof poptinUpgradeRemindMe&&(window.poptinUpgradeRemindMe=function(t){poptinClientLimitLogStatus(t)}),"function"!=typeof closeRemindMePopup&&(window.closeRemindMePopup=function(){jQ224("#popupRemindMe").hide()}),"function"!=typeof poptinUpgradePopupClick&&(window.poptinUpgradePopupClick=function(t){poptinClientLimitLogStatus(t)})}},582:()=>{},472:()=>{},197:()=>{},414:()=>{},375:()=>{},142:()=>{},116:()=>{},231:()=>{},841:()=>{},215:()=>{},491:()=>{},830:()=>{},787:()=>{},4:()=>{}},e={};function o(t){var n=e[t];if(void 0!==n)return n.exports;var p=e[t]={exports:{}};return i[t](p,p.exports,o),p.exports}o.m=i,t=[],o.O=(i,e,n,p)=>{if(!e){var a=1/0;for(l=0;l<t.length;l++){for(var[e,n,p]=t[l],r=!0,s=0;s<e.length;s++)(!1&p||a>=p)&&Object.keys(o.O).every((t=>o.O[t](e[s])))?e.splice(s--,1):(r=!1,p<a&&(a=p));if(r){t.splice(l--,1);var d=n();void 0!==d&&(i=d)}}return i}p=p||0;for(var l=t.length;l>0&&t[l-1][2]>p;l--)t[l]=t[l-1];t[l]=[e,n,p]},o.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),(()=>{var t={534:0,399:0,219:0,7:0,261:0,246:0,471:0,22:0,247:0,438:0,154:0,963:0,536:0,522:0,951:0};o.O.j=i=>0===t[i];var i=(i,e)=>{var n,p,[a,r,s]=e,d=0;if(a.some((i=>0!==t[i]))){for(n in r)o.o(r,n)&&(o.m[n]=r[n]);if(s)var l=s(o)}for(i&&i(e);d<a.length;d++)p=a[d],o.o(t,p)&&t[p]&&t[p][0](),t[p]=0;return o.O(l)},e=self.appConfigChunkLoadingGlobal=self.appConfigChunkLoadingGlobal||[];e.forEach(i.bind(null,0)),e.push=i.bind(null,e.push.bind(e))})(),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(557))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(215))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(491))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(830))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(787))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(4))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(582))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(472))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(197))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(414))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(375))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(142))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(116))),o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(231)));var n=o.O(void 0,[399,219,7,261,246,471,22,247,438,154,963,536,522,951],(()=>o(841)));n=o.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssT0FBUUMsSUFBSyxNQUFPQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLE1BQU9DLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxNQUFPQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxNQUFPQyxJQUFLLE1BQU9DLElBQUssTUFBT0MsSUFBSyxNQUFPQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLE1BQU9DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLE1BQU9DLElBQUssS0FBTUMsSUFBSyxNQUFPQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLE1BQU9DLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxNQUFPQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQzkrQkMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxLQUFNQyxJQUFLLE1BQU9DLElBQUssTUFBT0MsSUFBSyxLQUFNQyxJQUFLLE1BQU9DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLE9BQVFDLElBQUssS0FBTUMsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxLQUFNQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxNQUFPQyxJQUFLLE1BQU9DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxNQUFPQyxJQUFLLE9BQVFDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLE9BQVFDLElBQUssS0FBTUMsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLEtBQU1DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxLQUFNQyxJQUFLLElBQUtDLElBQUssSUFBS0MsSUFBSyxNQUFPQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxNQUFPQyxJQUFLLElBQUtDLElBQUssTUFBT0MsSUFBSyxJQUFLQyxJQUFLLE1BQU9DLElBQUssS0FBTUMsSUFBSyxNQUFPQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxPQUFRQyxJQUFLLElBQUtDLElBQUssS0FBTUMsSUFBSyxNQUFPQyxJQUFLLE9BQVFDLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLE1BQU9DLElBQUssSUFBS0MsSUFBSyxRQUFTQyxJQUFLLE1BQU9DLElBQUssSUFBS0MsSUFBSyxJQUFLQyxJQUFLLEtBQU1DLElBQUssS0FBTUMsSUFBSyxLQUN6K0JDLEVBQVk3N0IsS0FBbUIsZUFBaUIsa0JBQ3BEd3ZCLEVBQWNYLFNBQVEsU0FBVXYvQixHQUU1QixJQUFJd3NDLEVBQU1ueEMsTUFBTSxnQ0FBZ0N1a0MsRUFBUyxzREFBc0RLLEVBQUksR0FBRyxLQUNsSHdNLEVBQWtCenNDLEVBQUt5c0MsZ0JBQWtCenNDLEVBQUt5c0MsZ0JBQWtCLE1BQ2hFQyxFQUFpQjlMLEVBQWM2TCxHQXVCbkMsR0FyQkt6c0MsRUFBS3NnQyxPQUFTdGdDLEVBQUtzZ0MsTUFBTTlyQixJQUMxQmc0QixFQUFJcjhCLEtBQUssNEJBQTRCMUwsS0FBSyxNQUFPekUsRUFBS3NnQyxNQUFNOXJCLEtBRTVEZzRCLEVBQUlyOEIsS0FBSyw0QkFBNEIxTCxLQUFLLE1BQVFnTCxHQUFhLHNDQUc5RHpQLEVBQUtnSCxPQUNGaEgsRUFBS2dILE1BQU0vTixPQUFTLEtBQ3JCK0csRUFBS2dILE1BQVFoSCxFQUFLZ0gsTUFBTThULFVBQVUsRUFBRyxJQUFNLE9BRTlDMHhCLEVBQUlyOEIsS0FBSywwQkFBMEIwRCxLQUFLN1QsRUFBS2dILFFBRTdDd2xDLEVBQUlyOEIsS0FBSywwQkFBMEJXLElBQUksVUFBVyxRQUdqRDlRLEVBQUsyc0MsS0FDTkgsRUFBSXI4QixLQUFLLHlCQUF5QjBELEtBQUs3VCxFQUFLMnNDLE1BRTVDSCxFQUFJcjhCLEtBQUsseUJBQXlCMEQsS0FBSyxJQUFJL0MsSUFBSSxVQUFXLFFBR3pEOVEsRUFBS3dnQyxPQUFTLENBQ2YsSUFBSW9NLEVBQW1CejBDLE9BQU8rRyxTQUFTQyxPQUFTLGFBQWVhLEVBQUt3Z0MsT0FDaEV4Z0MsRUFBS2dJLGFBQ0w0a0MsRUFBbUJBLEVBQW1CLFlBQWM1c0MsRUFBS2dJLFlBRTdEd2tDLEVBQUlyOEIsS0FBSywwQkFBMEIxTCxLQUFLLFdBQVltb0MsRUFDeEQsQ0FFSzVzQyxFQUFLckYsTUFDTjZ4QyxFQUFJcjhCLEtBQUssdUNBQXVDMEQsS0FBTTY0QixFQUFpQjFzQyxFQUFLckYsT0FFNUU2eEMsRUFBSXI4QixLQUFLLHVDQUF1Q1csSUFBSSxVQUFXLFFBRWhFOVEsRUFBS3JGLE1BQ0o2eEMsRUFBSXI4QixLQUFLLHNDQUFzQzBELEtBQU02NEIsRUFBaUIxc0MsRUFBSzJnQyxrQkFFM0U2TCxFQUFJcjhCLEtBQUssc0NBQXNDVyxJQUFJLFVBQVcsUUFFL0Q5USxFQUFLeWdDLG1CQUNKK0wsRUFBSXI4QixLQUFLLHVDQUF1QzBELEtBQU03VCxFQUFLeWdDLG1CQUFxQixJQUFNOEwsR0FFdEZDLEVBQUlyOEIsS0FBSyx1Q0FBdUNXLElBQUksVUFBVyxRQUduRTA3QixFQUFJcjhCLEtBQUssMEJBQTBCMUwsS0FBSyxvQkFBcUJ6RSxFQUFLZ0gsT0FDbEV3bEMsRUFBSXI4QixLQUFLLDBCQUEwQjFMLEtBQUssa0JBQW1CekUsRUFBS2hHLFlBQ2hFd3lDLEVBQUlyOEIsS0FBSywwQkFBMEIxTCxLQUFLLGtCQUFtQnpFLEVBQUtnSSxZQUNoRXdrQyxFQUFJcjhCLEtBQUssMEJBQTBCMUwsS0FBSyxzQkFBdUJzUSxFQUFvQjgzQixnQkFFbkY1TSxHQUFVLENBRWQsSUFFQSxJQUFJNk0sRUFBWSxFQUNiLzNCLEVBQW9CMnBCLE1BQVEsSUFDM0JvTyxFQUFZLzNCLEVBQW9CMnBCLFFBRUQsVUFBaEMzcEIsRUFBb0IzYSxVQUF3QjhsQyxFQUFjam5DLFFBQVUsR0FFOURpbkMsRUFBY2puQyxPQUFTOGIsRUFBb0IycEIsU0FEaERvTyxFQUFZNU0sRUFBY2puQyxRQU05QixTQUFxQzh6QyxFQUFPQyxHQUN4QyxJQUFJQyxFQUFPNXhDLE1BQU0sZ0NBQWdDdWtDLEVBQVMsOEJBQThCbjdCLEtBQUssYUFDN0Z3b0MsRUFBT0EsRUFBT0EsRUFBS3IwQyxNQUFNLEtBQUssR0FBSyxJQUN6QixHQUFQbzBDLEVBQ0MzeEMsTUFBTSxnQ0FBZ0N1a0MsRUFBUyw2REFBNkRwd0IsU0FDaEcsR0FBUHc5QixHQUNMM3hDLE1BQU0sZ0NBQWdDdWtDLEVBQVMsZ0ZBQWdGcHdCLFNBTW5JLEdBSEFuVSxNQUFNLGdDQUFnQ3VrQyxFQUFTLDhCQUE4Qjl1QixJQUFLLFFBQVNndkIsRUFBbUJpTixHQUFRQyxHQUFLQyxFQUFLLEdBQUssTUFHbEkvTSxFQUFjam5DLE9BQVM4YixFQUFvQjJwQixPQUF5QyxVQUFoQzNwQixFQUFvQjNhLFNBQXFCLENBQzVGLElBQUk4eUMsRUFBWTd4QyxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS3VsQixRQUFVN3VCLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSw2QkFBNkJ1bEIsUUFDaEo3dUIsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDZCQUE2Qm1NLElBQUksQ0FBQyxLQUFRbzhCLEVBQVUsRUFBRyxNQUNyRyxDQUVKLENBbkJBQyxDQUE0QixhQUFhTCxFQXFCN0MsR0FBRSxLQUdYLEVBT1VqVixHQUFULFNBQTBCcjhCLEdBQ3RCbkQsRUFBUSxvQkFDSmdELE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLd0wsS0FBSyxrQkFBa0JsWCxPQUFPLEdBQzdFWixFQUFRLHFCQUlSKzBDLEdBQW9CNXhDLEVBQU8sUUFBUSxtQkFFOUJILE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLd0wsS0FBSyx1QkFBdUJsWCxPQUFPLEdBQ3ZGWixFQUFRLHFCQUlSKzBDLEdBQW9CNXhDLEVBQU8sUUFBUSx3QkFDOUJBLEVBQU82eEMsZ0JBQXVELEdBQXJDN3hDLEVBQU82eEMsZUFBZUMsYUFBb0ZwMUMsTUFBN0RzRCxFQUFPNnhDLGVBQWVFLG9CQUFvQkMsa0JBRXJIbjFDLEVBQVEscUJBR2pCKzBDLEdBQW9CNXhDLEVBQU8sU0FBUyxZQUVuQyxFQW9FUzhoQyxHQUFULFNBQXNCOWhDLEVBQVE0ZixHQUUxQixJQUFJcXlCLEVBQWFweUMsTUFBTSxvQkFBb0JHLEVBQU9tSixVQUFVLDJCQUEyQm5KLEVBQU9tSixVQUFVLHdCQVN4RyxJQXhFSixTQUEyQm5KLEVBQVE0ZixHQUUvQixJQUFJc3lCLEdBQWEsRUFDYkMsRUFBVSxFQUNWQyxFQUFnQnZ5QyxNQUFPLG1CQUFtQkcsRUFBT21KLFVBQVUsc0JBQXNCbkosRUFBT21KLFVBQVUsd0VBMEJ0RyxPQXpCSWlwQyxFQUFjMzBDLE9BQVMsRUFDdkIyMEMsRUFBY3R5QyxNQUFLLFNBQVN1eUMsR0FDeEIsSUFBSWx0QyxFQUFRNUIsS0FBSzRCLE1BQ0gsR0FBWGd0QyxJQUNLdHlDLE1BQU0sSUFBSTBELEtBQUs5RSxJQUFJeVUsR0FBRyxhQUFpRCxZQUFqQ3JULE1BQU0sSUFBSTBELEtBQUs5RSxJQUFJd0ssS0FBSyxTQUF3RCxTQUFqQ3BKLE1BQU0sSUFBSTBELEtBQUs5RSxJQUFJd0ssS0FBSyxRQUVyRSxZQUFqQ3BKLE1BQU0sSUFBSTBELEtBQUs5RSxJQUFJd0ssS0FBSyxTQUF3RCxTQUFqQ3BKLE1BQU0sSUFBSTBELEtBQUs5RSxJQUFJd0ssS0FBSyxTQUErQixLQUFWOUQsSUFDbkcrc0MsR0FBYSxFQUNiQyxFQUFVLEdBSFZELEdBQWEsRUFNekIsSUFFQUEsR0FBYSxFQVlWQSxDQUVYLENBd0NTSSxDQUFrQnR5QyxHQUFlLENBQzdCZ04sS0FDRGlsQyxFQUFXanBDLFNBQVMsb0NBQ3BCakcsWUFBVyxXQUNQa3ZDLEVBQVd2OEIsWUFBWSxvQkFDdkJ1OEIsRUFBV3Y4QixhQUFhLFNBQVUzVixFQUFPK2xCLEdBQ3JDLE9BQVFBLEVBQVV2RyxNQUFPLG1CQUFxQixJQUFJcFksS0FBSyxJQUMzRCxHQUNKLEdBQUUsTUFLTixJQUFJb3JDLEVBQWtCMXlDLE1BQU0sb0JBQW9CRyxFQUFPbUosVUFBVSwyQkFBMkJuSixFQUFPbUosVUFBVSxNQUN6R3FwQyxFQUFtQkQsRUFBZ0I1OUIsS0FBSyx5Q0FDNUMsR0FBNkIsR0FBekI2OUIsRUFBaUIvMEMsT0FDakIrMEMsRUFBaUJ2cEMsS0FBSyxjQUFldXBDLEVBQWlCbDlCLElBQUksV0FDMURrOUIsRUFBaUJsOUIsSUFBSSxTQUFTLFFBQVF0TSxTQUFTLG1CQUM5QyxDQUNELElBQUl5cEMsRUFBbUJGLEVBQWdCNTlCLEtBQUssMkJBQTJCa1ksUUFDdkU0bEIsRUFBaUJ4cEMsS0FBSyxjQUFld3BDLEVBQWlCbjlCLElBQUksV0FDMURtOUIsRUFBaUJuOUIsSUFBSSxTQUFTLFFBQVF0TSxTQUFTLGNBQ25ELENBS0EsT0E1RFIsU0FBd0JoSixHQUNwQixJQUNJSCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsNkJBQTZCSyxJQUFJLGdCQUMvRSxDQUFDLE1BQU1ILEdBQ0h4TSxFQUFRd00sRUFDWixDQUNBeEosTUFBTyxtQkFBbUJHLEVBQU9tSixVQUFVLDZCQUE2QkosR0FBRyxTQUFRLFNBQVN4SixHQUN4RixHQUFJTSxNQUFNMEQsTUFBTXVoQixTQUFTLGVBQWUsQ0FDcENqbEIsTUFBTTBELE1BQU1tUyxZQUFZLGVBQ3hCLElBQUlnOUIsRUFBa0I3eUMsTUFBTTBELE1BQU0wRixLQUFLLGVBQ3BDeXBDLEdBQ0M3eUMsTUFBTTBELE1BQU0rUixJQUFJLFNBQVVvOUIsRUFFbEMsQ0FDSixHQUNKLENBMkNRQyxDQUFlM3lDLElBRVIsQ0FDWCxDQUVBbkQsRUFBUSxpQkFBaUJtRCxFQUFPbUosV0FFaENRLEdBQVEzSixFQUFPbUosV0FBV1MsZUFBZXdGLFNBQVUsRUFFbkQsSUFFSTZoQixHQUFpQmp4QixFQUFPNGYsRUFDNUIsQ0FBQyxNQUFNdlcsR0FFSEMsR0FBYSxxQ0FBcUNELEVBQUksR0FBRyxHQUFHckosR0FFNUQ0eUMsR0FBd0I1eUMsRUFDNUIsQ0FRTixHQU5VQSxFQUFPNlAsWUFBWSxJQUFJN1AsRUFBT3FaLGVBQWlCLG1CQUFxQnJaLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIsbUJBQXFCclosRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixtQkFFdkx3NUIsR0FBa0I3eUMsRUFBTzRmLEdBSVYsWUFBdEI1ZixFQUFPNlAsYUFDTjdQLEVBQU82eEMsZ0JBQXVELEdBQXJDN3hDLEVBQU82eEMsZUFBZUMsYUFBb0ZwMUMsTUFBN0RzRCxFQUFPNnhDLGVBQWVFLG9CQUFvQkMsZ0JBSWxILEdBSEFuMUMsRUFBUSxxQkFHbUIsWUFBeEJtRCxFQUFPcVosZUFBK0JyWixFQUFPbVosa0JBQWtCMlYseUJBQXlCLENBQzFGLElBQUlna0IsRUFBdUI5eUMsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHFCQUNyRS92QyxZQUFXLFdBQ1Y2dUMsR0FBb0I1eEMsRUFBTyxTQUFTLFdBQ3JDLEdBQUc4eUMsRUFBd0gsS0FBaEdoK0IsU0FBU2crQixJQUF5Qjl5QyxFQUFPbVosa0JBQWtCMlYseUJBQTJCLEVBQUksSUFBeUYsS0FBM0U5dUIsRUFBTyt1QixpQkFBeUMsRUFBdEJna0IsR0FBMEJBLElBQ3hMLE1BQ0NuQixHQUFvQjV4QyxFQUFPLFNBQVMsV0FJckMsRUFPU2l4QixHQUFULFNBQTBCanhCLEVBQVE0ZixHQUF5QyxJQUFEb3pCLEVBQUFDLEVBQWpDQyxFQUFnQjExQyxVQUFBQyxPQUFBLFFBQUFmLElBQUFjLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEdBQUkyMUMsRUFBRTMxQyxVQUFBQyxPQUFBLFFBQUFmLElBQUFjLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEtBRWpFcUMsTUFBTSwwQkFBMEJtVSxTQUNoQ25VLE1BQU0sNEJBQTRCbVUsU0FFeENuWCxFQUFRLHFCQUFxQm1ELEVBQU9tSixXQUdwQ3RKLE1BQU0sb0JBQW9CRyxFQUFPbUosVUFBVSxtQkFBbUJILFNBQVMsb0JBQ3ZFLElBQUlvcUMsRUFBb0J2ekMsTUFBTSxvQkFBb0JHLEVBQU9tSixVQUFVLHdCQUE0QyxJQUFwQitwQyxFQUF5QkEsRUFBbUIseUJBQ25JRyxFQUF3QixHQUN6QkQsRUFBa0IzMUMsUUFBOEIsVUFBcEJ5MUMsRUFFOUJHLEdBREFELEVBQW9CQSxFQUFrQnZtQixTQUNJeFUsT0FBT2hiLE9BQ3BCLG9CQUFwQjYxQyxJQUNURyxFQUF3QnJ6QyxFQUFpQyx5QkFBZSxhQUd6RSxJQUFJc3pDLEVBQW9CLENBQUMsV0FBZSxlQUFnQixZQUFlRCxHQUtqRSxHQUppQixvQkFBcEJILElBQ0ZJLEVBQTJCLFFBQUl0ekMsRUFBaUMsMEJBR3BDLFVBQXBCa3pDLEVBQTZCLENBQzVCLElBQU1LLEVBQXNCLElBQUlDLFlBQVksZUFBZ0IsQ0FBQ0MsU0FBUyxFQUFNQyxPQUFRdlksR0FBbUJuN0IsRUFBUXN6QyxLQUMvR250QyxTQUFTd3RDLGNBQWNKLEdBR00sbUJBQWxCSyxnQkFDUEEsZUFBZTV6QyxFQUFPbUosV0FJMUJ0SixNQUFPLG1CQUFtQkcsRUFBT21KLFVBQVUsc0JBQXNCbkosRUFBT21KLFVBQVUsK0JBQStCckosTUFBSyxTQUFTdXlDLElBQ3JGLElBQWxDOXVDLEtBQUs5RSxHQUFHK0gsUUFBUSxlQUNoQjNHLE1BQU0wRCxNQUFNK1IsSUFBSSxVQUFVLFFBQzFCeUMsSUFBTWxZLE1BQU0wRCxNQUFNd1UsTUFDbEI4N0IsV0FBYWgwQyxNQUFNMEQsTUFBTTBGLEtBQUssZUFDOUJwSixNQUFNMEQsTUFBTXdVLElBQUksS0FBSzg3QixXQUFMLFFBQTJCOTdCLEtBRW5ELEdBQ0osQ0FLQXJJLFFBQXVDaFQsTUFBN0JzRCxFQUFPMDJCLG1CQUFrQyxRQUFVMTJCLEVBQU8wMkIsbUJBSXBFb2QsaUJBQW1CajBDLE1BQU0sb0JBQW9CRyxFQUFPbUosVUFBVSx1REFBdUR3YixLQUFLLFdBRTFIb3ZCLGNBQWdCLENBQ1psd0MsSUFBS2xILE9BQU8rRyxTQUFTMkQsS0FDckIyc0MsU0FBVWgwQyxFQUFPczdCLGNBQ2pCd1ksaUJBQ0ExdEMsU0FBVUYsS0FDVjJHLGFBQWNDLEtBQ2Q0QyxRQUNBdkcsVUFBV25KLEVBQU9tSixVQUNsQnFDLE1BQU9yRixTQUFTcUYsTUFDaEJySyxVQUFXRCxJQUNYK3lDLFFBQVNqbkMsR0FBaUIsU0FBVyxVQUNyQzR2Qiw0QkFBNkJBLEdBQzdCMXZCLG9CQUFxQkMsS0FDckJFLHVCQUF3QmxGLElBQ3hCOEoseUNBQTBDeEosSUFDMUM2RSx1Q0FBd0NqRixJQUN4Q2tGLGtCQUFtQm5GLElBQ25Cb0Ysa0JBQW1CQSxHQUNuQkMsOEJBQStCQSxHQUMvQjVCLGlCQUFrQmxQLE9BQU9tUCxVQUFVQyxTQUNuQ0Msa0JBQWtDLFFBQWhCZ25DLEVBQUFyMkMsT0FBT21QLGlCQUFTLElBQUFrbkMsR0FBZSxRQUFmQSxFQUFoQkEsRUFBa0IvbUMscUJBQWEsSUFBQSttQyxPQUFBLEVBQS9CQSxFQUFpQzltQyxZQUE0QixRQUFwQittQyxFQUFJdDJDLE9BQU9tUCxpQkFBUyxJQUFBbW5DLE9BQUEsRUFBaEJBLEVBQWtCL21DLFdBQVksV0FHakcsSUFBSWdvQyxFQUFnQixJQUFJdjJDLE1BQ3BCdzJDLEVBQWMsQ0FBQyxpQ0FBa0Msa0NBQW1DLGtDQUFtQyxvQ0FBcUMsc0NBRTVKQyxFQUFtQixDQUFDLEVBQ3BCQyxFQUFtQixDQUFDLEVBQ3BCQyxFQUFZejBDLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxZQUFZMUwsT0FBUyxVQUFZLEdBQzNGLEdBQXVCLFVBQXBCeTFDLEVBQTZCLENBMko1QixJQUFLLElBQUlocEIsS0ExSlRycUIsTUFBTyxtQkFBbUJHLEVBQU9tSixVQUFVLElBQUltckMsRUFBVSxxQkFBcUJ0MEMsRUFBT21KLFVBQVUsK0JBQStCckosTUFBSyxXQUMvSCxJQUFJeTBDLEdBQU8sRUFDUEMsRUFBWWp4QyxLQUFLWCxLQUNqQjZ4QyxFQUFVbHhDLEtBQUs5RSxHQUNmaTJDLEVBQVlueEMsS0FBSzVFLEtBQ2pCZzJDLEVBQWFweEMsS0FBSzRCLE1BRWxCeXZDLEdBREFELEVBQWE5MEMsTUFBTTBELE1BQU0wRixLQUFLLG9CQUFzQm5LLEtBQUtDLE1BQU00MUMsR0FBY0EsRUFDekQ5MEMsTUFBTTBELE1BQU0wRixLQUFLLHFCQUF1QnBKLE1BQU0wRCxNQUFNMEYsS0FBSyxnQkFBa0J5ckMsR0FHbkcsR0FBSTcwQyxNQUFNb2dCLFFBQVF5MEIsRUFBV1AsSUFBZ0IsR0FBT08sRUFBVWx1QyxRQUFRLGNBQWdCLElBQTJELEdBQXREakQsS0FBSzlFLEdBQUcrSCxRQUFRLGtDQUEyQyxDQUVoSCxhQUFkZ3VDLEdBQTBDLHFDQUFiRSxJQUFtRSxvQkFBZEYsR0FBaUQsZUFBZEEsSUFFaklobkIsR0FBd0JrbkIsS0FDeEJsbkIsR0FBd0JrbkIsR0FBYSxJQUd4QixlQUFkRixHQUE0QyxvQkFBZEEsRUFDN0IzMEMsTUFBTTBELE1BQU1vUixLQUFLLG1CQUFtQjdVLE1BQUssV0FDckMsSUFBSSswQyxFQUFjaDFDLE1BQU0wRCxNQUFNd1UsTUFDMUJ5VixHQUF3QmtuQixHQUFXOXdDLFNBQVNpeEMsSUFDNUNybkIsR0FBd0JrbkIsR0FBVy8wQyxLQUFLazFDLEVBRWhELElBQ29CLGFBQWRMLEdBQTRCMzBDLE1BQU0wRCxNQUFNTixJQUFJLEdBQUcybEIsVUFDakQ0RSxHQUF3QmtuQixHQUFXOXdDLFNBQVMrd0MsSUFDNUNubkIsR0FBd0JrbkIsR0FBVy8wQyxLQUFLZzFDLElBR2hEQSxFQUFhbm5CLEdBQXdCa25CLElBQ2pCLFVBQWRGLElBQ0gzMEMsTUFBTTBELE1BQU1OLElBQUksR0FBRzJsQixVQUdsQjJyQixHQUFPLElBSUMsbUNBQWJHLFFBQWtEaDRDLElBQWNtRCxNQUFNMEQsTUFBTTBGLEtBQUssb0JBQ2hGMHJDLEVBQWE5MEMsTUFBTTBELE1BQU0wRixLQUFLLG1CQUU5QnNyQyxJQUNBUixjQUFjVyxHQUFhQyxFQUMzQlQsRUFBY3YwQyxLQUFLLENBQ2YsS0FBTzYwQyxFQUNQLEtBQU9FLEVBQVV0M0MsTUFBTSxxQkFBcUIsR0FBRzZZLGNBQy9DLFlBQWMyK0IsRUFDZCxNQUFRRCxJQUdwQixLQUFPLENBU0gsR0FQZ0IsU0FBYkgsR0FBcUMsWUFBYkEsSUFDbkJqeEMsS0FBS3FsQixVQUNMMnJCLEdBQU8sR0FFWEssRUFBbUIvMEMsTUFBTTBELE1BQU11eEMsYUFBYSx3QkFBd0IzL0IsU0FBUzQvQixTQUFTLDhCQUE4QjE4QixPQUNwSHM4QixFQUFhOTBDLE1BQU0wRCxNQUFNd1UsT0FFMUJsWSxNQUFNMEQsTUFBTTJQLEdBQUcsVUFBVyxDQUN6QjBoQyxFQUFtQi8wQyxNQUFNMEQsTUFBTTBGLEtBQUssb0JBQ3BDLElBQUkrckMsRUFBaUJuMUMsTUFBTTBELE1BQU1vUixLQUFLLGFBTXRDLEdBTEdxZ0MsRUFBZXYzQyxRQUFVdTNDLEVBQWUvckMsS0FBSyxPQUFrRCxrQkFBekMrckMsRUFBZS9yQyxLQUFLLE1BQU00QixRQUFRLElBQ3ZGOHBDLEVBQWE5MEMsTUFBTTBELE1BQU1vUixLQUFLLGFBQWFvRCxNQUUzQ3c4QixHQUFPLEVBRTZCLFFBQXJDMTBDLE1BQU0wRCxNQUFNMEYsS0FBSyxpQkFBMkIsQ0FDM0NwSixNQUFNMEQsTUFBTTBGLEtBQUssV0FBWSxRQUM3QixJQUNJcWtCLEVBRHNCenRCLE1BQU0wRCxNQUFNbUcsUUFBUSx1QkFDTlQsS0FBSyxNQUM3Q3FrQixFQUFnQkEsRUFBYzFwQixTQUFTLGlDQUFtQzBwQixFQUFjbHdCLE1BQU0saUNBQWlDLEdBQUtrd0IsRUFHcElpbkIsSUFGQUksRUFBYW5uQixHQUF3QkYsR0FHekMsQ0FFSixDQUVXLEdBQVJpbkIsR0FBaUIxMEMsTUFBTTBELE1BQU1tRyxRQUFRLHFCQUFxQm9iLFNBQVMsa0JBQ2xFNnZCLEVBQTJCLEtBQWRBLEdBSXlCLFFBQXZDOTBDLE1BQU0wRCxNQUFNMEYsS0FBSyxvQkFBOEMsSUFBZDByQyxJQUNoREosR0FBTyxHQUVQQSxJQUNnQixZQUFiQyxHQUF3QyxTQUFiQSxJQUMxQkMsRUFBVUMsR0FFcUJoNEMsTUFBL0IwM0MsRUFBaUJNLElBQ2pCQyxFQUF5QixzQ0FBWEQsRUFBbURaLGlCQUFtQmEsRUFDcEZQLEVBQWlCTSxHQUFhLENBQzFCLEdBQUtELEVBQ0wsS0FBT0QsRUFDUCxLQUFPRSxFQUNQLFlBQWNFLEVBQ2QsTUFBUUQsR0FHcUIsNENBQTdCRCxFQUFVcDFCLFVBQVUsRUFBRSxLQUNsQnpmLE1BQU0wRCxNQUFNdWhCLFNBQVMsaUJBRXpCNnZCLEVBQWFwdEIsR0FBZW10QixFQUFVcDFCLFVBQVUsS0FBSyxNQUVqRDgwQixFQUFpQk0sR0FBa0IsTUFBSUMsSUFJL0IsWUFBYkgsR0FDTTcyQyxNQUFNczNDLFFBQVFiLEVBQWlCTSxHQUFXdnZDLFNBQzNDaXZDLEVBQWlCTSxHQUFXdnZDLE1BQVEsQ0FBQ2l2QyxFQUFpQk0sR0FBV3Z2QyxRQUVyRWl2QyxFQUFpQk0sR0FBV3Z2QyxNQUFNeEYsS0FBS2cxQyxJQUV2Q1AsRUFBaUJNLEdBQVdRLFlBQWNkLEVBQWlCTSxHQUFXUSxZQUFjLEtBQU9OLEdBSWpHRixLQUFhTCxJQUNmQSxFQUFpQkssR0FBYSxDQUMxQixHQUFLRCxFQUNMLEtBQU9ELEVBQ1AsS0FBT0UsRUFDUCxZQUFjRSxFQUNkLE1BQVEsS0FHaEJWLEVBQWN2MEMsS0FBS3kwQyxFQUFpQk0sR0FDeEMsQ0FDSixJQUlBNzBDLE1BQU1xMEMsR0FBZXAwQyxNQUFLLFdBQ3RCLElBQUlvb0IsRUFBYzNrQixLQUFLNEIsTUFDbkJGLEVBQVkxQixLQUFLNUUsS0FBS3JCLFFBQVEsYUFBYyxJQUNoRDJILEVBQVksTUFBTUEsRUFBVSxLQUU1QnBGLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLd0wsS0FBSyw4Q0FBOEM3VSxNQUFLLFdBQ25HLElBQUlxb0IsRUFBVyxJQUFJVCxPQUFPemlCLEVBQVUsTUFDcENwRixNQUFNMEQsTUFBTW9SLEtBQUssY0FBY1gsU0FDL0JuVSxNQUFNMEQsTUFBTTRqQixLQUFLdG5CLE1BQU0wRCxNQUFNNGpCLE9BQU83cEIsUUFBUTZxQixFQUFVRCxHQUMxRCxHQUNKLElBT0Frc0IsRUFBbUJBLEdBQW9CLENBQUMsRUFDdEJDLEVBQ1JucUIsS0FBU2txQixJQUNYQSxFQUFpQmxxQixHQUFTbXFCLEVBQWlCbnFCLElBS25ELElBQ0lrcUIsRUFBbUJwbEMsT0FBT21tQyxPQUFPZixFQUNyQyxDQUFDLE1BQU0vcUMsR0FDSCxJQUFJK3JDLEVBQTBCcG1DLE9BQU9xbUMsS0FBS2pCLEdBQWtCOW5DLEtBQUksU0FBUy9NLEdBQ3JFLE9BQU82MEMsRUFBaUI3MEMsRUFDNUIsSUFDQTYwQyxFQUFtQmdCLENBQ3ZCLENBR0EsSUFBSUUsRUFBYyxDQUNkajlCLEtBQU8sRUFDUGs5QixPQUFTLEVBQ1RDLFNBQVcsRUFDWEMsS0FBTyxFQUNQNXhDLElBQU0sRUFDTjZ4QyxNQUFRLEVBQ1JocEIsU0FBVyxFQUNYaXBCLE9BQVMsRUFDVEMsSUFBTSxFQUNOOXFCLE9BQVMsR0FLVCtxQixFQUF1QixDQUFDLEVBR3hCQyxFQUEwQixDQUFDLEVBRzNCQyxFQUFtQixDQUFDLEVBMEt4QixHQXhLQWwyQyxNQUFNdTBDLEdBQWtCdDBDLE1BQUssU0FBU3lSLEdBQ2xDLElBQUlpakMsRUFBWUosRUFBaUI3aUMsR0FBRzNPLEtBQ2hDOHhDLEVBQVlOLEVBQWlCN2lDLEdBQUc1UyxLQUNoQzgxQyxFQUFVTCxFQUFpQjdpQyxHQUFHOVMsR0FDOUJrMkMsRUFBYVAsRUFBaUI3aUMsR0FBR3BNLE1BQ2pDeXZDLEVBQW1CUixFQUFpQjdpQyxHQUFHMmpDLFlBVTNDLEdBTkdULEVBQVE3d0MsU0FBUyxhQUNoQjZ3QyxFQUFVQSxFQUFRcjNDLE1BQU0sV0FBVyxJQUt0QixVQUFkbzNDLEVBQXVCLENBQ3RCLElBQUl3QixFQUFpQnRCLEVBQVU5d0MsU0FBUyxXQUNwQzh3QyxFQUFVdDNDLE1BQU0sV0FBVyxHQUMzQnMzQyxPQUl3Q2g0QyxJQUF6Q201QyxFQUFxQkcsS0FFcEJILEVBQXFCRyxHQUFrQixDQUNuQ3YzQyxHQUFJZzJDLEVBQ0o3eEMsS0FBTSxRQUNOakUsS0FBTXEzQyxFQUNOZCxZQUFhTixFQUNienZDLE1BQU8sS0FLZixJQUNJOHdDLEVBRGVwMkMsTUFBTSxJQUFNdTBDLEVBQWlCN2lDLEdBQUc5UyxJQUNwQnF1QixRQUFRLHFCQUNuQ29wQixFQUFpQkQsRUFBWXg0QyxRQUFVdzRDLEVBQVlueEIsU0FBUyxnQkFJNURxeEIsRUFEYXQyQyxNQUFNLGVBQUQ3QixPQUFnQmc0QyxFQUFjLE9BQ3JCenBCLE9BQU8sWUFDbEM2cEIsRUFBWUQsRUFBYzE0QyxPQUFTLEVBQ25DNDRDLEVBQWdCRCxFQUFZRCxFQUFjcCtCLE1BQVEsR0FPOUM4OUIsRUFBcUJHLEdBQWdCN3dDLE1BSDFDaXhDLEVBQ0lGLEVBRWdFLE1BQWxCRyxHQUEyQyxTQUFsQkEsRUFJekJBLEVBS0osVUFLMUNqQyxFQUFpQjdpQyxFQUM1QixDQUdBLEdBQWlCLGFBQWRpakMsRUFBMEIsQ0FDekIsSUFBSThCLEVBQW9CNUIsT0FJMEJoNEMsSUFBL0NvNUMsRUFBd0JRLEtBRXZCUixFQUF3QlEsR0FBcUIsQ0FDekM3M0MsR0FBSWcyQyxFQUNKN3hDLEtBQU0sV0FDTmpFLEtBQU0yM0MsRUFDTnBCLFlBQWFOLEVBQ2JPLE9BQVEsR0FDUmh3QyxNQUFPLEtBS1p4SCxNQUFNczNDLFFBQVFOLEdBRWJtQixFQUF3QlEsR0FBbUJuQixPQUFTUixFQUM5Q0EsR0FFTm1CLEVBQXdCUSxHQUFtQm5CLE9BQU94MUMsS0FBS2cxQyxVQUlwRFAsRUFBaUI3aUMsRUFDNUIsQ0FFR2lqQyxFQUFVaHVDLFFBQVEsV0FBYSxJQUM5Qmd1QyxFQUFZLFdBRXlDLE9BQXREMzBDLE1BQU11MEMsRUFBaUI3aUMsSUFBSXRJLEtBQUssb0JBQStCeXJDLEVBQVVsdUMsUUFBUSw2QkFBK0IsS0FDL0dndUMsRUFBWSxRQUV5QyxRQUF0RDMwQyxNQUFNdTBDLEVBQWlCN2lDLElBQUl0SSxLQUFLLG9CQUFnQ3lyQyxFQUFVbHVDLFFBQVEsMEJBQTRCLEtBQzdHZ3VDLEVBQVksUUFFaEJjLEVBQVlkLEdBQWFjLEVBQVlkLEdBQWEsRUFFcEMsc0NBQVhDLEVBQ0NDLEVBQVksVUFDSyx1Q0FBWEQsRUFFTnNCLEVBREFyQixFQUFZLGNBQ2tCQyxFQUNiLHNDQUFYRixFQUVOc0IsRUFEQXJCLEVBQVksYUFDa0JDLEVBRTlCRCxFQUFZRixFQUFVLElBQUljLEVBQVlkLEdBR3ZDSixFQUFpQjdpQyxJQUFvQixVQUFkaWpDLEdBQXVDLGFBQWRBLElBRS9DSixFQUFpQjdpQyxHQUFHOVMsR0FBS2cyQyxFQUN6QkwsRUFBaUI3aUMsR0FBRzVTLEtBQU8rMUMsRUFDM0JOLEVBQWlCN2lDLEdBQUczTyxLQUFPNHhDLEVBQzNCSixFQUFpQjdpQyxHQUFHcE0sTUFBUXd2QyxHQUtoQixVQUFiSCxHQUF5QkcsR0FBY0EsRUFBV251QyxRQUFRLG1CQUFxQixJQUM5RTR0QyxFQUFpQjdpQyxHQUFHNVMsS0FBTyxhQUMzQnkxQyxFQUFpQjdpQyxHQUFHcE0sTUFBUW5GLEVBQU82eEMsZUFBaUI3eEMsRUFBTzZ4QyxlQUFlMEUsS0FBSyxJQUVuRSxVQUFiL0IsR0FBeUJHLEdBQWNBLEVBQVdudUMsUUFBUSxvQkFBc0IsSUFDL0U0dEMsRUFBaUI3aUMsR0FBRzVTLEtBQU8sY0FDM0J5MUMsRUFBaUI3aUMsR0FBR3BNLE1BQVFuRixFQUFPNnhDLGVBQWlCN3hDLEVBQU82eEMsZUFBZTJFLE1BQU0sR0FLeEYsSUFJQXBDLEVBQW1CQSxFQUFpQjduQixRQUFPLFNBQVNyQyxHQUNoRCxZQUFpQnh0QixJQUFWd3RCLENBQ1gsSUFJQWxiLE9BQU9tbUMsT0FBT1UsR0FBc0I5UixTQUFRLFNBQVMwUyxHQUVqRHJDLEVBQWlCejBDLEtBQUs4MkMsRUFDMUIsSUFJQXpuQyxPQUFPbW1DLE9BQU9XLEdBQXlCL1IsU0FBUSxTQUFTMFMsR0FFcERBLEVBQU10eEMsTUFBUXN4QyxFQUFNdEIsT0FBTzEzQyxPQUFTLEVBQUlnNUMsRUFBTXRCLE9BQVMsVUFDaERzQixFQUFNdEIsT0FFYmYsRUFBaUJ6MEMsS0FBSzgyQyxFQUMxQixJQUlJejJDLEVBQWlDLDBCQUFLQSxFQUFpQyx5QkFBZ0IsYUFBRyxDQUMxRixJQUFJMDJDLEVBQVUsQ0FBRWo0QyxHQUFJLGdDQUFpQ0UsS0FBTSxlQUFnQnUyQyxZQUFhLGVBQWdCdHlDLEtBQU0sU0FBVXVDLE1BQU9uRixFQUFpQyx5QkFBZ0IsY0FDaExvMEMsRUFBaUJ6MEMsS0FBSysyQyxFQUMxQixDQUVHWCxFQUFpQlksWUFBY1osRUFBaUJhLFlBQy9DN0MsY0FBOEMsK0JBQUlnQyxFQUFpQlksV0FBYSxJQUFNWixFQUFpQmEsV0FHM0c3QyxjQUE4QixlQUFJajFDLEtBQUtjLFVBQVV3MEMsR0FDakRMLGNBQXFDLHNCQUFJOEMsS0FDekM5QyxjQUE0QixhQUFJYixFQUVoQ1gsZ0JBQWdCdnlDLEVBQU9tSixXQUFhLENBQ2hDQSxVQUFXNHFDLGNBQXlCLFVBQ3BDNXlDLGVBQTBDekUsSUFBL0JxM0MsY0FBeUIsVUFBa0JBLGNBQXlCLFVBQUksR0FDbkYzdEMsU0FBVTJ0QyxjQUF3QixTQUNsQ2xuQyxhQUFja25DLGNBQTRCLGFBQzFDeG9DLFdBQVl3b0MsY0FBcUIsTUFDakMrQyxTQUFVL0MsY0FBbUIsSUFDN0JnRCxRQUFTaEQsY0FBZ0MsaUJBQ3pDMW1DLHVCQUF3QjBtQyxjQUFzQyx1QkFDOUQ5aEMseUNBQTBDOGhDLGNBQXdELHlDQUNsR3ptQyx1Q0FBd0N5bUMsY0FBc0QsdUNBQzlGeG1DLGtCQUFtQndtQyxjQUFpQyxrQkFDcERpRCxPQUFROUMsRUFFaEIsQ0FDdUIsVUFBcEJoQixJQUNDYSxjQUFzQixPQUFJL3pDLEVBQU9tWixrQkFBa0I4OUIsT0FDbkRsRCxjQUE0QixhQUFJLFVBR2hDbUQsR0FBZWwzQyxFQUFPbUosaUJBQWtFek0sSUFBcER3NkMsR0FBZWwzQyxFQUFPbUosV0FBV2d1QyxpQkFDckVwRCxjQUE4QixlQUFJbUQsR0FBZWwzQyxFQUFPbUosV0FBV2d1QyxnQkFNdkVDLEdBQXVCQyxHQUEwQnIzQyxHQUtqRG5ELEVBQVFrM0MsZUFHSnRpQyxLQUFvQnpSLEVBQU9tSixXQUkvQnRKLE1BQU1vRSxLQUFLLENBQ1ByQixLQUFNLE1BQ051QixPQUFPLEVBQ1BtekMsT0FBTyxFQUNQdHpDLEtBQU0rdkMsY0FDTmx3QyxJQUFLWCxHQUFTLDJCQUEyQmxELEVBQU91M0MsVUFDaERseUMsUUFBUyxTQUFTL0IsR0FFZCxHQURBekcsRUFBUSxpQ0FDSnlHLEVBQWtCLFFBQ2xCLElBQ0lrMEMsR0FBd0J4M0MsRUFBT3NELEVBQVU0dkMsUUFDbUIsSUFBakRhLGNBQWMwRCxpQ0FDckJ6d0MsYUFBYS9GLFFBQVEseUJBQTBCOHlDLGNBQWMwRCxnQ0FBZ0N4aEMsZUFFakcsSUFBSXloQyxFQUFxQkMsS0FFdEJELEVBQW1CajZDLE9BQVMsR0FFM0JvQyxNQUFNQyxLQUFLNDNDLEdBQW9CLFNBQVMzM0MsRUFBTzYzQyxHQUUzQ0MsR0FBMkIsU0FBVUQsRUFBYXp5QyxNQUN0RCxHQVNSLENBQUMsTUFBTWtFLEdBQ0hDLEdBQWEsOENBQThDRCxFQUFJLEtBQUsvRixFQUFTdEQsRUFBTyt6QyxjQUN4RixDQUVSLEVBQ0E5MUMsTUFBTyxTQUFTNjVDLEVBQWdCM3RDLEVBQVk0dEMsR0FDeEN6dUMsR0FBYSw4QkFBOEJ5dUMsRUFBWTV0QyxFQUFXMnRDLEVBQWVFLGFBQWFoNEMsRUFDbEcsRUFDQWk0QyxTQUFVLFNBQVMzMEMsR0FDZixHQUF1QixVQUFwQjR2QyxFQUE2QixDQWN4QixHQVpBcjJDLEVBQVEsaUNBR2tDLFdBRDlCZ0QsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLEtBQ3pERixLQUFLLDBCQUVVLG9CQUFYdEUsU0FBNkIzRSxFQUFpQywwQkFBS0EsRUFBaUMseUJBQWUsYUFBOEQsR0FBdkRBLEVBQU9tWixrQkFBa0IrK0IsNkJBQ3pKcjdDLEVBQVEsMkJBQ1JzN0MsR0FBc0JuNEMsR0FBTyxFQUFLLEdBQUdrekMsRUFBa0JDLEtBS3pDLG9CQUFYeHVDLFNBQTBCM0UsRUFBaUMsMEJBQUtBLEVBQWlDLHlCQUFlLGFBQTZELGNBQXhEQSxFQUFpQyx5QkFBa0IsZUFHL0ssT0FGQW5ELEVBQVEsMkJBQ1J1N0MsR0FBMkJwNEMsSUFDcEIsRUFLYSxLQUFyQmt6QyxFQVFDbUYsR0FBeUJyNEMsRUFBT216QyxHQUVoQ1AsR0FBd0I1eUMsRUFFcEMsQ0FFSixHQUNGLE9BSU4sRUFzSlNzNEMsR0FBVCxTQUEwQm52QyxHQUN2QnRKLE1BQU0sZ0NBQWdDc0osRUFBVSw4Q0FBOENBLEVBQVUsS0FBSzZLLFFBQ2hILEVBT1Vva0MsR0FBVCxTQUFvQ3A0QyxHQUVoQyxHQUE0RCxlQUF4REEsRUFBaUMseUJBQWtCLGdCQUE4RSx3QkFBeERBLEVBQWlDLHlCQUFrQixlQUM3SEgsTUFBTW9FLEtBQUssQ0FDUEosSUFBSyxlQUNMakIsS0FBTSxPQUNOdUIsT0FBTyxFQUNQSCxLQUFNLENBQ0ZPLE1BQU8sQ0FDSCxDQUNJbkYsU0FBVSxFQUNWWCxHQUFJdUIsRUFBaUMseUJBQWMsY0FJL0RpNEMsU0FBVSxTQUFTTSxHQUM0Qyx3QkFBeER2NEMsRUFBaUMseUJBQWtCLGVBQ2xEckQsT0FBTytHLFNBQVMyRCxLQUFPMUssT0FBTytHLFNBQVNDLE9BQVMsUUFDYSxlQUF4RDNELEVBQWlDLHlCQUFrQixnQkFDeERyRCxPQUFPK0csU0FBUzgwQyxRQUV4QixTQUdGLEdBQTRELFlBQXhEeDRDLEVBQWlDLHlCQUFrQixnQkFBMkUsa0JBQXhEQSxFQUFpQyx5QkFBa0IsZUFDL0gsR0FBMkQsa0JBQXhEQSxFQUFpQyx5QkFBa0IsZUFBc0IsQ0FDeEUsSUFBSXk0QyxFQUFXLGNBQWN6NEMsRUFBaUMseUJBQWMsV0FBRSxJQUFJQSxFQUFpQyx5QkFBYyxXQUM3SDA0QyxFQUFjLFVBQVVELEVBQVMsV0FBV3o0QyxFQUFpQyx5QkFBZSxZQUFFLHlCQUNsR0gsTUFBTyxRQUFTdVUsT0FBUXNrQyxHQUN4Qjc0QyxNQUFPLElBQUk0NEMsR0FBVyxHQUFHNzRCLFFBQ3pCL2YsTUFBTyxJQUFJNDRDLEdBQVcsR0FBR3prQyxRQUM3QixNQUNJclgsT0FBTytHLFNBQVMyRCxLQUFPckgsRUFBaUMseUJBQWUsWUFJL0U4SixZQUFZOUosRUFBT21KLFVBRXRCLEVBT1FndkMsR0FBVCxTQUErQm40QyxFQUFRMjRDLEdBQXNELElBQTNDQyxFQUFNcDdDLFVBQUFDLE9BQUEsUUFBQWYsSUFBQWMsVUFBQSxHQUFBQSxVQUFBLEdBQUcsR0FBRzAxQyxFQUFnQjExQyxVQUFBQyxPQUFBLFFBQUFmLElBQUFjLFVBQUEsR0FBQUEsVUFBQSxHQUFDLEdBQUcyMUMsRUFBRTMxQyxVQUFBQyxPQUFBLFFBQUFmLElBQUFjLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEtBR25GLEdBRkFYLEVBQVEsMEJBQTBCbUQsRUFBT21KLFdBRXRDd3ZDLEVBQ0MsSUFBSUUsRUFBc0QsTUFBeEM3NEMsRUFBT21aLGtCQUFrQjAvQixZQUFzQjc0QyxFQUFPbVosa0JBQWtCMC9CLFlBQVl6N0MsTUFBTSxLQUFPLFFBRW5ILEdBQWMsNkJBQVh3N0MsRUFDS0MsRUFBZ0UsTUFBbEQ3NEMsRUFBT21aLGtCQUFrQjIvQixzQkFBZ0M5NEMsRUFBT21aLGtCQUFrQjIvQixzQkFBc0IxN0MsTUFBTSxLQUFPLFFBQ3RJLEdBQWMsNkJBQVh3N0MsRUFDQUMsRUFBZ0UsTUFBbEQ3NEMsRUFBT21aLGtCQUFrQjQvQixzQkFBZ0MvNEMsRUFBT21aLGtCQUFrQjQvQixzQkFBc0IzN0MsTUFBTSxLQUFPLFFBQ3RJLEdBQWMsNkJBQVh3N0MsRUFDQUMsRUFBZ0UsTUFBbEQ3NEMsRUFBT21aLGtCQUFrQjYvQixzQkFBZ0NoNUMsRUFBT21aLGtCQUFrQjYvQixzQkFBc0I1N0MsTUFBTSxLQUFPLFFBQ3RJLEdBQWMsNkJBQVh3N0MsRUFDQUMsRUFBZ0UsTUFBbEQ3NEMsRUFBT21aLGtCQUFrQjgvQixzQkFBZ0NqNUMsRUFBT21aLGtCQUFrQjgvQixzQkFBc0I3N0MsTUFBTSxLQUFPLFFBQ3RJLEdBQWMsNkJBQVh3N0MsRUFDQUMsRUFBZ0UsTUFBbEQ3NEMsRUFBT21aLGtCQUFrQisvQixzQkFBZ0NsNUMsRUFBT21aLGtCQUFrQisvQixzQkFBc0I5N0MsTUFBTSxLQUFPLEdBRy9JLEdBQUd5N0MsR0FBZWw3QyxNQUFNczNDLFFBQVE0RCxHQUFhLENBQ3pDLElBQUlyNkMsRUFBYXE2QyxFQUFZLElBQU0sRUFDL0JNLEVBQWNOLEVBQVksSUFBTSxFQUNoQ08sRUFBY3RrQyxTQUFTK2pDLEVBQVksS0FBTyxFQUM1QkEsRUFBWSxHQUU5Qmg1QyxNQUFNb0UsS0FBSyxDQUNQSixJQUFLLGVBQ0xqQixLQUFNLE9BQ051QixPQUFPLEVBQ1BILEtBQU0sQ0FDRk8sTUFBTyxDQUNILENBQ0luRixTQUFVKzVDLEVBQ1YxNkMsR0FBSUQsS0FJaEI2NkMsV0FBWSxDQUNSLElBQUssU0FBU0MsRUFBZ0JudkMsRUFBWUMsR0FDdEN2TSxRQUFRUSxJQUFJLFlBQ2hCLEdBRUo0NUMsU0FBVSxTQUFTTSxHQUNmLEdBQW1CLElBQWhCYSxFQUFrQixDQWFqQixJQUFJRyxFQUFpRCxLQUExQjEwQyxJQUFnQyxHQUFLQSxJQUM1RDIwQyxFQUF3Qjc4QyxPQUFPK0csU0FBUysxQyxTQUFXLEtBQU85MEMsUUFBUUMsS0FBTzIwQyxFQUF1QixRQUNwRzU4QyxPQUFPK0csU0FBUzIzQixPQUFPbWUsRUFDM0IsTUFDSTc4QyxPQUFPK0csU0FBUzgwQyxRQUV4QixHQUdSLEtBRTRCLEtBQXJCdEYsRUFDQ21GLEdBQXlCcjRDLEVBQVFtekMsR0FFakNQLEdBQXdCNXlDLEVBSXBDLEVBT1M0eUMsR0FBVCxTQUFpQzV5QyxHQUM3Qm5ELEVBQVEsNEJBQTRCbUQsRUFBT21KLFdBRTNDLElBQUltcUIsRUFBUXp6QixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsS0FFckJ6TSxNQUExQ2lOLEdBQVEzSixFQUFPbUosV0FBV3V3QyxlQUE4Qi92QyxHQUFRM0osRUFBT21KLFdBQVd1d0MsZ0JBSXZDLFNBRnZDcG1CLEVBQVF6ekIsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLE1BRXhERixLQUFLLHlCQUEyRSxXQUF0Q3FxQixFQUFNcnFCLEtBQUsseUJBQXlGLElBQWhEcXFCLEVBQU1ycUIsS0FBSywyQkFBMkJ4TCxTQUMzSXNGLFlBQVcsZ0JBQ3dDckcsSUFBM0NpTixHQUFRM0osRUFBT21KLFdBQVdxM0IsY0FBdUU5akMsTUFBekNpTixHQUFRM0osRUFBT21KLFdBQVd1d0MsZUFBNkIvdkMsR0FBUTNKLEVBQU9tSixXQUFXdXdDLGdCQUNoRyxRQUF0Q3BtQixFQUFNcnFCLEtBQUsseUJBQXFGLElBQWhEcXFCLEVBQU1ycUIsS0FBSywyQkFBMkJ4TCxRQUUxQyxRQUF0QzYxQixFQUFNcnFCLEtBQUssMEJBRGhCMm9DLEdBQW9CNXhDLEVBQU8sVUFBUyxFQUtoRCxHQUFFLElBSWUsVUFBdEJBLEVBQU82UCxjQUVzQixZQUF4QjdQLEVBQU9xWixlQUNpQixZQUF4QnJaLEVBQU9xWixlQUNpQixhQUF4QnJaLEVBQU9xWixlQUNpQyxRQUF0Q2lhLEVBQU1ycUIsS0FBSyx5QkFBMkUsV0FBdENxcUIsRUFBTXJxQixLQUFLLDhCQUFtRyxJQUFuRGpKLEVBQU9tWixrQkFBa0J3Z0MseUJBRXRJNTJDLFlBQVcsV0FDUDZ1QyxHQUFvQjV4QyxFQUFPLFVBQVMsRUFDeEMsR0FBRSxHQUdkLEVBU1M0eEMsR0FBVCxTQUE2QjV4QyxFQUFPNEMsRUFBS2czQyxHQUVyQyxHQURBLzhDLEVBQVEsdUJBQ0ptRCxFQUFPbVosa0JBQWtCMGdDLHNDQUV6QixHQURBaDlDLEVBQVEsd0JBQ0UsU0FBTitGLEVBQWMsQ0FDMUIvRixFQUFRLDBCQUNJLElBQUlnSCxFQUFNaEUsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLEtBQUt3TCxLQUFLaWxDLEdBQVkzd0MsS0FBSyxRQUMvRW11QyxHQUErQyxJQUF4QkEsR0FBNkJDLEdBQTBCcjNDLEdBQVVvM0MsR0FFeEYsSUFBSTBDLEdBREpqMkMsRUFBTWsyQyxHQUFvQmwyQyxFQUFJdXpDLEtBQ1ZoNkMsTUFBTSxLQUN0QjQ4QyxFQUFhRixFQUFVLEdBQzNCQSxFQUFVRyxRQUV0QixJQUFJQyxFQURRcjJDLEVBQU1tMkMsRUFBVyxJQUFLRixFQUFVM3lDLEtBQUssS0FFakNnekMsRUFBeUIsRUFFdENudEMsS0FDRm5RLEVBQVEseUNBQ1JnRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS2lMLE9BQU8saUNBQWlDcFUsRUFBT21KLFVBQVUsV0FBVyt3QyxFQUFZLCtCQUMvSC96QyxTQUFTc1osZUFBZSwwQkFBMEJ6ZixFQUFPbUosV0FBV3lXLFNBR0VsakIsTUFBdkRzRCxFQUFPbVosa0JBQWtCKytCLDRCQUN5Q3g3QyxNQUFsRXNELEVBQU9tWixrQkFBa0JpaEMsdUNBQzZDMTlDLE1BQXRFc0QsRUFBT21aLGtCQUFrQmtoQyw0Q0FFekJGLEVBQXlCcmxDLFNBQVM5VSxFQUFPbVosa0JBQWtCa2hDLDRDQUUvRHQzQyxZQUFXLFdBQ1BsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS3dMLEtBQUtpbEMsR0FBWTN3QyxLQUFLLE9BQU9wRixHQUM1RWhFLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLd0wsS0FBS2lsQyxHQUFZLEdBQUdoNkIsUUFDbkVqVyxHQUFRM0osRUFBT21KLFdBQVd1d0MsZUFBYyxDQUM1QyxHQUE0QixJQUF6QlMsRUFFUCxLQUFLLENBQ2J0OUMsRUFBUSwwQkFDUixJQUFJcTlDLEVBQWN2d0MsR0FBUTNKLEVBQU9tSixXQUFXcTNCLGFBQWE0VyxHQUN0RHBxQyxLQUNGbk4sTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLEtBQUtpTCxPQUFPLGlDQUFpQ3BVLEVBQU9tSixVQUFVLFdBQVcrd0MsRUFBWSwrQkFDL0gvekMsU0FBU3NaLGVBQWUsMEJBQTBCemYsRUFBT21KLFdBQVd5VyxTQUV6RDdjLFlBQVcsV0FBWXBHLE9BQU8rRyxTQUFTMkQsS0FBTzZ5QyxDQUFhLEdBQUUsSUFFakUsS0FDQyxDQUNELElBQ01JLEVBRHdCejZDLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLd0wsS0FBSyx1QkFDcEJnUSxLQUFLLFVBRW5FLEdBREE5bkIsRUFBUSx3QkFDRyxVQUFQK0YsRUFBZSxDQUNmL0YsRUFBUSwwQkFDUjhNLEdBQVEzSixFQUFPbUosV0FBV3V3QyxlQUFjLEVBQ3BDUyxFQUF5QixFQUU4Qno5QyxNQUF2RHNELEVBQU9tWixrQkFBa0IrK0IsNEJBQ3lDeDdDLE1BQWxFc0QsRUFBT21aLGtCQUFrQmloQyx1Q0FDNkMxOUMsTUFBdEVzRCxFQUFPbVosa0JBQWtCa2hDLDRDQUV6QkYsRUFBeUJybEMsU0FBUzlVLEVBQU9tWixrQkFBa0JraEMsNENBRS9EdDNDLFlBQVcsV0FDdEJsRyxFQUFRLGtDQUVPLElBQUlxeUIsRUFBVXZ5QixPQUFPK0csU0FBUzJELEtBQzFCOG5CLEVBQVd4eUIsT0FBTytHLFNBQVNtRCxTQUFXbEssT0FBTytHLFNBQVNvRCxPQUN0RG96QyxFQUFjdndDLEdBQVEzSixFQUFPbUosV0FBV3EzQixhQUV0QytaLEVBQVkxNkMsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLEtBQUt3TCxLQUFLaWxDLEdBQ2hFWSxFQUFzQkQsRUFBVTUxQixLQUFLLFVBQ3JDODFCLEVBQVdGLEVBQVV0eEMsS0FBSyxRQUVMLFVBQXZCdXhDLEdBQW1DTixHQUtuQ0EsR0FEQUEsR0FEQUEsR0FEQUEsRUFBY0EsRUFBWTU4QyxRQUFRLG1CQUFtQixrQkFBa0JneUIsVUFBVUosS0FDdkQ1eEIsUUFBUSx1QkFBdUIsa0JBQWtCZ3lCLFVBQVVKLEtBQzNENXhCLFFBQVEsYUFBYSxZQUFZZ3lCLFVBQVVILEtBQzNDN3hCLFFBQVEsaUJBQWlCLFlBQVlneUIsVUFBVUgsSUFFekV4eUIsT0FBT3UwQixLQUFLZ3BCLEVBQWEsV0FDSyxVQUF2Qk0sRUFDUDc5QyxPQUFPdTBCLEtBQUt1cEIsRUFBVSxVQUV0Qjk5QyxPQUFPK0csU0FBUzJELEtBQU9vekMsRUFHdkN6dEMsSUFBa0JrdEMsSUFDcEJyOUMsRUFBUSxpREFDUmdELE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLaUwsT0FBTyxpQ0FBaUNwVSxFQUFPbUosVUFBVSxXQUFXK3dDLEVBQVksK0JBSXJILEdBQTRCLElBQXpCQyxFQUNQLE1BQ0ksR0FBa0IsYUFBZlAsRUFBMEIsQ0FDekIvOEMsRUFBUSwwQkFDUixJQUFJNjlDLEVBQW1CMTZDLEVBQU8rdUIsaUJBQXlDLEVBQXRCZ2tCLEdBQTBCQSxHQUV6Ri95QyxFQUFPNnhDLGdCQUM4QixHQUFyQzd4QyxFQUFPNnhDLGVBQWVDLGFBQ3NDLEdBQTVEOXhDLEVBQU82eEMsZUFBZUUsb0JBQW9CNEksZ0JBQ3dCaitDLE1BQWxFc0QsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHVCQUV4QjRILEVBQW1CNWxDLFNBQVM5VSxFQUFPNnhDLGVBQWVFLG9CQUFvQmUsdUJBRTFFL3ZDLFlBQVcsV0FDUHBHLE9BQU8rRyxTQUFTMkQsS0FBT3JILEVBQU82eEMsZUFBZUUsb0JBQW9CQyxlQUNyRSxHQUFzQixJQUFuQjBJLEVBQ1AsS0FBSyxDQUNENzlDLEVBQVEsMEJBQ3ZCLElBQUlxOUMsRUFBY3Z3QyxHQUFRM0osRUFBT21KLFdBQVdxM0IsYUFDekN4ekIsS0FDRm5RLEVBQVEseUNBQ1JnRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS2lMLE9BQU8saUNBQWlDcFUsRUFBT21KLFVBQVUsV0FBVyt3QyxFQUFZLCtCQUMvSC96QyxTQUFTc1osZUFBZSwwQkFBMEJ6ZixFQUFPbUosV0FBV3lXLFNBSWxEMDZCLEdBQXFGLFdBQWxEQSxFQUFnQ3JrQyxjQUNuRXRaLE9BQU91MEIsS0FBS2dwQixFQUFhLFVBRXpCbjNDLFlBQVcsV0FBWXBHLE9BQU8rRyxTQUFTMkQsS0FBTzZ5QyxDQUFhLEdBQUUsSUFFckUsQ0FFUixDQUNKLEVBT1NILEdBQVQsU0FBNkJsMkMsRUFBSXV6QyxHQU03QixPQUxBd0QscUJBQXVCeEQsRUFDdkJ2NkMsRUFBUSxtQkFBb0JnSCxFQUFJMkMsUUFBUSxPQUNmLElBQXJCM0MsRUFBSTJDLFFBQVEsT0FDWm8wQyxxQkFBaUQsS0FBekJ4RCxFQUFxQixHQUFVLElBQUlBLEVBQXFCeGdDLE1BQU0sR0FBS3dnQyxHQUV4RnZ6QyxFQUFNKzJDLG9CQUNqQixFQU9TdkQsR0FBVCxTQUFtQ3IzQyxHQUMvQixJQUFJazBDLEVBQWdCLElBQUl2MkMsTUFDcEJrOUMsRUFBcUIsSUFBSWw5QyxNQUN6Qm05QyxFQUFpQixDQUFDLEVBQ2xCQyxFQUFjLElBQUlwOUMsTUFtR3RCLElBQUssSUFBSXE5QyxLQWxHVG43QyxNQUFPLG1CQUFtQkcsRUFBT21KLFVBQVUsc0JBQXNCbkosRUFBT21KLFVBQVUsK0JBQStCckosTUFBSyxXQUNsSCxJQUFJazdDLEVBQVksR0FDWkMsRUFBYSxFQUNiekcsRUFBWWp4QyxLQUFLWCxLQUNqQjZ4QyxFQUFVbHhDLEtBQUs5RSxHQUNmaTJDLEVBQVlueEMsS0FBSzVFLEtBQ2pCdThDLEVBQWtCLEdBQ2xCdEcsRUFBbUIvMEMsTUFBTTBELE1BQU0wRixLQUFLLGVBQ3BDMHJDLEVBQWFweEMsS0FBSzRCLE1Bd0R0QixRQXZEb0MsSUFBMUI0MUMsRUFBWXJHLEtBQ2xCcUcsRUFBWXJHLEdBQWEsSUFJekJBLEVBQVVsdUMsUUFBUSwrQkFBZ0MsR0FDbER3MEMsRUFBWXRHLEVBQVV0M0MsTUFBTSw4QkFBOEIsR0FDNUMsc0NBQVhxM0MsR0FDQ3VHLEVBQVksVUFDWkQsRUFBWXJHLEdBQWFueEMsS0FBS3FsQixRQUFVLE1BQVEsTUFHaERteUIsRUFBWXJHLEdBQWFDLEVBRTdCc0csRUFBYSxHQUNOdkcsRUFBVWx1QyxRQUFRLCtCQUFnQyxHQUN6RHcwQyxFQUFZdEcsRUFBVXQzQyxNQUFNLHFCQUFxQixHQUNqRDI5QyxFQUFZckcsR0FBYUMsRUFBV251QyxRQUFRLFVBQVksRUFBSW11QyxFQUFXdjNDLE1BQU0sU0FBUyxHQUFLdTNDLEVBQzNGc0csRUFBYUgsRUFBZUUsSUFBY0YsRUFBZUUsSUFBYyxHQUFLLEdBQ3JFdEcsRUFBVWx1QyxRQUFRLDJCQUE0QixHQUFLa3VDLEVBQVVsdUMsUUFBUSw4QkFBK0IsRUFDeEdqRCxLQUFLcWxCLFVBQ0pveUIsRUFBWXRHLEVBQ1pxRyxFQUFZckcsR0FBYUMsRUFBV251QyxRQUFRLFVBQVksRUFBSW11QyxFQUFXdjNDLE1BQU0sU0FBUyxHQUFLdTNDLEVBQzNGc0csRUFBYUgsRUFBZUUsSUFBY0YsRUFBZUUsSUFBYyxHQUFLLEdBRTFELFVBQWhCejNDLEtBQUt1WCxTQUNYa2dDLEVBQVlwRyxFQUNabUcsRUFBWXJHLEdBQWFDLElBR3RCRixFQUFRN3dDLFNBQVMsd0NBQ2hCczNDLEVBQWtCekcsRUFBUXIzQyxNQUFNLHdDQUF3QyxHQUNsRXEzQyxFQUFRN3dDLFNBQVMsZ0NBQ3ZCOHdDLEVBQVksOEJBQ1p3RyxFQUFrQixjQUVsQkEsRUFBa0J0RyxFQUV0Qm9HLEVBQXlCdCtDLE1BQWJnNEMsRUFBeUJueEMsS0FBS3VYLFFBQVU0NUIsRUFDcEMsWUFBYkYsR0FDcUMsaUJBQTFCdUcsRUFBWXJHLEtBQ2xCcUcsRUFBWXJHLEdBQWEsSUFBSS8yQyxPQUU5QjRGLEtBQUtxbEIsU0FDSm15QixFQUFZckcsR0FBVy8wQyxLQUFLZzFDLElBRWIsU0FBYkgsRUFDSGp4QyxLQUFLcWxCLFVBQ0pteUIsRUFBWXJHLEdBQWFDLEdBRzdCb0csRUFBWXJHLEdBQWFDLEVBRTdCc0csRUFBYUgsRUFBZXYzQyxLQUFLWCxPQUFTazRDLEVBQWV2M0MsS0FBS1gsT0FBUyxHQUFLLEdBRXhDLFFBQXJDL0MsTUFBTTBELE1BQU0wRixLQUFLLGlCQUEyQixDQUMzQyxJQUFJb2tCLEVBQXNCeHRCLE1BQU0wRCxNQUFNNFIsU0FDbENnbUMsRUFBdUIsR0FDdkJDLEVBQXdCLEdBQzVCL3RCLEVBQW9CMVksS0FBSyx1REFBdUQ3VSxNQUFLLFdBQ2pGcTdDLEVBQXFCeDdDLEtBQUtFLE1BQU0wRCxNQUFNNFIsU0FBU2tELE9BQU9oYixRQUN0RCs5QyxFQUFzQno3QyxLQUFLRSxNQUFNMEQsTUFBTXdVLE1BQzNDLElBRUFnakMsRUFBWXJHLEdBQWEwRyxFQUFzQmowQyxLQUFLLElBQ3hELENBSWtCLE1BRmxCNnpDLEVBQVlBLEVBQVlBLEVBQVUva0MsY0FBYzNZLFFBQVEsZ0JBQWlCLEtBQUtBLFFBQVEsTUFBTyxLQUFLQSxRQUFRLFdBQVksSUFBTSxLQUV6RSxLQUEzQnk5QyxFQUFZckcsS0FDaENxRyxFQUFZckcsSUFBYXFHLEVBQVlyRyxHQUFvQnFHLEVBQVlyRyxJQUNyRW1HLEVBQW1CRyxHQUFhSCxFQUFtQkcsR0FBYUgsRUFBbUJHLEdBQWEsSUFBSXI5QyxNQUNqRysyQyxFQUFVbHVDLFFBQVEsNEJBQThCLElBQUlndUMsRUFBWSxVQUNoRUUsRUFBVWx1QyxRQUFRLDZCQUErQixJQUFJZ3VDLEVBQVksT0FDcEVxRyxFQUFtQkcsR0FBVTl1QixFQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxFQUFBLENBQ3pCLE1BQVErdUIsRUFDUixLQUFPekcsRUFDUCxHQUFLQyxFQUNMLFVBQVl1RyxHQUFTLE9BQ2R4RyxHQUNQLE9BQU9FLEdBQ1AsYUFBYXdHLEdBQ2IsY0FBY3RHLEdBQ2QsUUFBUW1HLEVBQVlyRyxJQUdoQyxJQUdzQm1HLEVBQ2xCLEdBQUtBLEVBQW1CUSxlQUFlTCxHQUF2QyxDQUNBLElBQUlNLEVBQVlULEVBQW1CRyxHQUVoQ0EsRUFBVXgwQyxRQUFRLGlCQUFtQixJQUVoQ3cwQyxFQURETSxFQUFVQyxZQUFzQyxJQUF4QkQsRUFBVUMsV0FDckJELEVBQVVDLFdBQVd0bEMsY0FFckJxbEMsRUFBVTE0QyxLQUFLLElBQUkwNEMsRUFBVXBZLE9BR2pEZ1IsRUFBY3YwQyxLQUFLMnZCLFVBQVUwckIsR0FBVyxJQUFJMXJCLFVBQVVnc0IsRUFBVW4yQyxPQVZMLENBaUIvRCxPQUhBcTJDLGFBQWV0SCxFQUFjejJDLE9BQVMsRUFBSSxJQUFNeTJDLEVBQWMvc0MsS0FBSyxLQUFPLEdBR25FcTBDLFlBQ1gsRUFVUzNJLEdBQVQsU0FBMkI3eUMsRUFBTzRmLEdBRXBDLElBQUk2N0IsRUFBc0IsRUE0QjFCLEdBMUJNNStDLEVBQVEsc0JBQXNCbUQsRUFBT21KLFdBRTNDdEosTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFEQUFxRHdMLEtBQUssZ0JBQWdCWCxTQUU1QixXQUEvRW5VLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLRixLQUFLLDhCQUVXLElBQW5EakosRUFBT21aLGtCQUFrQndnQyx5QkFFTixVQUF0QjM1QyxFQUFPNlAsYUFBdUcsTUFBNUU3UCxFQUFPbVosa0JBQWtCdWlDLDJCQUEyQm44QixNQUFNLGdCQUM1Rm84QixlQUFpQjM3QyxFQUFPbVosa0JBQWtCdWlDLDJCQUMxQy94QyxHQUFRM0osRUFBT21KLFdBQVdxM0IsYUFBZ0JtYixlQUFlcDhCLE1BQU0sU0FBV284QixlQUFpQixPQUFPQSxnQkFDNUYzN0MsRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixtQkFBcUJyWixFQUFPNlAsWUFBWSxJQUFJN1AsRUFBT3FaLGVBQWlCLG1CQUFxQnJaLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIsb0JBQzdMbW5CLGFBQWV4Z0MsRUFBT21aLGtCQUFrQnVpQywyQkFDcENsYixhQUFhamhCLE1BQU0sVUFBWWloQixhQUFhamhCLE1BQU0sU0FDbEQ1VixHQUFRM0osRUFBT21KLFdBQVdxM0IsYUFBZUEsYUFHekM3MkIsR0FBUTNKLEVBQU9tSixXQUFXcTNCLGFBQWtCLGdCQUFnQjNzQixLQUFLMnNCLGNBQTBDQSxhQUF6QixVQUFVQSxhQUVoRzcyQixHQUFRM0osRUFBT21KLFdBQVd1d0MsZUFBZ0IsSUFPRGg5QyxNQUF2RHNELEVBQU9tWixrQkFBa0IrK0IsMkJBQXdDLENBaUIzRCxHQWZzRXg3QyxNQUFsRXNELEVBQU9tWixrQkFBa0JpaEMsc0NBQ1oxOUMsTUFBVGtqQixFQUNBalcsR0FBUTNKLEVBQU9tSixXQUFXUyxlQUFldXdDLHVCQUFrR3o5QyxNQUF2RXNELEVBQU9tWixrQkFBa0JraEMsMENBQTBEdmxDLFNBQVM5VSxFQUFPbVosa0JBQWtCa2hDLDJDQUE2QyxFQUV0T29CLEVBQStGLytDLE1BQXZFc0QsRUFBT21aLGtCQUFrQmtoQywwQ0FBMER2bEMsU0FBUzlVLEVBQU9tWixrQkFBa0JraEMsMkNBQTZDLEVBR2pMMzlDLE1BQVRrakIsRUFDQWpXLEdBQVEzSixFQUFPbUosV0FBV1MsZUFBZXV3Qyx1QkFBeUIsR0FFbEVzQixFQUFzQixJQUtKLFlBQXRCejdDLEVBQU82UCxZQUEwQixDQUNqQyxJQUFJK3JDLEVBQWUvN0MsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQm1NLElBQUksUUFDdEZ6VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUscUJBQXFCNkssU0FDL0QsSUFBSTZuQyxFQUE2Qmg4QyxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsNENBQTRDbEcsSUFBSSxHQUFHaWdCLFVBQzlIcmpCLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSw0Q0FBNEM2SyxTQUN0Rm5VLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLOE8sUUFBUTRqQyxHQUV2RGg4QyxNQUFNLG1DQUFtQ0MsTUFBSyxXQUMxQ0QsTUFBTTBELE1BQU0rUixJQUFJLENBQ2hCLFNBQVksUUFDWixNQUFTLE9BQ1QsS0FBUXNtQyxFQUNSLE9BQVUsUUFFZCxHQUNKLENBR0EvN0MsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFEQUFxRG1NLElBQUksVUFBVSxRQUFRWCxLQUFLLGlDQUFpQ1gsU0FDM0puVSxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUscURBQXFEdU0sWUFBWSxtQ0FDM0c3VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS21NLElBQUksYUFBYSxJQUdoRXpWLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSw4QkFBOEJILFNBQVMsbUVBQ2pGbkosTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQnVGLEtBQUssS0FFcEUzTCxZQUFXLFdBQ1BsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsOEJBQThCdU0sWUFBWSxtREFDeEYsR0FBRSxLQUNFMVYsRUFBTzZQLGVBQWUwZ0IsSUFBZ0JBLEdBQWF2d0IsRUFBTzZQLGNBQWdCaUYsU0FBUzlVLEVBQU9xWixjQUFjamMsTUFBTSxLQUFLLEtBRW5IeUMsTUFBTXNHLFVBQVU0QyxHQUFHLFFBQVMsb0JBQW9CL0ksRUFBT21KLFVBQVUsb0JBQW9CLFdBQ2pGa3BCLG9CQUFvQnh5QixNQUFNMEQsTUFBTU4sSUFBSSxHQUN4QyxJQUlid3FCLEdBQW1CLGdCQUFpQixXQUFZLG1CQUFtQnp0QixFQUFPbUosVUFBVSwyQkFFakQsWUFBdEJuSixFQUFPNlAsYUFDSDhqQixNQUNBOXpCLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxxRUFBcUVtTSxJQUFJLENBQUMsZ0JBQWdCLFNBS3JKUixTQUFTOVUsRUFBT21aLGtCQUFrQitZLHVDQUNsQ3J5QixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsS0FBS0osR0FBRyxjQUFhLFNBQVM4YixHQUNwRW5vQixNQUFUa2pCLEdBQ0lqVyxHQUFRM0osRUFBT21KLFdBQVdTLGlCQUFnQkQsR0FBUTNKLEVBQU9tSixXQUFXUyxlQUFlLENBQUMsR0FDeEZELEdBQVEzSixFQUFPbUosV0FBV1MsZUFBZWt5Qyx5QkFBMEIsR0FFbkVBLHlCQUEwQixDQUVsQyxJQUFHL3lDLEdBQUcsY0FBYSxTQUFTOGIsR0FDWG5vQixNQUFUa2pCLEdBQ0lqVyxHQUFRM0osRUFBT21KLFdBQVdTLGlCQUFnQkQsR0FBUTNKLEVBQU9tSixXQUFXUyxlQUFlLENBQUMsR0FDeEZELEdBQVEzSixFQUFPbUosV0FBV1MsZUFBZWt5Qyx5QkFBMEIsR0FFbkVBLHlCQUEwQixDQUVsQyxJQUcwQixZQUF0Qjk3QyxFQUFPNlAsYUFDUGhRLE1BQU1zRyxVQUFVeVosT0FBTSxTQUFTcmdCLEdBQ3ZCTSxNQUFNTixFQUFFa0ssUUFBUXFqQixRQUFRLGdDQUFnQzlzQixFQUFPbUosVUFBVSxLQUFLMUwsU0FDL0RmLE1BQVRrakIsRUFBc0JqVyxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWVreUMsd0JBQTJCQSwwQkFDekZqOEMsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLEtBQUsrSixHQUFHLGNBQzlEclcsRUFBUSxlQUFlbUQsRUFBT21KLFVBQVUseUNBQ3hDUSxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWVDLGNBQWdCLFdBQ3pEQyxZQUFZOUosRUFBT21KLFdBQVUsR0FBTSxHQUluRCxJQUdaLE1BQU8sR0FBMkR6TSxNQUF2RHNELEVBQU9tWixrQkFBa0IrK0IsNEJBQWlFLFlBQXRCbDRDLEVBQU82UCxZQUEyQixDQUN0SCxJQUMyQixZQUF4QjdQLEVBQU9xWixlQUF1RCxZQUF4QnJaLEVBQU9xWixnQkFBZ0NyWixFQUFPNnhDLGdCQUM3RCxZQUF4Qjd4QyxFQUFPcVosZUFBK0JyWixFQUFPbVosa0JBQWtCMlYseUJBQ2hFLENBRWdCOXVCLEVBQU82eEMsZ0JBQWtCN3hDLEVBQU82eEMsZUFBZUMsYUFBb0QsR0FBckM5eEMsRUFBTzZ4QyxlQUFlQyxZQUN2RXAxQyxNQUFUa2pCLEVBQ0FqVyxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWU4d0MsaUJBQXdGaCtDLE1BQW5Fc0QsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHFCQUFxQ2grQixTQUFTOVUsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHNCQUF3QixFQUV4TmlKLGVBQXNGci9DLE1BQW5Fc0QsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHFCQUFxQ2grQixTQUFTOVUsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHNCQUF3QixFQUVwS3AyQyxNQUFUa2pCLEVBQ0FqVyxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWU4d0MsaUJBQW1CLEdBRTVEcUIsZUFBaUIsSUFHckMsSUFBSUMsRUFBVSxFQUNYaDhDLEVBQU9tWixrQkFBa0IyViwyQkFDM0JrdEIsRUFBVSxLQUdYajVDLFlBQVksV0FFQ2xELE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSx5QkFBeUJtTSxJQUFJLFVBQVUsUUFDakZ6VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUseUJBQXlCdU0sWUFBWSxtQ0FDL0U3VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS21NLElBQUksYUFBYSxJQUUxQixHQUFuQ3RWLEVBQU82eEMsZUFBZW9LLFVBQ3JCN2YsR0FBb0JwOEIsSUFHcEJILE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSwyQkFBMkJILFNBQVMsbUVBQzlFakcsWUFBVyxXQUNQbEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDJCQUEyQnVNLFlBQVksbURBQ3JGLEdBQUUsS0FFbkIsR0FBR3NtQyxFQUNLLENBRzRCLFlBQXhCaDhDLEVBQU9xWixnQkFDUHhaLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSx5QkFBeUJtTSxJQUFJLFVBQVUsUUFDakZ6VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUseUJBQXlCdU0sWUFBWSxtQ0FDL0U3VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsNEJBQTRCSCxTQUFTLG1FQUV2RixNQXArR0osU0FBMENoSixHQUM1QyxHQUEwQixRQUF0QkEsRUFBT3M3QixjQUFzQixDQUNoQyxJQUFJNTlCLEVBQVV3WCxNQUFvQjhnQixLQUFhLGVBQWlCLHFCQUNuRGttQixFQUFPcjhDLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUM5RGd6QyxFQUFPRCxFQUFLdm5DLEtBQUssK0NBQ2pCeW5DLEVBQU1ELEVBQUt4bkMsS0FBSyxVQUNoQmtCLEVBQVEsVUFDUndtQyxFQUFrQixjQUFjbm5DLE1BQW9COGdCLEtBQWEsTUFBUSxPQUMxRW9tQixFQUFJMytDLE9BQVMsSUFBSW9ZLEVBQVF1bUMsRUFBSTltQyxJQUFJLFVBQ2xCLEdBQWY2bUMsRUFBSzErQyxTQUFjMCtDLEVBQU9ELEVBQUt2bkMsS0FBSywwQkFDdkMsSUFBSTJuQyxFQUFVLG1DQUFtQ3ptQyxFQUFNLG1CQUFtQndtQyxFQUFnQixLQUFLMytDLEVBQVEsVUFDdkd5K0MsRUFBSzlqQyxLQUFLLElBQUlqRSxPQUFPa29DLEdBQ3JCSixFQUFLdm5DLEtBQUssbUNBQW1Db1EsTUFDakQsQ0FDSixDQXU5R1F3M0IsQ0FBaUN2OEMsR0FDcEJ0RCxNQUFUa2pCLEVBQ0FqVyxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWV1d0MsdUJBQXlCamxDLE1BQTJDLFNBQXZCbFYsRUFBT3M3QixjQUEwQixFQUFJLEdBRTNIbWdCLEVBQXNCdm1DLE1BQTJDLFNBQXZCbFYsRUFBT3M3QixjQUEwQixFQUFJLEVBS3ZGLEdBQXlCLFlBQXRCdDdCLEVBQU82UCxhQUFxRCxZQUF4QjdQLEVBQU9xWixlQUErQnJaLEVBQU82eEMsZUFBZSxDQUN4RyxJQUFJNkksRUFBbUIvd0MsR0FBUTNKLEVBQU9tSixXQUFXUyxlQUFlOHdDLGlCQUVoRUEsR0FEQUEsRUFBNEJoK0MsTUFBVGtqQixHQUEwQ2xqQixNQUFwQmcrQyxFQUFnQ0EsRUFBbUJxQixrQkFDbEMvN0MsRUFBTyt1QixpQkFBeUMsRUFBdEJna0IsR0FBMEJBLElBQ25FLEdBQXJDL3lDLEVBQU82eEMsZUFBZUMsYUFBb0ZwMUMsTUFBN0RzRCxFQUFPNnhDLGVBQWVFLG9CQUFvQkMsaUJBQzVGanZDLFlBQVcsV0FDVjRHLEdBQVEzSixFQUFPbUosV0FBV1MsZUFBZUMsY0FBZ0IsU0FDekRDLFlBQVk5SixFQUFPbUosVUFDcEIsR0FBc0IsSUFBbkJ1eEMsRUFFQyxNQUFNLEdBQ2EsYUFBdkIxNkMsRUFBTzZQLGFBQXFELFlBQXRCN1AsRUFBTzZQLGFBQXNELGFBQXpCN1AsRUFBT3FaLGNBR2pGLENBQUMsSUFBRG1qQyxFQUFBQyxHQUNXejhDLFNBQXlCLFFBQW5CdzhDLEVBQU54OEMsRUFBUW1aLHlCQUFpQixJQUFBcWpDLElBQXpCQSxFQUEyQnRFLDRCQUErQmw0QyxTQUF5QixRQUFuQnk4QyxFQUFOejhDLEVBQVFtWix5QkFBaUIsSUFBQXNqQyxHQUF6QkEsRUFBMkJyQyx3Q0FHcEZyM0MsWUFBVyxXQUNQNEcsR0FBUTNKLEVBQU9tSixXQUFXUyxlQUFlQyxjQUFnQixTQUN6REMsWUFBWTlKLEVBQU9tSixVQUN2QixHQUFpSCxLQUFwR3pNLE1BQVRrakIsRUFBcUJqVyxHQUFRM0osRUFBT21KLFdBQVdTLGVBQWV1d0MsdUJBQXlCc0IsR0FFbkcsQ0FDSixFQUNTcmYsR0FBVCxTQUE2QnA4QixHQUVHSCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsOEJBQ2hEckosTUFBSyxXQUN2QixJQUlJdVksR0FIbUMsSUFEbkNBLEVBQU94WSxNQUFNMEQsTUFBTTRqQixRQUNmM2dCLFFBQVEsb0JBQTRCeEcsRUFBTzZ4QyxlQUFlMkUsT0FDOUQzMkMsTUFBTTBELE1BQU00akIsS0FBSzlPLEVBQUsvYSxRQUFRLGtCQUFtQjBDLEVBQU82eEMsZUFBZTJFLFNBR3JDLElBRGxDbitCLEVBQU94WSxNQUFNMEQsTUFBTTRqQixRQUNmM2dCLFFBQVEsbUJBQTJCeEcsRUFBTzZ4QyxlQUFlMEUsTUFDN0QxMkMsTUFBTTBELE1BQU00akIsS0FBSzlPLEVBQUsvYSxRQUFRLGlCQUFrQjBDLEVBQU82eEMsZUFBZTBFLE1BRTlFLElBR0ExMkMsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDRCQUE0QkgsU0FBUyxtRUFDL0VqRyxZQUFXLFdBQ1BsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsNEJBQTRCdU0sWUFBWSxtREFDdEYsR0FBRSxJQUNOLEVBUVM0YixHQUFULFNBQTBCdHhCLEdBSXRCLEdBRkFuRCxFQUFRLG9CQUVMbUQsRUFBTzA4QyxpQkFDTi95QyxHQUFRM0osRUFBT294QixhQUFhc29CLGVBQWdCLEVBQzVDbHZDLE1BQVF0SCxHQUFTLHNCQUFzQmxELEVBQU9xeEIsVUFDOUM5bUIsRUFBa0NDLE9BQU0sR0FBTSxPQUM3QyxDQUNELElBQUk4b0IsRUFBUXp6QixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsS0FDekIsUUFBdENtcUIsRUFBTXJxQixLQUFLLHlCQUFxRixJQUFoRHFxQixFQUFNcnFCLEtBQUssMkJBQTJCeEwsU0FDdEZrTSxHQUFRM0osRUFBT21KLFdBQVd1d0MsZUFBZ0IsRUFFMUNsdkMsTUFBUXRILEdBQVMsc0JBQXNCb3dCLEVBQU1ycUIsS0FBSywyQkFDbERzQixFQUFrQ0MsT0FBTSxHQUFNLEdBRXRELENBRUosRUFTU2d0QyxHQUFULFNBQWlDeDNDLEVBQVFzRCxHQUFvQyxJQUExQjR2QyxFQUFnQjExQyxVQUFBQyxPQUFBLFFBQUFmLElBQUFjLFVBQUEsSUFBQUEsVUFBQSxHQUUzRHdDLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIsbUJBQXFCclosRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixtQkFBcUJyWixFQUFPNlAsWUFBWSxJQUFJN1AsRUFBT3FaLGVBQWlCLG9CQUV2THNqQyxjQUFnQnI1QyxFQUFTcTVDLGNBQ3pCdDlDLEdBQWdCLHFCQUFxQlcsRUFBT21KLFVBQVd3ekMsY0FBZSxXQUc3QmpnRCxJQUF6QzRHLEVBQVNzNUMsWUFBWUMsaUJBQ3JCaDlDLE1BQU15RCxFQUFTczVDLFlBQVlDLGlCQUFpQi84QyxNQUFLLFNBQVN1eUMsRUFBT2x0QyxHQUM3RHRGLE1BQU0sUUFBUXVVLE9BQU9qUCxFQUN6QixJQUdBeEksT0FBTytHLFNBQVMyRCxLQUFLYixRQUFRLGNBQWdCLEdBQTJCLFFBQXRCeEcsRUFBT3M3QixnQkFDekQzK0IsT0FBTytHLFNBQVMyRCxLQUFPeTFDLEdBQVMseUJBQXlCeDVDLEVBQVNxNUMsY0FBYyxLQUloRnpKLEdBQ0tsekMsRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixxQkFDaERnakIsR0FBaUJyOEIsRUFHN0IsRUFRU21RLEdBQVQsU0FBc0JuUSxHQUNsQixHQUFJQSxFQUFPbUosWUFBY3NJLEdBQXpCLENBTUFzckMsR0FBa0IvOEMsR0FDbEJnOUMsR0FBdUJoOUMsR0E3K0czQixTQUE0QkEsR0FDeEIsSUFFNEIsb0JBQWJjLFFBQ3FFLE1BQXhFbkUsT0FBT29FLGVBQWVDLFFBQVEscUJBQXFCaEIsRUFBT21KLFlBQThGek0sTUFBeEVDLE9BQU9vRSxlQUFlQyxRQUFRLHFCQUFxQmhCLEVBQU9tSixZQUMxSXhNLE9BQU9vRSxlQUFlRSxRQUFRLHFCQUFxQmpCLEVBQU9tSixVQUFXeE0sT0FBTytHLFNBQVMyRCxNQUd6RnhLLEVBQVEsa0NBRWhCLENBQUMsTUFBTXdNLEdBQ0h4TSxFQUFRd00sRUFDWixDQUNKLENBaStHSTR6QyxDQUFtQmo5QyxHQUNuQms5QyxHQUFjbDlDLEdBQ2RtOUMsR0FBaUJuOUMsR0FNakIwUCxRQUF1Q2hULE1BQTdCc0QsRUFBTzAyQixtQkFBa0MsUUFBVTEyQixFQUFPMDJCLG1CQUNwRTl6QixLQUFVb0ssR0FBaUIsU0FBVyxVQUN0Q293QyxhQUFnQnpnRCxPQUFPK0csU0FBUzJELEtBRWhDLElBQU1zRixFQUFZLElBQUlDLGdCQUFnQixDQUNsQzJxQyxVQUFXdjNDLEVBQU91M0MsVUFDbEI3bkMsUUFDQXZPLFVBQVdELElBQ1gwQixLQUNBaUIsSUFBS3U1QyxhQUNMNXZDLGtCQUFtQkEsR0FDbkJDLDhCQUErQkEsR0FDL0IwRSxnQkFBaUJuTCxhQUFhaEcsUUFBUSw0QkFHMUNuQixNQUFNb0UsS0FBSyxDQUNQSixJQUFJLEdBQUQ3RixPQUFLa0YsR0FBUSx3QkFBQWxGLE9BQXVCZ0MsRUFBT21KLFVBQVMsS0FBQW5MLE9BQUkyTyxFQUFVakssWUFDckV5QixPQUFNLEVBQ05tekMsT0FBTyxFQUNQcHpDLFNBQVUsT0FDVnRCLEtBQUssT0FDTixRQUNGd0IsTUFBSyxTQUFTSixHQUVYa3pDLEdBQWVsM0MsRUFBT21KLFdBQWEsQ0FBQyxlQUFtQm5GLEVBQUttekMsZ0JBRTVEdDZDLEVBQVFtSCxHQUNqQixJQUFNcTVDLEVBQXVCLElBQUk3SixZQUFZLGFBQWMsQ0FBQ0MsU0FBUyxFQUFNQyxPQUFRdlksR0FBbUJuN0IsRUFBUSxDQUFDLFdBQWUsaUJBQzlIbUcsU0FBU3d0QyxjQUFjMEosRUFDbEIsSUFDQy91QyxNQUFLLFNBQVNDLEVBQUtDLEVBQVF2USxHQUN4QixHQTdDSixDQStDSixFQVFTb3dCLEdBQVQsU0FBNEJydUIsR0FHeEIsSUFBSXN1QixFQUFtQkMsRUFEdkJ2dUIsR0FEQUEsRUFBMEIsaUJBQVZBLEVBQXFCQSxFQUFTQSxFQUFPQSxRQUNyQzNDLE9BR2hCLElBQUkrL0IsRUFBYXRvQixTQUFTalYsTUFBTUcsR0FBUTJVLEtBQUssbURBQW1EMUwsS0FBSyxlQUNqR3EwQyxFQUFjeG9DLFNBQVNqVixNQUFNRyxHQUFRMlUsS0FBSyxtREFBbUQxTCxLQUFLLGdCQVN0RyxPQU5JZ2dCLE1BQU1tVSxJQUE2QjFnQyxNQUFkMGdDLEdBQXlDLElBQWRBLEdBQWtDLGFBQWRBLElBQ3BFOU8sRUFBb0I4TyxHQUVwQm5VLE1BQU1xMEIsSUFBK0I1Z0QsTUFBZjRnRCxHQUEyQyxJQUFmQSxHQUFvQyxhQUFmQSxJQUN2RS91QixFQUFxQit1QixHQUVsQixDQUFFLE1BQVVodkIsRUFBbUIsT0FBV0MsRUFDckQsRUFRU00sR0FBVCxTQUEyQjd1QixFQUFRNGYsR0FLL0IsSUFBSXdPLEVBQTJCQyxHQUFtQnJ1QixFQUFPQSxRQUdyRHN1QixFQUFvQkYsRUFBZ0MsTUFDcERHLEVBQXFCSCxFQUFpQyxPQUVyREUsR0FBc0JDLElBQXNCdEYsTUFBTXFGLEtBQXNCckYsTUFBTXNGLEtBQ3JELFlBQXRCdnVCLEVBQU82UCxhQUNQeWUsRUFBb0JBLEdBQXFCcUksR0FDekNwSSxFQUFxQkEsR0FBc0JxSSxJQUNmLE9BQXRCNTJCLEVBQU82UCxhQUNieWUsRUFBb0JBLEdBQXFCdUksR0FDYixZQUF4QjcyQixFQUFPcVosZUFBdUQsWUFBeEJyWixFQUFPcVosY0FDN0NrVixFQUFxQkEsR0FBc0J1SSxHQUNaLFlBQXhCOTJCLEVBQU9xWixlQUF1RCxZQUF4QnJaLEVBQU9xWixlQUF1RCxZQUF4QnJaLEVBQU9xWixlQUF1RCxZQUF4QnJaLEVBQU9xWixjQUNoSWtWLEVBQXFCQSxHQUFzQndJLEdBQ1osWUFBeEIvMkIsRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGNBQ3BEa1YsRUFBcUJBLEdBQXNCeUksR0FDWixZQUF4QmgzQixFQUFPcVosZUFBdUQsYUFBeEJyWixFQUFPcVosZ0JBQ3BEa1YsRUFBcUJBLEdBQXNCMEksS0FFbkIsU0FBdEJqM0IsRUFBTzZQLFlBQ2dCLGFBQXpCN1AsRUFBT3FaLGVBQXlELGFBQXpCclosRUFBT3FaLGVBQzlDaVYsRUFBb0JBLEdBQXFCOEksR0FDekM3SSxFQUFxQkEsR0FBc0I0SSxJQUNaLGFBQXpCbjNCLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixlQUNwRGlWLEVBQW9CQSxHQUFxQitJLEdBQ3pDOUksRUFBcUJBLEdBQXNCK0ksSUFDWixjQUF6QnQzQixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQmlKLEdBQ3pDaEosRUFBcUJBLEdBQXNCaUosS0FFM0NsSixFQUFvQkEsR0FBcUI0SSxHQUN6QzNJLEVBQXFCQSxHQUFzQjRJLElBRW5CLFNBQXRCbjNCLEVBQU82UCxhQUNieWUsRUFBb0JBLEdBQXFCbUosR0FDekNsSixFQUFxQkEsR0FBc0JtSixJQUNmLFlBQXRCMTNCLEVBQU82UCxhQUNieWUsRUFBb0JBLEdBQXFCcUosR0FDekNwSixFQUFxQkEsR0FBc0JxSixJQUNmLFlBQXRCNTNCLEVBQU82UCxhQUNieWUsRUFBb0JBLEdBQXFCLE9BQ3pDQyxFQUFxQkEsR0FBc0IsT0FDZCxhQUF6QnZ1QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZ0JBQzlDaVYsRUFBb0JBLEdBQXFCeUosR0FDekN4SixFQUFxQkEsR0FBc0J5SixLQUVuQixVQUF0Qmg0QixFQUFPNlAsWUFDZ0IsYUFBekI3UCxFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZUFDOUNpVixFQUFvQkEsR0FBcUIySixHQUN6QzFKLEVBQXFCQSxHQUFzQjJKLElBQ1osYUFBekJsNEIsRUFBT3FaLGVBQXlELGFBQXpCclosRUFBT3FaLGVBQ3BEaVYsRUFBb0JBLEdBQXFCNkosR0FDekM1SixFQUFxQkEsR0FBc0I2SixJQUNaLGFBQXpCcDRCLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixnQkFDcERpVixFQUFvQkEsR0FBcUIrSixHQUN6QzlKLEVBQXFCQSxHQUFzQitKLElBRW5CLFVBQXRCdDRCLEVBQU82UCxhQUNieWUsRUFBb0JBLEdBQXFCaUssR0FDekNoSyxFQUFxQkEsR0FBc0JpSyxHQUNkLGFBQXpCeDRCLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixlQUM5Q2lWLEVBQW9CQSxHQUFxQm1LLEdBQ3pDbEssRUFBcUJBLEdBQXNCbUssSUFDWixhQUF6QjE0QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosY0FDcERrVixFQUFxQkEsR0FBc0JvSyxHQUNaLGFBQXpCMzRCLEVBQU9xWixlQUF5RCxjQUF6QnJaLEVBQU9xWixnQkFDcERrVixFQUFxQkEsR0FBc0JxSyxLQUVuQixZQUF0QjU0QixFQUFPNlAsWUFDZ0IsYUFBekI3UCxFQUFPcVosZUFDUGlWLEVBQW9CQSxHQUFxQnVLLEdBQ3pDdEssRUFBcUJBLEdBQXNCdUssSUFDWixhQUF6Qjk0QixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQnlLLEdBQ3pDeEssRUFBcUJBLEdBQXNCeUssSUFDWixhQUF6Qmg1QixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQjJLLEdBQ3pDMUssRUFBcUJBLEdBQXNCMkssSUFDWixhQUF6Qmw1QixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQjZLLEdBQ3pDNUssRUFBcUJBLEdBQXNCNkssSUFDWixhQUF6QnA1QixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQitLLEdBQ3pDOUssRUFBcUJBLEdBQXNCK0ssSUFDWixhQUF6QnQ1QixFQUFPcVosZUFDYmlWLEVBQW9CQSxHQUFxQmlMLEdBQ3pDaEwsRUFBcUJBLEdBQXNCaUwsSUFDWixhQUF6Qng1QixFQUFPcVosZ0JBQ2JpVixFQUFvQkEsR0FBcUJtTCxHQUN6Q2xMLEVBQXFCQSxHQUFzQm1MLElBRW5CLFlBQXRCMTVCLEVBQU82UCxjQUNieWUsRUFBb0JBLEdBQXFCcUksR0FDekNwSSxFQUFxQkEsR0FBc0JxSSxLQU16QixZQUF0QjUyQixFQUFPNlAsYUFDTW5ULE1BQVRrakIsSUFDQWpXLEdBQVEzSixFQUFPbUosV0FBV3NsQixZQUFZNVQsT0FBUzBULEVBQy9DNWtCLEdBQVEzSixFQUFPbUosV0FBV3NsQixZQUFZQyxNQUFRSixHQUV0QixZQUF4QnR1QixFQUFPcVosZUFBdUQsWUFBeEJyWixFQUFPcVosZ0JBQzdDc2QsR0FBeUJDLElBR2xCbDZCLE1BQVBrakIsSUFDQWpXLEdBQVEzSixFQUFPbUosV0FBV28wQyxnQkFBa0IsQ0FBQzluQyxNQUFNK25DLEdBQWU3bUIsSUFBd0IsRUFBRThtQixJQUFJQyxHQUFnQjltQixJQUF5QixJQUMzSCxDQUFDbmhCLE1BQU0rbkMsR0FBZTdtQixJQUF3QixFQUFFOG1CLElBQUlDLEdBQWdCOW1CLElBQXlCLElBQ25GLE9BQXRCNTJCLEVBQU82UCxhQUNGblQsTUFBUGtqQixJQUNBalcsR0FBUTNKLEVBQU9tSixXQUFXbzBDLGdCQUFrQixDQUFDOW5DLE1BQU0rbkMsR0FBZSxNQUFNLEVBQUVDLElBQUlDLEdBQWdCLEtBQUssSUFDckYsQ0FBQ2pvQyxNQUFNK25DLEdBQWUsTUFBTSxFQUFFQyxJQUFJQyxHQUFnQixLQUFLLElBQzdDLFVBQXRCMTlDLEVBQU82UCxhQUFvRCxZQUF4QjdQLEVBQU9xWixlQUF1RCxZQUF4QnJaLEVBQU9xWixjQUsxRCxZQUF0QnJaLEVBQU82UCxjQUNBblQsTUFBVGtqQixJQUNBalcsR0FBUTNKLEVBQU9tSixXQUFXc2xCLFlBQVk1VCxPQUFTMFQsRUFDL0M1a0IsR0FBUTNKLEVBQU9tSixXQUFXc2xCLFlBQVlDLE1BQVFKLEdBR3ZDNXhCLE1BQVBrakIsSUFDQWpXLEdBQVEzSixFQUFPbUosV0FBV28wQyxnQkFBa0IsQ0FBQzluQyxNQUFNK25DLEdBQWU3bUIsSUFBd0IsRUFBRThtQixJQUFJQyxHQUFnQjltQixJQUF5QixJQUMzSCxDQUFDbmhCLE1BQU0rbkMsR0FBZTdtQixJQUF3QixFQUFFOG1CLElBQUlDLEdBQWdCOW1CLElBQXlCLEtBWi9HNG1CLEdBQWV6b0MsS0FBS2tYLElBQUl1eEIsR0FBYzM5QyxNQUFNLFFBQVEwMkIsY0FDekM3NUIsTUFBUGtqQixJQUNBalcsR0FBUTNKLEVBQU9tSixXQUFXbzBDLGdCQUFrQixDQUFDOW5DLE1BQU0rbkMsR0FBZSxLQUFLLEVBQUVDLElBQUlDLEdBQWdCLEtBQUssSUFDcEYsQ0FBQ2pvQyxNQUFNK25DLEdBQWUsS0FBSyxFQUFFQyxJQUFJQyxHQUFnQixLQUFLLEdBV2hGLEVBT1MxcEIsR0FBVCxTQUFzQmgwQixFQUFPNGYsR0FTekIvZixNQUFNbEQsUUFBUWdoRCxRQUFPLFlBR1csWUFBdEIzOUMsRUFBTzZQLGFBQW1ELFlBQXRCN1AsRUFBTzZQLGFBQ3BCLFlBQXRCN1AsRUFBTzZQLGNBQWdHLElBQW5FaFEsTUFBTW9nQixRQUFRamdCLEVBQU9xWixjQUFla1gsR0FBdUIsWUFFbEd4dEIsWUFBVyxXQUNQa3hCLEdBQWVqMEIsRUFBTzRmLEVBQzFCLEdBQUcsSUFFWCxHQUNKLEVBbUpTcVUsR0FBVCxTQUF3QmowQixFQUFPNGYsR0FFM0IsSUFBSWpHLEVBQXlDLFlBQXRCM1osRUFBTzZQLFlBQzFCK3RDLEVBQW9CamtDLEVBQW1DOVosTUFBTSw2QkFBNkJHLEVBQU9tSixVQUFVLE1BQXBFdEosTUFBTWxELFFBRWpEa2hELG9CQUFxQixFQUlyQixJQUFJdnFCLEVBQVF6ekIsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLEtBR25FbkosRUFBTzg5QyxTQUFTeHFCLEVBQU14TyxTQUFTLGFBR1gsWUFBdEI5a0IsRUFBTzZQLGFBQW1ELFlBQXRCN1AsRUFBTzZQLGFBQ2pDb1osTUFBTW5VLFNBQVN3ZSxFQUFNM2UsS0FBSyxtREFBbUQxTCxLQUFLLGtCQUNsRnFxQixFQUFNM2UsS0FBSyxtREFBbUQxTCxLQUFLLGFBQWMsS0FDakZxcUIsRUFBTTNlLEtBQUssbURBQW1EMUwsS0FBSyxjQUFlLE1BSzFGLElBQUk4MEMsRUFBb0JwMEMsR0FBUTNKLEVBQU9tSixXQUFXc2xCLFlBQVlDLE1BQzFEc3ZCLEVBQXFCcjBDLEdBQVEzSixFQUFPbUosV0FBV3NsQixZQUFZNVQsT0FHM0R1VCxFQUEyQkMsR0FBbUJydUIsRUFBT0EsUUFFekQrOUMsRUFBb0IzdkIsRUFBZ0MsT0FBSzJ2QixFQUN6REMsRUFBcUI1dkIsRUFBaUMsUUFBSzR2QixHQUd2RC8wQixNQUFNODBCLElBQXNCOTBCLE1BQU0rMEIsTUFDUixZQUF0QmgrQyxFQUFPNlAsYUFDUGt1QyxFQUFvQnBuQixHQUNwQnFuQixFQUFxQnBuQixJQUNPLE9BQXRCNTJCLEVBQU82UCxhQUNia3VDLEVBQW9CbG5CLEdBQ1EsWUFBeEI3MkIsRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGNBQzdDMmtDLEVBQXFCbG5CLEdBQ1UsWUFBeEI5MkIsRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGNBQ2hJMmtDLEVBQXFCam5CLEdBQ1UsWUFBeEIvMkIsRUFBT3FaLGVBQXVELFlBQXhCclosRUFBT3FaLGNBQ3BEMmtDLEVBQXFCaG5CLEdBQ1UsWUFBeEJoM0IsRUFBT3FaLGVBQXVELGFBQXhCclosRUFBT3FaLGdCQUNwRDJrQyxFQUFxQi9tQixLQUVHLFNBQXRCajNCLEVBQU82UCxZQUNnQixhQUF6QjdQLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixlQUM5QzBrQyxFQUFvQjNtQixHQUNwQjRtQixFQUFxQjdtQixJQUNVLGFBQXpCbjNCLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixlQUNwRDBrQyxFQUFvQjFtQixHQUNwQjJtQixFQUFxQjFtQixJQUNVLGNBQXpCdDNCLEVBQU9xWixlQUNiMGtDLEVBQW9CeG1CLEdBQ3BCeW1CLEVBQXFCeG1CLEtBRXJCdW1CLEVBQW9CN21CLEdBQ3BCOG1CLEVBQXFCN21CLElBRUcsU0FBdEJuM0IsRUFBTzZQLGFBQ2JrdUMsRUFBb0J0bUIsR0FDcEJ1bUIsRUFBcUJ0bUIsSUFDTyxZQUF0QjEzQixFQUFPNlAsYUFDYmt1QyxFQUFvQnBtQixHQUNwQnFtQixFQUFxQnBtQixJQUNPLFlBQXRCNTNCLEVBQU82UCxhQUNia3VDLEVBQW9CLE9BQ3BCQyxFQUFxQixPQUNRLGFBQXpCaCtDLEVBQU9xWixlQUF5RCxhQUF6QnJaLEVBQU9xWixnQkFDOUMwa0MsRUFBb0JobUIsR0FDcEJpbUIsRUFBcUJobUIsS0FFRyxVQUF0Qmg0QixFQUFPNlAsWUFDZ0IsYUFBekI3UCxFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZUFDOUMwa0MsRUFBb0I5bEIsR0FDcEIrbEIsRUFBcUI5bEIsSUFDVSxhQUF6Qmw0QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZUFDcEQwa0MsRUFBb0I1bEIsR0FDcEI2bEIsRUFBcUI1bEIsSUFDVSxhQUF6QnA0QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZ0JBQ3BEMGtDLEVBQW9CMWxCLEdBQ3BCMmxCLEVBQXFCMWxCLElBRUcsVUFBdEJ0NEIsRUFBTzZQLGFBQ2JrdUMsRUFBb0J4bEIsR0FDcEJ5bEIsRUFBcUJ4bEIsR0FDUSxhQUF6Qng0QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosZUFDOUMwa0MsRUFBb0J0bEIsR0FDcEJ1bEIsRUFBcUJ0bEIsSUFDVSxhQUF6QjE0QixFQUFPcVosZUFBeUQsYUFBekJyWixFQUFPcVosY0FDcEQya0MsRUFBcUJybEIsR0FDVSxhQUF6QjM0QixFQUFPcVosZUFBeUQsY0FBekJyWixFQUFPcVosZ0JBQ3BEMmtDLEVBQXFCcGxCLEtBRUcsWUFBdEI1NEIsRUFBTzZQLFlBQ2dCLGFBQXpCN1AsRUFBT3FaLGVBQ1Awa0MsRUFBb0JsbEIsR0FDcEJtbEIsRUFBcUJsbEIsSUFDVSxhQUF6Qjk0QixFQUFPcVosZUFDYjBrQyxFQUFvQmhsQixHQUNwQmlsQixFQUFxQmhsQixJQUNVLGFBQXpCaDVCLEVBQU9xWixlQUNiMGtDLEVBQW9COWtCLEdBQ3BCK2tCLEVBQXFCOWtCLElBQ1UsYUFBekJsNUIsRUFBT3FaLGVBQ2Iwa0MsRUFBb0I1a0IsR0FDcEI2a0IsRUFBcUI1a0IsSUFDVSxhQUF6QnA1QixFQUFPcVosZUFDYjBrQyxFQUFvQjFrQixHQUNwQjJrQixFQUFxQjFrQixJQUNVLGFBQXpCdDVCLEVBQU9xWixlQUNiMGtDLEVBQW9CeGtCLEdBQ3BCeWtCLEVBQXFCeGtCLElBQ1UsYUFBekJ4NUIsRUFBT3FaLGdCQUNiMGtDLEVBQW9CdGtCLEdBQ3BCdWtCLEVBQXFCdGtCLElBRUcsWUFBdEIxNUIsRUFBTzZQLGNBQ2JrdUMsRUFBb0JwbkIsR0FDcEJxbkIsRUFBcUJwbkIsS0FLN0J0RCxFQUFNM2UsS0FBSyxtREFBbUQxTCxLQUFLLGFBQWM4MEMsR0FDakZ6cUIsRUFBTTNlLEtBQUssbURBQW1EMUwsS0FBSyxjQUFlKzBDLEdBS2xGLElBQUlDLEVBQW9CcCtDLE1BQU0sUUFBUTAyQixhQUFlLEdBQUsxMkIsTUFBTWxELFFBQVE0NUIsYUFBZXhoQixLQUFLa1gsSUFBSXBzQixNQUFNbEQsUUFBUTQ1QixhQUFjMTJCLE1BQU0sUUFBUTAyQixjQUFnQjEyQixNQUFNbEQsUUFBUTQ1QixhQVV4SyxHQVRBMm5CLHNCQUF3QnZrQyxFQUFtQmlrQyxFQUFpQmx2QixRQUFVdXZCLEVBQ3RFRSx1QkFBeUJ4a0MsRUFBaUQsR0FBN0Jpa0MsRUFBaUIvaUMsU0FBZ0IraUMsRUFBaUIvaUMsU0FBV21qQyxFQUFzQnJoRCxPQUFPODJCLFlBSXZJMnFCLGFBQWVSLEVBQWlCbHZCLFFBQ2hDMnZCLGNBQWdCMWtDLEVBQW1CaWtDLEVBQWlCL2lDLFNBQVdsZSxPQUFPODJCLFlBRzNDLFlBQXRCenpCLEVBQU82UCxZQUE0QixDQVFwQyxJQUFJeXVDLEVBQVEsRUFJWixHQUZBeitDLE1BQU0sb0JBQW9CbUosU0FBUyxxQkFDbkNuSixNQUFNLHNCQUFzQm1KLFNBQVMscUJBQ2pDbkosTUFBTSxnQ0FBa0NHLEVBQU9tSixVQUFZLHlEQUF5RDFMLE9BQVMsRUFDN0gsSUFBSThnRCxFQXBQaEIsU0FBa0N2K0MsR0FDOUIsSUFBSXN6QixFQUFRenpCLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUMvRHExQyxFQUFjLEVBQ2RDLEVBQWMsRUFFZEMsRUFBYyxJQUFJL2dELE1BQ2xCZ2hELEVBQWtCLEVBQ2xCQyxFQUFjdHJCLEVBQU1oZSxJQUFJLFNBMkI1QixPQTFCZ0JnZSxFQUFNaGUsSUFBSSxTQUUxQnpWLE1BQU0sZ0NBQWtDRyxFQUFPbUosVUFBWSx5REFBeURySixNQUFLLFdBQ3JILElBQUkrK0MsRUE1Q1osU0FBMENDLEVBQU1DLEdBQzVDLFFBQXNCLElBQVhBLEVBQUssU0FBdUMsSUFBWEQsRUFBSyxHQUFtQixDQUNoRSxJQUFJOTBCLEVBQUkrMEIsRUFBSyxHQUFHbGlCLHdCQUNac1csRUFBSzJMLEVBQUssR0FBR2ppQix3QkFFYm1pQixFQUFXLEdBQ1hDLEVBQVcsRUFXZixPQVZJOUwsRUFBRzE5QixLQUFPdVUsRUFBRXZVLE1BQ1p1cEMsRUFBVyxPQUNYQyxFQUFZajFCLEVBQUV2VSxLQUFPMDlCLEVBQUcxOUIsTUFFakIwOUIsRUFBRzE0QixNQUFRdVAsRUFBRXZQLFFBQ3BCdWtDLEVBQVcsUUFDWEMsRUFBWTlMLEVBQUcxNEIsTUFBUXVQLEVBQUV2UCxPQUdWLENBQUMsVUFBWXVrQyxFQUFTLFVBQVlDLEVBRXpELENBQ0ksTUFBTyxDQUFDLENBRWhCLENBdUI0QkMsQ0FBaUNyL0MsTUFBTTBELE1BQU0rdkIsRUFBTTNlLEtBQUssb0JBQ2xFRyxTQUFTalYsTUFBTTBELE1BQU0rUixJQUFJLFVBRS9CelYsTUFBTXMvQyxjQUFjTixLQUNRLFFBQXpCQSxFQUFjaHRCLFlBQ2Iyc0IsRUFBY0ssRUFBY0ksV0FHSixTQUF6QkosRUFBY2h0QixZQUNiMnNCLEVBQWNLLEVBQWNJLFdBRWhDUixFQUFjRCxFQUNkRSxFQUFZLytDLEtBQUs4K0MsR0FJekIsSUFFR0MsRUFBWWpoRCxPQUFPLElBQ2xCa2hELEVBQWtCNXBDLEtBQUtxcUMsSUFBR3JoRCxNQUFSZ1gsS0FBWTJwQyxJQUkzQixDQUFDVyxVQURJdnFDLFNBQVM4cEMsR0FBa0MsRUFBbEJELEVBQ2xCQSxnQkFBQUEsRUFFdkIsQ0FnTnlCVyxDQUF5QnQvQyxHQUNsQ3UvQyxFQS9NaEIsU0FBbUN2L0MsR0FDL0IsSUFBSXN6QixFQUFRenpCLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUMvRHEyQyxFQUFhLEVBQ2JDLEVBQWEsRUFFYmYsRUFBYyxJQUFJL2dELE1BQ2xCK2hELEVBQWlCLEVBQ2pCQyxFQUFjcnNCLEVBQU1oZSxJQUFJLFVBOEI1QixPQTdCaUJnZSxFQUFNaGUsSUFBSSxVQUczQnpWLE1BQU0sZ0NBQWtDRyxFQUFPbUosVUFBWSx5REFBeURySixNQUFLLFdBQ3JILElBQUk4L0MsRUExR1osU0FBMENkLEVBQU1DLEdBQzVDLFFBQXNCLElBQVhBLEVBQUssU0FBdUMsSUFBWEQsRUFBSyxHQUFtQixDQUNoRSxJQUFJOTBCLEVBQUkrMEIsRUFBSyxHQUFHbGlCLHdCQUNac1csRUFBSzJMLEVBQUssR0FBR2ppQix3QkFFYm1pQixFQUFXLEdBQ1hDLEVBQVksRUFXaEIsT0FUSTlMLEVBQUczOUIsSUFBTXdVLEVBQUV4VSxLQUNYd3BDLEVBQVcsTUFDWEMsRUFBWWoxQixFQUFFeFUsSUFBTTI5QixFQUFHMzlCLEtBQ2hCMjlCLEVBQUd2NEIsT0FBU29QLEVBQUVwUCxTQUNyQm9rQyxFQUFXLFNBQ1hDLEVBQVlqMUIsRUFBRXBQLE9BQVN1NEIsRUFBR3Y0QixRQUdYLENBQUMsVUFBWW9rQyxFQUFTLFVBQVlDLEVBRXpELENBQ0ksTUFBTyxDQUFDLENBRWhCLENBcUY0QlksQ0FBaUNoZ0QsTUFBTTBELE1BQU0rdkIsRUFBTTNlLEtBQUssb0JBQ25FRyxTQUFTalYsTUFBTTBELE1BQU0rUixJQUFJLFdBRTlCelYsTUFBTXMvQyxjQUFjUyxLQUNRLE9BQXpCQSxFQUFjL3RCLFlBQ2IydEIsRUFBYUksRUFBY1gsV0FHSCxVQUF6QlcsRUFBYy90QixZQUNiMnRCLEVBQWFJLEVBQWNYLFdBRS9CUSxFQUFhRCxFQUtiZCxFQUFZLytDLEtBQUs4L0MsR0FJekIsSUFDR2YsRUFBWWpoRCxPQUFPLElBQ2xCaWlELEVBQWlCM3FDLEtBQUtxcUMsSUFBR3JoRCxNQUFSZ1gsS0FBWTJwQyxJQUV0QjVwQyxTQUFTNnFDLEdBQWlDLEVBQWpCRCxDQUd4QyxDQXdLeUJJLENBQTBCOS9DLEdBRW5DKy9DLEVBQWNockMsS0FBS2tYLEtBQ2xCaXlCLHNCQUF3QkssRUFBT0ksaUJBQW1CSixFQUFPYyxVQUMxRGYsR0FHQTBCLEVBQWVqckMsS0FBS2tYLElBQ3BCa3lCLHVCQUF5Qm9CLEVBQ3pCakIsUUFhQXlCLEVBQWNockMsS0FBS2tYLElBQ25CaXlCLHNCQUF5QkgsRUFDekJPLEdBRUEwQixFQUFlanJDLEtBQUtrWCxJQUNwQmt5Qix1QkFBMEJILEVBQzFCTSxJQUlrQixZQUF0QnQrQyxFQUFPNlAsYUFBbUQsU0FBdEI3UCxFQUFPNlAsYUFBZ0QsU0FBdEI3UCxFQUFPNlAsYUFBMEI3UCxFQUFPODlDLFFBQWdDLFlBQXRCOTlDLEVBQU82UCxlQUM5SGt3QyxFQUFjaHJDLEtBQUtrWCxJQUFJOHpCLEVBQWFDLElBTXhDLElBQUlDLEVBQWdCLENBQ2hCLE1BQVNsQyxFQUFrQixLQUMzQixPQUFVQyxFQUFtQixLQUM3QixZQUFhRCxFQUFrQixLQUMvQixhQUFjQyxFQUFtQixNQWtDckMsR0E5QnlCLFlBQXRCaCtDLEVBQU82UCxjQUNOb3dDLEVBQXlCLFVBQUksU0FBU0YsRUFBWSxLQUk3QixZQUF0Qi8vQyxFQUFPNlAsY0FDTm93QyxFQUFjLG9CQUFzQixvQkFDcEIsR0FBYkYsSUFDQ0EsRUFBYyxFQUNkRSxFQUF5QixVQUFJLFNBQVNGLEVBQVksTUFNMUR6c0IsRUFBTWhlLElBQUkycUMsR0FDVjNzQixFQUFNcnFCLEtBQUssYUFBYzgyQyxHQUVoQixHQUFmQSxHQUFtQnpzQixFQUFNaGUsSUFBSSxZQUFhLFFBRVYsU0FBdEJ0VixFQUFPNlAsYUFBZ0QsU0FBdEI3UCxFQUFPNlAsY0FDckM3UCxFQUFPbVosa0JBQWtCd1csZ0JBQWdCbnBCLFFBQVEsUUFBVSxFQUMxRDhzQixFQUFNaGUsSUFBSSxDQUFDLEtBQU8sT0FBTyxPQUFXNG9DLHNCQUF3QjhCLEVBQWFqQyxHQUFxQixFQUFHLE9BRWpHenFCLEVBQU1oZSxJQUFJLENBQUMsTUFBUSxPQUFPLE1BQVU0b0Msc0JBQXdCOEIsRUFBYWpDLEdBQXFCLEVBQUcsT0FHckd6cUIsRUFBTWhlLElBQUksQ0FBQyxLQUFTNm9DLHVCQUF5QjZCLEVBQWFoQyxHQUFzQixFQUFHLFFBRzdELFNBQXRCaCtDLEVBQU82UCxhQUEwQ25ULE1BQWhCNDJCLEVBQU1yd0IsSUFBSSxLQUMzQ3F3QixFQUFNcndCLElBQUksR0FBRzRTLE1BQU1DLFlBQVksbUJBQW9CLElBQ2hEcW9DLHVCQUF5QkgsR0FBbUIsQ0FDM0MsSUFBSXJ1QixFQUFrQjN2QixFQUFPbVosa0JBQWtCd1csZ0JBQzVDQSxFQUFnQm5wQixRQUFRLFdBQWEsSUFDcEM4c0IsRUFBTXJ3QixJQUFJLEdBQUc0UyxNQUFNQyxZQUFZLE1BQU8sTUFBTyxhQUM3Q3dkLEVBQU1yd0IsSUFBSSxHQUFHNFMsTUFBTUMsWUFBWSxTQUFVLE9BQVEsYUFDakR3ZCxFQUFNcndCLElBQUksR0FBRzRTLE1BQU1DLFlBQVksbUJBQXFCNlosRUFBZ0J2eUIsTUFBTSxLQUFLLEdBQUksU0FBVSxjQUU5RnV5QixFQUFnQm5wQixRQUFRLFdBQWEsR0FDcEM4c0IsRUFBTWhlLElBQUksQ0FBQyxLQUFPLE9BQU8sT0FBVzRvQyxzQkFBd0JILEdBQW1CLEVBQUcsTUFFMUYsQ0FJc0IsWUFBdEIvOUMsRUFBTzZQLGFBQW1ELFlBQXRCN1AsRUFBTzZQLGFBVzNDcXdDLFNBQVcsQ0FBQyxFQUNSbkMsRUFBb0JHLHNCQUNwQmdDLFNBQVcsQ0FDUHpxQyxNQUFRc29DLEVBQW9CRyx3QkFBeUIsRUFBRyxLQUN4RHpqQyxNQUFPLElBR1h5bEMsU0FBVyxDQUNQenFDLEtBQU0sTUFDTmdGLE1BQU8sT0FHZjZZLEVBQU1oZSxJQUFJNHFDLFVBQ1Y1c0IsRUFBTTBHLFFBQVEsQ0FBRXhrQixLQUFPd29DLEVBQXFCRyx5QkFBMEIsRUFBRyxNQUFPOXFCLElBRWhGQyxFQUFNaGUsSUFBSTRxQyxXQUNrQixPQUF0QmxnRCxFQUFPNlAsYUFDYnlqQixFQUFNaGUsSUFBSSxDQUFDRyxNQUFRc29DLEVBQW9CbCtDLE1BQU1sRCxRQUFRK3hCLFVBQVcsRUFBRyxPQUNyQixjQUExQzF1QixFQUFPbVosa0JBQWtCd1csaUJBQ3pCMkQsRUFBTWhlLElBQUksQ0FBQ0UsS0FBT3dvQyxFQUFvQitCLEVBQVkvQixJQUFzQixFQUFHLE9BQzNFbUMsR0FBZW5nRCxJQUNpQyxpQkFBMUNBLEVBQU9tWixrQkFBa0J3VyxnQkFDL0IyRCxFQUFNaGUsSUFBSSxDQUFDRSxJQUFLLFNBRWhCOGQsRUFBTWhlLElBQUksQ0FBQ0UsSUFBTTdZLE9BQU84MkIsYUFBY3NzQixFQUFZL0IsR0FBdUIsRUFBRStCLEdBQWEvQixFQUFvQixHQUFJLE9BRXBIMXFCLEVBQU1oZSxJQUFJLFFBQVEsS0FJVSxTQUF0QnRWLEVBQU82UCxjQVVlLFVBQXRCN1AsRUFBTzZQLGFBQ3dCLFNBQWpDaFEsTUFBTSxRQUFReVYsSUFBSSxjQUNsQmdlLEVBQU1oZSxJQUFJLENBQUMsTUFBVXlvQyxFQUFvQmdDLEVBQVloQyxJQUFzQixFQUFHLE9BQ2xGenFCLEVBQU1oZSxJQUFJLFFBQVEsS0FDWnRWLEVBQU82UCxZQStFckIsQ0FHQSxHQUEyQixZQUF0QjdQLEVBQU82UCxhQUFtRCxZQUF0QjdQLEVBQU82UCxZQUEyQixDQUV2RXllLGtCQUFvQnhaLFNBQVN3ZSxFQUFNM2UsS0FBSyxtREFBbUQxTCxLQUFLLGVBQ2hHc2xCLG1CQUFxQnpaLFNBQVN3ZSxFQUFNM2UsS0FBSyxtREFBbUQxTCxLQUFLLGdCQUdqRzgwQyxFQUFvQnp2QixtQkFBd0N5dkIsRUFDNURDLEVBQXFCenZCLG9CQUEwQ3l2QixFQUkzRE0sRUFBUSxFQU1USixzQkFBd0JILElBQ3ZCRyx1QkFBZ0QsSUFHaEQ2QixFQUFjaHJDLEtBQUtrWCxJQUNuQml5QixzQkFBeUJILEVBQ3pCTyxHQUdBMEIsRUFBZWpyQyxLQUFLa1gsSUFDcEJreUIsdUJBQTBCSCxFQUMxQk0sR0FJSjhCLFVBQVlyckMsS0FBS2tYLElBQUk4ekIsRUFBYUMsR0FJbENyMkMsR0FBUTNKLEVBQU9tSixXQUFXbXRCLGFBQWU4cEIsVUFNekM5c0IsRUFBTXJxQixLQUFLLGFBQWNtM0MsZ0JBRUUsSUFBaEI5c0IsRUFBTXJ3QixJQUFJLEtBQ2pCcXdCLEVBQU1yd0IsSUFBSSxHQUFHNFMsTUFBTUMsWUFBWSxRQUFTaW9DLEVBQWtCLEtBQU0sYUFDaEV6cUIsRUFBTXJ3QixJQUFJLEdBQUc0UyxNQUFNQyxZQUFZLFlBQWFpb0MsRUFBa0IsS0FBTSxhQUNwRXpxQixFQUFNcndCLElBQUksR0FBRzRTLE1BQU1DLFlBQVksU0FBVWtvQyxFQUFtQixLQUFNLGFBRzFFLENBRUEsR0FBMEIsWUFBdEJoK0MsRUFBTzZQLFlBQTBCLENBQ2pDLElBQUl3d0MsR0FBaUIvc0IsRUFBTW5lLFNBQVN1WixRQUFVcXZCLEdBQW9CLEVBQzlEdUMsR0FBZ0JodEIsRUFBTW5lLFNBQVMwRixTQUFXbWpDLEdBQXFCLEdBQ25FcUMsRUFBZ0JBLEdBQWlCLEVBQUksRUFBSUEsR0FDdEIsRUFDZi9zQixFQUFNaGUsSUFBSSxDQUNOLElBQU9nckMsRUFBYSxLQUNwQixLQUFRRCxFQUFjLEtBQ3RCLE1BQVMsVUFHYi9zQixFQUFNaGUsSUFBSSxDQUNOLElBQU9nckMsRUFBYSxLQUNwQixLQUFRLE1BQ1IsTUFBUyxRQUV1QixTQUFqQ2h0QixFQUFNcnFCLEtBQUssbUJBQ1ZxcUIsRUFBTWhlLElBQUksQ0FDTixLQUFRLE9BQ1IsTUFBUyxRQUUwQixRQUFqQ2dlLEVBQU1ycUIsS0FBSyxvQkFDakJxcUIsRUFBTWhlLElBQUksQ0FDTixLQUFRLE1BQ1IsTUFBUyxTQUl6QixDQUdBLEdBQTJCLFVBQXRCdFYsRUFBTzZQLFlBQXlCLENBQ2pDeWUsa0JBQW9CeFosU0FBU3dlLEVBQU0zZSxLQUFLLG1EQUFtRDFMLEtBQUssZUFDaEdzbEIsbUJBQXFCelosU0FBU3dlLEVBQU0zZSxLQUFLLG1EQUFtRDFMLEtBQUssZ0JBR2pHODBDLEVBQW9CenZCLG1CQUF3Q3l2QixFQUM1REMsRUFBcUJ6dkIsb0JBQTBDeXZCLEVBSTNETSxFQUFRLEVBTVJ5QixFQUFjLEVBR2RBLEVBREQ3QixzQkFBd0JILEVBQ1RHLHNCQUF5QkgsRUFFekJocEMsS0FBS2tYLElBQ2ZpeUIsc0JBQXlCSCxFQUN6Qk8sR0FJUjhCLFVBQVlMLEVBQ1pwMkMsR0FBUTNKLEVBQU9tSixXQUFXbXRCLGFBQWU4cEIsVUFNdENBLFdBQVcsSUFBR0EsVUFBWSxHQUM3QjlzQixFQUFNaGUsSUFBSSxDQUNOLFVBQWEsU0FBVzhxQyxVQUFZLElBRXBDLE1BQVNsQyxzQkFBc0JILEdBQW1CLElBRy9DLEdBQWJxQyxXQUFpQjlzQixFQUFNaGUsSUFBSSxZQUFhLFFBRWxDZ2UsRUFBTXJxQixLQUFLLGFBQWNtM0MsZ0JBRUUsSUFBaEI5c0IsRUFBTXJ3QixJQUFJLEtBQ2pCcXdCLEVBQU1yd0IsSUFBSSxHQUFHNFMsTUFBTUMsWUFBWSxRQUFTaW9DLEVBQWtCLEtBQU0sYUFDaEV6cUIsRUFBTXJ3QixJQUFJLEdBQUc0UyxNQUFNQyxZQUFZLFlBQWFpb0MsRUFBa0IsS0FBTSxhQUNwRXpxQixFQUFNcndCLElBQUksR0FBRzRTLE1BQU1DLFlBQVksU0FBVWtvQyxFQUFtQixLQUFNLGFBRzFFLENBVUEsR0FBMEIsWUFBdEJoK0MsRUFBTzZQLFlBQTBCLENBR2pDMHdDLFVBQVlwaEMsSUFDWm1VLEVBQU10cUIsU0FBUyxLQUFLdTNDLFdBRXBCQyx1QkFBeUJsdEIsRUFBTTNlLEtBQUssb0ZBQ3BDNnJDLHVCQUF1QmxyQyxJQUFJLFVBQVcsS0FFdEMsSUFBTWlILGFBQWFra0MsR0FBZ0J6Z0QsRUFBT21KLFdBQWEsQ0FBRSxNQUFPbEwsR0FBUSxDQUV4RSxJQUFJeWlELEVBQWM1ckMsU0FBU3dlLEVBQU1ycUIsS0FBSyxzQkFBc0I3TCxNQUFNLEtBQUssSUFJbkVxakQsR0FBZ0J6Z0QsRUFBT21KLFdBRnhCdTNDLEdBQWVBLEVBQWMsRUFFUTM5QyxZQUFXLFdBRTNDZzdDLEVBQW9CLEtBQ3BCQyxFQUFxQixLQUtsQkUsc0JBQXdCSCxJQUN2Qkcsc0JBQXdCQSx1QkFHNUIsSUFBSTZCLEVBQWNockMsS0FBS2tYLElBQ25CaXlCLHNCQUF5QkgsRUFQakIsR0FXUmlDLEVBQWVqckMsS0FBS2tYLElBQ3BCa3lCLHVCQUEwQkgsRUFabEIsR0FnQlpvQyxVQUFZcnJDLEtBQUtrWCxJQUFJOHpCLEVBQWFDLEdBQ2xDcjJDLEdBQVEzSixFQUFPbUosV0FBV210QixhQUFlOHBCLFVBQ3pDOXNCLEVBQU1ycUIsS0FBSyxhQUFjbTNDLFdBQ3pCOXNCLEVBQU1oZSxJQUFJLENBQUMsTUFBUSxHQUFHLE9BQVMsR0FBRyxZQUFZLEdBQUcsYUFBYSxLQUU5RCxJQUFJcXJDLEVBQWtCcnRCLEVBQU0zZSxLQUFLLG1EQUFtRFcsSUFBSSxvQkFDbEUsb0JBQW5CcXJDLEdBQ0NydEIsRUFBTWhlLElBQUksQ0FBQyxtQkFBcUJxckMsSUFHcENydEIsRUFBTTNlLEtBQUssNkVBQTZFVyxJQUFJLENBQ3hGLE1BQVF5b0MsRUFBa0IsS0FDMUIsWUFBWUEsRUFBa0IsS0FDOUIsT0FBU0MsRUFBbUIsS0FDNUIsYUFBYUEsRUFBbUIsS0FDaEMsS0FBUWpwQyxLQUFLdXJCLE9BQU80ZCxzQkFBc0JILEdBQW1CLEdBQUcsS0FDaEUsSUFBT2hwQyxLQUFLdXJCLE9BQU82ZCx1QkFBdUJILEdBQW9CLEdBQUcsS0FDakUsbUJBQW9CLEtBR3hCMXFCLEVBQU0wRyxRQUFRLENBQUU0bUIsUUFBVSxHQUFLLEtBQUssV0FDaEN0dEIsRUFBTTNlLEtBQUssNkVBQTZFVyxJQUFJLENBQUMsVUFBYSxTQUFXOHFDLFVBQVcsTUFDaEk5c0IsRUFBTTNlLEtBQUssNkVBQTZFMUwsS0FBSyxhQUFjbTNDLFdBRTdHLEdBQWJBLFdBQWlCOXNCLEVBQU1oZSxJQUFJLFlBQWEsUUFFekIsSUFBSXVyQyxFQUFldnRCLEVBQU0zZSxLQUFLLGlFQUNWMmUsRUFBTTNlLEtBQUssMENBQ1hsWCxRQUNoQjYxQixFQUFNM2UsS0FBSyw0QkFBNEJzRCxRQUFRNG9DLEVBQWEvOEMsU0FFaEVqRSxNQUFNLG1DQUFtQ0MsTUFBSyxXQUMxQyxJQUFJZ2hELEVBQW9CaHNDLFNBQVNqVixNQUFNMEQsTUFBTTBGLEtBQUssc0JBS2xELEdBSkk2M0MsSUFDQUEsRUFBb0JqaEQsTUFBTTBELE1BQU1vcEIsV0FBV2xYLEtBQzNDNVYsTUFBTTBELE1BQU0wRixLQUFLLG9CQUFxQjYzQyxJQUVyQ0EsRUFBb0JqaEQsTUFBTTBELE1BQU1tckIsUUFBVSxHQUFNcXZCLEVBQWtCLENBQ25FLElBQUlnRCxHQUFZN0Msc0JBQXlCSCxFQUFrQnFDLFdBQWMsRUFBSUEsVUFDN0V2Z0QsTUFBTTBELE1BQU0rUixJQUFJLENBQ1osU0FBWSxRQUNaLE1BQVMsT0FDVCxLQUFTd3JDLEVBQWtCQyxFQUFVLE1BRTdDLENBQ0osSUFDQVAsdUJBQXVCeG1CLFFBQVEsQ0FBRTRtQixRQUFVLEdBQUssSUFDcEQsR0FFSixHQUFHLEtBSWlDNzlDLFlBQVcsV0FFdkNsRCxNQUFNbEQsUUFBUSt4QixRQUFVcXZCLEVBRXhCenFCLEVBQU1oZSxJQUFJLENBQUMsTUFBUyxTQUNkM1ksT0FBTysyQixXQUFhcXFCLEdBRTFCenFCLEVBQU1oZSxJQUFJLENBQUMsTUFBUyxPQUFPLFlBQWEsU0FHeEMzWSxPQUFPODJCLFlBQWN1cUIsSUFHckIxcUIsRUFBTWhlLElBQUksQ0FBQyxPQUFTLFNBQ3BCZ2UsRUFBTTNlLEtBQUssbURBQW1Ea1ksUUFBUXZYLElBQUksQ0FBQyxPQUFTLE9BQU8sYUFBYyxVQUl6RzNZLE9BQU84MkIsWUFBY3VxQixHQUNyQjFxQixFQUFNaGUsSUFBSSxDQUFDLE9BQVMzWSxPQUFPODJCLFlBQVksT0FJM0MsSUFzRUl1dEIsRUFBYUMsRUF0RWJDLEVBQWMsS0FDZEMsRUFBZSxLQUNmQyxFQUFhLEtBQ2JDLEVBQWdCLEtBRUV4aEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHNCQUFzQm5KLEVBQU9tSixVQUFVLHFCQUFxQm5KLEVBQU9tSixVQUFVLCtDQUErQ25KLEVBQU9tSixVQUFVLDBDQUEwQ25KLEVBQU9tSixVQUFVLDZDQUE2Q25KLEVBQU9tSixVQUFVLDJCQUN0VHJKLE1BQUssV0FFSEQsTUFBTTBELE1BRVoyMkIsV0FBV3A2QixNQUFLLFNBQVN5UixHQUk3QixPQUFJMVIsTUFBTTBELE1BQU0yUCxHQUFHLDBFQUtmclQsTUFBTTBELE1BQU0yUCxHQUFHLGNBSW5CdytCLFVBQVk3eEMsTUFBTTBELE1BQU1vcEIsV0FBV2xYLEtBQ25DNnJDLFNBQVd6aEQsTUFBTTBELE1BQU1vcEIsV0FBV25YLElBQ2xDK3JDLFdBQWE3UCxVQUFZN3hDLE1BQU0wRCxNQUFNbXJCLFFBQ3JDOHlCLFlBQWNGLFNBQVd6aEQsTUFBTTBELE1BQU1zWCxTQUdqQ3FtQyxFQURjLE1BQWZBLEVBQ2Vuc0MsS0FBS2tYLElBQUlpMUIsRUFBYXhQLFdBRXRCQSxVQUlkMFAsRUFEYSxNQUFkQSxFQUNjcnNDLEtBQUtrWCxJQUFJbTFCLEVBQVlFLFVBRXJCQSxTQUliSCxFQURlLE1BQWhCQSxFQUNnQnBzQyxLQUFLcXFDLElBQUkrQixFQUFjSSxZQUV2QkEsZ0JBSWZGLEVBRGdCLE1BQWpCQSxFQUNpQnRzQyxLQUFLcXFDLElBQUlpQyxFQUFlRyxhQUV4QkEsZUFsQ2hCM2hELE1BQU0wRCxNQUFNeVEsVUFDTCxFQXNDZixJQUVHaEgsS0FDQ2swQyxHQUE2QnJoRCxNQUFNbEQsUUFBUSt4QixRQUFRLEdBQ25EeXlCLEdBQStCdGhELE1BQU1sRCxRQUFRK3hCLFFBQVEsR0FHN0QsSUFHMEIsWUFBdkIxdUIsRUFBT3FaLGVBQXFELFlBQXZCclosRUFBT3FaLGdCQUNmLEdBRUgsRUFJRixZQUF2QnJaLEVBQU9xWixlQUNQMm5DLEVBQWMsSUFDZEMsRUFBZSxLQUNjLFlBQXZCamhELEVBQU9xWixlQUNiMm5DLEVBQWMsSUFDZEMsRUFBZSxLQUNhLFlBQXZCamhELEVBQU9xWixlQUdnQixZQUF2QnJaLEVBQU9xWixlQUZaMm5DLEVBQWMsS0FDZEMsRUFBZSxNQUtmRCxFQUFjLEtBQ2RDLEVBQWUsTUFLbkIsSUFDSWxCLEVBQWMsRUFDZEMsRUFBZSxFQUNmbmdELE1BQU1sRCxRQUFRK3hCLFFBQVVzeUIsSUFDeEJqQixFQUFjaHJDLEtBQUtrWCxJQUNmcHNCLE1BQU1sRCxRQUFRK3hCLFFBQVVzeUIsRUFMcEIsSUFTUnJrRCxPQUFPODJCLFlBQWN3dEIsSUFDckJqQixFQUFlanJDLEtBQUtrWCxJQUNoQnR2QixPQUFPODJCLFlBQWN3dEIsRUFYakIsSUFnQlpiLFVBQVlyckMsS0FBS2tYLElBQUs4ekIsRUFBWUMsR0FPbEMsSUFBSXlCLEVBQXdCbnVCLEVBQU0zZSxLQUFLLDZCQUNuQytzQyxFQUF3QnB1QixFQUFNM2UsS0FBSyx5QkFDbkNndEMsRUFBMEJydUIsRUFBTTNlLEtBQUsscUJBQ3JDaXRDLEVBQTZCdHVCLEVBQU0zZSxLQUFLLHdCQUN4Q2t0QyxFQUE0QnZ1QixFQUFNM2UsS0FBSyx1QkFJM0M1UixZQUFXLFdBQ1ArK0MsZ0JBQWtCLE9BQ2xCQyxpQkFBbUIsT0FDaEJscUIsR0FBeUIybEIsR0FBZTdnRCxPQUFPcWxELGtCQUM5QixJQUFiekIsWUFDQ3VCLGdCQUFrQmpxQixJQUd0QnZFLEVBQU10cUIsU0FBUyxnQkFFZnNxQixFQUFNdHFCLFNBQVMsY0FFZnNxQixFQUFNeE8sU0FBUyxjQUNmd08sRUFBTWhlLElBQUksQ0FBRSxXQUFlbXNDLEVBQXNCbnNDLElBQUksY0FBZSxtQkFBcUJtc0MsRUFBc0Juc0MsSUFBSSxvQkFBcUIsbUJBQXFCbXNDLEVBQXNCbnNDLElBQUksb0JBQXFCLFlBQWMsVUFBVyxPQUFXLFNBQ2hQZ2UsRUFBTXRxQixTQUFTLGFBRW5CaTVDLGNBQWdCLENBQUUsTUFBVUgsZ0JBQWlCLFdBQWMsT0FBUSxtQkFBb0IsT0FBUSxtQkFBb0IsT0FBUSxVQUFjLFNBQVMxQixVQUFVLElBQUssT0FBVzJCLGtCQUM1S04sRUFBc0Juc0MsSUFBSTJzQyxlQUMxQlIsRUFBc0J4NEMsS0FBSyxhQUFjbTNDLFdBRTNDLEdBQWJBLFdBQWlCcUIsRUFBc0Juc0MsSUFBSSxZQUFhLFFBRXpDb3NDLEVBQXNCcHNDLElBQUkyc0MsZUFDMUJQLEVBQXNCejRDLEtBQUssYUFBY20zQyxXQUV6Q3VCLEVBQXdCcnNDLElBQUkyc0MsZUFDNUJOLEVBQXdCMTRDLEtBQUssYUFBY20zQyxXQUMzQ3dCLEVBQTJCdHNDLElBQUkyc0MsZUFDL0JMLEVBQTJCMzRDLEtBQUssYUFBY20zQyxXQUM5Q3lCLEVBQTBCdnNDLElBQUkyc0MsZUFDOUJKLEVBQTBCNTRDLEtBQUssYUFBY20zQyxXQUc3QzhCLFNBQVdmLEVBQWVELEVBQzFCaUIsZ0JBQWtCN3VCLEVBQU0zZSxLQUFLLDZCQUE2QitaLFFBUzFEMHpCLFNBQVdELGdCQUFrQkQsVUFBVSxFQU92Q3JpRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsc0JBQXNCbkosRUFBT21KLFdBQVdtTSxJQUFJLENBQUMsTUFBUTRzQyxTQUFTLEtBQUssU0FBVyxXQUFXLEtBQU9FLFFBQVEsT0FFbEpyL0MsWUFBVyxXQUVQLElBQUlzL0MsRUFBZS91QixFQUFNM2UsS0FBSywyQ0FBMkNXLElBQUksQ0FBQyxTQUFXLHNCQUFzQixJQUFNLGtCQUFrQixNQUFRLG9CQUMvSWdlLEVBQU0zZSxLQUFLLDJDQUEyQ1gsU0FDdERzZixFQUFNcmIsUUFBUW9xQyxHQUVkLElBQUlDLEVBQWdCaHZCLEVBQU0zZSxLQUFLLGtCQUMvQjJlLEVBQU0zZSxLQUFLLGtCQUFrQlgsU0FDN0JzZixFQUFNcmIsUUFBUXFxQyxHQU9WQyxtQkFBcUIsQ0FDakIsYUFBZSxHQUNmLEtBQVM1bEQsT0FBTzgyQixZQUFld3RCLEdBQWUsRUFBRyxLQUNqRCxNQUFVdGtELE9BQU8rMkIsV0FBY3N0QixHQUFjLEVBQUcsS0FDaEQsTUFBUSxJQUVaUyxFQUFzQm5zQyxJQUFJaXRDLG9CQUMxQmQsRUFBc0I5c0MsS0FBSyxRQUFRVyxJQUFJLENBQUMsTUFBUSxHQUFHLEtBQU8sS0FDMURvc0MsRUFBc0Jwc0MsSUFBSWl0QyxvQkFDMUJaLEVBQXdCcnNDLElBQUlpdEMsb0JBQzVCWCxFQUEyQnRzQyxJQUFJaXRDLG9CQUMvQlYsRUFBMEJ2c0MsSUFBSWl0QyxvQkFHNkQsS0FBNUYxaUQsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLEtBQUtGLEtBQUsseUJBQ2hFcEosTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLEtBQUttTSxJQUFJLFdBQVksWUFHaEZnZSxFQUFNMEcsUUFBUSxDQUFFNG1CLFFBQVUsR0FBSyxLQUFLLFdBRWJ0dEIsRUFBTTNlLEtBQUssaUVBQ1YyZSxFQUFNM2UsS0FBSywwQ0FFWjJlLEVBQU0zZSxLQUFLLHFDQUNqQlgsU0FDS3NmLEVBQU0zZSxLQUFLLHdDQUNqQlgsU0FDU3NmLEVBQU0zZSxLQUFLLHVDQUNqQlgsU0FJZm5VLE1BQU0saUJBQWlCQyxNQUFLLFdBRXhCLEdBRHdCRCxNQUFNMEQsTUFBTWdTLFNBQVNFLEtBQ3BCNVYsTUFBTTBELE1BQU1tckIsUUFBVSxHQUFNL3hCLE9BQU8rMkIsV0FBVyxDQUNuRSxJQUFJcXRCLEVBQVdwa0QsT0FBTysyQixXQUFhN3pCLE1BQU0wRCxNQUFNbXJCLFFBQVUsR0FDekQ3dUIsTUFBTTBELE1BQU0rUixJQUFJLENBQ1osU0FBWSxRQUNaLE1BQVMsT0FDVCxLQUFReXJDLEVBQVMsTUFFekIsQ0FDSixJQUVBbGhELE1BQU0sb0JBQW9CQyxNQUFLLFdBRTNCLEdBRHdCRCxNQUFNMEQsTUFBTWdTLFNBQVNFLEtBQ3BCNVYsTUFBTTBELE1BQU1tckIsUUFBVSxHQUFNL3hCLE9BQU8rMkIsV0FBVyxDQUNwRC8yQixPQUFPKzJCLFdBQWE3ekIsTUFBTTBELE1BQU1tckIsUUFDL0M3dUIsTUFBTTBELE1BQU0rUixJQUFJLENBQ1osU0FBWSxRQUNaLE1BQVMsT0FDVCxJQUFPLE9BRWYsQ0FDSixJQUVBa3JDLHVCQUF1QnhtQixRQUFRLENBQUU0bUIsUUFBVSxHQUFLLElBQ3BELEdBRUosR0FBRyxJQUVQLEdBQUcsSUFLUCxHQUFHLElBSVgsQ0FFSixFQU9TVCxHQUFULFNBQXdCbmdELEdBQ3BCK0MsWUFBVyxXQUNQbEcsRUFBUSxvQkFDUjJsRCxZQUFjM2lELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUFLMFIsU0FBVzNiLFdBQVdXLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUFLRixLQUFLLGVBQ2pLcEosTUFBTSxRQUFRbTZCLFFBQVEsQ0FBQyxjQUFlamxCLEtBQUt1ckIsTUFBTWtpQixhQUFhLE1BQU8sSUFFekUsR0FBRSxJQUNOLEVBT1N0OEMsR0FBVCxXQUVJLElBQ0lELEVBQWtCakgsR0FBZ0IsbUJBQ3RDLEdBQUtpSCxHQUZjLGVBRWtCNE4sS0FBSzVOLEdBQW1CLENBQ3pELElBQUl3OEMsRUFBbUJ4OEMsRUFBZ0JLLFdBQVcsWUFBYyxTQUFXLFdBQzNFakgsR0FBZ0IsMkJBQTRCb2pELEVBQWtCLG9CQUM5RHg4QyxFQUFrQkEsRUFBZ0IzSSxRQUFRLGVBQWdCLElBQzFEK0IsR0FBZ0Isa0JBQW1CNEcsRUFBaUIsbUJBRXhELENBRUEsSUFBSXk4QyxFQUFnQjFqRCxHQUFnQiw2QkFBOEUsVUFBL0NBLEdBQWdCLDRCQUEyQyxXQUFhLFVBQzNJLE9BQVFBLEdBQWdCLG9CQUE2RixJQUF0RUEsR0FBZ0IsbUJBQW1Cd0gsUUFBUTdKLE9BQU8rRyxTQUFTK0MsTUFBZSxHQUFLaThDLEVBQWExakQsR0FBZ0IsbUJBQXNCLEVBQ3JMLEVBRVM4TixHQUFULFdBRUksSUFDSW5FLEVBQXNCM0osR0FBZ0IsdUJBQzFDLEdBQUsySixHQUZjLGVBRXNCa0wsS0FBS2xMLEdBQXVCLENBQ2pFLElBQUk4NUMsRUFBbUI5NUMsRUFBb0JyQyxXQUFXLFlBQWMsU0FBVyxXQUMvRWpILEdBQWdCLCtCQUFnQ29qRCxFQUFrQixvQkFDbEU5NUMsRUFBc0JBLEVBQW9CckwsUUFBUSxlQUFnQixJQUNsRStCLEdBQWdCLHNCQUF1QnNKLEVBQXFCLG1CQUVoRSxDQUVBLElBQUkrNUMsRUFBZ0IxakQsR0FBZ0IsaUNBQXNGLFVBQW5EQSxHQUFnQixnQ0FBK0MsV0FBYSxVQUNuSixPQUFRQSxHQUFnQix5QkFBcUcsSUFBMUVBLEdBQWdCLHVCQUF1QndILFFBQVE3SixPQUFPK0csU0FBUytDLE1BQWVpOEMsRUFBYTFqRCxHQUFnQix1QkFBZ0MsRUFDbE0sRUFNU21NLEdBQVQsV0FDSUQsUUFBVS9FLFNBQVNpVixPQUFPaGUsTUFBTSxLQUNoQ3VsRCxnQkFBZ0IsR0FDaEIsSUFBSyxJQUFJcHhDLEVBQUksRUFBR0EsRUFBSXJHLFFBQVF6TixPQUFROFQsS0FDb0IsSUFBaERyRyxRQUFRcUcsR0FBR25VLE1BQU0sS0FBSyxHQUFHb0osUUFBUSxZQUVqQ204QyxpQkFBbUJ6M0MsUUFBUXFHLElBR25DLE9BQU9veEMsZUFDWCxFQU1TOUwsR0FBVCxXQUNJM3JDLFFBQVUvRSxTQUFTaVYsT0FBT2hlLE1BQU0sS0FDaEN1bEQsZ0JBQWdCLEdBQ2hCLElBQUssSUFBSXB4QyxFQUFJLEVBQUdBLEVBQUlyRyxRQUFRek4sT0FBUThULElBQzVCckcsUUFBUXFHLEdBQUduVSxNQUFNLEtBQUssR0FBR2tKLFdBQVcsVUFFcENxOEMsaUJBQW1CejNDLFFBQVFxRyxJQUduQyxPQUFPb3hDLGVBQ1gsRUFPU2poQyxHQUFULFdBQ0l4VyxRQUFVL0UsU0FBU2lWLE9BQU9oZSxNQUFNLEtBQ2hDbVAsTUFBUSxHQUNSLElBQUssSUFBSWdGLEVBQUksRUFBR0EsRUFBSXJHLFFBQVF6TixPQUFROFQsSUFDaENxeEMsS0FBTzEzQyxRQUFRcUcsR0FBR25VLE1BQU0sS0FDeEJ5bEQsS0FBa0JubUQsTUFBWGttRCxLQUFLLEdBQWtCLEdBQUtBLEtBQUssR0FBR3ZsRCxPQUMzQ3lsRCxPQUFvQnBtRCxNQUFYa21ELEtBQUssR0FBa0IsR0FBS0EsS0FBSyxHQUFHdmxELE9BQ2pDLElBQVJ3bEQsTUFDQXQyQyxNQUFNNU0sS0FBSyxDQUFDd08sSUFBSTAwQyxLQUFLMTlDLE1BQU0yOUMsU0FFbkMsT0FBT3YyQyxLQUNYLEVBcUJTakIsR0FBVCxXQUVJeTNDLFlBQWEsR0FDYixJQUM0QixvQkFBYmppRCxRQUNQakIsTUFBTUMsS0FBS25ELE9BQU9vRSxnQkFBZSxTQUFTb04sRUFBSXBPLElBQ2IsSUFBekJvTyxFQUFJM0gsUUFBUSxVQUNadThDLGFBQWU1MEMsRUFBSSxJQUFJcE8sRUFBTSxJQUVyQyxJQUVBbEQsRUFBUSxrQ0FFaEIsQ0FBQyxNQUFNd00sR0FDSHhNLEVBQVF3TSxFQUNaLENBQ0EsT0FBTzA1QyxXQUNYLEVBTVM1MUMsR0FBVCxXQUdHLElBQUk2MUMsRUFBTSxHQUVULElBQzRCLG9CQUFibGlELFFBQzJELE1BQS9EbkUsT0FBT29FLGVBQWVDLFFBQVEsK0JBQXdHdEUsTUFBL0RDLE9BQU9vRSxlQUFlQyxRQUFRLGdDQUNwR2dpRCxFQUFNcm1ELE9BQU9vRSxlQUFlQyxRQUFRLCtCQUd4Q25FLEVBQVEsa0NBRWhCLENBQUMsTUFBTXdNLEdBQ0h4TSxFQUFRd00sRUFDWixDQUVBLE9BQU8yNUMsQ0FDWCxFQU1TaHhDLEdBQVQsU0FBNEJoUyxHQUd4QixJQUFJZ2pELEVBQU1ybUQsT0FBTytHLFNBQVMyRCxLQUUxQixJQUM0QixvQkFBYnZHLFNBQTRCZCxFQUN3QyxNQUF4RXJELE9BQU9vRSxlQUFlQyxRQUFRLHFCQUFxQmhCLEVBQU9tSixZQUE4RnpNLE1BQXhFQyxPQUFPb0UsZUFBZUMsUUFBUSxxQkFBcUJoQixFQUFPbUosYUFDekk2NUMsRUFBTXJtRCxPQUFPb0UsZUFBZUMsUUFBUSxxQkFBcUJoQixFQUFPbUosWUFHcEV0TSxFQUFRLDRDQUVoQixDQUFDLE1BQU13TSxHQUNIeE0sRUFBUXdNLEVBQ1osQ0FFQSxPQUFPMjVDLENBQ1gsRUFVU3R2QyxHQUFULFlBR1FySixjQUF1QjJFLFFBQVUzRSxjQUF1QjFNLFFBRXhEa0MsTUFBTUMsS0FBS3VLLElBQVksU0FBUzhELEVBQUlwTyxHQUVmckQsTUFBYjZHLEtBQUswL0MsT0FBcUIxL0MsS0FBSzAvQyxPQUFTMS9DLEtBQUswWSxNQUFNelYsUUFBUSxzQ0FBd0MsSUFFL0Z6SixHQUFrQixnQkFBZ0J3RyxLQUFLNEYsV0FHbEN4TSxPQUFPb0UsZUFBZUMsUUFBUSxlQUFldUMsS0FBSzRGLGFBQ25EaEUsTUFBUTJQLFNBQVM5VixHQUFnQixnQkFBZ0J1RSxLQUFLNEYsWUFBYyxFQUNwRTlKLEdBQWdCLGdCQUFnQmtFLEtBQUs0RixVQUFXaEUsTUFBTyxLQUV2RHhJLE9BQU9vRSxlQUFlRSxRQUFRLGVBQWVzQyxLQUFLNEYsVUFBVSxLQUtoRTlKLEdBQWdCLGdCQUFnQmtFLEtBQUs0RixVQUFXLEVBQUcsS0FFbkR4TSxPQUFPb0UsZUFBZUUsUUFBUSxlQUFlc0MsS0FBSzRGLFVBQVUsS0FJbkR6TSxNQUFiNkcsS0FBSzAvQyxPQUFxQjEvQyxLQUFLMC9DLE9BQVMxL0MsS0FBSzBZLE1BQU16VixRQUFRLGtDQUFvQyxJQUcxRnpKLEdBQWtCLGtCQUFrQndHLEtBQUs0RixhQUMxQ2hFLE1BQVMrOUMsS0FHVDdqRCxHQUFnQixrQkFBa0JrRSxLQUFLNEYsVUFBV2hFLE1BQU8sT0FLNUR4SSxPQUFPb0UsZUFBZUMsUUFBUSxvQkFBb0J1QyxLQUFLNEYsV0FLeER4TSxPQUFPb0UsZUFBZUUsUUFBUSxvQkFBb0JzQyxLQUFLNEYsVUFBVTJMLFNBQVNuWSxPQUFPb0UsZUFBZUMsUUFBUSxvQkFBb0J1QyxLQUFLNEYsWUFBYyxHQUgvSXhNLE9BQU9vRSxlQUFlRSxRQUFRLG9CQUFvQnNDLEtBQUs0RixVQUFVLEdBTWhFcE0sR0FBa0IsY0FBY3dHLEtBQUs0RixZQUN0Q2c2QyxHQUFvQjUvQyxNQUl4QmdELGFBQVksV0FDUjQ4QyxHQUFvQjUvQyxLQUN4QixHQUFFLEtBR0d4RyxHQUFrQiwwQkFBMEJ3RyxLQUFLeVgsYUFDbEQzYixHQUFnQiwwQkFBMEJrRSxLQUFLeVgsWUFBWSxFQUFNLElBR2pFelgsS0FBSzYvQyxvQkFDTEMsSUFFUixJQUlDdG1ELEdBQWtCLG1CQUNuQnNDLEdBQWdCLGtCQUFrQixFQUFNLG9CQUl2Q3RDLEdBQWtCLHFCQUNuQnNDLEdBQWdCLG9CQUFvQixFQUFNLElBU3RCLG9CQUFieUIsU0FDNEQsTUFBL0RuRSxPQUFPb0UsZUFBZUMsUUFBUSxnQ0FDOUJyRSxPQUFPb0UsZUFBZUUsUUFBUSw2QkFBNkI4RyxRQUMzRHU3QyxNQW9CUkMsSUFDSixFQUVTRCxHQUFULFdBQ0ksR0FBc0QsTUFBbER0OEMsYUFBYWhHLFFBQVEsMkJBQTRELEdBQXZCa0IsSUFBK0MsR0FBbkJzaEQsR0FBc0IsQ0FDNUcsSUFBSUMsRUFBY0MsbUJBQW1CMThDLGFBQWFoRyxRQUFRLDJCQUVwRDJMLEVBQVksSUFBSUMsZ0JBQWdCLENBQ2xDNDBCLE1BQU9paUIsRUFDUDUvQyxJQUFLc0MsU0FBU3pDLFNBQVNpZ0QsU0FDdkJuMkMsa0JBQW1CQSxHQUNuQkMsOEJBQStCQSxLQUVuQzVOLE1BQU1vRSxLQUFLLENBQ1BKLElBQUksR0FBRDdGLE9BQUtrRixHQUFRLHVDQUFBbEYsT0FBc0NrRCxJQUFhLEtBQUFsRCxPQUFJMk8sRUFBVWpLLFlBQ2pGRSxLQUFNLE1BQ05zQixTQUFVLE9BQ1ZDLE9BQU8sR0FDUixRQUNFQyxNQUFLLFNBQVNKLEdBQ1huSCxFQUFRLGlDQUNaLEdBQ1IsQ0FDSixFQUVTZzdDLEdBQVQsU0FBb0MrTCxFQUFVNWpELEdBQzFDLEdBQXNELE1BQWxEZ0gsYUFBYWhHLFFBQVEsMkJBQTRELEdBQXZCa0IsSUFBK0MsR0FBbkJzaEQsR0FBc0IsQ0FDNUcsSUFBSUssRUFBZUgsbUJBQW1CMThDLGFBQWFoRyxRQUFRLDJCQUVyRDJMLEVBQVksSUFBSUMsZ0JBQWdCLENBQ2xDNDBCLE1BQU9xaUIsRUFDUDE2QyxVQUFXbkosRUFDWDRqRCxTQUFVQSxFQUNWLy9DLElBQUtzQyxTQUFTekMsU0FBU2lnRCxTQUN2Qm4yQyxrQkFBbUJBLEdBQ25CQyw4QkFBK0JBLEtBRW5DNU4sTUFBTW9FLEtBQUssQ0FDUEosSUFBSSxHQUFEN0YsT0FBS2tGLEdBQVEsdUNBQUFsRixPQUFzQ2tELElBQWEsS0FBQWxELE9BQUkyTyxFQUFVakssWUFDakZFLEtBQU0sTUFDTnNCLFNBQVUsT0FDVkMsT0FBTyxHQUNSLE9BQ1AsQ0FDSixFQU9TZy9DLEdBQVQsU0FBNkJuakQsR0FDekIsSUFBS2pELEdBQWtCLGNBQWNpRCxFQUFPbUosaUJBQXlCek0sSUFBWHNELEdBQXdCQSxFQUFPOEssUUFBUSxDQUM3RixJQUFJM0YsRUFBU25GLEVBQU91M0MsVUFDcEJsNEMsR0FBZ0IsY0FBY1csRUFBT21KLFVBQVdoRSxFQUFPLG1CQUMzRCxDQUNKLEVBY1NpRyxHQUFULFdBQ0ksTUFBd0Isb0JBQWJ0SyxRQUNtRSxNQUF0RW5FLE9BQU9vRSxlQUFlQyxRQUFRLHFDQUN2QixHQUVBLHlDQUdKLEVBRWYsRUFFU3FpRCxHQUFULFdBRTRCLG9CQUFidmlELFNBQ21FLE1BQXRFbkUsT0FBT29FLGVBQWVDLFFBQVEsc0NBQzlCckUsT0FBT29FLGVBQWVFLFFBQVEsb0NBQW9DOEcsT0FHOUUsRUFFUytJLEdBQVQsV0FJSSxPQUZBZ3pDLHNCQUF3QixHQUN4QkMsWUFBYyxFQUNVLG9CQUFiampELFNBQ1BqQixNQUFNQyxLQUFLaUIsZ0JBQWdCLFNBQVNvTixFQUFLaEosR0FDakNnSixFQUFJM0gsUUFBUSwwQkFBMEIsSUFDckIsR0FBYnU5QyxhQUNBRCx1QkFBdUIzMUMsRUFBSSxJQUFJaEosRUFDL0I0K0MsWUFBWSxHQUdaRCx1QkFBdUIsSUFBSTMxQyxFQUFJLElBQUloSixFQUUvQyxJQUM4QixJQUF2QjIrQyxzQkFBNkIsOEJBQWdDQSx1QkFFN0QsNkJBRWYsRUFFU2p6QyxHQUFULFdBQ0ksTUFBd0Isb0JBQWIvUCxRQUNpRCxNQUFwRG5FLE9BQU9vRSxlQUFlQyxRQUFRLG1CQUN2QixHQUVBLHVCQUdKLEVBRWYsRUF3QlNnUSxHQUFULFdBQ0ksUUFBUWpVLEdBQWtCLDZCQUE4QmlDLEdBQWdCLDJCQUM1RSxFQWNTZ2xELEdBQVQsV0FHT2puRCxHQUFrQixtQkFDWkEsR0FBa0IscUJBQ25Ca25ELEtBQ0FDLE1BRUpDLE1BRU9wbkQsR0FBa0IscUJBQ3pCa25ELEtBQ0FDLEtBN0NDbm5ELEdBQWtCLG1CQUNuQnNDLEdBQWdCLGlCQUFrQjBWLEtBQUtDLFNBQVN0UyxTQUFTLElBQUlrVSxPQUFPLElBQUssTUFnRHhFN1osR0FBa0Isc0JBQ25Cc21ELElBRVIsRUFNU0UsR0FBVCxXQUNJYSxjQUFlLElBQUlyOEMsTUFBT3M4QyxTQUFTenRDLE1BQU0sRUFBRSxJQUFJdFosUUFBUSxLQUFLLEtBQzVEK0IsR0FBZ0Isb0JBQXFCK2tELGFBQWMsSUFDdkQsRUFNU0YsR0FBVCxXQUNRbm5ELEdBQWtCLHFCQUNsQnNDLEdBQWdCLG1CQUFtQixFQUFNLEdBQ3pDa0gsYUFBWSxXQUNSbEgsR0FBZ0IsbUJBQW1CLEVBQUssRUFDNUMsR0FBRSxLQUVWLEVBTVM0a0QsR0FBVCxXQVM0QixvQkFBYm5qRCxTQUNpRCxNQUFwRG5FLE9BQU9vRSxlQUFlQyxRQUFRLG9CQUM5QnJFLE9BQU9vRSxlQUFlRSxRQUFRLGtCQUFrQjhHLE9BRzVELEVBT1NnMUMsR0FBVCxTQUEyQi84QyxHQUN2QixJQUFLakQsR0FBa0IsZ0JBQWdCaUQsRUFBT21KLGlCQUF5QnpNLElBQVhzRCxHQUF3QkEsRUFBTzhLLFNBQVc5SyxFQUFPb2IsUUFBUSxnQkFBZ0JwYixFQUFPbUosVUFBVSxDQUNsSixJQUFJaEUsRUFBU25GLEVBQU91M0MsVUFDcEJsNEMsR0FBZ0IsZ0JBQWdCVyxFQUFPbUosVUFBV2hFLEVBQU8sR0FDekQweUMsR0FBMkIsU0FBVTczQyxFQUFPbUosVUFDaEQsQ0FDSixFQU9TNnpDLEdBQVQsU0FBZ0NoOUMsR0FDSixvQkFBYmMsU0FDeUUsTUFBNUVuRSxPQUFPb0UsZUFBZUMsUUFBUSx5QkFBeUJoQixFQUFPbUosWUFDOUR4TSxPQUFPb0UsZUFBZUUsUUFBUSx5QkFBeUJqQixFQUFPbUosV0FBVSxFQUdwRixFQU9TZzBDLEdBQVQsU0FBMEJuOUMsR0FDdEJxUyxtQkFBb0IsRUFFSSxvQkFBYnZSLFVBQ2UsR0FBbEJkLEVBQU9za0QsU0FBOEMsTUFBMUJ0a0QsRUFBT3FTLGtCQUNsQ0Esa0JBQW9CclMsRUFBT3FTLGtCQUNKLEdBQWxCclMsRUFBT3NrRCxVQUNYanlDLGtCQUFvQnJTLEVBQU9tSixXQUU1QmtKLG1CQUNpRixNQUE3RTFWLE9BQU9vRSxlQUFlQyxRQUFRLHlCQUF5QnFSLG9CQUN2RDFWLE9BQU9vRSxlQUFlRSxRQUFRLHlCQUF5Qm9SLGtCQUFrQnJTLEVBQU9tSixXQUloRyxFQVFTNG5CLEdBQVQsU0FBaUM1bkIsR0FDeEJwTSxHQUFrQixvQkFBb0JvTSxTQUE0QnpNLElBQWR5TSxJQUNyRDlKLEdBQWdCLG9CQUFvQjhKLEVBQVdBLEVBQVcsR0FDMUQwdUMsR0FBMkIsU0FBVTF1QyxHQUU3QyxFQVFTd3VDLEdBQVQsV0FFSSxJQUFNNE0sRUFBYXArQyxTQUFTaVYsT0FBT2hlLE1BQU0sTUFZekMsT0FSd0JtbkQsRUFBV2g0QixRQUFPLFNBQUFuUixHQUFNLE9BQUlBLEVBQU85VSxXQUg1QyxvQkFHOEQsSUFHeENnRyxLQUFJLFNBQUE4TyxHQUN2QyxJQUF1Q29wQyxFQUFBQyxFQUFqQnJwQyxFQUFPaGUsTUFBTSxLQUFJLEdBQ3ZDLE1BQU8sQ0FBRXVCLEtBREU2bEQsRUFBQSxHQUNVci9DLE1BREhxL0MsRUFBQSxHQUVwQixHQUdGLEVBUU90SCxHQUFULFNBQXVCbDlDLEdBQ25CLFFBQWV0RCxJQUFYc0QsR0FBdUN0RCxNQUFmc0QsRUFBT2lqRCxPQUFxQmpqRCxFQUFPaWpELE9BQVNqakQsRUFBT2ljLE1BQU16VixRQUFRLDZCQUErQixFQUFHLENBQzNILElBQUlyQixFQUFTbkYsRUFBT3UzQyxVQUNwQmw0QyxHQUFnQixnQkFBZ0JXLEVBQU9tSixVQUFXaEUsRUFBTyxZQUN6RG9CLGFBQVksV0FDUmxILEdBQWdCLGdCQUFnQlcsRUFBT21KLFVBQVdoRSxFQUFRLFdBQzlELEdBQUUsSUFDTixDQUNKLEVBTVNnL0MsR0FBVCxXQUNJajVDLFFBQVUvRSxTQUFTaVYsT0FBT2hlLE1BQU0sS0FFaEMsSUFEQSxJQUFJd1QsRUFBTSxDQUFDLEVBQ0ZXLEVBQUksRUFBR0EsRUFBSXJHLFFBQVF6TixPQUFROFQsS0FDMkIsSUFBdkRyRyxRQUFRcUcsR0FBR25VLE1BQU0sS0FBSyxHQUFHb0osUUFBUSxtQkFDakNvSyxFQUFJekgsVUFBVStCLFFBQVFxRyxHQUFHblUsTUFBTSxpQkFBaUIsR0FBR0EsTUFBTSxLQUFLLEdBQzlEd1QsRUFBSTJtQyxVQUFVcnNDLFFBQVFxRyxHQUFHblUsTUFBTSxLQUFLLEdBQ3BDOC9DLEdBQWN0c0MsR0FHMUIsRUFPU3ZSLEdBQVQsU0FBeUJxbEQsRUFBT0MsRUFBUUMsR0FDcEMsSUFBSUMsRUFBSSxJQUFJOThDLEtBQ1o4OEMsRUFBRUMsUUFBUUQsRUFBRWpuQixVQUFvQixHQUFQZ25CLEVBQVUsR0FBRyxHQUFHLEtBQ3pDLElBQUlHLEVBQVUsV0FBV0YsRUFBRUcsY0FDM0I3K0MsU0FBU2lWLE9BQVNzcEMsRUFBUSxJQUFNQyxFQUFTLEtBQU9JLEVBQVUsd0JBQzlELEVBUVMvbEQsR0FBVCxTQUF5QjBsRCxHQUdyQixJQUZBLElBQUkvbEQsRUFBTytsRCxFQUFRLElBQ2ZPLEVBQUs5K0MsU0FBU2lWLE9BQU9oZSxNQUFNLEtBQ3ZCbVUsRUFBSSxFQUFHQSxFQUFJMHpDLEVBQUd4bkQsT0FBUThULElBQUssQ0FFL0IsSUFEQSxJQUFJMnpDLEVBQUlELEVBQUcxekMsR0FDVyxLQUFmMnpDLEVBQUVDLE9BQU8sSUFDWkQsRUFBSUEsRUFBRTVsQyxVQUFVLEdBRXBCLEdBQXVCLEdBQW5CNGxDLEVBQUUxK0MsUUFBUTdILEdBQ1YsT0FBT3VtRCxFQUFFNWxDLFVBQVUzZ0IsRUFBS2xCLE9BQVF5bkQsRUFBRXpuRCxPQUUxQyxDQUNBLE1BQU8sRUFDWCxFQU9TeTJCLEdBQVQsU0FBNkJsMEIsR0FDckJBLEVBQU9vYixRQUFVLGdCQUFnQnBiLEVBQU9tSixXQUN4QzlKLEdBQWdCLGdCQUFnQlcsRUFBT21KLFVBQVUsRUFBRyxLQUdwRG5KLEVBQU9vYixRQUFVLGtCQUFrQnBiLEVBQU9tSixZQUMxQ2hFLE1BQVMrOUMsS0FFVDdqRCxHQUFnQixrQkFBa0JXLEVBQU9tSixVQUFXaEUsTUFBTyxLQUVuRSxFQU9TcEksR0FBVCxTQUEyQjJuRCxHQUN2QixJQUFJdHBDLEVBQVNwYyxHQUFnQjBsRCxHQUM3QixNQUFjLElBQVZ0cEMsR0FBMkIsT0FBWEEsQ0FLeEIsRUFlUzhuQyxHQUFULFdBYUksT0FaQWtDLE1BQVEsSUFBSXI5QyxLQUNaczlDLEdBQUtELE1BQU1FLFVBQ1hDLEdBQUtILE1BQU1JLFdBQVcsRUFFdEJDLEtBQU9MLE1BQU1NLGNBQ1ZMLEdBQUcsS0FDRkEsR0FBRyxJQUFJQSxJQUVSRSxHQUFHLEtBQ0ZBLEdBQUcsSUFBSUEsSUFHSkUsS0FBSyxJQUFJRixHQUFHLElBQUlGLEVBQzNCLEVBUVMvN0MsR0FBVCxTQUFzQnE4QyxFQUFXbHRDLEVBQWNtdEMsRUFBU3RpRCxFQUFTdEQsR0FDN0RuRCxFQUFRLGdCQUFnQjhvRCxFQUFXbHRDLEVBQWNtdEMsRUFBU3RpRCxFQUFTdEQsRUFTdkUsRUFPU2lsQixHQUFULFNBQW9CamxCLEVBQVF3bEIsR0FDeEIsSUFBSXFnQyxFQUFxQmhtRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsS0FDNUUyOEMsRUFBY0QsRUFBbUI1OEMsS0FBSyxjQUMxQyxHQUFHNDhDLEVBQW1CcG9ELE9BQU8sQ0FDekIsSUFBSXNvRCxFQUErQkYsRUFBbUJseEMsS0FBSyxtREFFM0QsR0FBeUIsWUFBdEIzVSxFQUFPNlAsWUFBMEIsQ0FDaEMsSUFBSW0yQyxFQUFhLFNBQVNGLEVBQVksT0FDbENHLEVBQWNqbUQsRUFBT21aLGtCQUFrQjJZLDJCQUN2Q28wQixFQUFpQkQsRUFBY0EsRUFBWTdvRCxNQUFNLEtBQUssR0FBSyxHQUM3QixvQkFBdkJzUCxxQkFBd0QsUUFBbEJ3NUMsSUFDN0NGLEVBQWEsU0FBU0YsRUFBWSxLQUV0Q0QsRUFBbUJ2d0MsSUFBSSxDQUFDLFFBQVcsUUFBUSxVQUFZMHdDLElBQ3ZESCxFQUFtQjU4QyxLQUFLLGFBQWM2OEMsR0FDakMsR0FBZEUsR0FBa0JILEVBQW1CdndDLElBQUksWUFBYSxRQUM3Q3V3QyxFQUFtQmx4QyxLQUFLLDZCQUE2QlcsSUFBSSxDQUFDLFFBQVcsVUFDckV6VixNQUFNbEQsUUFBUXdwRCxRQUFPLFdBQ2ROLEVBQW1CcG9ELFFBQVVvb0QsRUFBbUIxd0MsU0FBUzFYLGVBQ2hCZixJQUF2QkMsT0FBT3lwRCxZQUE2QnpwRCxPQUFPeXBELGFBQWVqZ0QsU0FBU2tnRCxpQkFBbUJsZ0QsU0FBUzhTLEtBQUtxdEMsWUFBY25nRCxTQUFTOFMsTUFBTTJDLFlBQ2hJaXFDLEVBQW1CMXdDLFNBQVNJLFNBQVNDLElBQU03WSxPQUFPODJCLFlBQVksTUFBU295QixFQUFtQi9nQyxTQUFTLGNBQ2pIK2dDLEVBQW1CNzhDLFNBQVMsWUFDekJrOUMsR0FBb0MsUUFBbEJBLEdBQ2pCTCxFQUFtQjc4QyxTQUFTLG1DQUM1QjY4QyxFQUFtQjc4QyxTQUFTLG9CQUU1QjY4QyxFQUFtQjc4QyxTQUFTLG1DQUVoQzY4QyxFQUFtQnZ3QyxJQUFJLFlBQTRCNVksTUFBZm9wRCxFQUEyQixTQUFTQSxFQUFZLElBQU0sU0FHdEcsSUFDSyxHQUFkRSxHQUFrQkgsRUFBbUJ2d0MsSUFBSSxZQUFhLFFBQzdDZixFQUF1QnZVLEdBQ25DNm5CLEdBQXNCN25CLEVBQ2QsS0FBTyxDQUNILEdBQUlBLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIsbUJBQXFCclosRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixrQkFDbkgsT0FBTyxFQU1YLElBQUlzTSxFQUFlLENBQUMsT0FBUyxLQUFNLE1BQVEsV0FBWSxNQUFRLFlBRS9ELEdBQVksUUFBVEgsR0FBbUJ4bEIsRUFBT21aLGtCQUFrQm90QywwQkFDdkNMLEVBQWlCbG1ELEVBQU9tWixrQkFBa0JvdEMsMEJBQTBCbnBELE1BQU0sS0FBSyxRQUNqRixHQUFJNEMsRUFBT21aLGtCQUFrQjJZLDJCQUNyQmp5QixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS290QixXQUN2RTEyQixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS3F0QixZQUM3RTB2QixFQUFpQmxtRCxFQUFPbVosa0JBQWtCMlksMkJBQTJCMTBCLE1BQU0sS0FBSyxHQUd4RixPQUFPOG9ELEdBQ0gsSUFBSyxPQUNEdmdDLEVBQWFDLE9BQVMsUUFDdEIsTUFDSixJQUFLLEtBQ0RELEVBQWFDLE9BQVMsZUFDdEIsTUFDSixJQUFLLE9BQ0RELEVBQWFDLE9BQVMsYUFDdEIsTUFDSixJQUFLLE9BQ0RELEVBQWFDLE9BQVMsZUFDdEIsTUFDSixJQUFLLFFBQ0RELEVBQWFDLE9BQVMsZ0JBQ3RCLE1BQ0osSUFBSyxRQWVMLElBQUssT0FDREQsRUFBYUMsT0FBUyxXQUN0QixNQWRKLElBQUssU0FDREQsRUFBYUMsT0FBUyxZQUN0QixNQUNKLElBQUssT0EyQkwsSUFBSyxPQUdMLElBQUssWUFDREQsRUFBYUMsT0FBUyxVQUN0QixNQTdCSixJQUFLLFVBR0wsSUFBSyxPQUNERCxFQUFhQyxPQUFTLFVBQ3RCLE1BSUosSUFBSyxZQUNERCxFQUFhQyxPQUFTLFFBQ3RCLE1BQ0osSUFBSyxPQUNERCxFQUFhQyxPQUFTLFNBQ3RCLE1BQ0osSUFBSyxVQUNERCxFQUFhQyxPQUFTLFNBQ3RCLE1BQ0osSUFBSyxRQUNERCxFQUFhQyxPQUFTLGFBQ3RCLE1BQ0osSUFBSyxRQUNERCxFQUFhQyxPQUFTLFVBVTlCLElBQUk0Z0MsRUFBWSxpQ0FBaUN4bUQsRUFBT21KLFVBQVUscURBRWxFLEdBQWEsUUFBVHFjLEVBQWlCLENBQ2pCLElBQUlLLEVBQVVGLEVBQWFDLE9BQzNCRCxFQUFhQyxPQUFTQyxFQUFRdm9CLFFBQVEsS0FBSyxPQUUzQ2twRCxFQUFZQSxFQUFZLG1DQUFtQ3htRCxFQUFPbUosVUFBVSw4REFBOERuSixFQUFPbUosVUFBVSx5REFBeURuSixFQUFPbUosVUFBVSw0REFBNERuSixFQUFPbUosVUFBVSwyQkFDbFR0SixNQUFNMm1ELEdBQVd4OUMsU0FBUyxxQkFDb0IsSUFBMUMyYyxFQUFhQyxPQUFPcGYsUUFBUSxVQUM1QjNHLE1BQU0ybUQsR0FBV3g5QyxTQUFTLG1CQUU5Qm5KLE1BQU0ybUQsR0FBV3g5QyxTQUFTLFdBQVcyYyxFQUFhQyxPQUN0RCxLQUFLLENBT0QsUUFOa0csSUFBeEYvbEIsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUtGLEtBQUssU0FDbEZwSixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS0gsU0FBUyxrQkFFaEZuSixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS3VNLFlBQVksa0JBRzlELFlBQXRCMVYsRUFBTzZQLGFBQTZCaFEsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUsxTCxPQUFTLEVBQUUsQ0FDckgsSUFBSWdwRCxFQUF1QjVtRCxNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS0YsS0FBSyxTQUNuR3k5QyxFQUF3QjdtRCxNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS0YsS0FBSyxxQkFDdkUsSUFBdkJ3OUMsR0FDaUQsR0FBcERBLEVBQXFCamdELFFBQVEsMEJBQTRELElBQXpCa2dELEdBQy9EN21ELE1BQU0sMkNBQTJDRyxFQUFPbUosVUFBVSxLQUFLdU0sWUFBWSxrQkFHdkY3VixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS3VNLFlBQVksaUJBRTNGLENBUUEsUUFOZ0csSUFBdEY3VixNQUFNLCtCQUErQkcsRUFBT21KLFVBQVUsS0FBS0YsS0FBSyx1QkFDbUIsU0FBdEZwSixNQUFNLCtCQUErQkcsRUFBT21KLFVBQVUsS0FBS0YsS0FBSyxzQkFBdUgsUUFBdEZwSixNQUFNLCtCQUErQkcsRUFBT21KLFVBQVUsS0FBS0YsS0FBSyxzQkFDaEtwSixNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS3VNLFlBQVksbUJBSWxFLFlBQXRCMVYsRUFBTzZQLGFBQTZCaFEsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUsxTCxPQUFTLEVBQUUsQ0FDakhncEQsRUFBdUI1bUQsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUtGLEtBQUssU0FDbkd5OUMsRUFBd0I3bUQsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUtGLEtBQUsscUJBQ3ZFLElBQXZCdzlDLEdBQ2lELEdBQXBEQSxFQUFxQmpnRCxRQUFRLDBCQUE0RCxJQUF6QmtnRCxHQUMvRDdtRCxNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS3VNLFlBQVksa0JBR3ZGN1YsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUt1TSxZQUFZLGlCQUUzRixDQUdBN1YsTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUttTSxJQUFJLFVBQVUsU0FDckZ5d0MsRUFBNkJ6d0MsSUFBSSxDQUFDLFFBQVcsU0FDN0N1d0MsRUFBbUJ2d0MsSUFBSSxDQUFDLFFBQVcsVUFFbkMsSUFDSXpZLEVBQVEsaUJBRVJnRCxNQUFNMm1ELEdBQVd4OUMsU0FBUyxvQ0FDb0IsSUFBMUMyYyxFQUFhQyxPQUFPcGYsUUFBUSxVQUM1QjNHLE1BQU0ybUQsR0FBV3g5QyxTQUFTLG1CQUU5Qm5KLE1BQU0ybUQsR0FBV3g5QyxTQUFTLFdBQVcyYyxFQUFhQyxRQUVsRHFPLEdBQWVqMEIsR0FDZjJtRCxjQUFjM21ELEVBQU9tSixVQUV6QixDQUFDLE1BQU1FLEdBQ0h4TSxFQUFRLHNCQUNSZ0QsTUFBTTJtRCxHQUFXeDlDLFNBQVMsb0NBQ29CLElBQTFDMmMsRUFBYUMsT0FBT3BmLFFBQVEsVUFDNUIzRyxNQUFNMm1ELEdBQVd4OUMsU0FBUyxtQkFFOUJpckIsR0FBZWowQixHQUNmSCxNQUFNMm1ELEdBQVc5M0MsS0FBSyxLQUFLLFdBQ3ZCaTRDLGNBQWMzbUQsRUFBT21KLFVBQ3pCLEdBQ0osQ0FDQXBHLFlBQVcsV0FDbUIsWUFBdEIvQyxFQUFPNlAsYUFBbUQsWUFBdEI3UCxFQUFPNlAsYUFDM0NoUSxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUscURBQXFENndCLFFBQVEsQ0FBQyxJQUFNLE1BQU0sS0FBTyxPQUFPLEtBRW5KbjZCLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUFLbU0sSUFBSSxDQUFDLGFBQWlCdFYsRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixtQkFBNEMsWUFBdEJyWixFQUFPNlAsYUFBcUQsWUFBdEI3UCxFQUFPNlAsYUFBcUQsWUFBeEI3UCxFQUFPcVosZUFBdUQsWUFBdEJyWixFQUFPNlAsYUFBcUQsWUFBeEI3UCxFQUFPcVosZUFBdUQsT0FBdEJyWixFQUFPNlAsYUFBb0UsY0FBNUM3UCxFQUFPbVosa0JBQWtCd1csaUJBQW9DM3ZCLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIsbUJBQXVCclosRUFBTzZQLFlBQVksSUFBSTdQLEVBQU9xWixlQUFpQixtQkFBdUJyWixFQUFPNlAsWUFBWSxJQUFJN1AsRUFBT3FaLGVBQWlCLHFCQUF5QnJaLEVBQU82UCxZQUFZLElBQUk3UCxFQUFPcVosZUFBaUIscUJBQXdCLEdBQUksNkJBR2h0QjlFLEVBQXVCdlUsR0FDdkI2bkIsR0FBc0I3bkIsRUFDMUIsR0FBRSxJQUVOLENBQ0osQ0FDWSxRQUFUd2xCLEdBemxRWCxTQUErQnhsQixRQUN1RSxJQUF2RkgsTUFBTSxnQ0FBa0NHLEVBQU9tSixVQUFZLEtBQUtGLEtBQUssZ0JBQXdILEdBQXZGcEosTUFBTSxnQ0FBa0NHLEVBQU9tSixVQUFZLEtBQUtGLEtBQUssaUJBQ2xMcEosTUFBTSxtREFBb0RHLEVBQU9tSixVQUFXLE1BQU1ILFNBQVMsZ0JBQzNGNGIsR0FBaUI1a0IsRUFBUSxRQUdqQyxDQW9sUVk0bUQsQ0FBc0I1bUQsR0FHMUIsSUFBUW1aLEVBQXFDblosRUFBckNtWixrQkFBcUNuWixFQUFsQnNTLGdCQUNINkcsRUFBa0I2WSwwQkFBNEI3WSxFQUFrQitZLHNDQUNwRm52QixZQUFXLFdBQ1BsRCxNQUFNMm1ELEdBQVc5d0MsWUFBWSxvQkFDN0I3VixNQUFNMm1ELEdBQVc5d0MsYUFBYSxTQUFVM1YsRUFBTytsQixHQUMzQyxPQUFRQSxFQUFVdkcsTUFBTyxtQkFBcUIsSUFBSXBZLEtBQUssSUFDM0QsR0FDSixHQUFFLElBRVYsQ0FDSixFQUdTMkssR0FBVCxXQUNJLFNBQUluVixPQUFPa3FELGFBRTRCLEdBQS9CQSxZQUFZQyxXQUFXbGtELEtBS25DLEVBaVBTbTVCLEdBQVQsU0FBdUIvN0IsR0FFbkJILE1BQU0sdUJBQXVCbVUsU0FDN0IsSUFBSSt5QyxFQUFlbG5ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxpREFDMUUsR0FBRzQ5QyxFQUFhdHBELGFBQThELElBQTdDc3BELEVBQWE5OUMsS0FBSyx3QkFBc0YsTUFBNUM4OUMsRUFBYTk5QyxLQUFLLHVCQUFnQyxDQUMzSSxJQUFJKzlDLEVBQWFELEVBQWE5OUMsS0FBSyx1QkFDbkNnK0MsR0FBNkIxZ0QsYUFBWSxXQUNyQ3dnRCxFQUFhMWlDLFlBQVksNkJBQTZCMmlDLEVBQzFELEdBQUcsSUFDUCxDQUVBLElBQUlFLEVBQW9Ccm5ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxnREFDL0UsR0FBRys5QyxFQUFrQnpwRCxhQUFtRSxJQUFsRHlwRCxFQUFrQmorQyxLQUFLLHdCQUEyRixNQUFqRGkrQyxFQUFrQmorQyxLQUFLLHVCQUFnQyxDQUMxSixJQUFJaytDLEVBQWtCRCxFQUFrQmorQyxLQUFLLHVCQUM3Q20rQyxHQUE0QjdnRCxhQUFZLFdBQ3BDMmdELEVBQWtCN2lDLFlBQVksNkJBQTZCOGlDLEVBQy9ELEdBQUcsSUFDUCxDQUVBLElBQUlFLEVBQW1CeG5ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSx5QkFDM0VrK0MsRUFBaUI1cEQsYUFBa0UsSUFBakQ0cEQsRUFBaUJwK0MsS0FBSyx3QkFBMEYsTUFBaERvK0MsRUFBaUJwK0MsS0FBSyx3QkFDdkhwSixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUseUJBQXlCckosTUFBSyxXQUNqRixJQUFJd25ELEVBQWlCem5ELE1BQU0wRCxNQUFNMEYsS0FBSyx1QkFDbENzK0MsRUFBWTFuRCxNQUFNMEQsTUFBTTRSLFNBQVNsTSxLQUFLLE1BQzFDdStDLEdBQW9CeG5ELEVBQU9tSixVQUFVLElBQUlvK0MsR0FBY2hoRCxhQUFZLFdBQy9EMUcsTUFBTSxJQUFJMG5ELEdBQVk1eUMsS0FBSyx1QkFBdUIwUCxZQUFZLDZCQUE2QmlqQyxFQUMvRixHQUFHLElBQ1AsR0FFUixFQUlTdHJCLEdBQVQsU0FBd0JoOEIsR0FDcEIsSUFBSXluRCxFQUFnQjVuRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsNkRBQ3ZFdStDLEVBQWlCN25ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxnREFBZ0RGLEtBQUssdUJBQzdIMCtDLEVBQWFGLEVBQWNocUQsT0FBU2dxRCxFQUFjaHFELE9BQVMsRUFDNURncUQsRUFBY2hxRCxPQUFTLEdBQUtpcUQsSUFDM0JFLEdBQTJCcmhELGFBQVksV0FDbkNraEQsRUFBY3BqQyxZQUFZLDZCQUE2QnFqQyxFQUMzRCxHQUFlLElBQWJDLEdBRVYsRUFVU3g1QixHQUFULFNBQW1CdlosR0FDZixPQUx5Qml6QyxHQUtFLElBQUlDLGFBQWNDLE9BQU9uekMsR0FKOUNvekMsRUFBWTluQyxPQUFPK25DLGNBQWFscUQsTUFBcEJtaUIsT0FBTWdvQyxFQUFrQkwsSUFDbkNNLEtBQUtILEdBRmhCLElBQTZCSCxFQUNuQkcsQ0FLVixFQUNTSSxHQUFULFNBQW1CeHpDLEdBQ2YsT0FBTyxJQUFJeXpDLGFBQWNDLFFBWG5CTixFQUFZTyxLQVdrQzN6QyxHQVY3QzR6QyxXQUFXQyxLQUFLVCxHQUFXLFNBQUNqK0IsR0FBQyxPQUFLQSxFQUFFMitCLFlBQVksRUFBRSxNQUY3RCxJQUNVVixDQVlWLEVBRVMvckIsR0FBVCxTQUF5Qmo4QixHQUNyQixJQUFJMG5ELEVBQWlCN25ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxnREFBZ0RGLEtBQUssdUJBRzdIMC9DLEdBRmdCOW9ELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSw2REFFMUQsQ0FBQyxHQUNwQnkvQyxFQUFrQi9vRCxNQUFNLGlCQUFpQmtZLE1BQ3pDOHdDLEVBQWVocEQsTUFBTSxzQkFBc0JwQyxPQUFTLEVBQUlxQixLQUFLQyxNQUFNYyxNQUFNLHNCQUFzQmtZLE9BQVU2d0MsRUFBa0I5cEQsS0FBS0MsTUFBTXFwRCxHQUFVUSxJQUFvQixHQUVsSy9vRCxNQUFNQyxLQUFLK29ELEVBQWFDLFFBQVEsU0FBUzM2QyxFQUFLNEosR0FDMUM0d0MsRUFBV3g2QyxHQUFPNEosRUFBSWd4QyxRQUFVL3NDLE9BQU9qRSxFQUFJZ3hDLFNBQVMsSUFBTSxDQUM5RCxJQUVBbHBELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxvQ0FBb0NKLEdBQUcsU0FBUyxTQUFTeEosR0FDNUcsSUFBSWtmLGNBQWNtcEMsR0FBMEIsQ0FBQyxNQUFNditDLEdBQUssQ0FDcEN4SixNQUFNMEQsTUFBTTBGLEtBQUssY0FDckNwSixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUscUNBQXFDdU0sWUFBWSw2QkFBNkJneUMsR0FBZ0JweUMsSUFBSSxDQUFDLGtCQUFtQixLQUFLLDBCQUEyQixLQUFLLHVCQUF3QixLQUFLLHNCQUF1QixPQUN0UXpWLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxxQ0FFdkR0SixNQUFNTixFQUFFa0ssUUFBUVQsU0FBUyxrQ0FDekJqRyxZQUFXLFdBQ1BsRCxNQUFNTixFQUFFa0ssUUFBUWlNLFlBQVksaUNBQ2hDLEdBQUcsS0FDSCxJQUFJc3pDLEVBQWNDLEdBQWFOLElBQy9COXJELEVBQVEsY0FBY21zRCxHQUN0Qm5zRCxFQUFRLHVCQUF1QmdzRCxFQUFhQyxPQUFPRSxJQUVuRGhwRCxFQUF1QixlQUFJNm9ELEVBQWFDLE9BQU9FLEdBQy9DaHBELEVBQXVCLGVBQVksU0FBSWdwRCxFQUVuQ0EsR0FBa0UsR0FBbkRILEVBQWFDLE9BQU9FLEdBQWFFLGlCQUVoRHJzRCxFQUFRLE9BQ1JtRCxFQUF1QixlQUFhLFdBQUksRUFHZEgsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDJCQUNoRHJKLE1BQUssV0FDckIsSUFBSXVZLEVBQU94WSxNQUFNMEQsTUFBTTRqQixRQUNnQixHQUFwQzlPLEVBQUs3UixRQUFRLG9CQUE0QnFpRCxFQUFhQyxPQUFPRSxHQUFheFMsT0FDekUzMkMsTUFBTTBELE1BQU00akIsS0FBSzlPLEVBQUsvYSxRQUFRLGtCQUFtQnVyRCxFQUFhQyxPQUFPRSxHQUFheFMsU0FFaEQsR0FBbkNuK0IsRUFBSzdSLFFBQVEsbUJBQTJCcWlELEVBQWFDLE9BQU9FLEdBQWF6UyxNQUN4RTEyQyxNQUFNMEQsTUFBTTRqQixLQUFLOU8sRUFBSy9hLFFBQVEsaUJBQWtCdXJELEVBQWFDLE9BQU9FLEdBQWF6UyxNQUV6RixJQUVBeHpDLFlBQVcsV0FDUGxELE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSwwQkFBMEJtTSxJQUFJLFVBQVUsUUFBUVgsS0FBSyxpQ0FBaUNYLFNBQ2hJblUsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDBCQUEwQnVNLFlBQVksbUNBQ2hGN1YsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLEtBQUttTSxJQUFJLGFBQWEsSUFHN0R0VixFQUEwQixtQkFBS0EsRUFBMEIsa0JBQTRCLDBCQUFnRSxHQUEzREEsRUFBMEIsa0JBQTRCLDBCQUMvSW84QixHQUFvQnA4QixHQUNwQnE4QixHQUFpQnI4QixLQUVqQkgsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHlCQUF5QkgsU0FBUyxtRUFDNUVqRyxZQUFXLFdBQ1BsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUseUJBQXlCdU0sWUFBWSxtREFDbkYsR0FBRSxNQUVON1YsTUFBTXNHLFVBQVU0QyxHQUFHLFFBQVMsb0JBQW9CL0ksRUFBT21KLFVBQVUsb0JBQW9CLFdBQ2pGa3BCLG9CQUFvQnh5QixNQUFNMEQsTUFBTU4sSUFBSSxHQUN4QyxJQUNBcEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQnVGLEtBQUssSUFDeEUsR0FBRyxPQUdIN1IsRUFBUSxRQUNSbUQsRUFBdUIsZUFBYSxXQUFJLEVBQ3hDK0MsWUFBVyxXQWVQLEdBZEFsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMEJBQTBCbU0sSUFBSSxVQUFVLFFBQVFYLEtBQUssaUNBQWlDWCxTQUNoSW5VLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSwwQkFBMEJ1TSxZQUFZLG1DQUNoRjdWLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLbU0sSUFBSSxhQUFhLElBR2hFelYsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDJCQUEyQkgsU0FBUyxtRUFDOUVqRyxZQUFXLFdBQ1BsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMkJBQTJCdU0sWUFBWSxtREFDckYsR0FBRSxLQUNGN1YsTUFBTXNHLFVBQVU0QyxHQUFHLFFBQVMsb0JBQW9CL0ksRUFBT21KLFVBQVUsb0JBQW9CLFdBQ2pGa3BCLG9CQUFvQnh5QixNQUFNMEQsTUFBTU4sSUFBSSxHQUN4QyxJQUNBcEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQnVGLEtBQUssS0FFakUxTyxFQUFPNnhDLGdCQUF1RCxHQUFyQzd4QyxFQUFPNnhDLGVBQWVDLGFBQW9GcDFDLE1BQTdEc0QsRUFBTzZ4QyxlQUFlRSxvQkFBb0JDLGdCQUE2QixDQUM5Sm4xQyxFQUFRLHFCQVFVLElBQ0lzc0QsRUFEdUJucEQsRUFBTzZ4QyxlQUFlRSxvQkFBb0JlLHFCQUNiLEVBQWdGLEtBQTNFOXlDLEVBQU8rdUIsaUJBQXlDLEVBQXRCZ2tCLEdBQTBCQSxJQUVqSGh3QyxZQUFXLFdBQ1A2dUMsR0FBb0I1eEMsRUFBTyxTQUFTLFdBQ3hDLEdBQUdtcEQsRUFDdEIsQ0FDVyxHQUFHLEtBS1gsR0FDSixFQUdTRixHQUFULFNBQXNCRyxHQUNsQixJQUFJNzNDLEVBQUc4M0MsRUFBSSxFQUFHQyxFQUFFdjBDLEtBQUtDLFNBQ3JCLElBQUt6RCxLQUFLNjNDLEVBRU4sR0FBSUUsSUFESkQsR0FBT0QsRUFBSzczQyxJQUNFLE9BQU9BLENBRTdCLEVBRU1nNEMsR0FBVCxTQUE2QnZwRCxFQUFRd3BELEVBQVVDLEVBQU9DLEVBQVVmLEVBQVlFLEdBQzNFLElBQUlHLEVBQWNDLEdBQWFOLEdBQzNCZ0IsRUFBbUIsRUFBRUMsRUFBQSxTQUFBQyxHQUVwQjc2QyxPQUFPcXNDLGVBQWV5TyxLQUFLbkIsRUFBWWtCLEtBRXZDQSxHQUFpQmIsSUFDbkJuc0QsRUFBUWd0RCxFQUFlRixFQUFrQmQsRUFBYUMsT0FBT2UsR0FBZ0JiLEdBRzdFUyxFQUFRLEdBQUtFLEVBQ2I5cEQsTUFBTSx5QkFBeUJHLEVBQU9tSixXQUFXNkssU0FDakRuVSxNQUFNMnBELEdBQVVwMUMsT0FBTyxnRUFBZ0VwVSxFQUFPbUosVUFBVSw4SEFHckUsR0FBTnNnRCxFQUFVLDhDQUdiNXBELE1BQU0ycEQsR0FBVTcwQyxLQUFLLG1CQUN0QzBQLFlBQVksZ0JBQ3JCeGtCLE1BQU1zRyxVQUFVcUQsSUFBSSxRQUFTZ2dELEVBQVMsdUJBRTdCem1ELFlBQVcsV0FFZmltRCxHQUFrRSxHQUFuREgsRUFBYUMsT0FBT0UsR0FBYUUsZ0JBRW5EcnNELEVBQVEsT0FDUm1ELEVBQXVCLGVBQWEsV0FBSSxFQUdkSCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMkJBQ2hEckosTUFBSyxXQUN4QixJQUFJdVksRUFBT3hZLE1BQU0wRCxNQUFNNGpCLFFBQ2dCLEdBQXBDOU8sRUFBSzdSLFFBQVEsb0JBQTRCcWlELEVBQWFDLE9BQU9lLEdBQWVyVCxPQUM5RTMyQyxNQUFNMEQsTUFBTTRqQixLQUFLOU8sRUFBSy9hLFFBQVEsa0JBQW1CdXJELEVBQWFDLE9BQU9lLEdBQWVyVCxTQUV2QixHQUFuQ24rQixFQUFLN1IsUUFBUSxtQkFBMkJxaUQsRUFBYUMsT0FBT2UsR0FBZXRULE1BQzFFMTJDLE1BQU0wRCxNQUFNNGpCLEtBQUs5TyxFQUFLL2EsUUFBUSxpQkFBa0J1ckQsRUFBYUMsT0FBT2UsR0FBZXRULE1BRWhILElBRUF4ekMsWUFBVyxXQUNWbEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDBCQUEwQm1NLElBQUksVUFBVSxRQUFRWCxLQUFLLGlDQUFpQ1gsU0FDaEluVSxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMEJBQTBCdU0sWUFBWSxtQ0FDaEY3VixNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsS0FBS21NLElBQUksYUFBYSxJQUdyQ3RWLEVBQTBCLG1CQUFLQSxFQUEwQixrQkFBNEIsMEJBQWdFLEdBQTNEQSxFQUEwQixrQkFBNEIsMEJBQy9JbzhCLEdBQW9CcDhCLEdBQ3BCcThCLEdBQWlCcjhCLEtBRWpCSCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUseUJBQXlCSCxTQUFTLG1FQUM1RWpHLFlBQVcsV0FDUGxELE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSx5QkFBeUJ1TSxZQUFZLG1EQUNuRixHQUFFLE1BRTlCN1YsTUFBTXNHLFVBQVU0QyxHQUFHLFFBQVMsb0JBQW9CL0ksRUFBT21KLFVBQVUsb0JBQW9CLFdBQ3BGa3BCLG9CQUFvQnh5QixNQUFNMEQsTUFBTU4sSUFBSSxHQUNyQyxJQUNBcEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQnVGLEtBQUssSUFDckUsR0FBRyxPQUdIN1IsRUFBUSxRQUNSbUQsRUFBdUIsZUFBYSxXQUFJLEVBQ3hDK0MsWUFBVyxXQWVWLEdBZEFsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMEJBQTBCbU0sSUFBSSxVQUFVLFFBQVFYLEtBQUssaUNBQWlDWCxTQUNoSW5VLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSwwQkFBMEJ1TSxZQUFZLG1DQUNoRjdWLE1BQU0sbUJBQW1CRyxFQUFPbUosVUFBVSxLQUFLbU0sSUFBSSxhQUFhLElBR2hFelYsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLDJCQUEyQkgsU0FBUyxtRUFDOUVqRyxZQUFXLFdBQ1ZsRCxNQUFNLG1CQUFtQkcsRUFBT21KLFVBQVUsMkJBQTJCdU0sWUFBWSxtREFDbEYsR0FBRSxLQUNGN1YsTUFBTXNHLFVBQVU0QyxHQUFHLFFBQVMsb0JBQW9CL0ksRUFBT21KLFVBQVUsb0JBQW9CLFdBQ3BGa3BCLG9CQUFvQnh5QixNQUFNMEQsTUFBTU4sSUFBSSxHQUNyQyxJQUNBcEQsTUFBTSxtQkFBbUJHLEVBQU9tSixVQUFVLHFCQUFxQnVGLEtBQUssS0FFakUxTyxFQUFPNnhDLGdCQUF1RCxHQUFyQzd4QyxFQUFPNnhDLGVBQWVDLGFBQW9GcDFDLE1BQTdEc0QsRUFBTzZ4QyxlQUFlRSxvQkFBb0JDLGdCQUE2QixDQUMvSW4xQyxFQUFRLHFCQU9tQixJQUNJc3NELEVBRHVCbnBELEVBQU82eEMsZUFBZUUsb0JBQW9CZSxxQkFDbUQsS0FBOUQ5eUMsRUFBT21aLGtCQUFrQjJWLHlCQUEyQixFQUFJLEdBQXlGLEtBQTNFOXVCLEVBQU8rdUIsaUJBQXlDLEVBQXRCZ2tCLEdBQTBCQSxJQUVwTGh3QyxZQUFXLFdBQ1A2dUMsR0FBb0I1eEMsRUFBTyxTQUFTLFdBQ3hDLEdBQUdtcEQsRUFDL0IsQ0FDRCxHQUFHLEtBR0wsR0FBRyxLQUVNbnBELEVBQXVCLGVBQUk2b0QsRUFBYUMsT0FBT2UsR0FDL0M3cEQsRUFBdUIsZUFBWSxTQUFJNnBELEVBQ3BDQSxHQUFpQmIsR0FBb0UsR0FBckRILEVBQWFDLE9BQU9lLEdBQWVYLGdCQUVsRXJzRCxFQUFRLE9BQ1JtRCxFQUF1QixlQUFhLFdBQUksSUFFeENuRCxFQUFRLFFBQ1JtRCxFQUF1QixlQUFhLFdBQUksSUFHdEQycEQsR0FBc0MsRUFFeEMsRUE5R0EsSUFBSyxJQUFNRSxLQUFpQmxCLEVBQVVpQixFQUFBQyxFQStHdkMsRUFFUzc2QixHQUFULFNBQTZCaHZCLEdBQWlDLElBQXpCK3BELEVBQWV2c0QsVUFBQUMsT0FBQSxRQUFBZixJQUFBYyxVQUFBLElBQUFBLFVBQUEsR0FDL0Nnc0QsRUFBVyxtQkFBbUJ4cEQsRUFBT21KLFVBQVUsSUFJekN3L0MsR0FISzlvRCxNQUFNMnBELEdBQVU3MEMsS0FBSyxtQkFHYixDQUFDLEdBQ2RpMEMsRUFBa0Ivb0QsTUFBTSxpQkFBaUJrWSxNQUN6Qzh3QyxFQUFlaHBELE1BQU0sc0JBQXNCcEMsT0FBUyxFQUFJcUIsS0FBS0MsTUFBTWMsTUFBTSxzQkFBc0JrWSxPQUFVNndDLEVBQWtCOXBELEtBQUtDLE1BQU1xcEQsR0FBVVEsSUFBb0IsR0FFeEsvb0QsTUFBTUMsS0FBSytvRCxFQUFhQyxRQUFRLFNBQVMzNkMsRUFBSzRKLEdBQzFDNHdDLEVBQVd4NkMsR0FBTzRKLEVBQUlneEMsUUFBVS9zQyxPQUFPakUsRUFBSWd4QyxTQUFTLElBQU0sQ0FDOUQsSUFDRi9vRCxFQUFPbVosa0JBQWtCMlYsMEJBQWtKLEdBQXRIanZCLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxxREFBcUQxTCxPQUszSnNzRCxHQUNUUixHQUFvQnZwRCxFQUFRd3BELEVBZmpCLEVBZWtDRSxFQUFVZixFQUFZRSxHQUwxRGhwRCxNQUFNMnBELEdBQVV6Z0QsR0FBRyxRQUFTLHNCQUFzQixXQUM5Q3dnRCxHQUFvQnZwRCxFQUFRd3BELEVBWDlCLEVBVytDRSxFQUFVZixFQUFZRSxHQUNuRWhwRCxNQUFNc0csVUFBVXFELElBQUksUUFBU2dnRCxFQUFTLHNCQUMxQyxHQUlYLEVBRVl4NUMsR0FBVCxTQUEwQmhRLEdBQ3RCLElBQUlncUQsRUFBWSxHQUNoQm5xRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsMkJBQTJCckosTUFBSyxXQUtuRixHQUZBa3FELEVBQVlucUQsTUFBTTBELE1BQU04VSxPQUVyQnJZLEVBQU9tWixrQkFBa0I4OUIsUUFBNkMsSUFBbkNqM0MsRUFBT21aLGtCQUFrQjg5QixPQUFjLENBQ3ZEajNDLEVBQU9tWixrQkFBa0I4OUIsT0FBT2dULFlBRTlDRCxFQUFjaHFELEVBQU9tWixrQkFBa0I4OUIsT0FBT1YsS0FDOUMsSUFBSTJULEVBQXVCcnFELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSw2QkFBNkJrUCxPQUMvR3hZLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSw2QkFBNkJnZSxLQUFLdG5CLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSw2QkFBNkJnZSxPQUFPN3BCLFFBQVE0c0QsRUFBb0JGLEdBRXhOLENBRUFucUQsTUFBTTBELE1BQU0wRixLQUFLLFVBQVUrZ0QsR0FDM0JucUQsTUFBTTBELE1BQU0rUixJQUFJLFNBQVMsV0FDekJ6VixNQUFNMEQsTUFBTW9SLEtBQUssS0FBS1csSUFBSSxTQUFTLFdBQ25DelYsTUFBTTBELE1BQU1vUixLQUFLLFFBQVFXLElBQUksU0FBUyxXQUNwQixJQUFmMDBDLEdBQ0NucUQsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLDRCQUE0QjZLLFFBRTNGLElBQ0FuVSxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsMkJBQTJCSixHQUFHLFNBQVMsU0FBU3hKLEdBQ25HTSxNQUFNLG1CQUFtQm1VLFNBQ3pCblUsTUFBTSwwQkFBMEJtVSxTQUNoQyxJQUFJZzJDLEVBQVlucUQsTUFBTTBELE1BQU04VSxPQUdqQ2k3QixFQUFvQixDQUFDLFdBQWUsYUFBYyxZQUFlMFcsR0FDbEVocUQsRUFBTzZ4QyxpQkFDVHlCLEVBQStCLFlBQUl0ekMsRUFBTzZ4QyxlQUFlMkUsT0FFMUQsSUFBTTJULEVBQW9CLElBQUkzVyxZQUFZLGFBQWMsQ0FBQ0MsU0FBUyxFQUFNQyxPQUFRdlksR0FBbUJuN0IsRUFBUXN6QyxLQUMzR250QyxTQUFTd3RDLGNBQWN3VyxHQUdkdHFELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUFLaUwsT0FEeEMsaUVBRXBCdlUsTUFBTSxnQ0FBZ0NHLEVBQU9tSixVQUFVLHFCQUFxQjRPLElBQUlpeUMsR0FBYWwvQixTQUM3RjNrQixTQUFTaWtELFlBQVksUUFDckIsSUFBSUMsRUFBWSw4TkFBeU8sTUFBWHI4QyxHQUFnQnM4QyxHQUFVQyxJQUFXLFVBQ25SMXFELE1BQU0wRCxNQUFNNFIsU0FBU2YsT0FBT2kyQyxHQUM1QnhxRCxNQUFNMEQsTUFBTTRSLFNBQVNSLEtBQUssMEJBQTBCNjFDLFNBQ3BEem5ELFlBQVcsV0FDUGxELE1BQU0sMEJBQTBCNHFELFFBQVEsSUFDNUMsR0FBRyxLQUNINXFELE1BQU0sbUJBQW1CbVUsU0FDekIsSUFBSTAyQyxFQUEwQjdxRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsNEJBQTRCRixLQUFLLHlCQUN0SCxRQUFxQyxJQUEzQnloRCxHQUN3QixRQUEzQkEsRUFBa0MsQ0FFakN6NUIsR0FBaUJqeEIsRUFBUSxLQURSLFNBQzBCdUQsS0FDL0MsQ0FJUixHQUNKLEVBR1MwTSxHQUFULFNBQTBCalEsR0FvRHRCLE9BbkRHSCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsOEJBQThCMUwsT0FBTyxJQUMzRm9DLE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSw4QkFBOEJySixNQUFLLFdBQ3RGLElBQUk4NEMsRUFBTy80QyxNQUFNMEQsTUFBTTBGLEtBQUssTUFDeEIwaEQsRUFBTzlxRCxNQUFNMEQsTUFBTTBGLEtBQUssZUFDZHBKLE1BQU0wRCxNQUFNMEYsS0FBSyxrQkFDL0IsR0FBR3BKLE1BQU0wRCxNQUFNb1IsS0FBSyxLQUFLbFgsT0FBTyxFQUFFLENBQzlCa3RELEVBQU85cUQsTUFBTTBELE1BQU1vUixLQUFLLEtBQUsxTCxLQUFLLGFBQ2MsSUFBdENwSixNQUFNMEQsTUFBTW9SLEtBQUssS0FBSzFMLEtBQUssWUFDdkIsU0FDVnBKLE1BQU0sSUFBSSs0QyxHQUFRM3ZDLEtBQUssaUJBQWlCLFdBRTVDcEosTUFBTSxJQUFJKzRDLEdBQVEzdkMsS0FBSyxjQUFjMGhELEdBQ3JDLElBQUlDLEVBQWEvcUQsTUFBTTBELE1BQU1vUixLQUFLLEtBQUswRCxPQUN2Q3hZLE1BQU0wRCxNQUFNb1IsS0FBSyxLQUFLUSxTQUFTZ1MsS0FBS3lqQyxFQUN4QyxDQUNBL3FELE1BQU0wRCxNQUFNK1IsSUFBSSxTQUFTLFdBQ3pCelYsTUFBTTBELE1BQU1vUixLQUFLLG1DQUFtQ1csSUFBSSxTQUFTLFVBQ3JFLElBQ0F6VixNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsOEJBQThCSixHQUFHLFNBQVEsU0FBU3hKLEdBQ3JHQSxFQUFFcXRCLDJCQUNGLElBQUlpK0IsRUFBY2hyRCxNQUFNMEQsTUFBTVMsT0FDVG5FLE1BQU0wRCxNQUFNbUcsUUFBUSxpQkFBaUJULEtBQUssa0JBRS9ELEdBQUc0aEQsRUFBNkIsa0JBQXdDLElBQW5DQSxFQUE2QixnQkFBWSxDQUMxRSxJQUFJNzVCLEVBQWdCbnhCLE1BQU0wRCxNQUFNMEYsS0FBSyxNQUNoQix3QkFBbEIrbkIsSUFDQ0EsRUFBZ0IsYUFFcEJDLEdBQWlCanhCLEVBQVEsS0FBTWd4QixFQUFlenRCLEtBQ2xELE1BQ1gxRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsS0FBS0gsU0FBUyxxQkFDdERxdkMsR0FBeUJyNEMsRUFBT3VELEtBYXhDLElBQ1QxRCxNQUFNLGdDQUFnQ0csRUFBT21KLFVBQVUsOEJBQThCSixHQUFHLFdBQVUsU0FBU3hKLEdBQ3hGLEtBQWRBLEVBQUUyWSxTQUFnQyxLQUFkM1ksRUFBRTJZLFNBQ3pCclksTUFBTU4sRUFBRWtLLFFBQVFtVyxPQUVsQixNQUVZLENBQ1gsRUFFU3k0QixHQUFULFNBQWtDcjRDLEVBQVFtekMsR0FDdEMsSUFBSTBYLEVBQWNockQsTUFBTXN6QyxHQUFJbnZDLE9BQ3hCOHNCLEVBQWlCanhCLE1BQU1zekMsR0FBSXpwQyxRQUFRLGlCQUFpQlQsS0FBSyxrQkFFN0QsR0FBSzRoRCxFQUFvQixTQUFNQSxFQUEwQixjQUFPQSxFQUFxQixTQUErQixHQUExQkEsRUFBcUIsU0FFM0csR0FEQS9nRCxZQUFhZ25CLEdBQWdCLEdBQzFCKzVCLEVBQW9CLE9BQUcsQ0FDdEIsSUFBbUQsR0FBN0NBLEVBQW9CLE9BQUVya0QsUUFBUSxhQUFrRSxHQUE5Q3FrRCxFQUFvQixPQUFFcmtELFFBQVEsWUFBc0IsQ0FDeEcsSUFBSXNrRCxFQUFVRCxFQUFvQixPQUNKLE1BQTNCQyxFQUFVdGtELFFBQVEsU0FBNEMsTUFBM0Jza0QsRUFBVXRrRCxRQUFRLFFBQ3BEcWtELEVBQW9CLE9BQUlBLEVBQW9CLE9BRTVDQSxFQUFvQixPQUFJLEtBQU9BLEVBQW9CLE1BRzNELENBQ0tBLEVBQXVCLFVBR3hCOW5ELFlBQVcsV0FDUHBHLE9BQU91MEIsS0FBSzI1QixFQUFvQixPQUFHLFNBQ3ZDLEdBQUcsS0FKSGx1RCxPQUFPK0csU0FBUzJELEtBQU93akQsRUFBb0IsTUFNbkQsT0FDRSxHQUFHQSxFQUEwQixjQUFvQyxHQUEvQkEsRUFBMEIsYUFBVSxDQUN4RS9nRCxZQUFhZ25CLEdBQWdCLEdBQzdCLElBQUlLLEVBQWlCLENBQ3JCQSxrQkFBbUMsR0FDbkNBLEVBQWdCQyxZQUFjTixFQUM5QkssRUFBZ0JFLFVBQVl3NUIsRUFBNEIsZUFDckRBLEVBQTRCLGdCQUMzQnY1QixHQUFpQkgsRUFFekIsTUFBUzA1QixFQUF5QixhQUFtQyxHQUE5QkEsRUFBeUIsYUFDNURodUQsRUFBUSxlQUNSQSxFQUFRbUQsR0FFYSxvQkFBWDJFLFVBQ045SCxFQUFRLDJCQUNSczdDLEdBQXNCbjRDLEdBQU8sRUFBT0gsTUFBTXN6QyxHQUFJbHFDLEtBQUssU0FHdkRhLFlBQWFnbkIsRUFFckIsRUFJU2hoQixHQUFULFNBQVNBLEVBQXVCOVAsR0FDNUIsSUFDSStxRCxFQUFRLEdBQ1JDLEVBRmlCbnJELE1BQU0sZ0NBQWdDRyxFQUFPbUosVUFBVSxLQUVoREYsS0FBSyxxQkFFUCxZQUF0QmpKLEVBQU82UCxhQUFtRCxZQUF0QjdQLEVBQU82UCxjQUMzQ203QyxFQUFXLElBRWYsSUFBSUMsRUFBUyxnQkFDVEMsRUFBVSxtQkFBbUJsckQsRUFBT21KLFVBRXhDLFFBQXFCLElBQVg2aEQsR0FBNEMsV0FBWEEsRUFBYyxDQUNyRCxPQUFRQSxHQUNKLElBQUssUUFDREQsRUFBUXByRCxLQUFLLElBQUl3ckQsTUFBTSxNQUFTeHVELE9BQU8rMkIsV0FBYS8yQixPQUFPODJCLFlBQVl3M0IsRUFBU0MsSUFDaEYsTUFDSixJQUFLLGFBQ0RILEVBQVFwckQsS0FBSyxJQUFJeXJELFVBQVVILEVBQVNDLElBQ3BDLE1BQ0osSUFBSyxPQUNESCxFQUFRcHJELEtBQUssSUFBSTByRCxNQUFNSixFQUFTQyxJQUNoQ0gsRUFBUUEsRUFBUXR0RCxPQUFTLEdBQUdtd0IsT0FDNUIsTUFDSixJQUFLLE9BQ0RtOUIsRUFBUXByRCxLQUFLLElBQUkyckQsTUFBTXgyQyxTQUFTLEtBQU9uWSxPQUFPKzJCLFdBQWEvMkIsT0FBTzgyQixhQUFhdzNCLEVBQVNDLElBQ3hGSCxFQUFRQSxFQUFRdHRELE9BQVMsR0FBRzh0RCxRQUM1QixNQUNKLElBQUssT0FDRFIsRUFBUXByRCxLQUFLLElBQUk2ckQsS0FBSyxLQUFLUCxFQUFTQyxJQUNwQyxNQUNKLElBQUssV0FDRE8sY0FBY1IsRUFBU0MsR0FHL0IsR0FBYSxjQUFWRixFQUNDbnJELE1BQU0sSUFBSW9yRCxFQUFTLG1CQUFtQmpyRCxFQUFPbUosVUFBVSxLQUFLbU0sSUFBSSxVQUFVLFNBRXpFLEdBQWEsUUFBVjAxQyxHQUE4QixTQUFWQSxFQUN4Qm5yRCxNQUFNLElBQUlvckQsRUFBUyxtQkFBbUJqckQsRUFBT21KLFVBQVUsS0FBS21NLElBQUksVUFBVSxRQUN6RSxDQUNELElBQUlvMkMsRUFBMkMsWUFBdEIxckQsRUFBTzZQLFlBQTZCLEVBQUksU0FDaUMsSUFBeEZoUSxNQUFNLDJDQUEyQ0csRUFBT21KLFVBQVUsS0FBS0YsS0FBSyxlQUdpQixJQUF4RnBKLE1BQU0sMkNBQTJDRyxFQUFPbUosVUFBVSxLQUFLRixLQUFLLFdBQWdKLEdBQXJIcEosTUFBTSwyQ0FBMkNHLEVBQU9tSixVQUFVLEtBQUtGLEtBQUssU0FBU3pDLFFBQVEsdUJBRi9Na2xELEVBQW9CLElBTXhCN3JELE1BQU0sSUFBSW9yRCxFQUFTLG1CQUFtQmpyRCxFQUFPbUosVUFBVSxLQUFLbU0sSUFBSSxVQUFVbzJDLEVBQzlFLENBQ0FubEQsYUFBWSxXQUNKMUcsTUFBTSxvQkFBb0JHLEVBQU9tSixXQUFXMUwsUUFDNUNxUyxFQUF1QjlQLEVBQy9CLEdBQUUsR0FFTixDQUdKLEVBc0NTd1QsR0FBVCxTQUE4QnhQLEdBQzFCbkUsTUFBTSxRQUFRdVUsT0FBT3BRLEVBQUt1UCwyQkFBMkJvNEMsY0FDekQsRUF3Q0s1NkMsR0FBVCxTQUFnQzY2QyxHQUU1QixJQURBLElBQUlDLEVBQVUsSUFDTHQ2QyxFQUFJLEVBQUdBLEVBQUk1VSxPQUFPb0UsZUFBZXRELE9BQVE4VCxJQUFLLENBQ25ELElBQUlwRCxFQUFNeFIsT0FBT29FLGVBQWVvTixJQUFJb0QsR0FDaENwRCxFQUFJdkssU0FBU2dvRCxLQUNiQyxHQUFXMTlDLEVBQUksSUFBSXhSLE9BQU9vRSxlQUFlQyxRQUFRbU4sR0FBSyxJQUU5RCxDQUNBLE9BQU8wOUMsRUFBUWoxQyxNQUFNLEdBQUksRUFDN0IsRUFsdVpJamEsT0FBT0MsWUFBYSxFQUdwQixJQUFJaUUsR0FBZSxJQUFJbU8sT0FJbkI5TCxHQUFXLEdBQ1g0NUMsR0FBVyxzQkFDWDdvQyxHQUFhLEdBQ2JuWCxHQUFNLE1BQ05ndkQsR0FBYSx1Q0FFakIsR0FBZ0MsaUJBQTVCbnZELE9BQU8rRyxTQUFTaWdELFNBRWhCMXZDLEdBREEvUSxHQUFXLDRCQUVULEdBQTBDLFNBQXRDdkcsT0FBTytHLFNBQVNpZ0QsU0FBUy9zQyxPQUFPLEdBQ3RDMVQsR0FBVyxXQUFXdkcsT0FBTytHLFNBQVNpZ0QsU0FDdEMxdkMsR0FBYS9RLEdBQ1ZuRyxHQUFrQix1QkFDakJrWCxHQUFhLFdBQWFqVixHQUFnQixxQkFDMUNrRSxHQUFXLFdBQWFsRSxHQUFnQiwyQkFFMUMsR0FBVyxPQUFQbEMsSUFBc0QsU0FBdENILE9BQU8rRyxTQUFTaWdELFNBQVMvc0MsT0FBTyxHQUFjLENBRXBFLElBQUltMUMsR0FBb0IsV0FBYXB2RCxPQUFPK0csU0FBU2lnRCxTQUMvQ3FJLEdBQVMsSUFBSXAvQyxnQkFBZ0JqUSxPQUFPK0csU0FBU29ELFFBQy9Da2xELEdBQU9DLElBQUksT0FDWEYsR0FBb0IsV0FBYUMsR0FBTy9vRCxJQUFJLE9BQ3RDbEcsR0FBa0IsdUJBRXpCZ3ZELEdBQW9CLFdBQWEvc0QsR0FBZ0Isc0JBR3BEa0UsR0FBVzZvRCxHQUNYOTNDLEdBQWE4M0MsR0FFaUIsZUFBMUJwdkQsT0FBTytHLFNBQVNpZ0QsV0FFaEIxdkMsR0FEQS9RLEdBQVcsMkJBR25CLEtBQWlCLE9BQVBwRyxLQUNOb0csR0FBVywwQkFDWCtRLEdBQWEsdUJBR2pCLElBS0lqVSxHQUxBbVUsR0FBV2pSLEdBSVhtM0IsR0FBZ0IsNEJBRWhCRCxHQUFpQiwwQkFHakJoSSxHQUF1Qix5ZEFDdkJTLEdBQTBCLGtkQUMxQk4sR0FBbUIsb1NBQ25CNEgsR0FBYyw2S0FBNktsbUIsR0FBVyxnR0FJdE11cEMsR0FBZTdnRCxPQUFPb2dDLE9BQU9tdkIsV0FDN0J4TyxHQUFnQi9nRCxPQUFPODJCLFlBRXZCa0QsR0FBeUIsSUFDekJDLEdBQTBCLElBRTFCQyxHQUFtQixLQUNuQkMsR0FBb0IsSUFDcEJDLEdBQXNCLElBQ3RCQyxHQUFzQixHQUN0QkMsR0FBc0IsSUFFdEJVLEdBQXdCLElBQ3hCQyxHQUF5QixJQUV6QlIsR0FBcUIsSUFDckJGLEdBQXVCLElBQ3ZCQyxHQUFzQixJQUN0QkUsR0FBdUIsSUFDdkJDLEdBQXdCLElBQ3hCQyxHQUF3QixHQUN4QkMsR0FBeUIsR0FFekJDLEdBQXFCLElBQ3JCQyxHQUFzQixLQUV0QkcsR0FBd0IsS0FDeEJDLEdBQXlCLEtBQ3pCQyxHQUEwQmdGLE9BQU9yTyxNQUNqQ3NKLEdBQTJCK0UsT0FBT2xpQixPQUVsQzBkLEdBQXNCLElBQ3RCQyxHQUF1QixJQUV2QkMsR0FBd0IsSUFDeEJDLEdBQXlCLElBRXpCQyxHQUF5QixJQUN6QkMsR0FBeUIsR0FFekJWLEdBQXVCLElBQ3ZCRCxHQUFzQixJQUN0QkcsR0FBeUIsR0FDekJELEdBQXdCLEdBR3hCRyxHQUF5QixJQUN6QkQsR0FBd0IsSUFFeEJRLEdBQTBCLElBQzFCQyxHQUEyQixJQUMzQkMsR0FBMEIsSUFDMUJDLEdBQTJCLElBQzNCQyxHQUEwQixJQUMxQkMsR0FBMkIsSUFDM0JDLEdBQTBCLElBQzFCQyxHQUEyQixJQUMzQkMsR0FBMEIsSUFDMUJDLEdBQTJCLElBQzNCQyxHQUEwQixJQUMxQkMsR0FBMkIsSUFDM0JDLEdBQTBCLElBQzFCQyxHQUEyQixJQUkzQmpMLEdBQWMsSUFBSXpmLE9BSXJCK2pDLEdBQXNCLEVBQ3ZCcDJDLE9BQU9zZ0MseUJBQXlCdGdDLE9BQU9zZ0Msd0JBQXlCdGdDLE9BQU9zZ0MsdUJBQ3ZFdGdDLE9BQU91WCxvQkFBb0J2WCxPQUFPdVgsbUJBQW9CdlgsT0FBT3VYLGtCQUM3RHZYLE9BQU9pRiw4QkFBOEJqRixPQUFPaUYsNkJBQThCakYsT0FBT2lGLDRCQUNqRmpGLE9BQU9rTSx5QkFBeUJsTSxPQUFPa00sd0JBQXlCbE0sT0FBT2tNLHVCQUN2RWxNLE9BQU95Uix5QkFBeUJ6UixPQUFPeVIsd0JBQXlCelIsT0FBT3lSLHVCQUN2RXpSLE9BQU8yVyxzQkFBd0IzVyxPQUFPMlcsc0JBQXdCM1csT0FBTzJXLHNCQUF3QixLQUM3RjNXLE9BQU9pTSxpQkFBbUJqTSxPQUFPaU0saUJBQW1Cak0sT0FBT2lNLGlCQUFtQixLQUM5RWpNLE9BQU82ZSx1QkFBeUI3ZSxPQUFPNmUsdUJBQXlCN2UsT0FBTzZlLHVCQUF5QixLQUNoRzdlLE9BQU93dkQsdUJBQXVCeHZELE9BQU93dkQsc0JBQXVCeHZELE9BQU93dkQscUJBQ25FeHZELE9BQU91VCx5QkFBeUJ2VCxPQUFPdVQsd0JBQXlCdlQsT0FBT3VULHVCQUN2RXZULE9BQU8wWCx1QkFBdUIxWCxPQUFPMFgsc0JBQXVCMVgsT0FBTzBYLHFCQUNuRSxJQUFJMFAsR0FBZ0MsQ0FBQyxFQUVqQ216QixHQUFpQixHQUNqQi95QixHQUFtQixHQUd2QnhuQixPQUFPMmlDLG9CQUFzQixFQUU3QixJQUFJak0sR0FBeUIsSUFFekIxbEIsR0FBYyxHQUNkRSxHQUFtQixHQUNuQjBtQixHQUFrQixFQUVsQjlELEdBQWUsQ0FDZixrQkFBc0IsQ0FBQzd0QixLQUFLLFlBQzVCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLGtCQUFzQixDQUFDQSxLQUFLLGNBQzVCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLGtCQUFzQixDQUFDQSxLQUFLLGNBQzVCLGtCQUFzQixDQUFDQSxLQUFLLGNBQzVCLGtCQUFzQixDQUFDQSxLQUFLLGNBQzVCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLGtCQUFzQixDQUFDQSxLQUFLLGNBQzVCLGtCQUFzQixDQUFDQSxLQUFLLFlBQzVCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLG1CQUF1QixDQUFDQSxLQUFLLGNBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLG1CQUF1QixDQUFDQSxLQUFLLFlBQzdCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGVBQW1CLENBQUNBLEtBQUssWUFDekIsZUFBbUIsQ0FBQ0EsS0FBSyxZQUN6QixlQUFtQixDQUFDQSxLQUFLLFlBQ3pCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGdCQUFvQixDQUFDQSxLQUFLLFlBQzFCLGFBQWlCLENBQUNBLEtBQUssY0FDdkIsYUFBaUIsQ0FBQ0EsS0FBSyxjQUN2QixhQUFpQixDQUFDQSxLQUFLLGNBQ3ZCLGFBQWlCLENBQUNBLEtBQUssY0FDdkIsYUFBaUIsQ0FBQ0EsS0FBSyxjQUN2QixhQUFpQixDQUFDQSxLQUFLLGNBQ3ZCLGFBQWlCLENBQUNBLEtBQUssY0FDdkIsYUFBaUIsQ0FBQ0EsS0FBSyxjQUN2QixhQUFpQixDQUFDQSxLQUFLLGNBQ3ZCLGNBQWtCLENBQUNBLEtBQUssY0FDeEIsY0FBa0IsQ0FBQ0EsS0FBSyxjQUN4QixjQUFrQixDQUFDQSxLQUFLLGNBQ3hCLGNBQWtCLENBQUNBLEtBQUssY0FDeEIsY0FBa0IsQ0FBQ0EsS0FBSyxjQUN4QixjQUFrQixDQUFDQSxLQUFLLGNBQ3hCLGNBQWtCLENBQUNBLEtBQUssY0FDeEIsY0FBa0IsQ0FBQ0EsS0FBSyxjQUN4QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxjQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxjQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxjQUM1QixrQkFBc0IsQ0FBQ0EsS0FBSyxZQUM1QixtQkFBdUIsQ0FBQ0EsS0FBSyxZQUM3QixtQkFBdUIs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azovLy8uL3Jlc291cmNlcy9qcy9waXhlbC9waXhlbC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiLyoqXG4gKiBGaWxlOiBwaXhlbE9yaWdpbmFsLmpzXG4gKlxuICogSGFuZGxlIHBvcHVwIHNuaXBldCBzY3JpcHRcbiAqXG4gKiBDaHJvbm9sb2dpY2FsIG1haW4gZnVuY3Rpb24gb3JkZXI6XG4gKlxuICogMS4gQW5vbnltb3VzIGZ1bmN0aW9uIGxpbmUgLSAxMDFcbiAqIDIuIHBvcHRpbkluaXQoKVxuICogMy4gcG9wdGluRGVwZW5kZW50RnVuY3Rpb24oKVxuICogNC4gZ2V0R2VvTG9jYXRpb24oKVxuICogNS4gcG9wdGluSW5pdGlhdGUoKVxuICogNi4gaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuICogNy4gc2V0UG9wdGluVHJpZ2dlcih0aGlzKVxuICogOC4gc2V0UG9wdGluKClcbiAqIDkuIHNob3dQb3B0aW4oKVxuICogMTAuIHBvcHRpbk5ld3NUaWNrZXIoKVxuICogMTEuIHBvcHRpblZpZXdlZCgpXG4gKiAxMi4gcG9wdGluQ29udmVyc2lvbigpXG4gKiAxMy4gY2xvc2VQb3B0aW4oKVxuICogMTQuIGFuaW1hdGVCdXR0b24oKVxuXG4gKlxuICogTWFpbDogICAgZGFuaUBwb3B0aW4uY29tXG4gKlxuICovXG5pZih3aW5kb3cucGl4ZWxBZGRlZCA9PT0gdW5kZWZpbmVkKXtcbiAgICB3aW5kb3cucGl4ZWxBZGRlZCA9IHRydWU7XG5cbiAgICAvLyBTYXZlIGhyZWYgcXVlcnkgZGF0YVxuICAgIHZhciBxdWVyeV9zdHJpbmcgPSBuZXcgT2JqZWN0KCk7XG4gICAgLy92YXIgcG9wdGluX2FjdGl2ZSA9IHRydWU7XG5cbiAgICAvLyBTZXQgcG9wdGlucyBVUkxcbiAgICB2YXIgYXBpX2xpbmsgPSBcIlwiO1xuICAgIHZhciBhcHBfbGluayA9IFwiaHR0cHM6Ly9hcHAucG9wdC5pblwiO1xuICAgIHZhciBjZG5fc2VydmVyID0gXCJcIjtcbiAgICB2YXIgZW52ID0gXCJhcHBcIjtcbiAgICB2YXIgV0lYX0FQUF9JRCA9IFwiZmEwMjA1ZjItY2E2My00MjA0LTlhMDQtNzM0OWJmMzE0MTdkXCI7XG5cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09IFwiMTkyLjE2OC4xMC4xMFwiKXtcbiAgICAgICAgYXBpX2xpbmsgPSBcImh0dHA6Ly8xOTIuMTY4LjEwLjEwXCI7XG4gICAgICAgIGNkbl9zZXJ2ZXIgPSBhcGlfbGluaztcbiAgICB9ZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNsaWNlKC01KSA9PSBcIi50ZXN0XCIpe1xuICAgICAgICBhcGlfbGluayA9IFwiaHR0cHM6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG4gICAgICAgIGNkbl9zZXJ2ZXIgPSBhcGlfbGluaztcbiAgICAgICAgaWYocG9wdGluQ2hlY2tDb29raWUoXCJwb3B0aW5fY2RuX3NlcnZlclwiKSkge1xuICAgICAgICAgICAgY2RuX3NlcnZlciA9IFwiaHR0cHM6Ly9cIiArIHBvcHRpbkdldENvb2tpZShcInBvcHRpbl9jZG5fc2VydmVyXCIpO1xuICAgICAgICAgICAgYXBpX2xpbmsgPSBcImh0dHBzOi8vXCIgKyBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fY2RuX3NlcnZlclwiKTtcbiAgICAgICAgfVxuICAgIH1lbHNlIGlmIChlbnYgPT0gXCJkZXZcIiAmJiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc2xpY2UoLTUpICE9IFwiLnRlc3RcIil7XG4gICAgICAgIC8vIHZhciBwb3B0aW5fY2RuX3NlcnZlciA9IFwiaHR0cHM6Ly9kZXYyLmRldi5wb3B0LmluXCI7XG4gICAgICAgIHZhciBwb3B0aW5fY2RuX3NlcnZlciA9IFwiaHR0cHM6Ly9cIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxuICAgICAgICBpZiAocGFyYW1zLmhhcygnY2RuJykpIHtcbiAgICAgICAgICAgIHBvcHRpbl9jZG5fc2VydmVyID0gXCJodHRwczovL1wiICsgcGFyYW1zLmdldCgnY2RuJyk7XG4gICAgICAgIH0gZWxzZSBpZihwb3B0aW5DaGVja0Nvb2tpZShcInBvcHRpbl9jZG5fc2VydmVyXCIpKSB7XG4gICAgICAgICAgICAvLyBwb3B0aW5fY2RuX3NlcnZlciA9IFwiaHR0cHM6Ly9kZXYyLmRldi5wb3B0LmluXCJcbiAgICAgICAgICAgcG9wdGluX2Nkbl9zZXJ2ZXIgPSBcImh0dHBzOi8vXCIgKyBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fY2RuX3NlcnZlclwiKVxuICAgICAgICB9XG5cbiAgICAgICAgYXBpX2xpbmsgPSBwb3B0aW5fY2RuX3NlcnZlcjtcbiAgICAgICAgY2RuX3NlcnZlciA9IHBvcHRpbl9jZG5fc2VydmVyO1xuXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU9PVwicG9wYWdlcy5jb21cIil7XG4gICAgICAgICAgICBhcGlfbGluayA9ICdodHRwczovL2RldjIuZGV2LnBvcHQuaW4nO1xuICAgICAgICAgICAgY2RuX3NlcnZlciA9IGFwaV9saW5rO1xuICAgICAgICB9XG4gICAgfWVsc2UgaWYgKGVudiA9PSBcImFwcFwiKXtcbiAgICAgICAgYXBpX2xpbmsgPSBcImh0dHBzOi8vZGlzcGxheS5wb3B0LmluXCI7XG4gICAgICAgIGNkbl9zZXJ2ZXIgPSBcImh0dHBzOi8vY2RuLnBvcHQuaW5cIjtcbiAgICB9XG5cbiAgICB2YXIgY3NzX2xpbmsgPSBhcGlfbGluaztcblxuICAgIC8vIHZhciBhcGlfbGluayA9IFwiaHR0cDovL3N0YWdnaW5nRGlzcGxheUxCMi0xOTQ0NTgwMTcudXMtd2VzdC0yLmVsYi5hbWF6b25hd3MuY29tXCI7XG4gICAgLy8gdmFyIHMzX2xpbmsgPSBcImh0dHBzOi8vczMtdXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vYXBwLnBvcHQuaW5cIjtcbiAgICB2YXIgcG9wdGluX2lsX3VybCA9IFwiaHR0cHM6Ly93d3cucG9wdGluLmNvLmlsL1wiO1xuICAgIHZhciBwb3B0aW47XG4gICAgdmFyIHBvcHRpbl9jb21fdXJsID0gXCJodHRwczovL3d3dy5wb3B0aW4uY29tL1wiO1xuXG4gICAgLy8gU2V0IEhUTUwgY29tcG9uZW50c1xuICAgIHZhciBodG1sX3BvcHRpbl94X2J1dHRvbiA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImNsb3NlWEJ1dHRvblwiIG9uY2xpY2s9XCJjbG9zZVBvcHRpbk9uWGNsaWNrKHRoaXMpO1wiIGNsYXNzPVwiY2xvc2UteC1idXR0b25cIiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0OyBtYXJnaW4tdG9wOiAtMnB4Oy13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtjdXJzb3I6IHBvaW50ZXI7YmFja2dyb3VuZDogMCAwO2JvcmRlcjogMDtmbG9hdDogcmlnaHQ7cGFkZGluZzowcHg7Zm9udC1zaXplOiAyMHB4O2xpbmUtaGVpZ2h0OiAwLjU7Y29sb3I6ICMwMDA7dGV4dC1zaGFkb3c6ICNmZmYgMHB4IDBweCAxMHB4O2ZpbHRlcjogYWxwaGEob3BhY2l0eT0yMCk7dGV4dC10cmFuc2Zvcm06IG5vbmU7b3ZlcmZsb3c6IHZpc2libGU7bWFyZ2luOiAwO2ZvbnQtc2l6ZTo1M3B4O2xpbmUtaGVpZ2h0OiAzMXB4O3otaW5kZXg6IDk5OTk7cG9zaXRpb246IHJlbGF0aXZlO1wiPiZ0aW1lczs8L2J1dHRvbj4nO1xuICAgIHZhciBodG1sX3BvcHRpbl9za2lwX2J1dHRvbiA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImNsb3NlU2tpcEJ1dHRvblwiIG9uY2xpY2s9XCJjbG9zZVBvcHRpbk9uWGNsaWNrKHRoaXMpO1wiIGNsYXNzPVwiY2xvc2UteC1idXR0b25cIiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0OyBtYXJnaW4tdG9wOiAtMnB4Oy13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtwYWRkaW5nOiA1cHg7Y3Vyc29yOiBwb2ludGVyO2JhY2tncm91bmQ6IDAgMDtib3JkZXI6IDA7ZmxvYXQ6IHJpZ2h0O2ZvbnQtc2l6ZTogMjVweDtsaW5lLWhlaWdodDogMC41O2NvbG9yOiAjMDAwO3RleHQtc2hhZG93OiAwIDFweCAwICNmZmY7ZmlsdGVyOiBhbHBoYShvcGFjaXR5PTIwKTtvcGFjaXR5OiAwLjc7dGV4dC10cmFuc2Zvcm06IG5vbmU7b3ZlcmZsb3c6IHZpc2libGU7bWFyZ2luOiAwO2ZvbnQtd2VpZ2h0OmJvbGQ7ei1pbmRleDogOTk5OTtwb3NpdGlvbjogcmVsYXRpdmU7XCI+U2tpcDwvYnV0dG9uPic7XG4gICAgdmFyIGh0bWxfYnV0dG9uX25vdGUgPSAnPGRpdiBpZD1cImNsb3NlQnV0dG9uTm90ZVwiIGNsYXNzPVwiY2xvc2UtYnV0dG9uLW5vdGVcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTt0ZXh0LWFsaWduOiBjZW50ZXI7cGFkZGluZzogOXB4IDE0cHg7cG9zaXRpb246IGFic29sdXRlO3RvcDogLTY1cHg7cmlnaHQ6MHB4O2JhY2tncm91bmQ6IHdoaXRlO2JvcmRlci1yYWRpdXM6IDZweDt3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7bWF4LXdpZHRoOiAyMDBweDtib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLC4yKTtvcGFjaXR5OiAxO3otaW5kZXg6ODk5OVwiPjwvZGl2PidcbiAgICB2YXIgaHRtbF9jcmVkaXQgPSAnPGRpdiBjbGFzcz1cInBvcHRpbi1jcmVkaXRcIiBzdHlsZT1cInotaW5kZXg6MTAwMDAwO3Bvc2l0aW9uOiBhYnNvbHV0ZTtib3R0b206IDBweDtsZWZ0OiAwcHg7bGluZS1oZWlnaHQ6IDBweDtcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cucG9wdGluLmNvLmlsXCIgdGFyZ2V0PVwiX0JMQU5LXCI+PGltZyBzcmM9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvaW1hZ2VzL2NyZWRpdC5wbmdcIiBhbHQ9XCJQb3dlcmVkIGJ5IHBvcHRpblwiIHN0eWxlPVwid2lkdGg6IDExOHB4O2hlaWdodDogMjBweDtcIj48L2E+PC9kaXY+JztcbiAgICAvL3ZhciByZWRpcmVjdCA9IG5ldyBBcnJheSgpO1xuXG4gICAgLy8gU2V0IHBvcHRpbnMgc2l6ZSBhbmQgcG9zaXRpb25cbiAgICB2YXIgc2NyZWVuX3dpZHRoID0gd2luZG93LnNjcmVlbi5hdmFpbFdpZHRoO1xuICAgIHZhciBzY3JlZW5faGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgdmFyIGxpdGdodGJveF9wb3B0aW5fd2lkdGggPSA4MDA7XG4gICAgdmFyIGxpdGdodGJveF9wb3B0aW5faGVpZ2h0ID0gNTAwO1xuXG4gICAgdmFyIGJhcl9wb3B0aW5fd2lkdGggPSAxOTIwO1xuICAgIHZhciBiYXJfcG9wdGluX2hlaWdodCA9IDEwMDtcbiAgICB2YXIgYmFyX3BvcHRpbl9oZWlnaHRfMiA9IDE5NztcbiAgICB2YXIgYmFyX3BvcHRpbl9oZWlnaHRfNCA9IDUwO1xuICAgIHZhciBiYXJfcG9wdGluX2hlaWdodF81ID0gMTA1O1xuXG4gICAgdmFyIGJyb3dzaW5nX3BvcHRpbl93aWR0aCA9IDI4NTtcbiAgICB2YXIgYnJvd3NpbmdfcG9wdGluX2hlaWdodCA9IDE4NjtcblxuICAgIHZhciBzc2lkZV9wb3B0aW5fd2lkdGggPSA1MDA7XG4gICAgdmFyIHNzaWRlX3BvcHRpbl93aWR0aF8yID0gMzAwO1xuICAgIHZhciBzc2lkZV9wb3B0aW5faGVpZ2h0ID0gMjAwO1xuICAgIHZhciBzc2lkZV9wb3B0aW5fd2lkdGhfNCA9IDMwMDtcbiAgICB2YXIgc3NpZGVfcG9wdGluX2hlaWdodF80ID0gNDUwO1xuICAgIHZhciBzc2lkZV9wb3B0aW5fd2lkdGhfMTkgPSA3MDtcbiAgICB2YXIgc3NpZGVfcG9wdGluX2hlaWdodF8xOSA9IDcwO1xuXG4gICAgdmFyIGJzaWRlX3BvcHRpbl93aWR0aCA9IDQwMjtcbiAgICB2YXIgYnNpZGVfcG9wdGluX2hlaWdodCA9IDEwODA7XG5cbiAgICB2YXIgZnVsbHBhZ2VfcG9wdGluX3dpZHRoID0gMTkyMDtcbiAgICB2YXIgZnVsbHBhZ2VfcG9wdGluX2hlaWdodCA9IDEwODA7XG4gICAgdmFyIGZ1bGxwYWdlX3BvcHRpbl93aWR0aF8yID0gc2NyZWVuLndpZHRoO1xuICAgIHZhciBmdWxscGFnZV9wb3B0aW5faGVpZ2h0XzIgPSBzY3JlZW4uaGVpZ2h0O1xuXG4gICAgdmFyIG1vYmlsZV9wb3B0aW5fd2lkdGggPSA0ODM7XG4gICAgdmFyIG1vYmlsZV9wb3B0aW5faGVpZ2h0ID0gMTUwO1xuXG4gICAgdmFyIG1vYmlsZV9wb3B0aW5fd2lkdGhfMiA9IDM5MDtcbiAgICB2YXIgbW9iaWxlX3BvcHRpbl9oZWlnaHRfMiA9IDI0MjtcblxuICAgIHZhciBtb2JpbGVfcG9wdGluX2hlaWdodF80ID0gMTAwO1xuICAgIHZhciBtb2JpbGVfcG9wdGluX2hlaWdodF81ID0gNzU7XG5cbiAgICB2YXIgc29jaWFsX3BvcHRpbl9oZWlnaHQgPSAyMTQ7XG4gICAgdmFyIHNvY2lhbF9wb3B0aW5fd2lkdGggPSAzNDA7XG4gICAgdmFyIHNvY2lhbF9wb3B0aW5faGVpZ2h0XzIgPSA3MDtcbiAgICB2YXIgc29jaWFsX3BvcHRpbl93aWR0aF8yID0gNzA7XG4gICAgdmFyIHNvY2lhbF9wb3B0aW5faGVpZ2h0XzMgPSA3MDtcbiAgICB2YXIgc29jaWFsX3BvcHRpbl93aWR0aF8zID0gNzA7XG4gICAgdmFyIHNvY2lhbF9wb3B0aW5faGVpZ2h0XzQgPSAzMDA7XG4gICAgdmFyIHNvY2lhbF9wb3B0aW5fd2lkdGhfNCA9IDMwMDtcblxuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMSA9IDM2NTtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF8xID0gMzcwO1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMiA9IDc3MDtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF8yID0gMTYwO1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMyA9IDM3MDtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF8zID0gNjM1O1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNCA9IDM3MDtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF80ID0gNTcwO1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNSA9IDMzNTtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF81ID0gNTIwO1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNiA9IDc3MDtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF82ID0gMTkyO1xuICAgIHZhciBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNyA9IDgwMDtcbiAgICB2YXIgZW1iZWRkZWRfcG9wdGluX2hlaWdodF83ID0gNTAwO1xuXG4gICAgdmFyIHJlc3BvbnNpdmVfZnVsbHBhZ2VfaGVpZ2h0ID0gZmFsc2U7XG4gICAgdmFyIHJlc3BvbnNpdmVfZnVsbHBhZ2Vfd2lkdGggPSBmYWxzZTtcbiAgICB2YXIgcG9wdGluX3NpemUgPSBuZXcgT2JqZWN0KCk7XG4gICAgdmFyIHBvcHRpbl9wb3NpdGlvbjtcbiAgICB2YXIgcmVkaXJlY3RfZmxhZyA9IGZhbHNlO1xuICAgIHZhciBpc19yZXN0cmljdGVkID1mYWxzZTtcblx0dmFyIGRlZmF1bHRfY2xvc2VfZGVsYXkgPSA0OyAvLyBzZWNvbmRzXG4gICAgd2luZG93LnBvcHRpbl9sb2FkY29udHJvbF9maXggPSB3aW5kb3cucG9wdGluX2xvYWRjb250cm9sX2ZpeCA/IHdpbmRvdy5wb3B0aW5fbG9hZGNvbnRyb2xfZml4IDogZmFsc2U7XG4gICAgd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZhID0gd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZhID8gd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZhIDogZmFsc2U7XG4gICAgd2luZG93LnBvcHRpbl9kaXNhYmxlX2xvY2Fsc3RvcmFnZSA9IHdpbmRvdy5wb3B0aW5fZGlzYWJsZV9sb2NhbHN0b3JhZ2UgPyB3aW5kb3cucG9wdGluX2Rpc2FibGVfbG9jYWxzdG9yYWdlIDogZmFsc2U7XG4gICAgd2luZG93LnBvcHRpbl9zaW5nbGVfcGFnZV9hcHAgPSB3aW5kb3cucG9wdGluX3NpbmdsZV9wYWdlX2FwcCA/IHdpbmRvdy5wb3B0aW5fc2luZ2xlX3BhZ2VfYXBwIDogZmFsc2U7XG4gICAgd2luZG93LmxhbmRpbmdfcGFnZV90ZWFzZXJfb24gPSB3aW5kb3cubGFuZGluZ19wYWdlX3RlYXNlcl9vbiA/IHdpbmRvdy5sYW5kaW5nX3BhZ2VfdGVhc2VyX29uIDogZmFsc2U7XG4gICAgd2luZG93LnVwZ3JhZGVfcG9wdXBfc2V0dGluZyA9IHdpbmRvdy51cGdyYWRlX3BvcHVwX3NldHRpbmcgPyB3aW5kb3cudXBncmFkZV9wb3B1cF9zZXR0aW5nIDogbnVsbDtcbiAgICB3aW5kb3cucHJldmlvdXNfdXJsX3NwYSA9IHdpbmRvdy5wcmV2aW91c191cmxfc3BhID8gd2luZG93LnByZXZpb3VzX3VybF9zcGEgOiBudWxsO1xuICAgIHdpbmRvdy5wb3B0aW5UaW1lRGVsYXlUcmlnZ2VyID0gd2luZG93LnBvcHRpblRpbWVEZWxheVRyaWdnZXIgPyB3aW5kb3cucG9wdGluVGltZURlbGF5VHJpZ2dlciA6IG51bGw7XG4gICAgd2luZG93LnBvcHRpbkV4aXRQb3B1cFNob3duID0gd2luZG93LnBvcHRpbkV4aXRQb3B1cFNob3duID8gd2luZG93LnBvcHRpbkV4aXRQb3B1cFNob3duIDogZmFsc2U7XG4gICAgd2luZG93LnBvcHRpbl9kaXNwbGF5X3RyaWdnZXIgPSB3aW5kb3cucG9wdGluX2Rpc3BsYXlfdHJpZ2dlciA/IHdpbmRvdy5wb3B0aW5fZGlzcGxheV90cmlnZ2VyIDogZmFsc2U7XG4gICAgd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZvbnRzID0gd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZvbnRzID8gd2luZG93LnBvcHRpbl9kaXNhYmxlX2ZvbnRzIDogZmFsc2U7XG4gICAgdmFyIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlT2JqID0ge307XG5cbiAgICB2YXIgcG9wdGluVmlld2RBcnIgPSBbXTtcbiAgICB2YXIgcG9wdGluQW5pbWF0ZVRhYiA9IFtdO1xuXG5cbiAgICB3aW5kb3cudXBkYXRlQ2xvY2tJbnRlcnZhbCA9IDA7XG4gICAgLy92YXIgc29jaWFsUHJvb2ZJbnRlcnZhbCA9IG5ldyBPYmplY3QoKTtcbiAgICB2YXIgcG9wdGluX2FuaW1hdGlvbl9zcGVlZCA9IDMwMDsgLy8gUG9wdGluIHNob3cgYW5pbWF0aW9uIHNwZWVkXG5cdC8vIHZhciBjb3VudHJ5ID0gbmV3IE9iamVjdCgpOyAvLyBTYXZlIHVzZXIgbG9jYXRpb24gZGF0YVxuICAgIHZhciBwb3BfY291bnRyeSA9IFwiXCI7IC8vIFNhdmUgdXNlciBsb2NhdGlvbiBkYXRhXG4gICAgdmFyIHBvcF9jb3VudHJ5X2NvZGUgPSBcIlwiOyAvLyBTYXZlIHVzZXIgbG9jYXRpb24gZGF0YVxuICAgIHZhciBzaG93UG9wdGluQ291bnQgPSAwO1xuXG4gICAgdmFyIGZpZWxkX2Rlc2luZyA9IHtcbiAgICAgICAgJ2Jyb3dzaW5nX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnYnJvd3NpbmdfZm9ybWF0XzInIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdicm93c2luZ19mb3JtYXRfMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2JzaWRlX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnYnNpZGVfZm9ybWF0XzInIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdic2lkZV9mb3JtYXRfMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2JzaWRlX2Zvcm1hdF80JyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnYnNpZGVfZm9ybWF0XzUnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdic2lkZV9mb3JtYXRfNicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2JzaWRlX2Zvcm1hdF83JyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnYnNpZGVfZm9ybWF0XzgnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdic2lkZV9mb3JtYXRfOScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzInIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8zJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF81JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfNicgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzcnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfOCcgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzknIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfMTAnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8xMScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzEyJyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfMTMnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfMTQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8xNScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbGlnaHRib3hfZm9ybWF0XzE2JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfMTcnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdsaWdodGJveF9mb3JtYXRfMTgnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8xOScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8yMCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8yMScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2xpZ2h0Ym94X2Zvcm1hdF8yMicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnc3NpZGVfZm9ybWF0XzInIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdzc2lkZV9mb3JtYXRfMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF80JyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnc3NpZGVfZm9ybWF0XzUnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdzc2lkZV9mb3JtYXRfNicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF83JyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnc3NpZGVfZm9ybWF0XzgnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdzc2lkZV9mb3JtYXRfOScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xMCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xMScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xMicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xNCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xNScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xNicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xNycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xOCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NzaWRlX2Zvcm1hdF8xOScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfMScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfMicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfNCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfNScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfNicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfNycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ3NvY2lhbF9mb3JtYXRfOCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnYmFyX2Zvcm1hdF8yJyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdiYXJfZm9ybWF0XzMnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfNCcgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnYmFyX2Zvcm1hdF81JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdiYXJfZm9ybWF0XzYnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfNycgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnYmFyX2Zvcm1hdF84JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdiYXJfZm9ybWF0XzknIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTAnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTEnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTInIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTMnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTUnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTYnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Jhcl9mb3JtYXRfMTcnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnZnVsbHBhZ2VfZm9ybWF0XzInIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdmdWxscGFnZV9mb3JtYXRfMycgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnZnVsbHBhZ2VfZm9ybWF0XzQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF81JyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnZnVsbHBhZ2VfZm9ybWF0XzYnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdmdWxscGFnZV9mb3JtYXRfNycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF84JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdmdWxscGFnZV9mb3JtYXRfOScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF8xMCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF8xMScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2Z1bGxwYWdlX2Zvcm1hdF8xMicgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfMScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF8yJyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdtb2JpbGVfZm9ybWF0XzMnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdtb2JpbGVfZm9ybWF0XzQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfNScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF82JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdtb2JpbGVfZm9ybWF0XzcnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfOCcgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfOScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF8xMCcgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF8xMScgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF8xMicgOiB7dHlwZTonaG9yaXpvbnRhbCd9LFxuICAgICAgICAnbW9iaWxlX2Zvcm1hdF8xMycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfMTQnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfMTUnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfMTYnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ21vYmlsZV9mb3JtYXRfMTcnIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2VtYmVkZGVkX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnZW1iZWRkZWRfZm9ybWF0XzInIDoge3R5cGU6J2hvcml6b250YWwnfSxcbiAgICAgICAgJ2VtYmVkZGVkX2Zvcm1hdF8zJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnZW1iZWRkZWRfZm9ybWF0XzQnIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdlbWJlZGRlZF9mb3JtYXRfNScgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2VtYmVkZGVkX2Zvcm1hdF82JyA6IHt0eXBlOidob3Jpem9udGFsJ30sXG4gICAgICAgICdlbWJlZGRlZF9mb3JtYXRfNycgOiB7dHlwZTondmVydGljYWwnfSxcbiAgICAgICAgJ2dhbWlmaWVkX2Zvcm1hdF8xJyA6IHt0eXBlOid2ZXJ0aWNhbCd9LFxuICAgICAgICAnZ2FtaWZpZWRfZm9ybWF0XzInIDoge3R5cGU6J3ZlcnRpY2FsJ30sXG4gICAgICAgICdnYW1pZmllZF9mb3JtYXRfMycgOiB7dHlwZTondmVydGljYWwnfVxuICAgIH1cblxuICAgIC8vIFRoZSBqUXVlcnkgcHJpbWFyeSBpbnN0YW5jZVxuXHR3aW5kb3cualEyMjQgPSBudWxsO1xuXG5cbiAgICBcbiAgICAvLyBTYXZlIHBvcHRpbnMgZGF0YVxuICAgIHZhciBwb3B0aW5zID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIGFsbF9wb3B0aW5zO1xuICAgIHZhciBjbGlja19wb3B0aW5zID0gbmV3IE9iamVjdCgpO1xuXG4gICAgLy8gRGVib3VuY2UgdmFyaWFibGVcbiAgICB2YXIgaXNfc3VibWl0X3BvcHRpbl9ydW4gPSB0cnVlO1xuICAgIHZhciBzdWJtaXRfcG9wdGluX2Rpc2FibGVfaW50ZXJ2YWwgPSAyMDAwO1xuXG4gICAgLy8gQ29tbW9uIGZsYWdzXG4gICAgdmFyIGlmQW5kcm9pZFBvcHRpbiA9ICggL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB2YXIgaXNJcGhvbmVQb3B0aW4gPSAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgaXNGaXJlZm94UG9wdGluID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xO1xuICAgIHZhciBpc0Nocm9tZVBvcHRpbiA9IC9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgL0dvb2dsZSBJbmMvLnRlc3QobmF2aWdhdG9yLnZlbmRvcik7XG4gICAgdmFyIGlzU2FmYXJpUG9wdGluID0gbmF2aWdhdG9yLnZlbmRvciAmJiBuYXZpZ2F0b3IudmVuZG9yLmluZGV4T2YoJ0FwcGxlJykgPiAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Z4aU9TJykgPT0gLTE7XG4gICAgdmFyIGlmTW9iaWxlUG9wdGluID0gKC9hbmRyb2lkfHdlYm9zfGlwaG9uZXxpcGFkfGlwb2R8YmxhY2tiZXJyeXxpZW1vYmlsZXxvcGVyYSBtaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpKTtcbiAgICB2YXIgaWZfZGlzcGxheT0gZmFsc2U7XG4gICAgdmFyIGlmX2h0bWxfcGFkPWZhbHNlO1xuICAgIHZhciB1c2VyX2xhbmcgPSBcImVuXCI7XG4gICAgdmFyIGlmX2ZyZWVtaXVtPW51bGw7XG4gICAgd2luZG93LnBvcHRpblN1Ym1pdHRlZCA9IG5ldyBBcnJheSgpO1xuICAgIHZhciBuZXdTY2FsZVRpbWVvdXQgPSBuZXcgQXJyYXkoKTtcblxuICAgIHZhciBwb3B0aW5WYWxpZGF0aW9uTG9hZGVkID0gZmFsc2U7XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBtdWx0eS1sYW5nIG1lc3NhZ2VcbiAgICAvLyB2YXIgc2tpcF9lbiA9IFwiQXJlIHlvdSBzdXJlP1wiO1xuICAgIC8vIHZhciBza2lwX2hlID0gXCLXlNeQ150g15DXqteUINeR15jXldeXP1wiO1xuICAgIHZhciBza2lwX2VuID0gXCJTa2lwXCI7XG4gICAgdmFyIHNraXBfaGUgPSBcIteT15zXklwiO1xuICAgIHZhciBjb3BpZWRfZW4gPSBcIkNvcGllZFwiO1xuICAgIHZhciBjb3BpZWRfaGUgPSBcIteU15XXoteq16dcIjtcblxuICAgIC8vIGZhY2Vib29rX21lc3Nhbmdlcl9rZXlcbiAgICB2YXIgZmFjZWJvb2tfbWVzc2FuZ2VyX2RhdGFfcmVmID0gJyc7XG5cbiAgICB2YXIgZnJfdGVtcGxhdGVzID0geydtb2JpbGUnOjUsJ2Z1bGxwYWdlJzo0LCdicm93c2luZyc6MSwnc3NpZGUnOjQsJ2JzaWRlJzozLCdzb2NpYWwnOjQsJ2Jhcic6NSwnbGlnaHRib3gnOjZ9XG5cbiAgICB2YXIgdXJsX2NvbnZlcnNpb25fcXVlcnkgPSAnJztcbiAgICAvLyBzZXQgYW5kIGluaXQgUG9wdGluIENvb2tpZXNcbiAgICAvL3ZhciBQQyA9IG5ldyBQb3B0aW5Db29raWVzKCk7XG4gICAgLy9QQy5pbml0KCk7XG5cblx0dmFyIGN1cnJfeWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcblxuXHR2YXIgcG9wX2RheXMgPSB7XG5cdFx0XCJlblwiOiBbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXSxcblx0XHRcImhlXCI6IFtcIteZ15XXnSDXqNeQ16nXldefXCIgLFwi15nXldedINep16DXmVwiICxcIteZ15XXnSDXqdec15nXqdeZXCIgLFwi15nXldedINeo15HXmdei15lcIiAsXCLXmdeV150g15fXnteZ16nXmVwiICxcIteZ15XXnSDXqdeZ16nXmVwiICxcIteZ15XXnSDXqdeR16pcIl1cblx0fVxuXG5cdHZhciBwb3BfbW9udGhzID0ge1xuXHRcdFwiZW5cIjogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG5cdFx0XCJoZVwiOiBbXCLXmdeg15XXkNeoXCIsIFwi16TXkdeo15XXkNeoXCIsIFwi157XqNelXCIsIFwi15DXpNeo15nXnFwiLCBcItee15DXmVwiLCBcIteZ15XXoNeZXCIsIFwi15nXldec15lcIiwgXCLXkNeV15LXldeh15hcIiwgXCLXodek15jXnteR16hcIiwgXCLXkNeV16fXmNeV15HXqFwiLCBcIteg15XXkdee15HXqFwiLCBcIteT16bXnteR16hcIl1cblx0fVxuXG5cdHZhciBwcmV2X21vbiA9IG5ldyBEYXRlKCk7XG5cdHByZXZfbW9uLnNldE1vbnRoKHByZXZfbW9uLmdldE1vbnRoKCktMSk7XG5cdHByZXZfbW9uID0ge1xuXHRcdFwiZW5cIjogcG9wX21vbnRoc1tcImVuXCJdW3ByZXZfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwiaGVcIjogcG9wX21vbnRoc1tcImhlXCJdW3ByZXZfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwieHhcIjogcHJldl9tb24udG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSlcblx0fVxuXG5cdHZhciBjdXJyX21vbiA9IG5ldyBEYXRlKCk7XG5cdGN1cnJfbW9uID0ge1xuXHRcdFwiZW5cIjogcG9wX21vbnRoc1tcImVuXCJdW2N1cnJfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwiaGVcIjogcG9wX21vbnRoc1tcImhlXCJdW2N1cnJfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwieHhcIjogY3Vycl9tb24udG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSlcblx0fVxuXG5cdHZhciBuZXh0X21vbiA9IG5ldyBEYXRlKCk7XG5cdG5leHRfbW9uLnNldE1vbnRoKG5leHRfbW9uLmdldE1vbnRoKCkrMSk7XG5cdG5leHRfbW9uID0ge1xuXHRcdFwiZW5cIjogcG9wX21vbnRoc1tcImVuXCJdW25leHRfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwiaGVcIjogcG9wX21vbnRoc1tcImhlXCJdW25leHRfbW9uLmdldE1vbnRoKCldLFxuXHRcdFwieHhcIjogbmV4dF9tb24udG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSlcblx0fVxuXG5cdHZhciB5ZXN0X2RheSA9IG5ldyBEYXRlKCk7XG5cdHllc3RfZGF5LnNldERhdGUoeWVzdF9kYXkuZ2V0RGF0ZSgpLTEpO1xuXHR2YXIgeWVzdF9kbXkgPSB5ZXN0X2RheS5nZXREYXRlKCkrJy8nKyB5ZXN0X2RheS5nZXRNb250aCgpKycvJyt5ZXN0X2RheS5nZXRGdWxsWWVhcigpO1xuXHR2YXIgeWVzdF9tZHkgPSB5ZXN0X2RheS5nZXRNb250aCgpKycvJysgeWVzdF9kYXkuZ2V0RGF0ZSgpKycvJyt5ZXN0X2RheS5nZXRGdWxsWWVhcigpO1xuXHR5ZXN0X2RheSA9IHtcblx0XHRcImVuXCI6IHBvcF9kYXlzW1wiZW5cIl1beWVzdF9kYXkuZ2V0RGF5KCldLFxuXHRcdFwiaGVcIjogcG9wX2RheXNbXCJoZVwiXVt5ZXN0X2RheS5nZXREYXkoKV0sXG5cdH1cblxuXHR2YXIgdG9kYXlfZGF5ID0gbmV3IERhdGUoKTtcblx0dG9kYXlfZGF5LnNldERhdGUodG9kYXlfZGF5LmdldERhdGUoKSk7XG5cdHZhciB0b2RheV9kbXkgPSB0b2RheV9kYXkuZ2V0RGF0ZSgpKycvJysgdG9kYXlfZGF5LmdldE1vbnRoKCkrJy8nK3RvZGF5X2RheS5nZXRGdWxsWWVhcigpO1xuXHR2YXIgdG9kYXlfbWR5ID0gdG9kYXlfZGF5LmdldE1vbnRoKCkrJy8nKyB0b2RheV9kYXkuZ2V0RGF0ZSgpKycvJyt0b2RheV9kYXkuZ2V0RnVsbFllYXIoKTtcblx0dG9kYXlfZGF5ID0ge1xuXHRcdFwiZW5cIjogcG9wX2RheXNbXCJlblwiXVt0b2RheV9kYXkuZ2V0RGF5KCldLFxuXHRcdFwiaGVcIjogcG9wX2RheXNbXCJoZVwiXVt0b2RheV9kYXkuZ2V0RGF5KCldLFxuXHR9XG5cblx0dmFyIHRvbW9fZGF5ID0gbmV3IERhdGUoKTtcblx0dG9tb19kYXkuc2V0RGF0ZSh0b21vX2RheS5nZXREYXRlKCkrMSk7XG5cdHZhciB0b21vX2RteSA9IHRvbW9fZGF5LmdldERhdGUoKSsnLycrIHRvbW9fZGF5LmdldE1vbnRoKCkrJy8nK3RvbW9fZGF5LmdldEZ1bGxZZWFyKCk7XG5cdHZhciB0b21vX21keSA9IHRvbW9fZGF5LmdldE1vbnRoKCkrJy8nKyB0b21vX2RheS5nZXREYXRlKCkrJy8nK3RvbW9fZGF5LmdldEZ1bGxZZWFyKCk7XG5cdHRvbW9fZGF5ID0ge1xuXHRcdFwiZW5cIjogcG9wX2RheXNbXCJlblwiXVt0b21vX2RheS5nZXREYXkoKV0sXG5cdFx0XCJoZVwiOiBwb3BfZGF5c1tcImhlXCJdW3RvbW9fZGF5LmdldERheSgpXSxcblx0fVxuXG5cdC8vUHJlLWRlZmluZWQgYXJyYXkgb2YgbWVyZ2UgdGFnc1xuXHR2YXIgZGVmaW5lZF90YWdfYXJyID0gW1xuXHRcdHt0YWdfaW5wdXQ6J2N1cnJfeWVhcicsIHByZToxLCB2YWx1ZTpjdXJyX3llYXJ9LFxuXHRcdHt0YWdfaW5wdXQ6J3ByZXZfbW9uJywgcHJlOjIsIHZhbHVlOnByZXZfbW9ufSxcblx0XHR7dGFnX2lucHV0OidjdXJyX21vbicsIHByZToyLCB2YWx1ZTpjdXJyX21vbiB9LFxuXHRcdHt0YWdfaW5wdXQ6J25leHRfbW9uJywgcHJlOjIsIHZhbHVlOm5leHRfbW9uIH0sXG5cdFx0e3RhZ19pbnB1dDoneWVzdF9kYXknLCBwcmU6MiwgdmFsdWU6eWVzdF9kYXkgfSxcblx0XHR7dGFnX2lucHV0Oid0b2RheV9kYXknLCBwcmU6MiwgdmFsdWU6dG9kYXlfZGF5IH0sXG5cdFx0e3RhZ19pbnB1dDondG9tb19kYXknLCBwcmU6MiwgdmFsdWU6dG9tb19kYXkgfSxcblx0XHR7dGFnX2lucHV0Oid5ZXN0X2RteScsIHByZToxLCB2YWx1ZTp5ZXN0X2RteSB9LFxuXHRcdHt0YWdfaW5wdXQ6J3llc3RfbWR5JywgcHJlOjEsIHZhbHVlOnllc3RfbWR5IH0sXG5cdFx0e3RhZ19pbnB1dDondG9kYXlfZG15JywgcHJlOjEsIHZhbHVlOnRvZGF5X2RteSB9LFxuXHRcdHt0YWdfaW5wdXQ6J3RvZGF5X21keScsIHByZToxLCB2YWx1ZTp0b2RheV9tZHkgfSxcblx0XHR7dGFnX2lucHV0Oid0b21vX2RteScsIHByZToxLCB2YWx1ZTp0b21vX2RteSB9LFxuXHRcdHt0YWdfaW5wdXQ6J3RvbW9fbWR5JywgcHJlOjEsIHZhbHVlOnRvbW9fbWR5IH1cblx0XVxuXG4gICAgdmFyIHNob3BpZnlfcHJpY2VfcnVsZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHNob3dMb2coLi4ubWVzc2FnZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGVudiAhPVwiYXBwXCIgfHwgcG9wdGluQ2hlY2tDb29raWUoXCJwb3B0aW5fZW5hYmxlX2NvbnNvbGVfbWVzc2FnZXNcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxlckxpbmUgPSBzdGFjay5zcGxpdChcIlxcblwiKVsyXTsgLy8gR2V0cyB0aGUgc3BlY2lmaWMgc3RhY2sgbGluZVxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZENhbGxlckxpbmUgPSBjYWxsZXJMaW5lLnRyaW0oKS5yZXBsYWNlKC9eYXRcXHMrLywgJycpOyAvLyBGb3JtYXQgdGhlIHN0cmluZ1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyguLi5tZXNzYWdlLCAnXFxuQ2FsbGVkIGZyb206JywgZm9ybWF0dGVkQ2FsbGVyTGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBwcmV2aWV3IHBvcHRpbiBJRFxuICAgIHZhciBwcmV2aWV3UG9wdGluSWQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmdldCgncHB0LXByZXZpZXcnKTtcblxuICAgIC8vIFN0b3JlIGludGVncmF0aW9uIChTaG9waWZ5IHwgV2l4KVxuICAgIHZhciBzdG9yZV9pbnRlZ3JhdGlvbiA9IG51bGw7XG4gICAgdmFyIHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkID0gbnVsbDtcblxuICAgIC8vR2V0IHNob3BpZnkgY3VzdG9tZXIgaWRcbiAgICB2YXIgc2hvcGlmeV9jdXN0b21lcl9pZCA9IDA7XG4gICAgaWYgKHdpbmRvdy5TaG9waWZ5QW5hbHl0aWNzKSB7XG4gICAgICAgIHN0b3JlX2ludGVncmF0aW9uID0gJ3Nob3BpZnknO1xuICAgICAgICBzaG9waWZ5X2N1c3RvbWVyX2lkID0gc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UuY3VzdG9tZXJJZDtcbiAgICAgICAgaWYgKHR5cGVvZiBzaG9waWZ5X2N1c3RvbWVyX2lkID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzaG9waWZ5X2N1c3RvbWVyX2lkID0gc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cud2l4RGV2ZWxvcGVyc0FuYWx5dGljcyAhPSd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN0b3JlX2ludGVncmF0aW9uID0gJ3dpeCc7XG5cbiAgICAgICAgYXR0ZW1wV2l4TG9naW4oKTtcblxuICAgICAgICB3aW5kb3cud2l4RGV2ZWxvcGVyc0FuYWx5dGljcy5yZWdpc3RlcihXSVhfQVBQX0lELCBmdW5jdGlvbiByZXBvcnQoZXZlbnROYW1lLCBldmVudERhdGEpIHtcbiAgICAgICAgICAgIHN3aXRjaChldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdDdXN0b21FdmVudCc6XG4gICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50RGF0YS5ldmVudEFjdGlvbi50cmltKCkgPT0gXCJMb2cgaW4gU3VibWl0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYXR0ZW1wV2l4TG9naW4sIDIwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1ZpZXdDb250ZW50JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50RGF0YS5vcmlnaW4gPT0gJ1N0b3JlcycgJiYgZXZlbnREYXRhLmlkICYmIGV2ZW50RGF0YS5uYW1lKSB7IC8vIHZpZXcgc3RvcmUgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgd2l4QnJvd3NlQWJhbmRvbm1lbnQoZXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdBZGRUb0NhcnQnOlxuICAgICAgICAgICAgICAgICAgICBpZigoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fd2l4X2NhcnRfaWQnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX3dpeF9jYXJ0X2lkJykgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl93aXhfY2FydF9pZCcpICE9IGV2ZW50RGF0YS5jYXJ0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncG9wdGluX3dpeF9jYXJ0X2lkJywgZXZlbnREYXRhLmNhcnRJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2l4Q2FydFRyaWdnZXIoZXZlbnREYXRhLCAnYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1JlbW92ZUZyb21DYXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgd2l4Q2FydFRyaWdnZXIoZXZlbnREYXRhLCAncmVtb3ZlJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIYW5kbGUgZGVmYXVsdCBldmVudCB3aXRoIHRoaXMgZXZlbnQgbmFtZScsIGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIYW5kbGUgZGVmYXVsdCBldmVudCB3aXRoIHRoaXMgZXZlbnQgZGF0YScsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgd2l4X2N1c3RvbWVyX2lkID0gMDtcbiAgICAgICAgZnVuY3Rpb24gYXR0ZW1wV2l4TG9naW4oKSB7XG4gICAgICAgICAgICB2YXIgdXJsT3JpZ2luID0gZG9jdW1lbnQubG9jYXRpb24uaG9zdDtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJlclJlc3BvbnNlID0gZmV0Y2goYGh0dHBzOi8vJHt1cmxPcmlnaW59L19hcGkvYXBwcy9jdXJyZW50LW1lbWJlci8ke1dJWF9BUFBfSUR9YCkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdtZW1iZXInKSAmJiByZXNwb25zZS5tZW1iZXIuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgcmVzcG9uc2UubWVtYmVyLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpeF9jdXN0b21lcl9pZCA9IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkID0gcmVzcG9uc2UubWVtYmVyLmlkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpeF9jdXN0b21lcl9pZCA9IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2l4Q2FydFRyaWdnZXIocHJvZHVjdCwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYXJ0IHRyaWdnZXIgdHJpZ2dlcmVkJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYXJ0IHRyaWdnZXJfcG9wdGlucycsIHdpeF9jYXJ0X3RyaWdnZXJfcG9wdGlucyk7XG5cbiAgICAgICAgdmFyIHByb2R1Y3RPYmogPSB7XG4gICAgICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0LmlkLFxuICAgICAgICAgICAgcHJvZHVjdF9uYW1lOiBwcm9kdWN0Lm5hbWUsXG4gICAgICAgICAgICBjYXRlZ29yeTogcHJvZHVjdC5jYXRlZ29yeSxcbiAgICAgICAgfTtcblxuICAgICAgICAgdmFyIHdpeENhcnRQcm9kdWN0QXJyPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJykgPyBKU09OLnBhcnNlKHBvcHRpbkdldENvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJykpIDogW107XG5cbiAgICAgICAgIGlmIChhY3Rpb24gPT0gXCJhZGRcIikge1xuICAgICAgICAgICAgIHZhciB0b3RhbENhcnRWYWx1ZSA9IHBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fd2l4X2NhcnRfdG90YWxfdmFsdWUnKSA/IHBhcnNlRmxvYXQocG9wdGluR2V0Q29va2llKCdwb3B0aW5fd2l4X2NhcnRfdG90YWxfdmFsdWUnKSkgOiAwO1xuICAgICAgICAgICAgIHRvdGFsQ2FydFZhbHVlID0gdG90YWxDYXJ0VmFsdWUgKyAocGFyc2VGbG9hdChwcm9kdWN0LnByaWNlKSAqIHByb2R1Y3QucXVhbnRpdHkpO1xuXG4gICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fd2l4X2NhcnRfdG90YWxfdmFsdWUnLCB0b3RhbENhcnRWYWx1ZSk7XG5cbiAgICAgICAgICAgICBpZiAod2l4Q2FydFByb2R1Y3RBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICBpZiAod2l4Q2FydFByb2R1Y3RBcnIuc29tZShlID0+IGUucHJvZHVjdF9pZCA9PT0gcHJvZHVjdC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBvYmpJbmRleCA9IHdpeENhcnRQcm9kdWN0QXJyLmZpbmRJbmRleCgob2JqID0+IG9iai5wcm9kdWN0X2lkID09PSBwcm9kdWN0LmlkKSk7XG4gICAgICAgICAgICAgICAgICAgICB3aXhDYXJ0UHJvZHVjdEFycltvYmpJbmRleF0uY2F0ZWdvcnkgPSBwcm9kdWN0Py5jYXRlZ29yeTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHdpeENhcnRQcm9kdWN0QXJyLnB1c2gocHJvZHVjdE9iaik7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICB3aXhDYXJ0UHJvZHVjdEFyci5wdXNoKHByb2R1Y3RPYmopO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl93aXhfY2FydF9wcm9kdWN0cycsIEpTT04uc3RyaW5naWZ5KHdpeENhcnRQcm9kdWN0QXJyKSk7XG5cbiAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdXaXggY2FydCB0cmlnZ2VyIHBvcHRpbnMgYXJlOiAnKyB3aXhfY2FydF90cmlnZ2VyX3BvcHRpbnMubGVuZ3RoKTtcbiAgICAgICAgICAgICBpZiAod2l4X2NhcnRfdHJpZ2dlcl9wb3B0aW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCh3aXhfY2FydF90cmlnZ2VyX3BvcHRpbnMsIGZ1bmN0aW9uIChpbmRleCwgcG9wdGluKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfYWN0aW9uID09IFwiYWRkZWRfcHJvZHVjdFwiICYmIHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX3Byb2R1Y3RzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMgPT0gXCJhbnlfcHJvZHVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWNpZmllZFByb2R1Y3RzQXJyID0gcG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RJbmRleCA9IHNwZWNpZmllZFByb2R1Y3RzQXJyLmZpbmRJbmRleCgob2JqID0+IG9iai5wcm9kdWN0X2lkID09PSBwcm9kdWN0LmlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0SW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGVDYXJ0SXRlbU9yQ2FydFZhbHVlQWN0aW9uIGZ1bmN0aW9uIGludm9rZWRfZnJvbV9hZGQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDYXJ0SXRlbU9yQ2FydFZhbHVlQWN0aW9uKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgdmFyIG9iakluZGV4ID0gIHdpeENhcnRQcm9kdWN0QXJyLmZpbmRJbmRleCgob2JqID0+IG9iai5wcm9kdWN0X25hbWUgPT0gcHJvZHVjdC5uYW1lKSk7XG4gICAgICAgICAgICAgaWYob2JqSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZWRQcm9kdWN0ID0gd2l4Q2FydFByb2R1Y3RBcnJbb2JqSW5kZXhdO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB3aXhDYXJ0UHJvZHVjdEFyci5zcGxpY2Uob2JqSW5kZXgsIDEpO1xuICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJywgSlNPTi5zdHJpbmdpZnkod2l4Q2FydFByb2R1Y3RBcnIpKTtcblxuICAgICAgICAgICAgIGpRMjI0LmVhY2god2l4X2NhcnRfdHJpZ2dlcl9wb3B0aW5zLCBmdW5jdGlvbiAoaW5kZXgsIHBvcHRpbikge1xuICAgICAgICAgICAgICAgICBpZigocG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfYWN0aW9uID09IFwicmVtb3ZlZF9wcm9kdWN0XCIpICYmXG4gICAgICAgICAgICAgICAgICAgICAod2l4X2NhcnRfdHJpZ2dlcl9wb3B0aW5zLmxlbmd0aCA+IDApICYmXG4gICAgICAgICAgICAgICAgICAgICAocG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ud2l4X2NhcnRfdHJpZ2dlcl9wcm9kdWN0cyA9PSBcImFueV9wcm9kdWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgIH0gIGVsc2UgaWYoKHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX3Byb2R1Y3RzID09IFwiZW1wdHlfY2FydFwiKSAmJiAod2l4Q2FydFByb2R1Y3RBcnIubGVuZ3RoIDwgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWNpZmllZFByb2R1Y3RzQXJyID0gcG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdEluZGV4ID0gc3BlY2lmaWVkUHJvZHVjdHNBcnIuZmluZEluZGV4KChvYmogPT4gb2JqLnByb2R1Y3RfaWQgPT09IHJlbW92ZWRQcm9kdWN0LnByb2R1Y3RfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvZHVjdEluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2FydEl0ZW1PckNhcnRWYWx1ZUFjdGlvbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2FydEl0ZW1PckNhcnRWYWx1ZUFjdGlvbihwb3B0aW4pIHtcbiAgICAgICAgaWYgKChwb3B0aW4ud2l4X2NhcnRfdHJpZ2dlcl9hY3Rpb24gPT0gXCJjYXJ0X2l0ZW1cIiB8fCBwb3B0aW4ud2l4X2NhcnRfdHJpZ2dlcl9hY3Rpb24gPT0gXCJjYXJ0X3ZhbHVlXCIpICYmXG4gICAgICAgICAgICBwb3B0aW4ud2l4X2NhcnRfdHJpZ2dlcl9jYXJ0X3NwZWNfZmlsdGVyICE9IG51bGwgJiZcbiAgICAgICAgICAgIHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX2NhcnRfc3BlY192YWx1ZSAhPSBudWxsKSB7XG5cbiAgICAgICAgICAgIHZhciBjYXJ0U3BlY0ZpbHRlciA9IHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX2NhcnRfc3BlY19maWx0ZXI7XG4gICAgICAgICAgICB2YXIgY2FydFNwZWNWYWx1ZSA9IHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX2NhcnRfc3BlY192YWx1ZTtcblxuICAgICAgICAgICAgdmFyIHdpeENhcnRQcm9kdWN0QXJyPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJykgPyBKU09OLnBhcnNlKHBvcHRpbkdldENvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJykpIDogW107XG5cbiAgICAgICAgICAgIHZhciBjYXJ0SXRlbU9yVmFsdWVDb3VudCA9IHBvcHRpbi53aXhfY2FydF90cmlnZ2VyX2FjdGlvbiA9PSBcImNhcnRfaXRlbVwiID8gd2l4Q2FydFByb2R1Y3RBcnIubGVuZ3RoIDogMDtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhcnRJdGVtT3JWYWx1ZUNvdW50X2lzJywgY2FydEl0ZW1PclZhbHVlQ291bnQpO1xuICAgICAgICAgICAgc3dpdGNoIChjYXJ0U3BlY0ZpbHRlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcnRJdGVtT3JWYWx1ZUNvdW50ID4gY2FydFNwZWNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXF1YWwnOlxuICAgICAgICAgICAgICAgICAgICBpZihjYXJ0SXRlbU9yVmFsdWVDb3VudCA9PSBjYXJ0U3BlY1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdncmVhdGVyX3RoYW5fb3JfZXF1YWwnOlxuICAgICAgICAgICAgICAgICAgICBpZihjYXJ0SXRlbU9yVmFsdWVDb3VudCA+PSBjYXJ0U3BlY1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2F2ZVdpeENhcnREZXRhaWxzKGNhcnREYXRhKSB7XG4gICAgICAgIGNhcnRJdGVtcyA9IFtdO1xuICAgICAgICBpZihjYXJ0RGF0YS5saW5lSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2FydEl0ZW1zID0gY2FydERhdGEubGluZUl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RfaWQ6IGl0ZW0ucm9vdENhdGFsb2dJdGVtSWQsXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RfbmFtZTogaXRlbS5wcm9kdWN0TmFtZS5vcmlnaW5hbCxcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3Byb2R1Y3RzJywgSlNPTi5zdHJpbmdpZnkoY2FydEl0ZW1zKSk7XG4gICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3dpeF9jYXJ0X3RvdGFsX3ZhbHVlJyxjYXJ0RGF0YS5zdWJ0b3RhbC5hbW91bnQpO1xuXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIHBvcHRpblZpc2libGUgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cucG9wdGluVmlzaWJsZSA9IGZ1bmN0aW9uIChwb3B0aW5faWQpe3Nob3dMb2coJ1Nob3dpbmcgJytwb3B0aW5faWQpO31cbiAgICB9XG5cbiAgICB2YXIgc2NyYXRjaFBvcHVwSW5pdGlhbFNjcm9sbFBvc2l0aW9uO1xuICAgIHZhciBzY3JhdGNoUG9wdXBBY3RpdmUgPSBmYWxzZTtcblxuICAgIC8vIEluaXRpYXRlIG11bHRpLXNlbGVjdCB2YXJzXG4gICAgdmFyIHBvcHRpbk11bHRpU2VsZWN0VGV4dHMgPSBbXTtcbiAgICB2YXIgcG9wdGluTXVsdGlTZWxlY3RWYWx1ZXMgPSBbXTtcbiAgICBcbiAgICAvKk9uIHBvcHRpbkNsb3NlKi9cbiAgICBpZih0eXBlb2Ygb25wb3B0aW5DbG9zZSAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgIHdpbmRvdy5vbnBvcHRpbkNsb3NlID0gZnVuY3Rpb24gKHBvcHRpbl9pZCl7XG4gICAgICAgICAgICBzaG93TG9nKCdDbG9zaW5nICcrcG9wdGluX2lkKTtcbiAgICAgICAgICAgIC8vIGVuYWJsZSBzY3JvbGwgZm9yIG1vYmlsZSAtIHNjcmF0Y2ggcG9wdXBcbiAgICAgICAgICAgIGlmIChpZk1vYmlsZVBvcHRpbiAmJiBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZ2FtaWZpZWRfZm9ybWF0XzJcIikge1xuICAgICAgICAgICAgICAgIGpRMjI0KCdodG1sLCBib2R5JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzY3JhdGNoUG9wdXBJbml0aWFsU2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gYmFjayB0byB3aGVyZSBpdCB3YXNcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHNjcmF0Y2hQb3B1cEluaXRpYWxTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQb3B1cEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsYW5kaW5nX3BhZ2UgID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgICAgIHZhciB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IGdldENsaWVudElkKCksXG4gICAgICAgICAgICAgICAgdXJsOiBsYW5kaW5nX3BhZ2UsXG4gICAgICAgICAgICAgICAgY29udmVydGVkX2VtYWlsOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX2NvbnZlcnRlZF9lbWFpbCcpLFxuICAgICAgICAgICAgICAgIHN0b3JlX2ludGVncmF0aW9uOiBzdG9yZV9pbnRlZ3JhdGlvbixcbiAgICAgICAgICAgICAgICBzdG9yZV9pbnRlZ3JhdGlvbl9jdXN0b21lcl9pZDogc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalEyMjQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBgJHthcGlfbGlua30vYXBpL2Rpc3BsYXkvY2xvc2VkLyR7cG9wdGluX2lkfT8ke3VybFBhcmFtcy50b1N0cmluZygpfWAsXG4gICAgICAgICAgICAgICAgYXN5bmM6dHJ1ZSxcbiAgICAgICAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHR5cGU6J2dldCcsXG4gICAgICAgICAgICB9LCBcImpzb25cIik7XG4gICAgICAgICAgICAvLyB3aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypPbiBwb3B0aW5TdWJtaXQqL1xuICAgIGlmKHR5cGVvZiBvbnBvcHRpblN1Ym1pdCAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgIHdpbmRvdy5vbnBvcHRpblN1Ym1pdCA9IGZ1bmN0aW9uIChwb3B0aW5faWQpe3Nob3dMb2coJ1N1Ym1pdHRpbmcgJytwb3B0aW5faWQpO31cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgZnVuY3Rpb25zICA6IFNjcmlwdCBsb2FkXG4gICAgICogRGVzYyAgICAgICAgICAgICAgICAgOiBHZXQgYW5kIHNldCBDbGllbnQgSUQgZnJvbSB1cmwgcXVlcnlcbiAgICAgKi9cblxuICAgIHZhciBwb3B0aW5QYWdlTG9hZGVkID0gMDtcbiAgICB3aW5kb3cucG9wdGluU3RhcnRlZCA9IHdpbmRvdy5wb3B0aW5TdGFydGVkID8gd2luZG93LnBvcHRpblN0YXJ0ZWQgOiBmYWxzZTtcbiAgICB2YXIgY2hlY2tUaW1lT3V0QXJyYXkgPSBbXTtcblx0dmFyIHNwaW5BZnRlclN1Ym1pdCA9IGZhbHNlO1xuXHR2YXIgcG9wX3VybHMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdwb3BfdXJscycpIHx8ICdbXSc7XG5cdHZhciBwb3BfbGFuZGVkX3VybCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3BvcF9sYW5kZWRfdXJsJykgfHwgJ1tdJztcblxuICAgIC8vIEZpcnN0IGZ1bmN0aW9uIHRvIHN0YXJ0IGFkZGluZyBwb3B0aW5cbiAgICBpZih0eXBlb2YgcnVuUG9wdGluTm93ICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LnJ1blBvcHRpbk5vdyA9IGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIFNob3BpZnkgQ29va2llc1xuICAgICAgICAgICAgaWYod2luZG93LlNob3BpZnkgIT09IHVuZGVmaW5lZCAmJiB3aW5kb3cuU2hvcGlmeS5zaG9wKSB7XG4gICAgICAgICAgICAgICAgaWYod2luZG93LlNob3BpZnkuY3VzdG9tZXJQcml2YWN5ICYmIHdpbmRvdy5TaG9waWZ5LmN1c3RvbWVyUHJpdmFjeS5nZXRUcmFja2luZ0NvbnNlbnQoKSA9PSBcIm5vXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zaG93TG9nKFwiRG8gbm90IGxvYWQgUG9wdGluIGFzIENvb2tpZXMgbm90IGFjY2VwdGVkIVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYod2luZG93LlNob3BpZnkuY3VzdG9tZXJQcml2YWN5ICYmIHdpbmRvdy5TaG9waWZ5LmN1c3RvbWVyUHJpdmFjeS5nZXRUcmFja2luZ0NvbnNlbnQoKSA9PSBcInllc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1blBvcHRpbk5vd1N0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvcGlmeUNvb2tpZUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHdpbmRvdy5TaG9waWZ5LmN1c3RvbWVyUHJpdmFjeSAmJiB3aW5kb3cuU2hvcGlmeS5jdXN0b21lclByaXZhY3kudXNlckNhbkJlVHJhY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzaG9waWZ5Q29va2llSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1blBvcHRpbk5vd1N0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYod2luZG93LlNob3BpZnkuY3VzdG9tZXJQcml2YWN5ICYmICF3aW5kb3cuU2hvcGlmeS5jdXN0b21lclByaXZhY3kudXNlckNhbkJlVHJhY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzaG9waWZ5Q29va2llSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuUG9wdGluTm93U3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNob3BpZnlDb29raWVJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBydW5Qb3B0aW5Ob3dTdGFydCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2YgcnVuUG9wdGluTm93U3RhcnQgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cucnVuUG9wdGluTm93U3RhcnQgPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIC8vIFJ1biB0aGlzIGZ1bmN0aW9uIG9ubHkgb25jZVxuICAgICAgICAgICAgaWYocG9wdGluU3RhcnRlZCl7IHJldHVybiBmYWxzZTsgfSBlbHNlIHsgcG9wdGluU3RhcnRlZCA9IHRydWU7IH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3J1blBvcHRpbk5vdycpO1xuICAgICAgICAgICAgdmFyIHNjcmlwdF90YWdzID0gQXJyYXkoKTtcbiAgICAgICAgICAgIHZhciBkaWRGaW5kUG9wdGluU2NyaXB0SUQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8vIElmIHNjcmlwdCB3YXMgaW5nZWN0ZWQgdmlhIHRoaXJkIHBhcnR5IGxpa2U6IFNob3BpZnksIE1hZ2VudG8gZXRjJ1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaXhlbC1zY3JpcHQtcG9wdGluJykgPT0gbnVsbCB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGl4ZWwtc2NyaXB0LXBvcHRpbicpPT0gdW5kZWZpbmVkKXtcblxuICAgICAgICAgICAgICAgIHNjcmlwdF90YWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdF90YWdzLmxlbmd0aCA7IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRVUkwgPSBzY3JpcHRfdGFnc1tpXS5zcmM7XG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRVUkwgJiYgY3VycmVudFVSTC5pbmRleE9mKFwicG9wdC5pbi9waXhlbC5qc1wiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZEZpbmRQb3B0aW5TY3JpcHRJRCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IGN1cnJlbnRVUkw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgJ3NyYycgZnJvbSB0aGUgaW5qZWN0ZWQgc2NyaXB0XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBxdWVyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaXhlbC1zY3JpcHQtcG9wdGluJykuc3JjO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiAncXVlcnknIGlzIG5vdCBlbXB0eVxuICAgICAgICAgICAgLy8gLT4gbG9vcCBxdWVyeSBhbmQgc2V0IGFsbCBxdWVyeSBwYXJhbWV0ZXJzIHRvIG9iamVjdCAncXVlcnlfc3RyaW5nJ1xuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+MCkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkuc3BsaXQoJz8nKVsxXTtcblxuICAgICAgICAgICAgICAgIC8vIElmICdxdWVyeScgaGF2ZSBvbmx5IG9uZSBwYXJhbXRlclxuICAgICAgICAgICAgICAgIGlmIChxdWVyeS5pbmRleE9mKCcmJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkuc3BsaXQoJyYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wO2k8cXVlcnkubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXIgPSBxdWVyeVtpXS5zcGxpdChcIj1cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFpclswXSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGFpclsxXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5X3N0cmluZ1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXIgPSBxdWVyeS5zcGxpdCgnPScpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFpclswXSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGFpclsxXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlfc3RyaW5nW3BhaXJbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcHRpbkluaXQoKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNob3dMb2coJ1BvcHRpbiBwaXhlbCBDb2RlIG5vdCBleGlzdCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQYWdlIGxvYWQgY2hlY2sgaWYgcG9wdGluQWZ0ZXJQYWdlTG9hZCB2YXJpYWJsZSBpcyB0cnVlXG5cbiAgICBpZih0eXBlb2YgcGFnZUxvYWRDaGVjayAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgIHdpbmRvdy5wYWdlTG9hZENoZWNrID0gZnVuY3Rpb24gKGNoZWNrQ291bnQpe1xuICAgICAgICAgICAgcG9wdGluUGFnZUxvYWRlZCsrO1xuICAgICAgICAgICAgaWYocG9wdGluUGFnZUxvYWRlZCA9PSAyKXtcbiAgICAgICAgICAgICAgICBydW5Qb3B0aW5Ob3coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNoZWNrVGltZU91dEFycmF5W2NoZWNrQ291bnRdKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgICAgICAgICAgICBjaGVja1RpbWVPdXRBcnJheVtjaGVja0NvdW50XSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcnVuUG9wdGluTm93KCk7XG4gICAgICAgICAgICAgICAgfSwxMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGN1cnJlbnRseSBvbiBsYW5kaW5nIHBhZ2Vcblx0d2luZG93LmlzUG9wdGluTGFuZGluZ1BhZ2UgPSB3aW5kb3cuaXNQb3B0aW5MYW5kaW5nUGFnZSA/IHdpbmRvdy5pc1BvcHRpbkxhbmRpbmdQYWdlIDogZmFsc2U7XG5cbiAgICAvLyBDaGVjayBpZiBwb3B0aW4gc2hvdWxkIGJlIGFkZGVkIGFmdGVyIHBhZ2UgbG9hZCBvciBpbW1lZGlhdGVseVxuICAgIC8vIHZhciBwb3B0aW5BZnRlclBhZ2VMb2FkID0gdHJ1ZTtcbiAgICB3aW5kb3cucG9wdGluQWZ0ZXJQYWdlTG9hZCA9IHdpbmRvdy5wb3B0aW5BZnRlclBhZ2VMb2FkID8gd2luZG93LnBvcHRpbkFmdGVyUGFnZUxvYWQgOiBmYWxzZTtcbiAgICBpZihwb3B0aW5BZnRlclBhZ2VMb2FkKXtcbiAgICAgICAgcG9wdGluQWZ0ZXJQYWdlTG9hZCA9IHBvcHRpbkNoZWNrQ29va2llKFwicG9wdGluQWZ0ZXJQYWdlTG9hZF9kZWJ1Z1wiKSA/IHBvcHRpbkNoZWNrQ29va2llKFwicG9wdGluQWZ0ZXJQYWdlTG9hZF9kZWJ1Z1wiKSA6IHBvcHRpbkFmdGVyUGFnZUxvYWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwb3B0aW5BZnRlclBhZ2VMb2FkJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyl7XG4gICAgICAgICAgICAgICAgcnVuUG9wdGluTm93KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93Lmhhc093blByb3BlcnR5KCdvbmxvYWQnKSl7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZUxvYWRDaGVjaygnY2hlY2sxJyk7XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlTG9hZENoZWNrKCdjaGVjazInKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBydW5Qb3B0aW5Ob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwxNTAwICogKCAocG9wdGluQWZ0ZXJQYWdlTG9hZCA9PSAnbm9KcXVlcnlVaScgfHwgcG9wdGluQWZ0ZXJQYWdlTG9hZCA9PSAnbm9Db25mbGljdCcpID8gMCA6IDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBydW5Qb3B0aW5Ob3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgZnVuY3Rpb25zICA6IFNjcmlwdCBsb2FkIGZ1bmN0aW9uXG4gICAgICogRGVzYyAgICAgICAgICAgICAgICAgOiBDaGVjayBpZiBqcXVlcnkgc2NyaXB0IGlzIGxvYWRlZCBhbmQgc2V0IGl0IHRvIGpRMjI0IHdpdGggalF1ZXJ5Lm5vQ29uZmxpY3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgOiBcInZhbHVlXCIsIFJ1biBwb3B0aW5EZXBlbmRlbnRGdW5jdGlvbigpIGFmdGVyIHNldHRpbmcgalEyMjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwb3B0aW5Jbml0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInBvcHRpbkluaXQgbG9hZGluZ1wiKTtcbiAgICAgICAgc2V0UG9wdGluU2Vzc2lvbigpO1xuICAgICAgICBzZXRDbGllbnRJZCgpO1xuXG4gICAgICAgIGpfMSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyZWQgZnVuY3Rpb25zICA6IGpfMSgpXG4gICAgICAgICAqIERlc2MgICAgICAgICAgICAgICAgIDogU2V0IGpRdWVyeS5ub0NvbmZsaWN0IHRvIGpRMjI0LiBpbiBvcmRlciB0byBoYW5kbGUgd2l0aCBudW1iZXIgb2YganF1ZXJ5IGxpYmVyYXJ5XG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgIDogUnVuIHBvcHRpbkRlcGVuZGVudEZ1bmN0aW9uKClcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHNldEooKSB7XG4gICAgICAgICAgICBqUTIyNCA9IGpRdWVyeS5ub0NvbmZsaWN0KHRydWUpO1xuICAgICAgICAgICAgalEyMjQudWkgPSB3aW5kb3cualF1ZXJ5LnVpO1xuICAgICAgICAgICAgcG9wdGluRGVwZW5kZW50RnVuY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFRyaWdnZXJlZCBmdW5jdGlvbnMgIDogal8xKClcbiAgICAgICAgICogRGVzYyAgICAgICAgICAgICAgICAgOiBTZXQgalF1ZXJ5Lm5vQ29uZmxpY3QgdG8galEyMjQuIGluIG9yZGVyIHRvIGhhbmRsZSB3aXRoIG51bWJlciBvZiBqcXVlcnkgbGliZXJhcnlcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgOiBSdW4gcG9wdGluRGVwZW5kZW50RnVuY3Rpb24oKVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gc2V0RG9sYXIoKSB7XG4gICAgICAgICAgICBqUTIyNCA9IGpRdWVyeS5ub0NvbmZsaWN0KHRydWUpO1xuICAgICAgICAgICAgalEyMjQudWkgPSAodHlwZW9mIHdpbmRvdy4kICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuJC51aSAhPT0gdW5kZWZpbmVkKSA/IHdpbmRvdy4kLnVpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgcG9wdGluRGVwZW5kZW50RnVuY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyZWQgZnVuY3Rpb25zICA6IGpfMSgpXG4gICAgICAgICAqIERlc2MgICAgICAgICAgICAgICAgIDogU2V0IGpRdWVyeS5ub0NvbmZsaWN0IHRvIGpRMjI0LiBpbiBvcmRlciB0byBoYW5kbGUgd2l0aCBudW1iZXIgb2YganF1ZXJ5IGxpYmVyYXJ5XG4gICAgICAgICAqIERlc2MgICAgICAgICAgICAgICAgIDogUnVuIHBvcHRpbkRlcGVuZGVudEZ1bmN0aW9uKClcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHNldEpRMjI0KCkge1xuICAgICAgICAgICAgalEyMjQgPSBqUXVlcnkubm9Db25mbGljdCh0cnVlKTtcbiAgICAgICAgICAgIHBvcHRpbkRlcGVuZGVudEZ1bmN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlcmVkIGZ1bmN0aW9ucyAgOiBwb3B0aW5Jbml0KClcbiAgICAgICAgICogRGVzYyAgICAgICAgICAgICAgICAgOiBDaGVjayBpZiBqcXVlcnkgc2NyaXB0IGlzIGxvYWRlZCwgYW5kIHNlbGVjdCB0aGUgcmlnaHQgalF1ZXJ5IGZ1bmN0aW9uIHRvIHNldC5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGpfMSgpe1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgIGlmKHBvcHRpbkFmdGVyUGFnZUxvYWQgJiYgKHBvcHRpbkFmdGVyUGFnZUxvYWQgPT0gJ25vQ29uZmxpY3QnIHx8IHBvcHRpbkFmdGVyUGFnZUxvYWQgPT0gJ25vSnF1ZXJ5VWknKSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B0aW5fY29weV9qcSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LiQgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRX3Zlcl9hcnIgPSAkLmZuLmpxdWVyeS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoalFfdmVyX2FyclswXSA+IDEgfHwgKGpRX3Zlcl9hcnJbMF0gPT0gMSAmJiBqUV92ZXJfYXJyWzFdID4gNykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQgPSAocG9wdGluQWZ0ZXJQYWdlTG9hZCA9PSAnbm9KcXVlcnlVaScpID8gJCA6ICQubm9Db25mbGljdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fY29weV9qcSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5qUXVlcnkgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRX3Zlcl9hcnIgPSBqUXVlcnkuZm4uanF1ZXJ5LnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqUV92ZXJfYXJyWzBdID4gMSB8fCAoalFfdmVyX2FyclswXSA9PSAxICYmIGpRX3Zlcl9hcnJbMV0gPiA3KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCA9IChwb3B0aW5BZnRlclBhZ2VMb2FkID09ICdub0pxdWVyeVVpJykgPyBqUXVlcnkgOiBqUXVlcnkubm9Db25mbGljdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fY29weV9qcSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbl9jb3B5X2pxIHx8IHBvcHRpbkFmdGVyUGFnZUxvYWQgPT0gJ25vSnF1ZXJ5VWknKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbkRlcGVuZGVudEZ1bmN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXBncmFkZSB5b3VyIGpRdWVyeSB0byBhdGxlYXN0IDEuNyB0byBzaG93IHBvcHRpbnMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LiQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy4kLnVpICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgal8yKHNldERvbGFyKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKHR5cGVvZiB3aW5kb3cualF1ZXJ5ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cualF1ZXJ5LnVpICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgal8yKHNldEopO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpfMihzZXRKUTIyNCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGVycik7XG5cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IGpRdWVyeSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGpfMihzZXRKUTIyNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlcmVkIGZ1bmN0aW9ucyAgOiBqXzEoKVxuICAgICAgICAgKiBEZXNjICAgICAgICAgICAgICAgICA6IERvd25sb2FkIGpRdWVyeSAyLjIuNCBhbmQgYXBwZW5kIGl0IHRvIGRvY3VtZW50XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBqXzIoc2V0SnF1ZXJ5KXtcblxuICAgICAgICAgICAgLy8gc2hvd0xvZygnc3RhcnQgRG93bmxvYWQganF1ZXJ5LzMuNS4wJyk7XG4gICAgICAgICAgICAgdmFyIHBvcHRpbl9qUXVlcnlfZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9wdGluX2pRdWVyeVwiKTtcbiAgICAgICAgICAgICAgICBpZihwb3B0aW5falF1ZXJ5X2VsZW0pe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvcHRpbl9qUXVlcnlcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgICAgICByLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2phdmFzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3BvcHRpbl9qUXVlcnknKTtcbiAgICAgICAgICAgICAgICByLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2pxdWVyeS8zLjUuMC9qcXVlcnkubWluLmpzXCIpO1xuICAgICAgICAgICAgICAgIHIuc2V0QXR0cmlidXRlKCdhc3luYycsJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBpZiAoci5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIiB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gXCJsb2FkZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEpxdWVyeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgci5vbmxvYWQgPSBzZXRKcXVlcnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHIpO1xuXG4gICAgICAgICAgICAvL0FkZGluZyB4aG9vayBzY3JpcHQgZm9yIGNhcnQgdGFyZWd0aW5nXG4gICAgICAgICAgICBpZih3aW5kb3cuU2hvcGlmeSE9PXVuZGVmaW5lZCAmJiB3aW5kb3cuU2hvcGlmeS5zaG9wKXtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdGluX3hob29rX2VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvcHRpbl94aG9va1wiKTtcbiAgICAgICAgICAgICAgICBpZihwb3B0aW5feGhvb2tfZWxlbSl7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9wdGluX3hob29rXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgeC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3BvcHRpbl94aG9vaycpO1xuICAgICAgICAgICAgICAgIHguc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLy91bnBrZy5jb20veGhvb2tAbGF0ZXN0L2Rpc3QveGhvb2subWluLmpzXCIpO1xuICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZCh4KTsgXG4gICAgICAgICAgICB9ICAgXG5cbiAgICAgICAgICAgIHZhciBwb3B0aW5fZ29vZ2xlYXBpc19lbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3B0aW5fZ29vZ2xlYXBpc1wiKTtcbiAgICAgICAgICAgIGlmKCFwb3B0aW5fZ29vZ2xlYXBpc19lbGVtKXtcbiAgICAgICAgICAgICAgICAvLyB2YXIgbGVmZ2FwaXMgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgbGVmZ2FwaXMuc2V0QXR0cmlidXRlKCdyZWwnLCAncHJlY29ubmVjdCcpO1xuICAgICAgICAgICAgICAgIC8vICAgICBsZWZnYXBpcy5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3BvcHRpbl9nb29nbGVhcGlzJyk7XG4gICAgICAgICAgICAgICAgLy8gICAgIGxlZmdhcGlzLnNldEF0dHJpYnV0ZSgnaHJlZicsICdodHRwczovL2ZvbnRzLnBvcHQuaW4nICk7XG4gICAgICAgICAgICAgICAgLy8gICAgIChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZChsZWZnYXBpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcG9wdGluX2Nsb3VkZmxhcmVfZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9wdGluX2Nsb3VkZmxhcmVcIik7XG4gICAgICAgICAgICBpZighcG9wdGluX2Nsb3VkZmxhcmVfZWxlbSl7XG4gICAgICAgICAgICAgICAgdmFyIGxlY2RuID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICAgICAgbGVjZG4uc2V0QXR0cmlidXRlKCdyZWwnLCAncHJlY29ubmVjdCcpO1xuICAgICAgICAgICAgICAgIGxlY2RuLnNldEF0dHJpYnV0ZSgnaWQnLCAncG9wdGluX2Nsb3VkZmxhcmUnKTtcbiAgICAgICAgICAgICAgICBsZWNkbi5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbScgKTtcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQobGVjZG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBvcHRpbl9jc3NfbGlua19lbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3B0aW5fY3NzX2xpbmtcIik7XG4gICAgICAgICAgICBpZighcG9wdGluX2Nzc19saW5rX2VsZW0pe1xuICAgICAgICAgICAgICAgIHZhciBsZWNzc19saW5rID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICAgICAgbGVjc3NfbGluay5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdwcmVjb25uZWN0Jyk7XG4gICAgICAgICAgICAgICAgbGVjc3NfbGluay5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3BvcHRpbl9jc3NfbGluaycpO1xuICAgICAgICAgICAgICAgIGxlY3NzX2xpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgY3NzX2xpbmsgKTtcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQobGVjc3NfbGluayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgZnVuY3Rpb25zICA6IHBvcHRpbkluaXQoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgICAgIDogU2V0IENsaWVudCBJRCB0byBicm93c2VyIHNlc3Npb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDbGllbnRJZCgpe1xuICAgICAgICBpZiAocXVlcnlfc3RyaW5nLmlkICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9jbGllbnRfaWRcIikgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicG9wdGluX2NsaWVudF9pZFwiLHF1ZXJ5X3N0cmluZy5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fY2xpZW50X2lkJykpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9jbGllbnRfaWQnLCBxdWVyeV9zdHJpbmcuaWQsIDM2NSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGZ1bmN0aW9ucyAgOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpLCBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSwgbW9uaXRvckVycm9yKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgICAgICA6IFJldHVybiBDbGllbnQgSUQgZnJvbSBicm93c2VyIHNlc3Npb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDbGllbnRJZCgpe1xuICAgICAgICB2YXIgY2xpZW50X2lkID0gcXVlcnlfc3RyaW5nLmlkO1xuXG4gICAgICAgIGlmIChxdWVyeV9zdHJpbmcuaWQgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fY2xpZW50X2lkXCIpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9jbGllbnRfaWRcIik7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9jbGllbnRfaWQnKSl7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudF9pZCA9IHBvcHRpbkdldENvb2tpZSgncG9wdGluX2NsaWVudF9pZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGllbnRfaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGpfMigpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJ1biBkZXBlbmRlbnQgZnVuY3Rpb25zXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwb3B0aW5EZXBlbmRlbnRGdW5jdGlvbigpe1xuICAgICAgICBzZXRTaG9waWZ5Q2FydERldGFpbHNJZlNob3BpZnkoKTtcbiAgICAgICAgc2V0UmVmZXJyZXIoKTtcbiAgICAgICAgc2V0UHJldmlvdXNVcmwoKTtcbiAgICAgICAgZGlzcGxheVBvcHRpbk9uQ2xpY2soKTtcbiAgICAgICAgb25UZXh0Q2xpY2tDbG9zZSgpO1xuICAgICAgICBwb3B0aW5Jbml0aWF0ZSgpO1xuICAgICAgICBzZXRPcmlnaW5MYW5kaW5nUGFnZSgpO1xuICAgICAgICAvL0Rvbid0IHN0b3JlIGxvY2Fsc3RvcmFnZSBpZiBwb3B0aW5fZGlzYWJsZV9sb2NhbHN0b3JhZ2UgaXMgZXQgdHJ1ZVxuICAgICAgICBpZiggIXBvcHRpbl9kaXNhYmxlX2xvY2Fsc3RvcmFnZSApe1xuICAgICAgICAgICAgc2V0UHJldmlvdXNWaXNpdGVkUGFnZXMoKTtcbiAgICAgICAgICAgIHNldFByZXZpb3VzVmlzaXRlZFBhZ2VzV2l0aFRpbWVTdGFtcCgpO1xuICAgICAgICAgICAgc2V0QWxsVmlzaXRlZFBhZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9nZXRHZW9Mb2NhdGlvbigpO1xuICAgICAgICAvLyB3aW5kb3dSZXNpemUoKTtcbiAgICAgICAgc2hvcGlmeUJyb3dzZUFiYW5kb25tZW50KCk7XG5cbiAgICAgICAgdXBkYXRlU2hvcGlmeUN1c3RvbWVyRGF0YSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3BpZnlCcm93c2VBYmFuZG9ubWVudCgpIHtcbiAgICAgICAgLy9Ccm93c2UgQWJhbmRvbm1tZW50IGZvciBzaG9waWZ5XG4gICAgICAgIHZhciBzaG9waWZ5X2N1c3RvbWVyX2lkID0gZmFsc2U7XG4gICAgICAgIGlmKHR5cGVvZiB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcyAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIHNob3BpZnlfY3VzdG9tZXJfaWQgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UuY3VzdG9tZXJJZDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hvcGlmeV9jdXN0b21lcl9pZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNob3BpZnlfY3VzdG9tZXJfaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3BpZnlfY3VzdG9tZXJfaWQgJiYgd2luZG93LlNob3BpZnlBbmFseXRpY3MubWV0YS5wYWdlLnJlc291cmNlVHlwZSA9PSBcInByb2R1Y3RcIikge1xuICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0SWQgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UucmVzb3VyY2VJZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0Q2F0ZWdvcnkgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnByb2R1Y3QudHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdE5hbWUgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnByb2R1Y3QudmFyaWFudHNbMF0ubmFtZTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdE9iaiA9IHtwcm9kdWN0X2lkOiBwcm9kdWN0SWQsIHByb2R1Y3RfbmFtZTpwcm9kdWN0TmFtZSwgY2F0ZWdvcnk6IHByb2R1Y3RDYXRlZ29yeX07XG4gICAgICAgICAgICAgICAgICAgIHZhciBicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnI9IHBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fYnJvd3NlX2FiYW5kb25tZW50X3Byb2R1Y3RzJykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShwb3B0aW5HZXRDb29raWUoJ3BvcHRpbl9icm93c2VfYWJhbmRvbm1lbnRfcHJvZHVjdHMnKSkgOiBbXTtcblxuICAgICAgICAgICAgICAgICAgIGlmIChicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFyci5zb21lKGUgPT4gZS5wcm9kdWN0X2lkID09PSBwcm9kdWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iakluZGV4ID0gYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyLmZpbmRJbmRleCgob2JqID0+IG9iai5wcm9kdWN0X2lkID09PSBwcm9kdWN0SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnJbb2JqSW5kZXhdLmNhdGVnb3J5ID0gcHJvZHVjdENhdGVnb3J5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnIucHVzaChwcm9kdWN0T2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFyci5wdXNoKHByb2R1Y3RPYmopO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fYnJvd3NlX2FiYW5kb25tZW50X3Byb2R1Y3RzJywgSlNPTi5zdHJpbmdpZnkoYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZ2V0KGFwaV9saW5rK1wiL3Nob3BpZnkvc2F2ZS9icm93c2UtYWJhbmRvbm1lbnQ/Y2xpZW50SWQ9XCIrZ2V0Q2xpZW50SWQoKStcIiZjdXN0b21lcj1cIitzaG9waWZ5X2N1c3RvbWVyX2lkLnRvU3RyaW5nKCkrXCImcHJvZHVjdHM9XCIrSlNPTi5zdHJpbmdpZnkoYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyKStcIiZkYXRhX2Zvcj1hYmFuZG9ubWVudFwiLHtcbiAgICAgICAgICAgICAgICAgICAgIH0sXCJqc29uXCIpO1xuICAgICAgICAgICAgICAgIH0sNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIEJyb3dzZSBBYmFuZG9ubW1lbnQgZm9yIHdpeFxuICAgIGZ1bmN0aW9uIHdpeEJyb3dzZUFiYW5kb25tZW50KHByb2R1Y3QgPSBudWxsKSB7XG4gICAgICAgIGlmKCFwcm9kdWN0IHx8ICFwcm9kdWN0Py5pZCB8fCAhcHJvZHVjdC5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHdpeF9jdXN0b21lcl9pZCA9PSAndW5kZWZpbmVkJyB8fCB3aXhfY3VzdG9tZXJfaWQgPT0gMCkge1xuICAgICAgICAgICAgYXR0ZW1wV2l4TG9naW4oKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCF3aXhfY3VzdG9tZXJfaWQgfHwgd2l4X2N1c3RvbWVyX2lkID09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9kdWN0T2JqID0ge1xuICAgICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdC5pZCxcbiAgICAgICAgICAgIHByb2R1Y3RfbmFtZTogcHJvZHVjdC5uYW1lLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHByb2R1Y3Q/LmNhdGVnb3J5LFxuICAgICAgICB9O1xuICAgICAgICB2YXIgYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX2Jyb3dzZV9hYmFuZG9ubWVudF9wcm9kdWN0cycpXG4gICAgICAgICAgICA/IEpTT04ucGFyc2UocG9wdGluR2V0Q29va2llKCdwb3B0aW5fYnJvd3NlX2FiYW5kb25tZW50X3Byb2R1Y3RzJykpXG4gICAgICAgICAgICA6IFtdO1xuXG4gICAgICAgIGlmIChicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFyci5zb21lKGUgPT4gZS5wcm9kdWN0X2lkID09PSBwcm9kdWN0LmlkKSkge1xuICAgICAgICAgICAgICAgIHZhciBvYmpJbmRleCA9IGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFyci5maW5kSW5kZXgoKG9iaiA9PiBvYmoucHJvZHVjdF9pZCA9PT0gcHJvZHVjdC5pZCkpO1xuICAgICAgICAgICAgICAgIGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFycltvYmpJbmRleF0uY2F0ZWdvcnkgPSBwcm9kdWN0Py5jYXRlZ29yeTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyLnB1c2gocHJvZHVjdE9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicm93c2VBYmFuZG9ubWVudFByb2R1Y3RBcnIucHVzaChwcm9kdWN0T2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX2Jyb3dzZV9hYmFuZG9ubWVudF9wcm9kdWN0cycsIEpTT04uc3RyaW5naWZ5KGJyb3dzZUFiYW5kb25tZW50UHJvZHVjdEFycikpO1xuXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGNsaWVudF9pZDogZ2V0Q2xpZW50SWQoKSxcbiAgICAgICAgICAgIGN1c3RvbWVyX2lkOiB3aXhfY3VzdG9tZXJfaWQsXG4gICAgICAgICAgICBwcm9kdWN0czogYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyLFxuICAgICAgICAgICAgc291cmNlX3RhYmxlOiAnYnJvd3NlX2FiYW5kb25tZW50JyxcbiAgICAgICAgfTtcblxuICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgIHVybDogYCR7YXBpX2xpbmt9L3dpeC9zYXZlLW9yZGVyZWQtcHJvZHVjdHNgLFxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICB9LCBcImpzb25cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlU2hvcGlmeUN1c3RvbWVyRGF0YSgpIHtcbiAgICAgICAgdmFyIHNob3BpZnlfY3VzdG9tZXJfaWQgPSBmYWxzZTtcbiAgICAgICAgaWYodHlwZW9mIHdpbmRvdy5TaG9waWZ5QW5hbHl0aWNzICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHNob3BpZnlfY3VzdG9tZXJfaWQgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UuY3VzdG9tZXJJZDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hvcGlmeV9jdXN0b21lcl9pZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNob3BpZnlfY3VzdG9tZXJfaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3BpZnlfY3VzdG9tZXJfaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX2ZldGNoX2luaXRpYWxfc2hvcGlmeV9jYXJ0X2Zvcl9maWx0ZXInKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVTaG9waWZ5UHJvZHVjdEluY2FydCgpXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX2ZldGNoX2luaXRpYWxfc2hvcGlmeV9jYXJ0X2Zvcl9maWx0ZXInLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKG5zLCBmZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZldGNoICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgbnMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGZldGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vY2FydC9hZGQuanNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L2FkZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2NhcnQvdXBkYXRlLmpzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vY2FydC91cGRhdGVgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L2NoYW5nZS5qc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2NhcnQvY2hhbmdlYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vY2FydC9jbGVhci5qc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2NhcnQvY2xlYXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMocmVzLnVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNsb25lKCkuanNvbigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlU2hvcGlmeVByb2R1Y3RJbmNhcnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0od2luZG93LCB3aW5kb3cuZmV0Y2gpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3JlU2hvcGlmeVByb2R1Y3RJbmNhcnQoKSB7XG4gICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBcIi9jYXJ0LmpzXCIsXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgIH0sIFwianNvblwiKVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdHNBcnIgPSBbXVxuICAgICAgICAgICAgICAgIHZhciB0b3RhbF9jYXJ0X3ZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICBpZihkYXRhLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChkYXRhLml0ZW1zLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0T2JqID0ge3Byb2R1Y3RfaWQ6IGl0ZW0ucHJvZHVjdF9pZC50b1N0cmluZygpLCBwcm9kdWN0X25hbWU6aXRlbS5wcm9kdWN0X3RpdGxlfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQXJyLnB1c2gocHJvZHVjdE9iaik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX2NhcnRfdmFsdWUgPSBkYXRhLnRvdGFsX3ByaWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqUTIyNC5nZXQoYXBpX2xpbmsrXCIvc2hvcGlmeS9zYXZlL2Jyb3dzZS1hYmFuZG9ubWVudD9jbGllbnRJZD1cIitnZXRDbGllbnRJZCgpK1wiJmN1c3RvbWVyPVwiK3Nob3BpZnlfY3VzdG9tZXJfaWQudG9TdHJpbmcoKStcIiZwcm9kdWN0cz1cIitKU09OLnN0cmluZ2lmeShwcm9kdWN0c0FycikrXCImZGF0YV9mb3I9Y2FydCZ0b3RhbF9jYXJ0X3ZhbHVlPVwiK3RvdGFsX2NhcnRfdmFsdWUse1xuICAgICAgICAgICAgICAgIH0sXCJqc29uXCIpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5EZXBlbmRlbnRGdW5jdGlvbigpXG4gICAgICAqIHBhcmFtZXRlcnMgICAgICAgOlxuICAgICAgKiBEZXNjICAgICAgICAgICAgIDogVGhpcyBmdW5jdGlvbiB3aWxsIHNldCBzaG9waWZ5IGNhcnQgZGV0YWlscyBpZiBwaXhlbCBydW4gb24gU2hvcGlmeVxuICAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRTaG9waWZ5Q2FydERldGFpbHNJZlNob3BpZnkoKSB7XG5cdFx0aWYod2luZG93LlNob3BpZnkgIT09IHVuZGVmaW5lZCAmJiB3aW5kb3cuU2hvcGlmeS5zaG9wKXtcblx0XHRcdGpRMjI0LmFqYXgoe1xuXHRcdFx0XHR1cmw6IHNob3BpZnlsYW5ndWFnZVJvdXRlKCkrXCJjYXJ0LmpzXCIsXG5cdFx0XHRcdHR5cGU6ICdnZXQnLFxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxuXHRcdFx0XHRhc3luYzogZmFsc2UsXG5cdFx0XHR9LCBcImpzb25cIilcblx0XHRcdC5kb25lKGZ1bmN0aW9uKGNhcnQpe1xuXHRcdFx0XHR2YXIgY2FydF92YWx1ZSA9IChjYXJ0LnRvdGFsX3ByaWNlKS8xMDA7XG5cdFx0XHRcdGRlZmluZWRfdGFnX2Fyci5wdXNoKHt0YWdfaW5wdXQ6J3NocGZ5X3ZhbHVlJywgcHJlOjEsIHZhbHVlOmNhcnRfdmFsdWV9KTtcblx0XHRcdFx0ZGVmaW5lZF90YWdfYXJyLnB1c2goe3RhZ19pbnB1dDonc2hwZnlfY291bnQnLCBwcmU6MSwgdmFsdWU6Y2FydC5pdGVtX2NvdW50fSk7XG5cblx0XHRcdFx0Ly8gR2V0IFNob3BpZnkgUHJpY2UgUnVsZXMgaWYgYW55XG5cdFx0XHRcdGpRMjI0LmFqYXgoe1xuXHRcdFx0XHRcdHVybDogYXBpX2xpbmsrXCIvYXBpL2Rpc3BsYXkvc2hvcGlmeS9nZXQtcHJpY2UtcnVsZXMvXCIrZ2V0Q2xpZW50SWQoKSxcblx0XHRcdFx0XHR0eXBlOiAnZ2V0Jyxcblx0XHRcdFx0XHRhc3luYzogZmFsc2UsXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG5cdFx0XHRcdFx0XHRzaG9waWZ5X3ByaWNlX3J1bGVzID0gcmVzLnByaWNlX3J1bGVzO1xuXHRcdFx0XHRcdFx0dmFyIG9uZV9ydWxlID0gbnVsbDtcblx0XHRcdFx0XHRcdGpRMjI0KHNob3BpZnlfcHJpY2VfcnVsZXMpLmVhY2goZnVuY3Rpb24oaWR4LCBydWxlKXtcblx0XHRcdFx0XHRcdFx0aWYoXG5cdFx0XHRcdFx0XHRcdFx0b25lX3J1bGUgPT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0XHRcdChcblx0XHRcdFx0XHRcdFx0XHRcdChydWxlLnRhcmdldF90eXBlID09IFwic2hpcHBpbmdfbGluZVwiICYmIHJ1bGUuYWxsb2NhdGlvbl9tZXRob2QgPT0gXCJlYWNoXCIpIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQocnVsZS50YXJnZXRfdHlwZSA9PSBcImxpbmVfaXRlbVwiICYmIHJ1bGUuYWxsb2NhdGlvbl9tZXRob2QgPT0gXCJhY3Jvc3NcIilcblx0XHRcdFx0XHRcdFx0XHQpICYmXG5cdFx0XHRcdFx0XHRcdFx0cnVsZS50YXJnZXRfc2VsZWN0aW9uID09IFwiYWxsXCJcblx0XHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdFx0b25lX3J1bGUgPSBydWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FydF90aHJlc2hvbGQgPSAob25lX3J1bGUgJiYgb25lX3J1bGUucHJlcmVxdWlzaXRlX3N1YnRvdGFsX3JhbmdlICYmIG9uZV9ydWxlLnByZXJlcXVpc2l0ZV9zdWJ0b3RhbF9yYW5nZS5ncmVhdGVyX3RoYW5fb3JfZXF1YWxfdG8pID8gcGFyc2VGbG9hdChvbmVfcnVsZS5wcmVyZXF1aXNpdGVfc3VidG90YWxfcmFuZ2UuZ3JlYXRlcl90aGFuX29yX2VxdWFsX3RvKSA6IDA7XG5cdFx0XHRcdFx0XHRcdFx0ZGVmaW5lZF90YWdfYXJyLnB1c2goe3RhZ19pbnB1dDonc2hwZnlfdGhyZXMnLCBwcmU6MSwgdmFsdWU6Y2FydF90aHJlc2hvbGR9KTtcblx0XHRcdFx0XHRcdFx0XHRkZWZpbmVkX3RhZ19hcnIucHVzaCh7dGFnX2lucHV0OidzaHBmeV9nYXAnLCBwcmU6MSwgdmFsdWU6Y2FydF90aHJlc2hvbGQtY2FydF92YWx1ZX0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBkb1Jlc2l6ZVBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSGFuZGxlIHBvcHRpbiBzdHlsZSBhbmQgdmlldyB0byBmaXQgdG8gYWxsIHdpbmRvdyBzY3JlZW4gc2l6ZSh3aWR0aCpoZWlnaHQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0UmVmZXJyZXIoKXtcbiAgICAgICAgdmFyIHBvcHRpbl9yZWZlcnJlciA9IChnZXRSZWZlcnJlcigpLmxlbmd0aCA+IDEpID8gZ2V0UmVmZXJyZXIoKSA6IGRvY3VtZW50LnJlZmVycmVyO1xuICAgICAgICB2YXIgcG9wdGluX3JlZmVycmVyX3Byb3RvY29sID0gKHBvcHRpbl9yZWZlcnJlciAmJiBwb3B0aW5fcmVmZXJyZXIuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSA/IFwic2VjdXJlXCIgOiAocG9wdGluX3JlZmVycmVyICYmIHBvcHRpbl9yZWZlcnJlci5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSkgPyBcInVuc2VjdXJlXCIgOiBcIlwiO1xuICAgICAgICBwb3B0aW5fcmVmZXJyZXIgPSBwb3B0aW5fcmVmZXJyZXIucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJyk7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LnJlZmVycmVyLmxlbmd0aD4xKXtcbiAgICAgICAgICAgIC8vcG9wdGluU2V0Q29va2llKCdwb3B0aW5fcmVmZXJyZXInLCBkb2N1bWVudC5yZWZlcnJlciwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9yZWZlcnJlcicsIHBvcHRpbl9yZWZlcnJlciwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICBpZihwb3B0aW5fcmVmZXJyZXJfcHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9yZWZlcnJlcl9wcm90b2NvbCcsIHBvcHRpbl9yZWZlcnJlcl9wcm90b2NvbCwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3JlZmVycmVyJywgcG9wdGluX3JlZmVycmVyLCAwLjAwMTM4ODg4ODg4ODg4ODg5KTtcbiAgICAgICAgICAgIGlmKHBvcHRpbl9yZWZlcnJlcl9wcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3JlZmVycmVyX3Byb3RvY29sJywgcG9wdGluX3JlZmVycmVyX3Byb3RvY29sLCAwLjAwMTM4ODg4ODg4ODg4ODg5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSw2MDAwMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFByZXZpb3VzUGFnZSgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHN0b3JlIHByZXZpb3VzIHBhZ2VzIHZpc2l0ZWQgYnkgdGhlIHVzZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRQcmV2aW91c1Zpc2l0ZWRQYWdlcygpe1xuICAgICAgICAgdmFyIGNsaWVudERvbWFpbiA9IChkb2N1bWVudC5yZWZlcnJlciA/ICggZG9jdW1lbnQucmVmZXJyZXIuaW5kZXhPZih3aW5kb3cubG9jYXRpb24uaG9zdCkgIT09IC0xID8gZG9jdW1lbnQucmVmZXJyZXIgOiBudWxsICkgOiBudWxsKTtcbiAgICAgICAgaWYgKGNsaWVudERvbWFpbil7XG4gICAgICAgICAgICB2YXIgcmVmZXJyZXJVcmwgPSBuZXcgVVJMKGRvY3VtZW50LnJlZmVycmVyKVxuICAgICAgICAgICAgdmFyIHJlZmVycmVyUGF0aCA9IHJlZmVycmVyVXJsLnBhdGhuYW1lICsgcmVmZXJyZXJVcmwuc2VhcmNoO1xuXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQYWdlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlcycpO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzUGFnZXMgJiYgcHJldmlvdXNQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUGFnZXNBcnJheSA9IHByZXZpb3VzUGFnZXMuc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNQYWdlc0FycmF5LmluY2x1ZGVzKHJlZmVycmVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VJbmRleCA9IHByZXZpb3VzUGFnZXNBcnJheS5pbmRleE9mKHJlZmVycmVyUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUGFnZXNBcnJheS5zcGxpY2UocGFnZUluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNQYWdlc0FycmF5LnB1c2gocmVmZXJyZXJQYXRoKTtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlcycsIHByZXZpb3VzUGFnZXNBcnJheS5qb2luKCd8JykpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BvcHRpbl9wcmV2aW91c192aXNpdGVkX3BhZ2VzJywgcmVmZXJyZXJQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFsbFZpc2l0ZWRQYWdlcygpe1xuICAgICAgICB2YXIgbG9jYXRpb25VcmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgICAgICB2YXIgYWxsVmlzaXRlZFBhZ2VzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl9hbGxfdmlzaXRlZF9wYWdlcycpO1xuICAgICAgICBpZiAoYWxsVmlzaXRlZFBhZ2VzICYmIGFsbFZpc2l0ZWRQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYWxsUGFnZXNBcnJheSA9IGFsbFZpc2l0ZWRQYWdlcy5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgaWYgKGFsbFBhZ2VzQXJyYXkuaW5jbHVkZXMobG9jYXRpb25VcmwpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VJbmRleCA9IGFsbFBhZ2VzQXJyYXkuaW5kZXhPZihsb2NhdGlvblVybCk7XG4gICAgICAgICAgICAgICAgaWYoKGFsbFBhZ2VzQXJyYXkubGVuZ3RoIC0gMSkgIT0gcGFnZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbFBhZ2VzQXJyYXkucHVzaChsb2NhdGlvblVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGxQYWdlc0FycmF5LnB1c2gobG9jYXRpb25VcmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncG9wdGluX2FsbF92aXNpdGVkX3BhZ2VzJywgYWxsUGFnZXNBcnJheS5qb2luKCd8JykpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncG9wdGluX2FsbF92aXNpdGVkX3BhZ2VzJywgbG9jYXRpb25VcmwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UHJldmlvdXNWaXNpdGVkUGFnZXNXaXRoVGltZVN0YW1wKCl7XG4gICAgICAgICB2YXIgY2xpZW50RG9tYWluID0gKGRvY3VtZW50LnJlZmVycmVyID8gKCBkb2N1bWVudC5yZWZlcnJlci5pbmRleE9mKHdpbmRvdy5sb2NhdGlvbi5ob3N0KSAhPT0gLTEgPyBkb2N1bWVudC5yZWZlcnJlciA6IG51bGwgKSA6IG51bGwpO1xuICAgICAgICBpZiAoY2xpZW50RG9tYWluKXtcbiAgICAgICAgICAgIHZhciByZWZlcnJlclVybCA9IG5ldyBVUkwoZG9jdW1lbnQucmVmZXJyZXIpXG4gICAgICAgICAgICB2YXIgcmVmZXJyZXJQYXRoID0gcmVmZXJyZXJVcmwucGF0aG5hbWUgKyByZWZlcnJlclVybC5zZWFyY2ggKyBcIjtcIiArIGdldEN1cnJlbnREYXRlVGltZSgpO1xuXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQYWdlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX3RpbWVzdGFtcCcpO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzUGFnZXMgJiYgcHJldmlvdXNQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUGFnZXNBcnJheSA9IHByZXZpb3VzUGFnZXMuc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNQYWdlc0FycmF5LmluY2x1ZGVzKHJlZmVycmVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VJbmRleCA9IHByZXZpb3VzUGFnZXNBcnJheS5pbmRleE9mKHJlZmVycmVyUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUGFnZXNBcnJheS5zcGxpY2UocGFnZUluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNQYWdlc0FycmF5LnB1c2gocmVmZXJyZXJQYXRoKTtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX3RpbWVzdGFtcCcsIHByZXZpb3VzUGFnZXNBcnJheS5qb2luKCd8JykpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BvcHRpbl9wcmV2aW91c192aXNpdGVkX3BhZ2VzX3dpdGhfdGltZXN0YW1wJywgcmVmZXJyZXJQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnREYXRlVGltZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZVBhcnRzID0gZm9ybWF0dGVyLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKGFjYywgcGFydCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdsaXRlcmFsJykge1xuICAgICAgICAgICAgICAgICAgICBhY2MucHVzaCgnLScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjYy5wdXNoKHBhcnQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWREYXRlUGFydHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RmFrZUVtYWlsRG9tYWlucygpe1xuICAgICAgICBpZighd2luZG93LmZha2VFbWFpbERvbWFpbnMpe1xuICAgICAgICAgICAgalEyMjQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vY2RuLnBvcHQuaW4vdmFsaWRhdGlvbi9lbWFpbC92YWxpZGF0aW9uLWVtYWlscy50eHRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbihkb21haW5zKXtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZmFrZUVtYWlsRG9tYWlucyA9IGRvbWFpbnMuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHNob3dMb2coXCJGYWlsZWQgdG8gZmV0Y2ggZG9tYWluc1wiLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuIFxuXG4gICAgZnVuY3Rpb24gZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXMoKXtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFsbFZpc2l0ZWRQYWdlcygpe1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl9hbGxfdmlzaXRlZF9wYWdlcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByZXZpb3VzVmlzaXRlZFBhZ2VzV2l0aFRpbWVTdGFtcCgpe1xuICAgICAgICB2YXIgY3VycmVudFBhdGhXaXRoVGltZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIFwiO1wiICsgZ2V0Q3VycmVudERhdGVUaW1lKCk7XG4gICAgICAgIHZhciBwcmV2aW91c1BhZ2VzV2l0aFRpbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX3ByZXZpb3VzX3Zpc2l0ZWRfcGFnZXNfd2l0aF90aW1lc3RhbXAnKTtcbiAgICAgICAgaWYgKHByZXZpb3VzUGFnZXNXaXRoVGltZSAmJiBwcmV2aW91c1BhZ2VzV2l0aFRpbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzUGFnZXNXaXRoVGltZUFycmF5ID0gcHJldmlvdXNQYWdlc1dpdGhUaW1lLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNQYWdlc1dpdGhUaW1lQXJyYXkuaW5jbHVkZXMoY3VycmVudFBhdGhXaXRoVGltZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZUluZGV4ID0gcHJldmlvdXNQYWdlc1dpdGhUaW1lQXJyYXkuaW5kZXhPZihjdXJyZW50UGF0aFdpdGhUaW1lKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BhZ2VzV2l0aFRpbWVBcnJheS5zcGxpY2UocGFnZUluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzUGFnZXNXaXRoVGltZUFycmF5LnB1c2goY3VycmVudFBhdGhXaXRoVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1BhZ2VzV2l0aFRpbWVBcnJheS5qb2luKCd8JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UGF0aFdpdGhUaW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXNXaXRoQ3VycmVudFBhZ2UoKXtcbiAgICAgICAgdmFyIGN1cnJlbnRQYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICB2YXIgcHJldmlvdXNQYWdlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlcycpO1xuICAgICAgICBpZiAocHJldmlvdXNQYWdlcyAmJiBwcmV2aW91c1BhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1BhZ2VzQXJyYXkgPSBwcmV2aW91c1BhZ2VzLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNQYWdlc0FycmF5LmluY2x1ZGVzKGN1cnJlbnRQYXRoKSkge1xuICAgICAgICAgICAgICAgIHZhciBwYWdlSW5kZXggPSBwcmV2aW91c1BhZ2VzQXJyYXkuaW5kZXhPZihjdXJyZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNQYWdlc0FycmF5LnNwbGljZShwYWdlSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNQYWdlc0FycmF5LnB1c2goY3VycmVudFBhdGgpO1xuXG4gICAgICAgICAgIC8vIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3B0aW5fcHJldmlvdXNfdmlzaXRlZF9wYWdlcycsIHByZXZpb3VzUGFnZXNBcnJheS5qb2luKCd8JykpO1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzUGFnZXNBcnJheS5qb2luKCd8JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc2V0UHJldmlvdXNVcmwoKXtcbiAgICAgICAgdmFyIHBvcHRpbl9wcmV2aW91c191cmwgPSAocHJldmlvdXNfdXJsX3NwYSE9bnVsbCAmJiBwb3B0aW5fc2luZ2xlX3BhZ2VfYXBwKSA/IHByZXZpb3VzX3VybF9zcGEgOiAgZG9jdW1lbnQucmVmZXJyZXI7XG4gICAgICAgIHZhciBwb3B0aW5fcHJldmlvdXNfdXJsX3Byb3RvY29sID0gKHBvcHRpbl9wcmV2aW91c191cmwgJiYgcG9wdGluX3ByZXZpb3VzX3VybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpID8gXCJzZWN1cmVcIiA6IChwb3B0aW5fcHJldmlvdXNfdXJsICYmIHBvcHRpbl9wcmV2aW91c191cmwuc3RhcnRzV2l0aChcImh0dHA6Ly9cIikpID8gXCJ1bnNlY3VyZVwiIDogXCJcIjtcbiAgICAgICAgcG9wdGluX3ByZXZpb3VzX3VybCA9IHBvcHRpbl9wcmV2aW91c191cmwucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJyk7XG5cbiAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fcHJldmlvdXNfdXJsJywgcG9wdGluX3ByZXZpb3VzX3VybCwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgIGlmKHBvcHRpbl9wcmV2aW91c191cmxfcHJvdG9jb2wpIHtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3ByZXZpb3VzX3VybF9wcm90b2NvbCcsIHBvcHRpbl9wcmV2aW91c191cmxfcHJvdG9jb2wsIDAuMDAxMzg4ODg4ODg4ODg4ODkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5EZXBlbmRlbnRGdW5jdGlvbigpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCAnYScgdGFnIGNsaWNrIGV2ZW50IHRvIHRyaWdnZXIgaW5pdGlhdGUgcG9wdGluIHB1bGwgcmVxdWVzdCBvbiBjbGljayBldmVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpc3BsYXlQb3B0aW5PbkNsaWNrKCl7XG4gICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbignbW91c2VvdmVyJywgJ2E6bm90KC5wb3B0aW4tY2xpY2spJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZiAodGhpcy5ocmVmLmluZGV4T2YoXCIvQVBJUmVxdWVzdC9jbGljay9cIikgIT09IC0xIHx8IHRoaXMuaHJlZi5pbmRleE9mKFwiL2FwaS9kaXNwbGF5L2NsaWNrL1wiKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmFkZENsYXNzKCdwb3B0aW4tY2xpY2snKTtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLWhyZWYnLCBqUTIyNCh0aGlzKS5hdHRyKCdocmVmJykpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmF0dHIoJ2hyZWYnLCAnamF2YXNjcmlwdDp2b2lkKDApOycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ2EucG9wdGluLWNsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBzaG93TG9nKCdkaXNwbGF5UG9wdGluT25DbGljaycpO1xuICAgICAgICAgICAgLy8gSWYgVVJMIGNvbnRhaW4gcG9wdGluIGF0dHJpYnVyZSAtPlxuICAgICAgICAgICAgLy8gLT4gaW5pdGlhdGUgcHVsbCBwb3B0aW4gcmVxdWVzdFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgIC8vaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtaHJlZicpLnNwbGl0KCc/JylbMF0sZmFsc2UpO1xuICAgICAgICAgICAgICAgIHBvcHRpbl9pZCA9IGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtaHJlZicpLnNwbGl0KCdjbGljay8nKVsxXTtcbiAgICAgICAgICAgICAgICBzaG93UG9wdGluT25DbGljayhwb3B0aW5faWQpO1xuICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgbW9uaXRvckVycm9yKCdkaXNwbGF5UG9wdGluT25DbGljaygpLT5lcnJvcigpJyxlcnIsJ09LJyx0aGlzLmhyZWYsZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tQb3B0aW5DbG9zZUNyaXRlcmlhKHBvcHRpbl9pZCl7XG4gICAgICAgIGlmKChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluX2lkK1wiXSAucG9wdGluX3dpbm5pbmdfc2NyZWVuLnBvcHRpbi12aXNpYmxlXCIpLmxlbmd0aCB8fCBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluX2lkK1wiXSAucG9wdGluX2xvc2luZ19zY3JlZW4ucG9wdGluLXZpc2libGVcIikubGVuZ3RoKSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfWVsc2UgaWYoalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl0gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuLnBvcHRpbi12aXNpYmxlXCIpLmxlbmd0aCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IENsaWNrIG9uIFggYnV0dG9uXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHRoaXM6b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IEhhbmRsZSBwb3B0aW4gY2xvc2Ugd2hlbiAnWCcgYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAgKi9cblxuICAgICBpZiAodHlwZW9mIGNsb3NlUG9wdGluT25YY2xpY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2luZG93LmNsb3NlUG9wdGluT25YY2xpY2sgPSBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICAgICAgIC8vIGlmICgkdGhpcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvcHRpbl9pZCA9IGpRMjI0KGV2ZW50LnRhcmdldCkucGFyZW50cygnLnBvcHRpbi1wb3B1cCcpLmF0dHIoJ2RhdGEtcG9wdGluLWlkJyk7XG5cbiAgICAgICAgICAgIGlmKHBvcHRpbnNbcG9wdGluX2lkXSAmJiBwb3B0aW5zW3BvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIgKXtcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdHJpZ2dlciA9IFwieF9jbGlja1wiO1xuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbl9pZCAmJiBwb3B0aW5zW3BvcHRpbl9pZF0pe1xuICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlciA9IHt9O1xuICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJ4X2NsaWNrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihwb3B0aW5faWQpe1xuICAgICAgICAgICAgICAgIHZhciBzZXRDbG9zZUNvb2tpZSA9ICFjaGVja1BvcHRpbkNsb3NlQ3JpdGVyaWEocG9wdGluX2lkKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjbG9zZVBvcHRpbihwb3B0aW5faWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZihzZXRDbG9zZUNvb2tpZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDbG9zZVBvcHRpbk9uWENvb2tpZShwb3B0aW5faWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAvL31cbiAgICAgICAgfTtcbiAgICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IENsaWNrIG9uIFggYnV0dG9uIHRhYlxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiB0aGlzOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBIYW5kbGUgcG9wdGluIHRhYiBjbG9zZSB3aGVuICdYJyBidXR0b24gaXMgY2xpY2tlZFxuICAgICAqL1xuXG4gICAgaWYodHlwZW9mIGNsb3NlVGFiUG9wdGluT25YY2xpY2sgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cuY2xvc2VUYWJQb3B0aW5PblhjbGljayA9IGZ1bmN0aW9uICgkdGhpcyxwb3B0aW5faWQpe1xuICAgICAgICAgICAgLy9qUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIpLmhpZGUoKTtcbiAgICAgICAgICAgIGlmKGxhbmRpbmdfcGFnZV90ZWFzZXJfb249PTEpe1xuICAgICAgICAgICAgICAgIHZhciBjbG9zZV9wb3B0aW4gPSBjbGlja19wb3B0aW5zW3BvcHRpbl9pZF07XG4gICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHZhciBjbG9zZV9wb3B0aW4gPSBhbGxfcG9wdGluc1twb3B0aW5faWRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG93VGVhc2VyRWZmZWN0KGNsb3NlX3BvcHRpbiwgJ2V4aXQnKTtcbiAgICAgICAgICAgIGlmKHBvcHRpbkFuaW1hdGVUYWJbcG9wdGluX2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChwb3B0aW5BbmltYXRlVGFiW3BvcHRpbl9pZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluRGVwZW5kZW50RnVuY3Rpb24oKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgY2xvc2UgcG9wdGluIG9uICcuby1jbG9zZScgY2xhc3MgY2xpY2sgZXZlbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblRleHRDbGlja0Nsb3NlKCl7XG4gICAgICAgIHNob3dMb2coJ3NldDogb25UZXh0Q2xpY2tDbG9zZSgpJyk7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGpRMjI0KCcuby1jbG9zZScpLm9mZihcImNsaWNrXCIpO1xuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbignY2xpY2snLCcuby1jbG9zZScsZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAvLyBzaG93TG9nKCd0cmlnZ2VyOiBvblRleHRDbGlja0Nsb3NlKCknKTtcbiAgICAgICAgICAgIHBvcHRpbl9pZCA9IGpRMjI0KGUudGFyZ2V0KS5wYXJlbnRzKCcucG9wdGluLXBvcHVwJykuYXR0cignZGF0YS1wb3B0aW4taWQnKTtcbiAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJjYW5jZWxfY2xpY2tcIjtcbiAgICAgICAgICAgIGNsb3NlUG9wdGluKHBvcHRpbl9pZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXHRmdW5jdGlvbiBzZXR1cENsaWNrUG9wdGlucygkcG9wdGluKXtcblx0XHRzaG93TG9nKCRwb3B0aW4pO1xuXHRcdGpRMjI0LndoZW4oIGpRMjI0LmFqYXgoJHBvcHRpbi5wb3B0aW5fdXJsKSkudGhlbihmdW5jdGlvbiggZGF0YSwgdGV4dFN0YXR1cywganFYSFIgKSB7XG5cdFx0XHRhbGxfcG9wdGluc1skcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluID0gZGF0YTtcblx0XHRcdGNsaWNrX3BvcHRpbnNbJHBvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9IGRhdGE7XG5cdFx0fSxmdW5jdGlvbiggZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcblx0XHRcdHNob3dMb2coZGF0YSk7XG5cdFx0fSk7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBkaXNwbGF5UG9wdGluT25DbGljaygpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6ICRocmVmOnN0cmluZyAtPiAoVVJMKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBJbml0aWF0ZSBwb3B0aW5zIGdldCByZXF1ZXN0IHRvIHBvcHRpbiBhcGkgc2VydmVyIGFmdGVyIHNldHRpbmcgcmVxaXVlZCBwYXJhbWV0ZXJzXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IElmIGNsaWVudCBoYXZlIGF2aWFsYmxlIHBvcHRpbnNcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogLT4gc2V0IGFsbCBwb3B0aW5zIGF0dHJpYnV0ZXMgYW5kIHBvcHRpbnMgcG9wdXBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soJGhyZWYsICRkaXNwbGF5X2ZsYWcsJHNob3dfbm93LCRjYW5jZWxfdmlzaXRvcl9jb3VudCwkaXNfZm9ybSl7XG5cbiAgICAgICAgJHNob3dfbm93PSRzaG93X25vdyE9dW5kZWZpbmVkPyRzaG93X25vdzpmYWxzZTtcbiAgICAgICAgJGNhbmNlbF92aXNpdG9yX2NvdW50PSRjYW5jZWxfdmlzaXRvcl9jb3VudCE9dW5kZWZpbmVkPyRjYW5jZWxfdmlzaXRvcl9jb3VudDpmYWxzZTtcbiAgICAgICAgJGlzX2Zvcm09JGlzX2Zvcm0hPXVuZGVmaW5lZD8kaXNfZm9ybTpmYWxzZTtcblxuICAgICAgICBzaG93TG9nKCdpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKScpO1xuXG4gICAgICAgIHBvcHRpbl9pZCA9ICRocmVmLnNwbGl0KCdjbGljay8nKVsxXS5zdWJzdHIoMCwxMyk7XG5cbiAgICAgICAgaWYgKGNsaWNrX3BvcHRpbnNbcG9wdGluX2lkXT09dW5kZWZpbmVkIHx8ICFjbGlja19wb3B0aW5zW3BvcHRpbl9pZF0uZGlzcGxheSl7XG4gICAgICAgICAgICB2YXIgZG9tYWluICAgICAgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgIHZhciBjb29raWVzICAgICA9IGdldFJlbGV2ZW50Q29va2llKCkrJyAnK2dldEN1c3RvbU5ld1Zpc2l0U2Vzc2lvbigpO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJzICAgID0gZ2V0QXV0b1BpbG90cygpO1xuICAgICAgICAgICAgLy8gR2V0IHBhZ2UgVGl0bGVcbiAgICAgICAgICAgIHZhciBwYWdlX3RpdGxlID0gZG9jdW1lbnQudGl0bGU7XG5cbiAgICAgICAgICAgIHZhciBjYXJ0X3RvdGFsX3ByaWNlID0gMDtcbiAgICAgICAgICAgIHZhciBjYXJ0X3RvdGFsX2l0ZW1zID0gMDtcbiAgICAgICAgICAgIHZhciBjYXJ0X2l0ZW1zID0gW107XG4gICAgICAgICAgICB2YXIgY2FydF9wcm9kdWN0c19pZHNfbGlzdCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgYnJvd3Nlcl9sYW5ndWFnZSA9IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2U7XG4gICAgICAgICAgICB2YXIgb3BlcmF0aW5nX3N5c3RlbSA9IHdpbmRvdy5uYXZpZ2F0b3I/LnVzZXJBZ2VudERhdGE/LnBsYXRmb3JtIHx8IHdpbmRvdy5uYXZpZ2F0b3I/LnBsYXRmb3JtIHx8ICdVbmtub3duJztcbiAgICAgICAgICAgIHZhciBjYXJ0X3Byb2R1Y3RzX29yZ19pZHNfbGlzdCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGlmKHR5cGVvZiBTaG9waWZ5ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FydF9kZXRhaWxzID0gZ2V0U2hvcGlmeUNhcnREZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgY2FydF90b3RhbF9wcmljZSA9IGNhcnRfZGV0YWlscy50b3RhbF9wcmljZSB8fCAwO1xuICAgICAgICAgICAgICAgIGNhcnRfdG90YWxfaXRlbXMgPSBjYXJ0X2RldGFpbHMuaXRlbV9jb3VudCB8fCAwO1xuICAgICAgICAgICAgICAgIGNhcnRfaXRlbXMgPSBjYXJ0X2RldGFpbHMuaXRlbXMgfHwgW107XG5cbiAgICAgICAgICAgICAgICBpZihjYXJ0X2l0ZW1zLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0X3Byb2R1Y3RzX2lkcyA9IGNhcnRfaXRlbXMubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB2YWx1ZS5wcm9kdWN0X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnZhcmlhbnRfaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXJ0X3Byb2R1Y3RzX2lkc19saXN0ID0gY2FydF9wcm9kdWN0c19pZHMuam9pbignLCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0X3Byb2R1Y3RzX29yZ19pZHMgPSBjYXJ0X2l0ZW1zLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnByb2R1Y3RfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdmFsdWUudmFyaWFudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcnRfcHJvZHVjdHNfb3JnX2lkc19saXN0ID0gY2FydF9wcm9kdWN0c19vcmdfaWRzLmpvaW4oJywnKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGxhbmRpbmdfaW5mbyA9IG51bGw7XG4gICAgICAgICAgICBpZih0eXBlb2YgcG9wdGluX2xhbmRpbmdfcGFnZSAhPSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgbGFuZGluZ19pbmZvID0nJmZyb21fbGFuZGluZ19wYWdlPTEnXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IGdldENsaWVudElkKCksXG4gICAgICAgICAgICAgICAgZG9tYWluOiBkb21haW4sXG4gICAgICAgICAgICAgICAgcmVmZXJyZXI6IGdldFJlZmVycmVyKCksXG4gICAgICAgICAgICAgICAgcHJldmlvdXNfdXJsOiBnZXRQcmV2aW91c1VybCgpLFxuICAgICAgICAgICAgICAgIGNvb2tpZXM6IGNvb2tpZXMsXG4gICAgICAgICAgICAgICAgdHJpZ2dlcnM6IHRyaWdnZXJzLFxuICAgICAgICAgICAgICAgIGlmX21vYmlsZTogaWZNb2JpbGVQb3B0aW4sXG4gICAgICAgICAgICAgICAgcGFnZV90aXRsZTogcGFnZV90aXRsZSxcbiAgICAgICAgICAgICAgICBwb3B0aW5fZGlzcGxheTogJGRpc3BsYXlfZmxhZyxcbiAgICAgICAgICAgICAgICBvcmlnaW5fbGFuZGluZ19wYWdlOiBnZXRPcmlnaW5MYW5kaW5nUGFnZSgpLFxuICAgICAgICAgICAgICAgIGNhbmNlbF92aXNpdG9yX2NvdW50OiAkY2FuY2VsX3Zpc2l0b3JfY291bnQsXG4gICAgICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlczogZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXMoKSxcbiAgICAgICAgICAgICAgICBwcmV2aW91c192aXNpdGVkX3BhZ2VzX3dpdGhfdGltZV9zdGFtcDogZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXNXaXRoVGltZVN0YW1wKCksXG4gICAgICAgICAgICAgICAgYWxsX3Zpc2l0ZWRfcGFnZXM6IGdldEFsbFZpc2l0ZWRQYWdlcygpLFxuICAgICAgICAgICAgICAgIHN0b3JlX2ludGVncmF0aW9uOiBzdG9yZV9pbnRlZ3JhdGlvbixcbiAgICAgICAgICAgICAgICBzdG9yZV9pbnRlZ3JhdGlvbl9jdXN0b21lcl9pZDogc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQsXG4gICAgICAgICAgICAgICAgY2FydF90b3RhbF9wcmljZTogY2FydF90b3RhbF9wcmljZSxcbiAgICAgICAgICAgICAgICBjYXJ0X3RvdGFsX2l0ZW1zOiBjYXJ0X3RvdGFsX2l0ZW1zLFxuICAgICAgICAgICAgICAgIGNhcnRfcHJvZHVjdHNfaWRzX2xpc3Q6IGNhcnRfcHJvZHVjdHNfaWRzX2xpc3QsXG4gICAgICAgICAgICAgICAgYnJvd3Nlcl9sYW5ndWFnZTogYnJvd3Nlcl9sYW5ndWFnZSxcbiAgICAgICAgICAgICAgICBvcGVyYXRpbmdfc3lzdGVtOiBvcGVyYXRpbmdfc3lzdGVtLFxuICAgICAgICAgICAgICAgIGNhcnRfcHJvZHVjdHNfb3JnX2lkc19saXN0OiBjYXJ0X3Byb2R1Y3RzX29yZ19pZHNfbGlzdCxcbiAgICAgICAgICAgICAgICB3aXhfY2FydF9pZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl93aXhfY2FydF9pZCcpLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGpRMjI0LmdldCgkaHJlZi5yZXBsYWNlKFwiYXBwXCIsIFwiYXBwXCIpICsgXCI/XCIgKyB1cmxQYXJhbXMudG9TdHJpbmcoKSArIGxhbmRpbmdfaW5mbywge30sIFwianNvblwiKVxuICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kaXNwbGF5ICE9PSBcIm5vdF9hbGxvd2VkXCIpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoJGRpc3BsYXlfZmxhZyAmJiBkYXRhLmlmX2ZyZWVtaXVtKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBzaG93TG9nKCdub3RfYWxsb3dlZDogZnJlZW1pdW0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG5cblx0XHRcdFx0XHRcdHBvcF9jb3VudHJ5ID0gZGF0YS5jb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wX2NvdW50cnlfY29kZSA9IGRhdGEuY291bnRyeV9jb2RlO1xuXG5cdFx0ICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFjY291bnQgaXMgZnJlZSBvciBwYWlkXG5cdFx0ICAgICAgICAgICAgICAgIGlmX2ZyZWVtaXVtID0gZGF0YS5pZl9mcmVlbWl1bTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9sYW5nID0gZGF0YS5sYW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udERvd25sb2FkKHVzZXJfbGFuZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Rvd25sb2FkSnF1ZXJ5VWkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEkaXNfZm9ybSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwb3B0aW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChkYXRhLnBvcHRpbnMsZnVuY3Rpb24oa2V5LGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBvcHRpbiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrX3BvcHRpbnNbJHBvcHRpbi5wb3B0aW5faWRdID0gJHBvcHRpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzaG93X25vdyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsYW5kaW5nX3BhZ2VfdGVhc2VyX29uPT0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0VGVhc2VyKGNsaWNrX3BvcHRpbnNbJHBvcHRpbi5wb3B0aW5faWRdLDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UgIT0ndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNsaWNrX3BvcHRpbnNbcG9wdGluX2lkXS5kaXNwbGF5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQb3B0aW5PbkNsaWNrKCRwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UG9wdGluT25DbGljaygkcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRcdHNldHVwQ2xpY2tQb3B0aW5zKCRwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BvcHRpbk9uQ2xpY2soJHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRpc3BsYXkgPT0gXCJub3RfYWxsb3dlZFwiICYmIChkYXRhLm1lc3NhZ2UgPT1cIkNsaWVudCByZXN0cmljdGVkXCIgfHwgZGF0YS5tZXNzYWdlPT1cIllvdSBoYXZlIGJlZW4gcmVhY2hlZCB0aGUgbWF4IHBvcHRpbnMgdmlld3MgbnVtYmVyXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19yZXN0cmljdGVkPXRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKGRhdGEuZGlzcGxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcil7XG4gICAgICAgICAgICAgICAgLy9tb25pdG9yRXJyb3IoJ3BvcHRpblZpZXdlZCgpLT5lcnJvcigpJyxlcnJvcixzdGF0dXMseGhyLnJlc3BvbnNlVGV4dCxwb3B0aW4pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZiAoJHNob3dfbm93KXtcbiAgICAgICAgICAgICAgICBzaG93UG9wdGluT25DbGljayhwb3B0aW5faWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTaG9waWZ5Q2FydERldGFpbHMoKSB7XG4gICAgICAgIHZhciBjYXJ0ID0ge307XG5cbiAgICAgICAgalEyMjQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IHNob3BpZnlsYW5ndWFnZVJvdXRlKCkrXCJjYXJ0LmpzXCIsXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgIH0sIFwianNvblwiKVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgY2FydCA9IGRhdGE7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIHNob3dMb2coJ0NhcnQgRXJyb3InKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgIH1cblxuXG4gICAgLy8gQWxsb3cgY2xpZW50IHRvIGZpcmUgdGhlIHBvcHRpbiBwdWxsIGZ1bmN0aW9uXG4gICAgaWYodHlwZW9mIHBvcHRpbl9kaXNwbGF5ICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LnBvcHRpbl9kaXNwbGF5ID0gZnVuY3Rpb24gKHBvcHRpbl9pZCl7XG4gICAgICAgICAgICBwb3B0aW5fZGlzcGxheV90cmlnZ2VyID0gdHJ1ZTtcbiAgICAgICAgICAgICRocmVmID0gYXBpX2xpbmsrJy9hcGkvZGlzcGxheS9jbGljay8nK3BvcHRpbl9pZFxuICAgICAgICAgICAgaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCRocmVmLHRydWUsdHJ1ZSxmYWxzZSlcbiAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYodHlwZW9mIHBvcHRpbl9kaXNwbGF5X2Zvcm0gIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cucG9wdGluX2Rpc3BsYXlfZm9ybSA9IGZ1bmN0aW9uIChwb3B0aW5faWQpe1xuICAgICAgICAgICAgcG9wdGluX2Rpc3BsYXlfdHJpZ2dlciA9IHRydWU7XG4gICAgICAgICAgICAkaHJlZiA9IGFwaV9saW5rKycvYXBpL2Rpc3BsYXkvY2xpY2svJytwb3B0aW5faWRcbiAgICAgICAgICAgIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljaygkaHJlZix0cnVlLHRydWUsZmFsc2UsdHJ1ZSlcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogZ2V0R2VvTG9jYXRpb24oKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiB0cmlnZ2VyIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwb3B0aW5Jbml0aWF0ZSgpe1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9ICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgalEyMjQoJy5sYW5kaW5nLWZvcm0nKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKHBvcHRpbl9sYW5kaW5nX3BhZ2VfdXJsLGZhbHNlLHRydWUpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgLy9tb25pdG9yRXJyb3IoJ3BvcHRpbkRlcGVuZGVudEZ1bmN0aW9uKCktPmluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KCktPmVycm9yKCknLGVyciwnJywnJyxmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb3dubG9hZFBvcHRpbk9uQ2xpY2socG9wdGluX2lkLHNob3dfbm93LGNhbmNlbF92aXNpdG9yX2NvdW50KXtcbiAgICAgICAgJGhyZWYgPSBhcGlfbGluaysnL2FwaS9kaXNwbGF5L2NsaWNrLycrcG9wdGluX2lkXG4gICAgICAgIC8vaWYgKChpZl9mcmVlbWl1bSE9bnVsbCAmJiBpZl9mcmVlbWl1bSA9PSBmYWxzZSkgfHwgaWZfZnJlZW1pdW09PW51bGwpe1xuICAgICAgICBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soJGhyZWYsdHJ1ZSxzaG93X25vdyxjYW5jZWxfdmlzaXRvcl9jb3VudClcbiAgICAgICAgLy99XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1BvcHRpbk9uQ2xpY2socG9wdGluX2lkLCBmcm9tX3RlYXNlciA9IGZhbHNlLCB0ZWFzZXJfcG9wdGluX2RhdGEgPSBudWxsKXtcbiAgICAgICAgaWYgKGNsaWNrX3BvcHRpbnNbcG9wdGluX2lkXSE9dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHBvcHRpbiA9IGNsaWNrX3BvcHRpbnNbcG9wdGluX2lkXTtcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGlzcGxheSl7XG4gICAgICAgICAgICAgICAgLy9kb3dubG9hZFBvcHRpbkJhY2tncm91bmQocG9wdGluKTtcbiAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZiAoalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpWzBdPT09dW5kZWZpbmVkKXtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsX3BvcHRpbnMgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbF9wb3B0aW5zID0gbmV3IE9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3RlbXBsYXRlID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbF9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdIT11bmRlZmluZWQgJiYgYWxsX3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluIT0nJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fdGVtcGxhdGUgPSBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgcG9wdGluIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgYWxsX3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0gPSBwb3B0aW47XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHBvcHRpbiB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gPSBwb3B0aW5fdGVtcGxhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXT17fTtcbiAgICAgICAgICAgICAgICAgICAgLy9wb3B0aW5zW3RoaXMucG9wdGluX2lkXS5kYXRhX3BvaW50ID0gbmV3IERhdGFQb2ludCgpO1xuICAgICAgICAgICAgICAgICAgICAvL3BvcHRpbnNbdGhpcy5wb3B0aW5faWRdLmRhdGFfcG9pbnQub25Mb2FkKHRoaXMucG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZXJEb3dubG9hZChwb3B0aW4pO1xuXHRcdFx0XHRcdHdoZWVsRG93bmxvYWQocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlciA9IHtjb252ZXJ0OmZhbHNlLHNob3duOmZhbHNlLHBvcHRpbl9hY3RpdmU6dHJ1ZSxzY3JvbGxfZmxhZzp0cnVlLG1vdXNlX2xlYXZlX2ZsYWc6dHJ1ZSxjbGlja19jb3VudGVyOjAsdHJpZ2dlcjonJyxjbG9zZV90cmlnZ2VyOicnfTtcbiAgICAgICAgICAgICAgICAgICAgc2V0UG9wdGluU2l6ZShwb3B0aW4sdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldEF1dG9QaWxvdChwb3B0aW4sdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vc2V0UG9wdGluKHBvcHRpbix0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbix0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoICEocG9wdGluLnBvcHRpbl90eXBlID09ICdlbWJlZGRlZCcgfHwgcG9wdGluLnBvcHRpbl90eXBlID09ICdmdWxscGFnZScpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkYmdBbmltYXRpb25PdmVybGF5KHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbG9hZHBvcHRpbk5ld3NUaWNrZXIocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZFNjcmF0Y2hDYXJkRnVuY3Rpb25hbGl0eShwb3B0aW4pXG4gICAgICAgICAgICAgICAgICAgIGxvYWRjb3Vwb25idXR0b24ocG9wdGluKTsgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVhZHlsaW5rYnV0dG9ucyhwb3B0aW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL30sMTApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZighcG9wdGluX2Rpc3BsYXlfdHJpZ2dlcil7XG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkUG9wdGluT25DbGljayhwb3B0aW5faWQsdHJ1ZSxmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZG93bmxvYWRQb3B0aW5PbkNsaWNrKHBvcHRpbl9pZCx0cnVlLGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGZyb21fdGVhc2VyKXtcbiAgICAgICAgICAgIHBvcHRpblZpZXdlZCh0ZWFzZXJfcG9wdGluX2RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5Jbml0aWF0ZSgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IEluaXRpYXRlIHBvcHRpbnMgZ2V0IHJlcXVlc3QgdG8gcG9wdGluIGFwaSBzZXJ2ZXIgYWZ0ZXIgc2V0dGluZyByZXFpdWVybWVudCBwYXJhbWV0ZXJzXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IElmIGNsaWVudCBoYXZlIGF2aWFsYmxlIHBvcHRpbnNcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogLT4gc2V0IGFsbCBwb3B0aW5zIGF0dHJpYnV0ZXMgYW5kIHBvcHRpbnMgcG9wdXBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpe1xuICAgICAgICBjb25zb2xlLmxvZygnaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKScpO1xuXG5cdFx0Ly8gVHJhY2sgcGFnZXMgb25seSBpZiBvbiBtb2JpbGVcblx0XHRpZihpZk1vYmlsZVBvcHRpbil7XG5cdFx0XHQvLyBDaGVjayBpZiB3aW5kb3cgaGlzdG9yeSBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmKGlmTW9iaWxlUG9wdGluKXtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3aW5kb3cgaGlzdG9yeSBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlICYmIHR5cGVvZiBFY3dpZD09J3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY3JlYXRlIGZha2UgaGlzdHJveSBzdGF0ZXMgaWYgb24gU1BBIGJlY2F1c2UgdGhleSBjcmVhdGUgdGhlaXIgb3duXG4gICAgICAgICAgICAgICAgICAgIGlmKCFwb3B0aW5fc2luZ2xlX3BhZ2VfYXBwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlU3RhdGUgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhpc3Rvcnkuc3RhdGUgJiYgd2luZG93Lmhpc3Rvcnkuc3RhdGUucGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlLnBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3BhZ2U6IHBhZ2VTdGF0ZSArIDF9LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhcInBvcF91cmxzXCIsIHBvcF91cmxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHlvdSBhbHJlYWR5IGhhdmUgb24gb2JqZWN0IGJlY2F1c2UgU1BBIGRvbid0IHJlbG9hZCBwYWdlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wX3VybHMgPSB0eXBlb2YgcG9wX3VybHMgPT09ICdvYmplY3QnID8gcG9wX3VybHMgOiBKU09OLnBhcnNlKHBvcF91cmxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcF91cmxzW3BvcF91cmxzLmxlbmd0aCAtIDFdICE9IHdpbmRvdy5sb2NhdGlvbi5ocmVmKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3BfdXJscy5wdXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKFwicG9wX3VybHMyXCIsIHBvcF91cmxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdwb3BfdXJscycsIEpTT04uc3RyaW5naWZ5KHBvcF91cmxzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJyb3dzZXJQb3BTdGF0ZSgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wX3VybHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKFwicG9wX3VybHNcIiwgcG9wX3VybHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgncG9wX3VybHMnLCBKU09OLnN0cmluZ2lmeShwb3BfdXJscykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgbGFzdFVybCA9IHBvcF91cmxzW3BvcF91cmxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGxhc3RVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGxhc3RVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudGluZyBiZWxvdyBFdmVudExpc3RlbmVyIGp1c3QgdG8gY2hlY2sgaWYgaXQgZml4cyBtb2JpbGUgYmFjayBidXR0b24gaXNzdWVcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIEVjd2lkPT0ndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJvd3NlclBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblx0XHR9XG5cbiAgICAgICAgLy8gR2V0IHBhZ2UgaHJlZlxuICAgICAgICB2YXIgZG9tYWluID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgLy8gR2V0IGFsbCBwb3B0aW4gY29va2llc1xuICAgICAgICB2YXIgY29va2llcyA9IGdldFJlbGV2ZW50Q29va2llKCkrJyAnK2dldFBvcHRpbk5ld1VzZXIoKSsnICcrZ2V0UG9wdGluVmlld2VkU2Vzc2lvbigpKycgJytnZXRTZXNzaW9uU3RvcmFnZUJ5S2V5KCdwb3B0aW5fYWJ0ZXN0X3Nlc3Npb25fJykrJyAnK2dldEN1c3RvbU5ld1Zpc2l0U2Vzc2lvbigpO1xuXG4gICAgICAgIC8vIEdldCBhbGwgd2Vic2l0ZSBjb29raWVzXG4gICAgICAgIC8vd2Vic2l0ZV9jb29raWVzID0gZ2V0V2Vic2l0ZUNvb2tpZSgpO1xuXG4gICAgICAgIC8vIEdldCBBdXRvUGlsb3QgZmxhZyBhbmQgdHJpZ2dlclxuICAgICAgICB2YXIgdHJpZ2dlcnMgPSBnZXRBdXRvUGlsb3RzKCk7XG5cbiAgICAgICAgLy8gR2V0IHZpc2l0b3IgbG9jYXRpb24gZGF0YVxuICAgICAgICAvL2NvdW50cnlfY29kZSA9ICh0eXBlb2YgY291bnRyeSA9PSBcInVuZGVmaW5lZFwiIHx8IGNvdW50cnkuY291bnRyeV9jb2RlID09IHVuZGVmaW5lZCA/IGZhbHNlIDogY291bnRyeS5jb3VudHJ5X2NvZGUpO1xuXG4gICAgICAgIHZhciBjb3VudHJ5X2NvZGUgPSBnZXRVc2VyQ291bnRyeUNvZGUoKTtcblxuICAgICAgICAvLyBHZXQgdmlzaXRvciByZWZlcnJlciB1cmxcbiAgICAgICAgdmFyIHJlZmVycmVyX3VybCA9IGdldFJlZmVycmVyKCk7XG5cbiAgICAgICAgLy8gR2V0IHZpc2l0b3IgcHJldmlvdXMgdXJsXG4gICAgICAgIHZhciBwcmV2aW91c191cmwgPSBnZXRQcmV2aW91c1VybCgpO1xuXG4gICAgICAgIC8vIEdldCBwYWdlIFRpdGxlXG4gICAgICAgIHZhciBwYWdlX3RpdGxlID0gZG9jdW1lbnQudGl0bGU7XG5cbiAgICAgICAgalEyMjQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIHZhciBwb3B0aW5Gb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B0aW4tZW1iZWRkZWQnKTtcbiAgICAgICAgICAgIHZhciBwb3B0aW5Gb3Jtc0xlbiA9IHBvcHRpbkZvcm1zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBwb3B0aW5Gb3Jtc0lEcyA9IFtdO1xuICAgICAgICAgICAgaWYocG9wdGluRm9ybXNMZW4pe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8cG9wdGluRm9ybXNMZW47aSsrKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluRm9ybXNJRHMucHVzaChwb3B0aW5Gb3Jtc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2FydF90b3RhbF9wcmljZSA9IDA7XG4gICAgICAgICAgICB2YXIgY2FydF90b3RhbF9pdGVtcyA9IDA7XG4gICAgICAgICAgICB2YXIgY2FydF9pdGVtcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGNhcnRfcHJvZHVjdHNfaWRzX2xpc3QgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIGNhcnRfcHJvZHVjdHNfb3JnX2lkc19saXN0ID0gXCJcIjtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBTaG9waWZ5ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FydF9kZXRhaWxzID0gZ2V0U2hvcGlmeUNhcnREZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgY2FydF90b3RhbF9wcmljZSA9IGNhcnRfZGV0YWlscy50b3RhbF9wcmljZSB8fCAwO1xuICAgICAgICAgICAgICAgIGNhcnRfdG90YWxfaXRlbXMgPSBjYXJ0X2RldGFpbHMuaXRlbV9jb3VudCB8fCAwO1xuICAgICAgICAgICAgICAgIGNhcnRfaXRlbXMgPSBjYXJ0X2RldGFpbHMuaXRlbXMgfHwgW107XG5cbiAgICAgICAgICAgICAgICBpZihjYXJ0X2l0ZW1zLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0X3Byb2R1Y3RzX2lkcyA9IGNhcnRfaXRlbXMubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB2YWx1ZS5wcm9kdWN0X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnZhcmlhbnRfaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXJ0X3Byb2R1Y3RzX2lkc19saXN0ID0gY2FydF9wcm9kdWN0c19pZHMuam9pbignLCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0X3Byb2R1Y3RzX29yZ19pZHMgPSBjYXJ0X2l0ZW1zLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnByb2R1Y3RfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdmFsdWUudmFyaWFudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcnRfcHJvZHVjdHNfb3JnX2lkc19saXN0ID0gY2FydF9wcm9kdWN0c19vcmdfaWRzLmpvaW4oJywnKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNhbmNlbF92aXNpdG9yX2NvdW50ID0gcHJldmlld1BvcHRpbklkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tZW1iZWRkZWRcIikuZW1wdHkoKTtcbiAgICAgICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogYXBpX2xpbmsrXCIvYXBpL2Rpc3BsYXkvXCIrZ2V0Q2xpZW50SWQoKSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjogZG9tYWluLFxuICAgICAgICAgICAgICAgICAgICByZWZlcnJlcjogcmVmZXJyZXJfdXJsLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c191cmw6IHByZXZpb3VzX3VybCxcbiAgICAgICAgICAgICAgICAgICAgY29va2llczogY29va2llcyxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcnM6IHRyaWdnZXJzLFxuICAgICAgICAgICAgICAgICAgICBjYzogY291bnRyeV9jb2RlLFxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fZm9ybXNfaWQ6IHBvcHRpbkZvcm1zSURzLFxuICAgICAgICAgICAgICAgICAgICBpZl9tb2JpbGU6IGlmTW9iaWxlUG9wdGluLFxuICAgICAgICAgICAgICAgICAgICBwYWdlX3RpdGxlOiBwYWdlX3RpdGxlLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5fbGFuZGluZ19wYWdlOiBnZXRPcmlnaW5MYW5kaW5nUGFnZSgpLFxuICAgICAgICAgICAgICAgICAgICBpZl9wYWdlX3JlZnJlc2hlZDogaWZQYWdlUmVmcmVzaGVkKCksXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl92aWV3ZWRfdXJsOiBnZXRQb3B0aW5WaWV3ZWRVcmwoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlczogZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX2N1cnJlbnRfcGFnZTogZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXNXaXRoQ3VycmVudFBhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX3RpbWVfc3RhbXA6IGdldFByZXZpb3VzVmlzaXRlZFBhZ2VzV2l0aFRpbWVTdGFtcCgpLFxuICAgICAgICAgICAgICAgICAgICBhbGxfdmlzaXRlZF9wYWdlczogZ2V0QWxsVmlzaXRlZFBhZ2VzKCksXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlX2ludGVncmF0aW9uOiBzdG9yZV9pbnRlZ3JhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQ6IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkLFxuICAgICAgICAgICAgICAgICAgICB3aXhfY2FydF9pZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl93aXhfY2FydF9pZCcpLFxuICAgICAgICAgICAgICAgICAgICBjYXJ0X3RvdGFsX2l0ZW1zLFxuICAgICAgICAgICAgICAgICAgICBjYXJ0X3RvdGFsX3ByaWNlLFxuICAgICAgICAgICAgICAgICAgICBjYXJ0X3Byb2R1Y3RzX2lkc19saXN0LFxuICAgICAgICAgICAgICAgICAgICBjYXJ0X3Byb2R1Y3RzX29yZ19pZHNfbGlzdCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld19wb3B0aW5faWQ6IHByZXZpZXdQb3B0aW5JZCxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsX3Zpc2l0b3JfY291bnQ6IGNhbmNlbF92aXNpdG9yX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0ZWRfZW1haWw6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3B0aW5fY29udmVydGVkX2VtYWlsJyksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgfSwgXCJqc29uXCIpXG4gICAgICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24oZGF0YSl7XG5cblx0ICAgICAgICAgICAgICAgIC8vIHNldCBwb3B0aW5zIGludG8gaW5uZXIgYXJyYXlcblx0ICAgICAgICAgICAgICAgIGFsbF9wb3B0aW5zID0gZGF0YS5wb3B0aW5zO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhY2NvdW50IGlzIGZyZWUgb3IgcGFpZFxuXHQgICAgICAgICAgICAgICAgaWZfZnJlZW1pdW0gPSBkYXRhLmlmX2ZyZWVtaXVtO1xuXG5cdFx0XHRcdFx0cG9wX2NvdW50cnkgPSBkYXRhLmNvdW50cnk7XG4gICAgICAgICAgICAgICAgICAgIHBvcF9jb3VudHJ5X2NvZGUgPSBkYXRhLmNvdW50cnlfY29kZTtcblxuXHQgICAgICAgICAgICAgICAgc2hvd0xvZyhkYXRhKTtcblx0ICAgICAgICAgICAgICAgIC8vIElmIGNsaWVudCBkb24ndCBoYXZlIHZpZXcgcmVzdHJpY3Rpb25cblx0ICAgICAgICAgICAgICAgIGlmIChkYXRhLmRpc3BsYXkgIT09IFwibm90X2FsbG93ZWRcIil7XG5cdCAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChhbGxfcG9wdGlucyxmdW5jdGlvbihrZXksaW5kZXgpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5hYl90ZXN0X3BhcmVudF9pZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1lbWJlZGRlZFtkYXRhLWlkPSdcIit0aGlzLmFiX3Rlc3RfcGFyZW50X2lkK1wiJ11cIikuYXR0cignZGF0YS1pZCcsIHRoaXMucG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwb3B0aW4gaXMgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheSB8fCB0aGlzLmlzX3RlYXNlcnNfb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnBvcHRpbl90eXBlID09IFwiZW1iZWRkZWRcIiAmJiBqUTIyNChcIi5wb3B0aW4tZW1iZWRkZWRbZGF0YS1pZD0nXCIrdGhpcy5wb3B0aW5faWQrXCInXVwiKS5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2xhbmcgPSBkYXRhLmxhbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250RG93bmxvYWQoZGF0YS5sYW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkUG9wdGluVGVtcGxhdGVGcm9tUzModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb3dubG9hZFBvcHRpbkJhY2tncm91bmQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZfZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3B0aW5fd2l4X2NhcnRfZGV0YWlscycsIEpTT04uc3RyaW5naWZ5KHRoaXMud2l4X2NhcnRfZGV0YWlscykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25fY2xpY2spe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja19wb3B0aW5zW3RoaXMucG9wdGluX2lkXSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaXNwbGF5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSW5pdGlhdGUgRG93bmxvYWQgcG9wdGluIG9uIGNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2xhbmcgPSBkYXRhLmxhbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250RG93bmxvYWQoZGF0YS5sYW5nKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNob3dMb2codGhpcyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXR1cENsaWNrUG9wdGlucyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG93bmxvYWRQb3B0aW5PbkNsaWNrKHRoaXMucG9wdGluX2lkLGZhbHNlLHRydWUpOyB0ZW1wcm9yeSBmaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiB3aW5kb3cud2l4RGV2ZWxvcGVyc0FuYWx5dGljcyAhPSd1bmRlZmluZWQnKSAmJiAoZGF0YS53aXhfY2FydF9kZXRhaWxzKSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlV2l4Q2FydERldGFpbHMoZGF0YS53aXhfY2FydF9kZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgb25lIG9mIHRoZSBwb3B0aW5zIGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlmX2Rpc3BsYXkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjbGllbnQgbGFuZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfbGFuZyA9IGRhdGEubGFuZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250RG93bmxvYWQoZGF0YS5sYW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZWQgSlF1ZXJ5VUlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZighKHBvcHRpbkFmdGVyUGFnZUxvYWQgPT0gJ25vQ29uZmxpY3QnIHx8IHBvcHRpbkFmdGVyUGFnZUxvYWQgPT0gJ25vSnF1ZXJ5VWknKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGRvd25sb2FkSnF1ZXJ5VWkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbl9zaW5nbGVfcGFnZV9hcHApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tZW1iZWRkZWRcIikuZWFjaChmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQodGhpcykuaXMoXCI6ZW1wdHlcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHRpbl9mb3JtX2lkID0galEyMjQodGhpcykuYXR0cihcImRhdGEtaWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fZGlzcGxheV9mb3JtKHBvcHRpbl9mb3JtX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhLmlzX2NsaWVudF9yZXN0cmljdGlvbil7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGdyYWRlX3BvcHVwX3NldHRpbmcgPSBkYXRhLmNsaWVudF9yZXN0cmljdGlvbl9zZXR0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BvcHRpbkxpbWl0UG9wdXAoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc19yZXN0cmljdGVkPXRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5kaXNwbGF5ID09IFwibm90X2FsbG93ZWRcIiAmJiAoZGF0YS5tZXNzYWdlID09XCJDbGllbnQgcmVzdHJpY3RlZFwiIHx8IGRhdGEubWVzc2FnZT09XCJZb3UgaGF2ZSBiZWVuIHJlYWNoZWQgdGhlIG1heCBwb3B0aW5zIHZpZXdzIG51bWJlclwiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfcmVzdHJpY3RlZD10cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGdlb2xvY2F0aW9uIGNvb2tpZXNcbiAgICAgICAgICAgICAgICAgICAgc2V0R2VvbG9jYXRpb25Db29raWVzKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBkZWFmdWx0IHBvcHRpbiBjb29raWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb29raWUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKS0+YXV0by0+LT5lcnJvcigpJyxlcnJvcixzdGF0dXMseGhyLnJlc3BvbnNlVGV4dCxmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ2luaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KCktPmF1dG8tPi0+ZXJyb3IoKScpO1xuICAgICAgICAgICAgICAgICAgICAvLyBNb25pdG9yaW5nIHBlcnBhc2VcbiAgICAgICAgICAgICAgICAgICAgLy9tb25pdG9yRXJyb3IoJ2luaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KCktPmVycm9yKCknLGVycm9yLHN0YXR1cyx4aHIucmVzcG9uc2VUZXh0LGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IExhbmcgLT4gc3RyaW5nICgnaGUnLydlbicpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IERvd25sb2FkICYgYXBwZW5kIGZvbnRzIGFuZCBwb3B0aW4gc3R5bGUgZnJvbSBhd3MgUzMgc2VydmljZSBhbmQgQ0ROIHJlYWxhdGVkIHRvIGNsaWVudCAnbGFuZycobGFuZ3VhZ2UpXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0R2VvbG9jYXRpb25Db29raWVzKGRhdGEpe1xuICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fdXNlcl9pcCcpICYmIGRhdGEuaXAgIT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl91c2VyX2lwJyxkYXRhLmlwLDM2NSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3VzZXJfY291bnRyeV9jb2RlJykgJiYgZGF0YS5jYyAhPSB1bmRlZmluZWQpIHx8IChwb3B0aW5HZXRDb29raWUoJ3BvcHRpbl91c2VyX2NvdW50cnlfY29kZScpICE9IGRhdGEuY2MgJiYgZGF0YS5jYyE9IHVuZGVmaW5lZCApKXtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3VzZXJfY291bnRyeV9jb2RlJyxkYXRhLmNjLDM2NSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogTGFuZyAtPiBzdHJpbmcgKCdoZScvJ2VuJylcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogRG93bmxvYWQgJiBhcHBlbmQgZm9udHMgYW5kIHBvcHRpbiBzdHlsZSBmcm9tIGF3cyBTMyBzZXJ2aWNlIGFuZCBDRE4gcmVhbGF0ZWQgdG8gY2xpZW50ICdsYW5nJyhsYW5ndWFnZSlcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGZvbnREb3dubG9hZChsYW5nKXtcbiAgICAgICAgLy8gc2hvd0xvZygnZm9udERvd25sb2FkJyk7XG4gICAgICAgIHdpbmllID0gKCAoL1dpbmRvd3MgTlQgNi4xL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgJiYgKC9UcmlkZW50L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvTVNJRS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpID8gJy1pZScgOiAnJyk7XG4gICAgICAgIGZvbnRfbGluayA9Jyc7XG4gICAgICAgIGpRMjI0KFwiI3BvcHRpbl9oZWJfZm9udHNfcHJlbG9hZFwiKS5yZW1vdmUoKTtcbiAgICAgICAgalEyMjQoXCIjcG9wdGluX2hlYl9mb250c1wiKS5yZW1vdmUoKTtcblxuICAgICAgICBmb250X2xpbmsgKz0gJzxsaW5rIHJlbD1cInByZWxvYWRcIiBpZD1cInBvcHRpbl9oZWJfZm9udHNfcHJlbG9hZFwiIGFzPVwic3R5bGVcIiAgaHJlZj1cIicrY2RuX3NlcnZlcisnL2Nzcy9oZWItZm9udHMnK3dpbmllKycubWluLmNzc1wiPic7XG4gICAgICAgIGZvbnRfbGluayArPSAnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGlkPVwicG9wdGluX2hlYl9mb250c1wiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvaGViLWZvbnRzJyt3aW5pZSsnLm1pbi5jc3NcIiBkZWZlcj4nO1xuXG4gICAgICAgIGlmKCFwb3B0aW5fZGlzYWJsZV9mYSl7XG4gICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW4tZmEtcHJlbG9hZFwiKS5sZW5ndGg9PTAgJiYgalEyMjQoXCIjcG9wdGluLWZhXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluLWZhLXByZWxvYWRcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluLWZhXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGZvbnRfbGluayArPSAnPGxpbmsgcmVsPVwicHJlbG9hZFwiIGlkPVwicG9wdGluLWZhLXByZWxvYWRcIiBhcz1cInN0eWxlXCIgaHJlZj1cImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS80LjcuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIj4nO1xuICAgICAgICAgICAgICAgIGZvbnRfbGluayArPSAnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGlkPVwicG9wdGluLWZhXCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS80LjcuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIiBkZWZlcj4nO1xuICAgICAgICAgICAgICAgIGZvbnRfbGluayArPSAnPGxpbmsgcmVsPVwicHJlbG9hZFwiIGlkPVwicG9wdGluLWZhLWJyYW5kcy1wcmVsb2FkXCIgYXM9XCJzdHlsZVwiIGhyZWY9XCJodHRwczovL2Nkbi5wb3B0LmluL2Nzcy9icmFuZHMubWluLmNzc1wiPic7XG4gICAgICAgICAgICAgICAgZm9udF9saW5rICs9ICc8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaWQ9XCJwb3B0aW4tZmEtYnJhbmRzXCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cImh0dHBzOi8vY2RuLnBvcHQuaW4vY3NzL2JyYW5kcy5taW4uY3NzXCIgZGVmZXI+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihhcGlfbGluay5pbmRleE9mKCdkZXYnKT49MCl7XG4gICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW4tY3NzLWZpbGUtcHJlbG9hZFwiKS5sZW5ndGg9PTAgJiYgalEyMjQoXCIjcG9wdGluLWNzcy1maWxlLXByZWxvYWRcIikubGVuZ3RoPT0wKXtcbiAgICAgICAgICAgICAgICBqUTIyNChcIiNwb3B0aW4tY3NzLWZpbGUtcHJlbG9hZFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBqUTIyNChcIiNwb3B0aW4tY3NzLWZpbGVcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgZm9udF9saW5rICs9ICc8bGluayAgcmVsPVwicHJlbG9hZFwiIGFzPVwic3R5bGVcIiBpZD1cInBvcHRpbi1jc3MtZmlsZS1wcmVsb2FkXCIgIGhyZWY9XCInK2Nzc19saW5rKycvY3NzL3BvcHRpbi1zdHlsZS0nK2xhbmcrJy5jc3M/dmVyPTEwXCI+JztcbiAgICAgICAgICAgICAgICBmb250X2xpbmsgKz0gJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBpZD1cInBvcHRpbi1jc3MtZmlsZVwiIGhyZWY9XCInK2Nzc19saW5rKycvY3NzL3BvcHRpbi1zdHlsZS0nK2xhbmcrJy5jc3M/dmVyPTEwXCIgZGVmZXI+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKGpRMjI0KFwiI3BvcHRpbi1jc3MtZmlsZS1wcmVsb2FkXCIpLmxlbmd0aD09MCAmJiBqUTIyNChcIiNwb3B0aW4tY3NzLWZpbGUtcHJlbG9hZFwiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiI3BvcHRpbi1jc3MtZmlsZS1wcmVsb2FkXCIpLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluLWNzcy1maWxlXCIpLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgZm9udF9saW5rICs9ICc8bGluayAgcmVsPVwicHJlbG9hZFwiIGFzPVwic3R5bGVcIiBpZD1cInBvcHRpbi1jc3MtZmlsZS1wcmVsb2FkXCIgIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvcG9wdGluLXN0eWxlLScrbGFuZysnLmNzcz92ZXI9MTBcIj4nO1xuICAgICAgICAgICAgICAgIGZvbnRfbGluayArPSAnPGxpbmsgIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBpZD1cInBvcHRpbi1jc3MtZmlsZVwiIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvcG9wdGluLXN0eWxlLScrbGFuZysnLmNzcz92ZXI9MTBcIiBkZWZlcj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblx0XHRqUTIyNChcIiNwb3B0aW5fY3VzdG9tX2ZvbnRzX3ByZWNvbm5lY3QsICNwb3B0aW5fY3VzdG9tX2ZvbnRzX3ByZWxvYWRcIikucmVtb3ZlKCk7XG5cdFx0alEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBpZD1cInBvcHRpbl9jdXN0b21fZm9udHNfcHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2QzNjJoN3B4ZHRlb3lrLmNsb3VkZnJvbnQubmV0L1wiPjwvbGluaz4nKTtcblx0XHQvLyBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwicHJlbG9hZFwiIGFzPVwic3R5bGVcIiBpZD1cInBvcHRpbl9jdXN0b21fZm9udHNfcHJlbG9hZFwiIGhyZWY9XCJodHRwczovL2QzNjJoN3B4ZHRlb3lrLmNsb3VkZnJvbnQubmV0L1wiPjwvbGluaz4nKTtcblxuICAgICAgICBpZihsYW5nID09IFwiZW5cIil7XG4gICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5fcG9wcGluc19mb250X3ByZWxvYWRcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5fcG9wcGluc19mb250X2xpbmtcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICBpZiAoIXBvcHRpbl9kaXNhYmxlX2ZvbnRzKSB7XG4gICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInByZWxvYWRcIiBpZD1cInBvcHRpbl9wb3BwaW5zX2ZvbnRfcHJlbG9hZFwiIGFzPVwic3R5bGVcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5wb3B0LmluP2ZhbWlseT1Qb3BwaW5zJmRpc3BsYXk9c3dhcFwiPicpO1xuICAgICAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaWQ9XCJwb3B0aW5fcG9wcGluc19mb250X2xpbmtcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5wb3B0LmluP2ZhbWlseT1Qb3BwaW5zJmRpc3BsYXk9c3dhcFwiPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9wcmVsb2FkXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluX29wZW5zYW5zaGVicmV3X2ZvbnRfbGlua1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJwcmVsb2FkXCIgaWQ9XCJwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9wcmVsb2FkXCIgYXM9XCJzdHlsZVwiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4vP2ZhbWlseT1PcGVuJTIwU2FucyUyMEhlYnJldyZkaXNwbGF5PXN3YXBcIj4nKTtcbiAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaWQ9XCJwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9saW5rXCIgaHJlZj1cImh0dHBzOi8vZm9udHMucG9wdC5pbi8/ZmFtaWx5PU9wZW4lMjBTYW5zJTIwSGVicmV3JmRpc3BsYXk9c3dhcFwiPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoZm9udF9saW5rKTtcbiAgICAgICAgc2V0UG9wdGluU3R5bGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3B0aW5JbnB1dFZhbGlkYXRpb25zKHBvcHRpbil7XG5cbiAgICAgICAgZnVuY3Rpb24gcG9wdGluRW1haWxWYWxpZGF0aW9uKHBvcHRpbil7XG5cbiAgICAgICAgICAgIHZhciB0aGlzX3BvcCA9IGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICAgICAgdmFyIGVtYWlsSW5wdXQgPSAnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSBbbmFtZT1cInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWxcIl1bZGF0YS1hY3Rpb24tdmFsaWRhdGU9XCJjaGVjay10eXBvc1wiXSwgW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSBbbmFtZT1cInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWxcIl1bZGF0YS1hY3Rpb24tdmFsaWRhdGU9XCJ0eXBvcy1idXNpbmVzc1wiXSc7XG5cbiAgICAgICAgICAgIGNvbnN0IHBvcHRpbl9lYWYgPSBuZXcgRW1haWxBdXRvRmlsbCh7XG4gICAgICAgICAgICAgICAgZG9tYWluczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ21haWwuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUFmdGVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlzc3BlbGxlZFZhcmlhdGlvbnM6IFsnZ21pYWwuY29tJywnZ21haS5jb20nLCdnYW1pbC5jb20nLCdnbWFsLmNvbScsJ2dtYWlsLmNtJywnbWdhaWwuY29tJywnZ21pbC5jb20nLCdnbWFpbC5vbScsJ2dtYWlsbC5jb20nLCdnbWFpaWwuY29tJywnZ21haWlsbC5jb20nLCdnbWkuY29tJywnZ21haWwuY28nLCdnbWFsaS5jb20nLCdnbWwuY29tJywnZ21hLmNvbSddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd5YWhvby5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlQWZ0ZXI6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzcGVsbGVkVmFyaWF0aW9uczogWyd5YWhvLmNvbScsJ3lob28uY29tJywneWFhaG8uY29tJywneWFhaG9vLmNvbScsJ3lhaHUuY29tJywneWFodW8uY29tJywneWFob3UuY29tJywneWFoMDAuY29tJywneWFobzAuY29tJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2ljbG91ZC5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlQWZ0ZXI6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzcGVsbGVkVmFyaWF0aW9uczogWydpY2xvb3VkLmNvbScsJ2ljbHVkLmNvbScsJ2ljbG9kLmNvbScsJ2ljbG91ZGQuY29tJywnaWNjbG91ZC5jb20nLCdpY2xsb3VkLmNvbScsJ2ljbG91LmNvbScsJ2ljbDB1ZC5jb20nXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbWUuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUFmdGVyOiAyXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtYWMuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUFmdGVyOiAyXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdvdXRsb29rLmNvbScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVBZnRlcjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NwZWxsZWRWYXJpYXRpb25zOiBbJ291dGxvay5jb20nLCdvdXRsdWsuY29tJywnb3V0bG9vb2suY29tJywnb3V0bG9vLmNvbScsJ291dGxvdWsuY29tJywnb3V0bHVvay5jb20nLCdvdXRsay5jb20nLCdvdWxvb2suY29tJywnb3Rsb29rLmNvbScsJ291dGxrLmNvbScsJ291dGxvLmNvbScsJ291dGxsb29rLmNvbScsJzB1dGxvb2suY29tJywnb3V0bDAway5jb20nLCdvdXRsbzBrLmNvbScsJ291dDBvbGsuY29tJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb3Rvbm1haWwuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUFmdGVyOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlzc3BlbGxlZFZhcmlhdGlvbnM6IFsncHJvdG9ubWFsLmNvbScsJ3ByMHRvbm1haWwuY29tJywncHJvdDBubWFpbC5jb20nLCdwcjB0MG5tYWlsLmNvbScsJ3BydG9ubWFpbC5jb20nLCdwcm90bm1haWwuY29tJywncHJvb3Rvbm1haWwuY29tJywncHJvdHVubWlhbC5jb20nLCdwcjB0dW5taWFsLmNvbScsJ3Byb290b25tYWlsLmNvbScsJ3Byb3Rvb25tYWlsLmNvbSddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd6b2hvY29ycC5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlQWZ0ZXI6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzcGVsbGVkVmFyaWF0aW9uczogWyd6MGgwYzBycC5jb20nLCd6b2hvY3JwLmNvbScsJ3pvaG9jcHIuY29tJywnem9oMGNyb3AuY29tJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FvbC5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlQWZ0ZXI6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzcGVsbGVkVmFyaWF0aW9uczogWydhYW9sLmNvbScsJ2Fvb2wuY29tJywnYTBsLmNvbSddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdob3RtYWlsLmNvbScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVBZnRlcjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NwZWxsZWRWYXJpYXRpb25zOiBbJ2gwdG1haWwuY29tJywnaG90bWFsLmNvbScsJ2hvdG1pYWwuY29tJywnaG9vdG1haWwuY29tJ11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogdGhpcyBzdWJzY3JpYmUgbWV0aG9kIHdpbGwgYmUgdHJpZ2dlcmVkIHdoZW4geW91IHJlY2VpdmUgYW55IHZhbHVlIGJ5IHVzaW5nIGRpc3BhdGNoIG1ldGhvZFxuICAgICAgICAgICAgICAgICAqLyBcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmUoIHZhbHVlICkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUudHlwZSA9PSBcImF1dG8tZmlsbFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbEVtYWlsID0galEyMjQoZW1haWxJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmVkRW1haWwgPSBvcmlnaW5hbEVtYWlsLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50UGFkZGluZyA9IG9yaWdpbmFsRW1haWwucGFyZW50KCkuY3NzKFwicGFkZGluZy1sZWZ0XCIpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRFbWFpbC5hZGRDbGFzcyhcInBvcHRpbi1pbnB1dC1hdXRvZmlsbFwiKS52YWwoJycpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCB2YWx1ZS5vdXRWYWx1ZSkuYXR0cihcImlkXCIsJycpLmF0dHIoXCJkYXRhLW5hbWVcIiwnJykuYXR0cihcIm5hbWVcIiwnJykuY3NzKHsnbGVmdCc6cGFyZW50UGFkZGluZ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbWFpbC5wYXJlbnQoKS5wcmVwZW5kKGNsb25lZEVtYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEVtYWlsID0gb3JpZ2luYWxFbWFpbC5wYXJlbnQoKS5maW5kKFwiLnBvcHRpbi1pbnB1dC1hdXRvZmlsbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEVtYWlsLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lkdGgnLCAnY2FsYygxMDAlIC0gJytwYXJlbnRQYWRkaW5nKycgLSAnK3BhcmVudFBhZGRpbmcrJyknLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRFbWFpbC5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ21pbi13aWR0aCcsICdhdXRvJywgJ2ltcG9ydGFudCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oXCJrZXlkb3duXCIsIGVtYWlsSW5wdXQsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUua2V5Q29kZSA9PSA5IHx8IGUua2V5Q29kZSA9PSAzOSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9yaWdpbmFsRW1haWwuYXR0cignaWQnKSA9PSAncG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRFbWFpbCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkRW1haWwubGVuZ3RoICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRW1haWwudmFsKCkgIT0gY2xvbmVkRW1haWwuYXR0cihcInBsYWNlaG9sZGVyXCIpICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEVtYWlsLmF0dHIoXCJwbGFjZWhvbGRlclwiKS5pbmNsdWRlcyhvcmlnaW5hbEVtYWlsLnZhbCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVtYWlsLnZhbChjbG9uZWRFbWFpbC5hdHRyKFwicGxhY2Vob2xkZXJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEVtYWlsLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlLnR5cGUgPT0gXCJzdWdnZXN0aW9uXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbUlkID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChlbWFpbElucHV0KS5wYXJlbnQoKS5hcHBlbmQoJzxzcGFuIGlkPVwibScrcmFuZG9tSWQrJ1wiIGNsYXNzPVwicG9wdGluLWlucHV0LW1zZyBwb3B0aW4taW5wdXQtbXNnLTEgcG9wdGluLWlucHV0LWluZm8gcG9wdGluLWlucHV0LXN1Z2dlc3Rpb25cIj5EaWQgeW91IG1lYW4gPHNwYW4+Jyt2YWx1ZS5vdXRWYWx1ZSsnPC9zcGFuPj88L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0galEyMjQoZW1haWxJbnB1dCkucGFyZW50cyhcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkudG9wIC0gY29udGFpbmVyLm9mZnNldCgpLnRvcCkvdGhpc19zY2FsZSkgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJoZWlnaHRcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gZGlzcGF0Y2ggbWV0aG9kIHdpbGwgdHJpZ2dlciBzdWJzY3JpYmUgbWV0aG9kIGlmIGFueSBzdWdnZXN0aW9uIG9yIGF1dG8tZmlsbCBhdmFpbGFibGVcblxuICAgICAgICAgICAgalEyMjQoZW1haWxJbnB1dCkub24oXCJrZXl1cFwiLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICB2YXIgZW1haWxfYWRkcmVzcyA9IGpRMjI0KHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1hdXRvZmlsbFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZihlLmtleUNvZGUgPT0gMTMpe1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3B0aW5fZWFmLmRpc3BhdGNoKCdzdWdnZXN0aW9uJywgZW1haWxfYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgcG9wdGluX2VhZi5kaXNwYXRjaCgnYXV0by1maWxsJywgZW1haWxfYWRkcmVzcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalEyMjQoZW1haWxJbnB1dCkub24oXCJibHVyXCIsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1hdXRvZmlsbFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1tc2dcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalEyMjQoZW1haWxJbnB1dCkub24oXCJmb2N1c1wiLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtYXV0b2ZpbGxcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5wb3B0aW4taW5wdXQtc3VnZ2VzdGlvbicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBqUTIyNChlbWFpbElucHV0KS52YWwoalEyMjQodGhpcykuZmluZCgnc3BhbicpLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwb3B0aW5QaG9uZVZhbGlkYXRpb24ocG9wdGluKXtcbiAgICAgICAgICAgIHZhciB0aGlzX3BvcCA9IGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICAgICAgdmFyIHBob25lSW5wdXQgPSB0aGlzX3BvcC5maW5kKFwiaW5wdXQjcG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRQaG9uZVwiKS5nZXQoMCk7XG5cbiAgICAgICAgICAgIGlmKGpRMjI0KHBob25lSW5wdXQpLmF0dHIoJ2RhdGEtYWN0aW9uLXZhbGlkYXRlJykgPT0gXCJiYXNpY1wiKXtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRQaG9uZU51bWJlcihzdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSAvXlxcKz9bMC05LVxccygpXSokLztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3Qoc3RyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vZmYoXCJibHVyXCIpO1xuXG4gICAgICAgICAgICAgICAgalEyMjQocGhvbmVJbnB1dCkub24oXCJibHVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZihwaG9uZUlucHV0LnZhbHVlICYmICghaXNWYWxpZFBob25lTnVtYmVyKHBob25lSW5wdXQudmFsdWUpIHx8IHBob25lSW5wdXQudmFsdWUubGVuZ3RoID4gMTUpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5kb21JZCA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25NZXNzYWdlID0gaWZVc2VybGFuZ0lzSGUoKSA/IFwi15nXqSDXnNeU15bXmdefINee16HXpNeoINeY15zXpNeV158g16rXp9eZ159cIiA6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcGhvbmUgbnVtYmVyXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHBob25lSW5wdXQpLnBhcmVudCgpLmFwcGVuZCgnPHNwYW4gaWQ9XCJtJytyYW5kb21JZCsnXCIgY2xhc3M9XCJwb3B0aW4taW5wdXQtbXNnIHBvcHRpbi1pbnB1dC1tc2ctMiBwb3B0aW4taW5wdXQtZXJyb3JcIj4nK3ZhbGlkYXRpb25NZXNzYWdlKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0galEyMjQocGhvbmVJbnB1dCkucGFyZW50cyhcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkudG9wIC0gY29udGFpbmVyLm9mZnNldCgpLnRvcCkvdGhpc19zY2FsZSkgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJoZWlnaHRcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGpRMjI0KHBob25lSW5wdXQpLm9uKFwiaW5wdXRcIiwgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYW5pdGl6ZWRWYWx1ZSA9IHBob25lSW5wdXQudmFsdWUucmVwbGFjZSgvW15cXGQoKStcXC1cXHNdL2csICcnKVxuICAgICAgICAgICAgICAgICAgICBwaG9uZUlucHV0LnZhbHVlID0gc2FuaXRpemVkVmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZihqUTIyNChwaG9uZUlucHV0KS5hdHRyKCdkYXRhLWFjdGlvbi12YWxpZGF0ZScpID09IFwiaW50ZXJuYXRpb25hbFwiKXtcblxuICAgICAgICAgICAgICAgIGpRMjI0KHBob25lSW5wdXQpLnJlbW92ZUF0dHIoXCJyZXF1aXJlZFwiKTtcbiAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vZmYoXCJvcGVuOmNvdW50cnlkcm9wZG93biBjbG9zZTpjb3VudHJ5ZHJvcGRvd24gZm9jdXMgYmx1clwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdGluX2xhbmcgPSBqUTIyNCh0aGlzX3BvcCkuZmluZCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lcicpLmF0dHIoJ2RhdGEtbGFuZycpO1xuICAgICAgICAgICAgICAgIGlmKHBvcHRpbl9sYW5nID09IFwiZW5cIil7XG4gICAgICAgICAgICAgICAgICAgIHBob25lSW5wdXQuc3R5bGUuc2V0UHJvcGVydHkoJ3BhZGRpbmctbGVmdCcsICc3MHB4JywgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBob25lSW5wdXQuc3R5bGUuc2V0UHJvcGVydHkoJ3BhZGRpbmctcmlnaHQnLCAnNzBweCcsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgalEyMjQocGhvbmVJbnB1dCkucGFyZW50cyhcIi5mb3JtLWlucHV0LWNsYXNzXCIpLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnei1pbmRleCcsICc5OTk5OTgnLCAnaW1wb3J0YW50Jyk7XG5cbiAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vbihcIm9wZW46Y291bnRyeWRyb3Bkb3duXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcC5maW5kKFwiLmlucHV0cy1jb250YWluZXJcIikuY3NzKFwiei1pbmRleFwiLCBcIjk5OVwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vbihcIm9wZW46Y291bnRyeWRyb3Bkb3duXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcC5maW5kKFwiLmlucHV0cy1jb250YWluZXJcIikuY3NzKFwiei1pbmRleFwiLCB0aGlzX3BvcC5maW5kKFwiLmlucHV0cy1jb250YWluZXJcIikuYXR0cihcImRhdGEtei1pbmRleFwiKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgalEyMjQocGhvbmVJbnB1dCkub24oXCJmb2N1c1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZihqUTIyNChwaG9uZUlucHV0KS5wYXJlbnRzKFwiLml0aVwiKS5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0aUVsZSA9IHdpbmRvdy5pbnRsVGVsSW5wdXQocGhvbmVJbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvdW50cnk6IHBvcF9jb3VudHJ5X2NvZGUudG9Mb3dlckNhc2UoKSAhPT0gXCJ6elwiID8gcG9wX2NvdW50cnlfY29kZSA6IFwidXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9QbGFjZWhvbGRlcjogXCJhZ2dyZXNzaXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpb25hbE1vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsc1NjcmlwdDogXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2ludGwtdGVsLWlucHV0QDE4LjIuMS9idWlsZC9qcy91dGlscy5qc1wiLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaXRpRWxlLnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vbihcImJsdXJcIiwgZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgaW50bFRlbElucHV0VXRpbHMgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEZvcm1hdCA9IChwaG9uZUlucHV0LnZhbHVlWzBdPT09XCIrXCIpID8gaW50bFRlbElucHV0VXRpbHMubnVtYmVyRm9ybWF0LklOVEVSTkFUSU9OQUwgOiBpbnRsVGVsSW5wdXRVdGlscy5udW1iZXJGb3JtYXQuTkFUSU9OQUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGFnID0gdGhpc19wb3AuZmluZChcIi5pdGlfX3NlbGVjdGVkLWZsYWcgLml0aV9fZmxhZ1wiKS5hdHRyKFwiY2xhc3NcIikuc2xpY2UoLTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkTnVtYmVyID0gaW50bFRlbElucHV0VXRpbHMuZm9ybWF0TnVtYmVyKHBob25lSW5wdXQudmFsdWUsIGZsYWcsIGN1cnJlbnRGb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG9uZUlucHV0LnZhbHVlID0gZm9ybWF0dGVkTnVtYmVyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRGb3JtYXR0ZWROdW1iZXIgPSBpbnRsVGVsSW5wdXRVdGlscy5mb3JtYXROdW1iZXIocGhvbmVJbnB1dC52YWx1ZSwgZmxhZywgaW50bFRlbElucHV0VXRpbHMubnVtYmVyRm9ybWF0LklOVEVSTkFUSU9OQUwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5hdHRyKFwiZGF0YS1pbnQtcGhvbmVcIiwgaW50Rm9ybWF0dGVkTnVtYmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdGlvbk1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGkgPSB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy5nZXRJbnN0YW5jZShwaG9uZUlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWRhdGlvbkVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBob25lSW5wdXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbGlkYXRpb25NZXNzYWdlID0gXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBudW1iZXIgYmVsb3dcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXRpLmlzVmFsaWROdW1iZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZGF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbk1lc3NhZ2UgPSBpZlVzZXJsYW5nSXNIZSgpID8gXCLXnteh16TXqCDXnNeQINeq16fXmdefIOKAkyDXmdepINec16DXodeV16og16nXldeRXCIgOiBcIkludmFsaWQgbnVtYmVyIC0gcGxlYXNlIHRyeSBhZ2FpblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsaWRhdGlvbk1lc3NhZ2UgIT0gXCJcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZG9tSWQgPSBwYXJzZUludChNYXRoLnJhbmRvbSgpKjEwMDAwMDAwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHBob25lSW5wdXQpLnBhcmVudCgpLmFwcGVuZCgnPHNwYW4gaWQ9XCJtJytyYW5kb21JZCsnXCIgY2xhc3M9XCJwb3B0aW4taW5wdXQtbXNnIHBvcHRpbi1pbnB1dC1tc2ctMyBwb3B0aW4taW5wdXQtZXJyb3JcIj4nK3ZhbGlkYXRpb25NZXNzYWdlKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0galEyMjQocGhvbmVJbnB1dCkucGFyZW50cyhcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkudG9wIC0gY29udGFpbmVyLm9mZnNldCgpLnRvcCkvdGhpc19zY2FsZSkgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJoZWlnaHRcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqUTIyNChwaG9uZUlucHV0KS5vbihcImlucHV0XCIsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2FuaXRpemVkVmFsdWUgPSBwaG9uZUlucHV0LnZhbHVlLnJlcGxhY2UoL1teMC05KClcXHMtXS9nLCAnJyk7IFxuICAgICAgICAgICAgICAgICAgICBwaG9uZUlucHV0LnZhbHVlID0gc2FuaXRpemVkVmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBiaXJ0aGRheURhdGVWYWxpZGF0aW9uKHBvcHRpbikge1xuICAgICAgICAgICAgdmFyIHRoaXNfcG9wID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIik7XG4gICAgICAgICAgICB2YXIgYmlydGhkYXlEYXRlSW5wdXQgPSB0aGlzX3BvcC5maW5kKFwiaW5wdXQjcG9wdGluRGVzaWduQmlydGhkYXlGaWVsZFwiKTtcblxuICAgICAgICAgICAgYmlydGhkYXlEYXRlSW5wdXQub2ZmKCdibHVyJylcbiAgICAgICAgICAgIGJpcnRoZGF5RGF0ZUlucHV0Lm9mZignZm9jdXMudmFsaWRhdGlvbicpXG4gICAgICAgICAgICBiaXJ0aGRheURhdGVJbnB1dC5vbignZm9jdXMudmFsaWRhdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1tc2dcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBiaXJ0aGRheURhdGVJbnB1dC5vZmYoJ2JsdXIudmFsaWRhdGlvbicpXG4gICAgICAgICAgICBiaXJ0aGRheURhdGVJbnB1dC5vbignYmx1ci52YWxpZGF0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB2YXIgYmlydGhkYXkgPSBiaXJ0aGRheURhdGVJbnB1dC52YWwoKTtcbiAgICAgICAgICAgICAgICBpZihiaXJ0aGRheSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmlydGhkYXlEYXRlID0gbmV3IERhdGUoYmlydGhkYXkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZihiaXJ0aGRheURhdGUgPj0gdG9kYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvcl9tZXNzYWdlID0gaWZVc2VybGFuZ0lzSGUoKSA/IFwi15nXqSDXnNeU15bXmdefINeq15DXqNeZ15og15zXmdeT15Qg16rXp9eZ158uXCIgOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGJpcnRoZGF5LlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbUlkID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaXJ0aGRheURhdGVJbnB1dC5wYXJlbnQoKS5hcHBlbmQoJzxzcGFuIGlkPVwibScrcmFuZG9tSWQrJ1wiIGNsYXNzPVwicG9wdGluLWlucHV0LW1zZyBwb3B0aW4taW5wdXQtbXNnLTcgcG9wdGluLWlucHV0LWVycm9yXCI+JytlcnJvcl9tZXNzYWdlKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gYmlydGhkYXlEYXRlSW5wdXQucGFyZW50cyhcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkudG9wIC0gY29udGFpbmVyLm9mZnNldCgpLnRvcCkvdGhpc19zY2FsZSkgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJoZWlnaHRcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gICBcblxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVBvcHRpbklucHV0cyhwb3B0aW4pe1xuICAgICAgICAgICAgcG9wdGluUGhvbmVWYWxpZGF0aW9uKHBvcHRpbik7XG4gICAgICAgICAgICBwb3B0aW5FbWFpbFZhbGlkYXRpb24ocG9wdGluKTtcbiAgICAgICAgICAgIGJpcnRoZGF5RGF0ZVZhbGlkYXRpb24ocG9wdGluKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYocG9wdGluVmFsaWRhdGlvbkxvYWRlZCA9PSB0cnVlKXtcbiAgICAgICAgICAgIHZhbGlkYXRlUG9wdGluSW5wdXRzKHBvcHRpbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9waG9uZS12YWxpZGF0aW9uL2Nzcy9pbnRsVGVsSW5wdXQuY3NzXCIvPicpO1xuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdDIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluVmFsaWRhdGlvbkxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVQb3B0aW5JbnB1dHMocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Mi5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdDIuc3JjID0gXCJodHRwczovL2Nkbi5wb3B0LmluL3ZhbGlkYXRpb24vZW1haWwvZW1haWwtYXV0b2ZpbGwuanNcIjtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQyKTtcbiAgICAgICAgICAgICAgICB9LDEwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBjZG5fc2VydmVyK1wiL3Bob25lLXZhbGlkYXRpb24vanMvaW50bFRlbElucHV0Lm1pbi5qc1wiO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogUG9wdGluIC0+IFBvcHRpbiBPYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogRG93bmxvYWQgJiBhcHBlbmQgcG9wdGluIGxpZ2h0Ym94IHRpbWVyIHN0eWxlIG9ubHkgaWYgcG9wdGluIGlzIHRpbWVyIHR5cGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lckRvd25sb2FkKHBvcHRpbil7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy50aW1lcl92ZXIgPT0gMSB8fFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy50aW1lcl92ZXIgPT0gMCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJsaWdodGJveF9mb3JtYXRfNVwiIHx8XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJsaWdodGJveF9mb3JtYXRfMTFcIiB8fFxuICAgICAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiYmFyX2Zvcm1hdF81XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImJhcl9mb3JtYXRfMTBcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKXtcbiAgICAgICAgICAgIC8vIHNob3dMb2coJ3RpbWVyRG93bmxvYWQnKTtcbiAgICAgICAgICAgIC8valEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxzY3JpcHQgc3JjPVwiJytzM19saW5rKycvanMvdGltZXIuanNcIiBhc3luYz10cnVlPjwvc2NyaXB0PicpO1xuICAgICAgICAgICAgaWYoalEyMjQoXCIjcG9wdGluLXRpbWVyLXYxXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBpZD1cInBvcHRpbi10aW1lci12MVwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvdGltZXIuY3NzP3Zlcj0xMFwiIGRlZmVyPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gICBlbHNlIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy50aW1lcl92ZXIgPT0gMikge1xuICAgICAgICAgICAgaWYoalEyMjQoXCIjcG9wdGluLXRpbWVyLXYyXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBpZD1cInBvcHRpbi10aW1lci12MlwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3Mvdl8yL3RpbWVyLmNzcz92ZXI9MTBcIiBkZWZlcj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXHQvKipcblx0KiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuXHQqIHBhcmFtZXRlcnMgICAgICAgOiBQb3B0aW4gLT4gUG9wdGluIE9iamVjdFxuXHQqIERlc2MgICAgICAgICAgICAgOiBEb3dubG9hZCAmIGFwcGVuZCBwb3B0aW4gd2hlZWwgc3R5bGUgb25seSBpZiBwb3B0aW4gaXMgd2hlZWwgdHlwZVxuXHQqL1xuXHRmdW5jdGlvbiB3aGVlbERvd25sb2FkKHBvcHRpbikge1xuXHRcdGlmIChwb3B0aW4ucG9wdGluX3R5cGUgKyAnXycgKyBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImdhbWlmaWVkX2Zvcm1hdF8zXCIpIHtcblx0XHRcdC8vIHNob3dMb2coJ3doZWVsRG93bmxvYWQnKTtcblx0XHRcdGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaWQ9XCJwb3B0aW4tdGltZXItdjFcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiJyArIGNzc19saW5rICsgJy9jc3Mvdl8yL3NwaW4td2hlZWwuY3NzXCIgZGVmZXI+Jyk7XG5cdFx0fVxuXHR9O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogRG93bmxvYWQgJiBhcHBlbmQgalF1ZXJ5dWlcbiAgICAgKi9cbiAgICAvLyBmdW5jdGlvbiBkb3dubG9hZEpxdWVyeVVpKCl7XG4gICAgLy8gICAgIGlmIChqUTIyNCAmJiAhalEyMjQudWkpIHtcbiAgICAvLyAgICAgICAgIHNob3dMb2coJ2Rvd25sb2FkSnF1ZXJ5VWknKTtcbiAgICAvLyAgICAgICAgIGpxdWVyeV9saW5rID0gJzxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5dWkvMS4xMi4wL2pxdWVyeS11aS5taW4uanNcIiBkZWZlcj48L3NjcmlwdD4nO1xuICAgIC8vICAgICAgICAgdHJ5e1xuICAgIC8vICAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKGpxdWVyeV9saW5rKTtcbiAgICAvLyAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgIC8vICAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIGZ1bmN0aW9uIGRvd25sb2FkUG9wdGluQmFja2dyb3VuZChwb3B0aW4pe1xuICAgIC8vICAgICAvLyBJbmplY3QgcG9wdGluIHRvIERPTSBcbiAgICAvLyAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZChwb3B0aW4ucG9wdGluKTtcbiAgICAvLyAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdkaXNwbGF5Jywnbm9uZScpLmFkZENsYXNzKCdwb3B0aW5fYmFja2dyb3VuZF8nK3BvcHRpbi5wb3B0aW5faWQpO1xuICAgIC8vICAgICBqUTIyNCgnLnBvcHRpbl9iYWNrZ3JvdW5kXycrcG9wdGluLnBvcHRpbl9pZCkuYXR0cignZGF0YS1wb3B0aW4taWQnLCcnKTtcbiAgICAvLyAgICAgcG9wdGluX3R5cGVfZm9ybWF0ID0gcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdDtcbiAgICAvLyAgICAgJGNsYXNzID0gKCAoIHBvcHRpbl90eXBlX2Zvcm1hdCA9PSAnbGlnaHRib3hfZm9ybWF0XzMnIHx8IHBvcHRpbl90eXBlX2Zvcm1hdCA9PSAnbGlnaHRib3hfZm9ybWF0XzknICkgPyAnLmFsdGVybmF0aXZlLWJhY2tncm91bmQnIDogJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXInICk7XG4gICAgLy8gICAgICR0aGlzID0galEyMjQoXCIucG9wdGluX2JhY2tncm91bmRfXCIrcG9wdGluLnBvcHRpbl9pZCtcIiBcIiskY2xhc3MpLmNzcygnYmFja2dyb3VuZC1pbWFnZScpO1xuICAgIC8vICAgICBpZiAoJHRoaXMgIT0gdW5kZWZpbmVkICYmICR0aGlzICE9ICdub25lJyAmJiAkdGhpcy5pbmRleE9mKCdkYXRhOmltYWdlJykgPT0gLTEgKXtcbiAgICAvLyAgICAgICAgIHZhciBkb3dubG9hZGluZ0ltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgLy8gICAgICAgICBkb3dubG9hZGluZ0ltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICAgICAgICAgc2hvd0xvZygnKioqKioqKioqKioqKioqKipsb2FkaW1hZ2UqKioqKioqKioqKioqKionKTtcbiAgICAvLyAgICAgICAgICAgICAvL2pRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIFwiKyRjbGFzcykuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywndXJsKCcrdGhpcy5zcmMrJyknKTsgICBcbiAgICAvLyAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW5fYmFja2dyb3VuZF9cIitwb3B0aW4ucG9wdGluX2lkKS5yZW1vdmUoKTtcbiAgICAvLyAgICAgICAgIH07XG4gICAgLy8gICAgICAgICBpbWFnZV91cmwgPSAkdGhpcy5yZXBsYWNlKCd1cmwoJywnJykucmVwbGFjZSgnKScsJycpLnJlcGxhY2UoL1xcXCIvZ2ksIFwiXCIpO1xuICAgIC8vICAgICAgICAgZG93bmxvYWRpbmdJbWFnZS5zcmMgPSBpbWFnZV91cmw7XG4gICAgLy8gICAgIH1lbHNle1xuICAgIC8vICAgICAgICAgalEyMjQoXCIucG9wdGluX2JhY2tncm91bmRfXCIrcG9wdGluLnBvcHRpbl9pZCkucmVtb3ZlKCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBkb3dubG9hZFBvcHRpblRlbXBsYXRlRnJvbVMzKHBvcHRpbil7XG4gICAgICAgIHNob3dMb2coJ2Rvd25sb2FkUG9wdGluVGVtcGxhdGVGcm9tUzMtcG9wdGluX2lkOiAnKyBwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgLy8gSW5qZWN0IHBvcHRpbiB0byBET00gXG4gICAgICAgIGlmIChhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gPT0gJycpe1xuICAgICAgICAgICAgalEyMjQud2hlbiggalEyMjQuYWpheChwb3B0aW4ucG9wdGluX3VybCkpLnRoZW4oZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSICkge1xuXG4gICAgICAgICAgICAgICAgc2hvd0xvZygnZG93bmxvYWRQb3B0aW5UZW1wbGF0ZUZyb21TMy0+c3RhdHVzOiAnKyB0ZXh0U3RhdHVzKTtcblxuICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW4gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGFsbF9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9IGRhdGFcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluc1twb3B0aW4ucG9wdGluX2lkXSAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHdpbmRvdy5TaG9waWZ5ICE9PSB1bmRlZmluZWQgJiYgd2luZG93LlNob3BpZnkuc2hvcCl7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiggalEyMjQocG9wdGluLnBvcHRpbikuZmluZChcImlucHV0I3Nob3BpZnlQcm9kdWN0c0pTT05cIikubGVuZ3RoID4gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2hvcGlmeVJlY2VudGx5Vmlld2VkUHJvZHVjdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvcGlmeVByb2R1Y3RzSlNPTiA9IEpTT04ucGFyc2UoIGpRMjI0KHBvcHRpbi5wb3B0aW4pLmZpbmQoXCJpbnB1dCNzaG9waWZ5UHJvZHVjdHNKU09OXCIpLnZhbCgpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc2hvcGlmeVByb2R1Y3RzSlNPTiAmJiAoc2hvcGlmeVByb2R1Y3RzSlNPTi5jYXRlZ29yeSA9PSBcImxhc3RfdmlzaXRlZFwiIHx8IHNob3BpZnlQcm9kdWN0c0pTT04uY2F0ZWdvcnkgPT0gXCJwcm9kdWN0X2luX2NhcnRcIikgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTaG9waWZ5UmVjb21tZW5kZWRQcm9kdWN0cyhwb3B0aW4sIHNob3BpZnlQcm9kdWN0c0pTT04pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmRpc3BsYXkgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdzaG93IHRlYXNlcnMgaWYgcHJvZHVjdHMgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0VGVhc2VyKHBvcHRpbiwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnc2hvdyB0ZWFzZXJzIGlmIHByb2R1Y3RzIGF2YWlsYWJsZSBmb3IgY29sbGVjdGlvbnMgYW5kIG1hbnVhbF9wcm9kdWN0cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RUZWFzZXIocG9wdGluLDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFRlYXNlcihwb3B0aW4sMCk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhY3RUZWFzZXIocG9wdGluLDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERvd25sb2FkIHBvcHRpbiB0aW1lciBjc3MgJiBqc1xuICAgICAgICAgICAgICAgIHRpbWVyRG93bmxvYWQocG9wdGluKTtcblx0XHRcdFx0d2hlZWxEb3dubG9hZChwb3B0aW4pO1xuICAgICAgICAgICAgICAgIHNldFBvcHRpbnNBcnJheShwb3B0aW4ucG9wdGluX2lkKTtcblxuICAgICAgICAgICAgICAgIC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5kYXRhX3BvaW50ID0gbmV3IERhdGFQb2ludCgpO1xuICAgICAgICAgICAgICAgIC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5kYXRhX3BvaW50Lm9uTG9hZChwb3B0aW4ucG9wdGluX2lkKTtcblxuICAgICAgICAgICAgICAgIHNldFBvcHRpblNpemUocG9wdGluKTtcbiAgICAgICAgICAgICAgICBzZXRBdXRvUGlsb3QocG9wdGluKTtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLmRpc3BsYXkpe1xuICAgICAgICAgICAgICAgICAgICBzZXRQb3B0aW5UcmlnZ2VyKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LGZ1bmN0aW9uKCBkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgICAgICAgIHNob3dMb2coJ2Rvd25sb2FkUG9wdGluVGVtcGxhdGVGcm9tUzMtPmVycm9yOiAnK2RhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBQb3B0aW4gLT4gUG9wdGluIE9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBzZXQgdHJpZ2dlciBwZXIgcG9wdGluXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJ1biBzZXRQb3B0aW4oKSBpZiB0cmlnZ2VyIGlzIGFjdGl2YXRlZFxuICAgICAqIHRyaWdnZXIxICAgICAgICAgOiBSZWFjaGluZyB0byBjbG9zZSB0YWJcbiAgICAgKiB0cmlnZ2VyMiAgICAgICAgIDogQWZ0ZXIgJ1gnIHNlY29uZHNcbiAgICAgKiB0cmlnZ2VyMyAgICAgICAgIDogQWZ0ZXIgJ1gnIHBhZ2Ugc2Nyb2xsZWRcbiAgICAgKiB0cmlnZ2VyNCAgICAgICAgIDogQWZ0ZXIgJ1gnIGNsaWNrIG9uIHBhZ2VcbiAgICAgKiB0cmlnZ2VyNSAgICAgICAgIDogQWZ0ZXIgJ1gnIHBhZ2UgdmlzaXRcbiAgICAgKi9cblxuICAgIHZhciB3aXhfY2FydF90cmlnZ2VyX3BvcHRpbnMgPSBbXTtcbiAgICBmdW5jdGlvbiBzZXRQb3B0aW5UcmlnZ2VyKHBvcHRpbikge1xuXG4gICAgICAgIHNob3dMb2coJ3NldFBvcHRpblRyaWdnZXIgZm9yOiAnICsgcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgIHZhciBpc0VtYmVkZGVkUG9wdGluID0gcG9wdGluLnBvcHRpbl90eXBlID09IFwiZW1iZWRkZWRcIjtcbiAgICAgICAgLy9hcHBlbmRQb3B0aW4ocG9wdGluKTtcblxuICAgICAgICAvLyBJbW1lZGlhdGVseSBhZGQgZW1iZWRkZWQgZm9ybXNcbiAgICAgICAgcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZSA9IGlzRW1iZWRkZWRQb3B0aW4gPyAwIDogcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZTtcblxuICAgICAgICAvLyBTZXQgZGVmYXVsdCB0cmlnZ2VycyB2YWx1ZXNcbiAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlciA9IHtcbiAgICAgICAgICAgIGNvbnZlcnQ6IGZhbHNlLFxuICAgICAgICAgICAgcG9wdGluX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjcm9sbF9mbGFnOiB0cnVlLFxuICAgICAgICAgICAgbW91c2VfbGVhdmVfZmxhZzogdHJ1ZSxcbiAgICAgICAgICAgIGNsaWNrX2NvdW50ZXI6IDAsXG4gICAgICAgICAgICB0cmlnZ2VyOiAnJyxcbiAgICAgICAgICAgIGNsb3NlX3RyaWdnZXI6ICcnLFxuICAgICAgICAgICAgc2hvd246IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByZXZpZXdQb3B0aW5JZCA9PT0gcG9wdGluLnBvcHRpbl9pZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3UG9wdGluID0gc2V0UHJldmlld1BvcHRpbihwb3B0aW4pO1xuXG4gICAgICAgICAgICBhcHBlbmRQb3B0aW4obmV3UG9wdGluKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgaWYgVXNlciBjbG9zZSB0YWJcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGlzcGxheV9hZnRlcl9leGl0X3dlYnNpdGVfYWN0aXZlID09IFwieWVzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBUcmFjayBwYWdlcyBvbmx5IGlmIG9uIG1vYmlsZVxuICAgICAgICAgICAgICAgIGlmIChpZk1vYmlsZVBvcHRpbikge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdpbmRvdyBoaXN0b3J5IGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHdoZW5Hb2luZ0JhY2socG9wdGluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhcImdvaW5nIGJhY2sgXCIrcG9wX3VybHMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwb3BfdXJscy5sZW5ndGggPCAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2hMb2NhdGlvbiA9IGxvY2F0aW9uLmhhc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNoU3BsaXQgPSBoYXNoTG9jYXRpb24uc3BsaXQoXCIjIS9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNoTmFtZSA9IGhhc2hTcGxpdFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2hOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNoID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUS5pZkFjdGl2ZSgpICYmIFBRLmlmUmVsZXZlbnQocG9wdGluKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdsb2FkIGFmdGVyIGJhY2sgYnV0dG9uIHRyaWdnZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgocG9wdGluc1twb3B0aW4ucG9wdGluX2lkXSAmJiBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLm1vdXNlX2xlYXZlX2ZsYWcgJiYgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYWN0aXZlKSB8fCAhcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5zaG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdsb2FkIGFmdGVyIGJhY2sgYnV0dG9uIHRyaWdnZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIudHJpZ2dlciA9IFwiY2xvc2UgdGFiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0UG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4sIChpc0VtYmVkZGVkUG9wdGluID8gdHJ1ZSA6IG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5tb3VzZV9sZWF2ZV9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY3JlYXRlIGZha2UgaGlzdHJveSBzdGF0ZXMgaWYgb24gU1BBIGJlY2F1c2UgdGhleSBjcmVhdGUgdGhlaXIgb3duXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcG9wdGluX3NpbmdsZV9wYWdlX2FwcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VTdGF0ZSA9IDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhpc3Rvcnkuc3RhdGUgJiYgd2luZG93Lmhpc3Rvcnkuc3RhdGUucGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlU3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZS5wYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3BhZ2U6IHBhZ2VTdGF0ZSArIDF9LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTbGlkZSBiYWNrIHRvIHByZXZpb3VzIHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuR29pbmdCYWNrKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkubW91c2VsZWF2ZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnZTogJywgZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbikgJiYgc291cmNlQ29kZVRhcmdldChwb3B0aW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IGUuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gZS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0galEyMjQod2luZG93KS5oZWlnaHQoKSAtIGUuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygndG9wOiAnK3RvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygncmlnaHQ6ICcrcmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ2JvdHRvbTogJytib3R0b20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ2xlZnQ6ICcrbGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfdGFnID0gZS50YXJnZXQudGFnTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc190YWcudG9Mb3dlckNhc2UoKSA9PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJpZ2h0ID4gMCAmJiBib3R0b20gPiAwICYmIHRvcCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ2xvYWQgYWZ0ZXIgbW91c2UgbGVhdmUgdHJpZ2dlcjogJyArIHBvcHRpbi5wb3B0aW5faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUFEuaWZBY3RpdmUoKSAmJiBQUS5pZlJlbGV2ZW50KHBvcHRpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ25vdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0gJiYgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5tb3VzZV9sZWF2ZV9mbGFnICYmIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FjdGl2ZSkgfHwgIXBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2hvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3llcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnRyaWdnZXIgPSBcImNsb3NlIHRhYlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5tb3VzZV9sZWF2ZV9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJpZ2dlciBpZiA1IHNlY29uZHMgd2FzIHBhc3NlZCBhZnRlciBwYWdlIGxvYWRcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGlzcGxheV9hZnRlcl9zZWNfYWN0aXZlICE9IFwibm9cIikge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgc2V0IHdlYnNpdGUgdGltZSB0cmFja2VyIGNvb2tpZSBpZiBvbmUgb2YgdGhlIHBvcHRpbnMgaGFzIGFjdGl2ZSBvbiB3ZWJzaXRlXG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kaXNwbGF5X2FmdGVyX3NlY19hY3RpdmVfb24gPT0gJ3dlYnNpdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyYWNraW5nIGhvdyBtdWNoIHRpbWUgdGhlIHVzZXIgaGFzIHNwZW50IG9uIHRoZSBjbGllbnQgd2Vic2l0ZSBpbiB0b3RhbCwgb24gYWxsIHBhZ2VzIHdoZXJlIHBpeGVsIGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fc2Vzc2lvbl9hY2NvdW50X3RpbWVfJyArIHBvcHRpbi5hY2NvdW50X2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB0aW1lciBjb29raWUgaWYgbm90IHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0X2F0OiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyeV9hdDogRGF0ZS5ub3coKSArIDYwICogMTAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3Nlc3Npb25fYWNjb3VudF90aW1lXycgKyBwb3B0aW4uYWNjb3VudF9pZCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksICgoMSAvIDI0KSAvIDYwKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBBZnRlciB0aGUgY29va2llIGlzIHNldCwgaW5jcmVhc2UgdGhlIHRpbWVyIHRvIGV4cGlyZSBpbiBhIG1pbnV0ZSBldmVyeSAyMCBzZWNzXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B0aW5fc2Vzc2lvbl9hY2NvdW50X3RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbkdldENvb2tpZSgncG9wdGluX3Nlc3Npb25fYWNjb3VudF90aW1lXycgKyBwb3B0aW4uYWNjb3VudF9pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gSlNPTi5wYXJzZShwb3B0aW5HZXRDb29raWUoJ3BvcHRpbl9zZXNzaW9uX2FjY291bnRfdGltZV8nICsgcG9wdGluLmFjY291bnRfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChjb29raWUuZXhwaXJ5X2F0IC0gRGF0ZS5ub3coKSkgLyAxMDAwKSA8IDYwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0X2F0OiBjb29raWUuc2V0X2F0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJ5X2F0OiBEYXRlLm5vdygpICsgNjAgKiAxMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3Nlc3Npb25fYWNjb3VudF90aW1lXycgKyBwb3B0aW4uYWNjb3VudF9pZCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksICgoMSAvIDI0KSAvIDYwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSW4gc29tZSBjYXNlcywgaW5hY3RpdmUgdGFicyBtaWdodCBiZSBjYXVzaW5nIHNldCBpbnRlcnZhbCB0byBzdG9wIGFuZCBjb29raWUgdG8gZXhwaXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldF9hdDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJ5X2F0OiBEYXRlLm5vdygpICsgNjAgKiAxMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9zZXNzaW9uX2FjY291bnRfdGltZV8nICsgcG9wdGluLmFjY291bnRfaWQsIEpTT04uc3RyaW5naWZ5KGRhdGEpLCAoKDEgLyAyNCkgLyA2MCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwICogMjApO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyX2Fycml2YWxfdGltZSA9IEpTT04ucGFyc2UocG9wdGluR2V0Q29va2llKCdwb3B0aW5fc2Vzc2lvbl9hY2NvdW50X3RpbWVfJyArIHBvcHRpbi5hY2NvdW50X2lkKSkuc2V0X2F0IC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJfdGltZV9zcGVudCA9IChEYXRlLm5vdygpIC8gMTAwMCkgLSB1c2VyX2Fycml2YWxfdGltZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFVEFcbiAgICAgICAgICAgICAgICAvLyBJZiB0aW1lciBzZXQgdG8gcGFnZSwgc2hvdyBhZnRlciB0aW1lciBpdHNlbGZcbiAgICAgICAgICAgICAgICAvLyBJZiB0aW1lciBzZXQgdG8gd2Vic2l0ZSwgc3VidHJhY3QgdGltZSBzcGVudCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgLy8gb24gdGhlIHdlYnNpdGUgZnJvbSB0aGUgdGltZXJcbiAgICAgICAgICAgICAgICAvLyBNdWx0aXBseSBieSAxMDAwIHRvIGdldCBzZWNzIGluIGJvdGggY2FzZXNcbiAgICAgICAgICAgICAgICB2YXIgZXRhID0gcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZV9vbiA9PT0gJ3BhZ2UnID9cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZSAqIDEwMDAgOlxuICAgICAgICAgICAgICAgICAgICAocG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZSAtIHVzZXJfdGltZV9zcGVudCkgKiAxMDAwO1xuXG4gICAgICAgICAgICAgICAgcG9wdGluVGltZURlbGF5VHJpZ2dlciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdsb2FkIGFmdGVyICcrcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZSsnIHNlY29uZHMgdHJpZ2dlciBvbiAnK3BvcHRpbi5kaXNwbGF5X2FmdGVyX3NlY19hY3RpdmVfb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoRW5nYWdlbWVudFdpdGhPdGhlclBvcHRpbnMocG9wdGluKSAmJiBzb3VyY2VDb2RlVGFyZ2V0KHBvcHRpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUS5pZkFjdGl2ZSgpICYmIFBRLmlmUmVsZXZlbnQocG9wdGluKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hY3RpdmUgfHwgIXBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2hvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNlcnQgcG9wdXAgaW50byBib2R5IHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIudHJpZ2dlciA9IFwiYWZ0ZXIgXCIgKyBwb3B0aW4uZGlzcGxheV9hZnRlcl9zZWNfYWN0aXZlICsgXCIgc2Vjb25kc1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0UG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy99LCAocG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZT09MCA/IDAuMyA6IGRpc3BsYXlfYWZ0ZXJfc2VjX2FjdGl2ZSkqMTAwMCk7XG4gICAgICAgICAgICAgICAgfSwgZXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJpZ2dlciBpZiB1c2VyIHNjcm9sbCBkb3duIDI1JSBvZiB0aGUgcGFnZVxuICAgICAgICAgICAgaWYgKHBvcHRpbi5kaXNwbGF5X2FmdGVyX3Njcm9sbF9hY3RpdmUgIT0gXCJub1wiICYmICFzY3JhdGNoUG9wdXBBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBzaG93TG9nKHBvcHRpbi5kaXNwbGF5X2FmdGVyX3Njcm9sbF9hY3RpdmUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSBqUTIyNChkb2N1bWVudCkuaGVpZ2h0KCkgLSBqUTIyNCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbFRvVHJpZ2dlciA9IHBhZ2VIZWlnaHQgKiBwb3B0aW4uZGlzcGxheV9hZnRlcl9zY3JvbGxfYWN0aXZlICogMC4wMTtcbiAgICAgICAgICAgICAgICBqUTIyNCh3aW5kb3cpLm9uKCdzY3JvbGwucG9wdGluVHJpZ2dlclNjcm9sbEV2ZW50JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdlSGVpZ2h0ID0galEyMjQoZG9jdW1lbnQpLmhlaWdodCgpIC0galEyMjQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sVG9UcmlnZ2VyID0gcGFnZUhlaWdodCAqIHBvcHRpbi5kaXNwbGF5X2FmdGVyX3Njcm9sbF9hY3RpdmUgKiAwLjAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWZfdHJpZ3JlZDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoalEyMjQod2luZG93KS5zY3JvbGxUb3AoKSA+PSBzY3JvbFRvVHJpZ2dlciAmJiBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnNjcm9sbF9mbGFnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2Nyb2xsX2ZsYWcgPT0gZmFsc2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hY3RpdmUpIHx8ICFwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnNob3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnbG9hZCBhZnRlciAnICsgcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2Nyb2xsX2FjdGl2ZSArICcgc2Nyb2xsIHBhZ2UgdHJpZ2dlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbikgJiYgc291cmNlQ29kZVRhcmdldChwb3B0aW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUS5pZkFjdGl2ZSgpICYmIFBRLmlmUmVsZXZlbnQocG9wdGluKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHBvcHVwIGludG8gYm9keSB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnRyaWdnZXIgPSBcImFmdGVyIFwiICsgcG9wdGluLmRpc3BsYXlfYWZ0ZXJfc2Nyb2xsX2FjdGl2ZSArIFwiJSBzY3JvbGxpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2Nyb2xsX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2Nyb2xsX2ZsYWcgPT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LCAzMDApXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyaWdnZXIgaWYgdXNlciBjbGljayBYIHRpbWUgaW4gdGhlIHBhZ2VcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGlzcGxheV9hZnRlcl9wYWdlX2NsaWNrX251bWJlcl9hY3RpdmUgIT0gXCJub1wiKSB7XG4gICAgICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLm9uKCdjbGljayB0YXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2cocG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbGlja19jb3VudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbGlja19jb3VudGVyKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLmNsaWNrX2NvdW50ZXIgPT0gcG9wdGluLmRpc3BsYXlfYWZ0ZXJfcGFnZV9jbGlja19udW1iZXJfYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYWN0aXZlIHx8ICFwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnNob3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoRW5nYWdlbWVudFdpdGhPdGhlclBvcHRpbnMocG9wdGluKSAmJiBzb3VyY2VDb2RlVGFyZ2V0KHBvcHRpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnbG9hZCBhZnRlciAnICsgcG9wdGluLmRpc3BsYXlfYWZ0ZXJfcGFnZV9jbGlja19udW1iZXJfYWN0aXZlICsgJyBjbGlja3MgcGFnZSB0cmlnZ2VyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluc2VydCBwb3B1cCBpbnRvIGJvZHkgdGFnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIudHJpZ2dlciA9IFwiYWZ0ZXIgXCIgKyBwb3B0aW4uZGlzcGxheV9hZnRlcl9wYWdlX2NsaWNrX251bWJlcl9hY3RpdmUgKyBcIiBjbGlja3NcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFBRLmlmQWN0aXZlKCkgJiYgUFEuaWZSZWxldmVudChwb3B0aW4pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbGlja19jb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJpZ2dlciBpZiB1c2VyIHZpc2l0IFggcGFnZXNcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGlzcGxheV9hZnRlcl92aXNpdF9wYWdlX2FjdGl2ZSAhPSBcIm5vXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBub3QgdHJpZ2dyZWQgeWV0XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImRpc3BsYXlfYWZ0ZXJfdmlzaXRfcGFnZV9hY3RpdmVfXCIgKyBwb3B0aW4ucG9wdGluX2lkKSAhPSBcImRpc2FjdGl2ZVwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHVybCB3YXMgY2hhbmdlZCBhbmQgbm90IGp1c3QgcGFnZSByZWxvYWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGFnZV91cmxfXCIgKyBwb3B0aW4ucG9wdGluX2lkKSAhPSB3aW5kb3cubG9jYXRpb24uaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudGVyID0gKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGFnZV92aXNpdF9cIiArIHBvcHRpbi5wb3B0aW5faWQpID8gTnVtYmVyKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGFnZV92aXNpdF9cIiArIHBvcHRpbi5wb3B0aW5faWQpKSA6IDApICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcGFnZSB2aXNpdCBjb3VudGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwYWdlX3Zpc2l0X1wiICsgcG9wdGluLnBvcHRpbl9pZCwgY291bnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHBhZ2UgdmlzaXQgY291bnRlciA9IGNsaWVudCBkaXNwbGF5X2FmdGVyX3Zpc2l0X3BhZ2VfYWN0aXZlIHZhbHVlICYmIG5vdCBzYW1lIHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBhZ2VfdmlzaXRfXCIgKyBwb3B0aW4ucG9wdGluX2lkKSA9PSBwb3B0aW4uZGlzcGxheV9hZnRlcl92aXNpdF9wYWdlX2FjdGl2ZSAmJiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBhZ2VfdXJsX1wiICsgcG9wdGluLnBvcHRpbl9pZCkgIT0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdsb2FkIGFmdGVyICcgKyBwb3B0aW4uZGlzcGxheV9hZnRlcl92aXNpdF9wYWdlX2FjdGl2ZSArICcgY2xpY2tzIHBhZ2UgdHJpZ2dlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbikgJiYgc291cmNlQ29kZVRhcmdldChwb3B0aW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0UG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUS5pZkFjdGl2ZSgpICYmIFBRLmlmUmVsZXZlbnQocG9wdGluKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy93aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImRpc3BsYXlfYWZ0ZXJfdmlzaXRfcGFnZV9hY3RpdmVfXCIrcG9wdGluLnBvcHRpbl9pZCwgXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBvcHRpbi5kX2Zfci5pbmNsdWRlcyhcImRpc3BsYXlfZXZlcnl0aW1lX2V2ZXJ5cGFnZV81XCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXNhYmxlIHJlcG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJkaXNwbGF5X2FmdGVyX3Zpc2l0X3BhZ2VfYWN0aXZlX1wiICsgcG9wdGluLnBvcHRpbl9pZCwgXCJkaXNhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVmcmVzaCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwYWdlX3Zpc2l0X1wiICsgcG9wdGluLnBvcHRpbl9pZCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBwYWdlIG5ldyB1cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwYWdlX3VybF9cIiArIHBvcHRpbi5wb3B0aW5faWQsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHBhZ2UgbmV3IHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGFnZV91cmxfXCIgKyBwb3B0aW4ucG9wdGluX2lkLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdTb3JyeSEgTm8gV2ViIFN0b3JhZ2Ugc3VwcG9ydC4uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9wdGluLmRpc3BsYXlfYWZ0ZXJfaW5hY3RpdmVfc2Vjb25kc19hY3RpdmUgIT0gXCJub1wiKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5hY3Rpdml0eSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5hY3Rpdml0eV90aW1lcjtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IHJlc2V0SW5hY3Rpdml0eVRpbWVyKCk7IC8vIE5vdCBzdXJlIHdoeSB0aGlzIG5lZWRzICgpIHN5bnRheCB0byB3b3JrXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNlbW92ZSA9IHJlc2V0SW5hY3Rpdml0eVRpbWVyO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25tb3VzZWRvd24gPSByZXNldEluYWN0aXZpdHlUaW1lcjsgIC8vIGNhdGNoZXMgdG91Y2hzY3JlZW4gcHJlc3NlcyBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbnRvdWNoc3RhcnQgPSByZXNldEluYWN0aXZpdHlUaW1lcjsgLy8gY2F0Y2hlcyB0b3VjaHNjcmVlbiBzd2lwZXMgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25jbGljayA9IHJlc2V0SW5hY3Rpdml0eVRpbWVyOyAgICAgIC8vIGNhdGNoZXMgdG91Y2hwYWQgY2xpY2tzIGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9ua2V5cHJlc3MgPSByZXNldEluYWN0aXZpdHlUaW1lcjtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc2V0SW5hY3Rpdml0eVRpbWVyLCB0cnVlKTsgLy8gaW1wcm92ZWQ7IHNlZSBjb21tZW50c1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJQb3B0aW4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbikgJiYgc291cmNlQ29kZVRhcmdldChwb3B0aW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldEluYWN0aXZpdHlUaW1lcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChpbmFjdGl2aXR5X3RpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWN0aXZpdHlfdGltZXIgPSB0cmlnZ2VyZWQgPyBudWxsIDogc2V0VGltZW91dCh0cmlnZ2VyUG9wdGluLCBwb3B0aW4uZGlzcGxheV9hZnRlcl9pbmFjdGl2ZV9zZWNvbmRzX2FjdGl2ZSAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5hY3Rpdml0eSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGlmICghcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9mZXRjaF9pbml0aWFsX3Nob3BpZnlfY2FydCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzaG9waWZ5bGFuZ3VhZ2VSb3V0ZSgpK1wiY2FydC5qc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LCBcImpzb25cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RJZCA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChkYXRhLml0ZW1zLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkLnB1c2goaXRlbS52YXJpYW50X2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9mZXRjaF9pbml0aWFsX3Nob3BpZnlfY2FydCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3Nob3BpZnlfY2FydF9wcm9kdWN0X2lkJywgcHJvZHVjdElkLmpvaW4oJywnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKG5zLCBmZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZldGNoICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBucy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBmZXRjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS50aGVuKHJlcyA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaG9waWZ5X2xhbmdfcm91dGUgPSBzaG9waWZ5bGFuZ3VhZ2VSb3V0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59YCtzaG9waWZ5X2xhbmdfcm91dGUrYGNhcnQvYWRkLmpzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufWArc2hvcGlmeV9sYW5nX3JvdXRlK2BjYXJ0L2FkZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn1gK3Nob3BpZnlfbGFuZ19yb3V0ZStgY2FydC91cGRhdGUuanNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59YCtzaG9waWZ5X2xhbmdfcm91dGUrYGNhcnQvdXBkYXRlYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufWArc2hvcGlmeV9sYW5nX3JvdXRlK2BjYXJ0L2NoYW5nZS5qc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn1gK3Nob3BpZnlfbGFuZ19yb3V0ZStgY2FydC9jaGFuZ2VgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59YCtzaG9waWZ5X2xhbmdfcm91dGUrYGNhcnQvY2xlYXIuanNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59YCtzaG9waWZ5X2xhbmdfcm91dGUrYGNhcnQvY2xlYXJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhyZXMudXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jbG9uZSgpLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlblRvR2xvYmFsWGhyKHJlcywgcG9wdGluLCAnZmV0Y2gnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSh3aW5kb3csIHdpbmRvdy5mZXRjaCkpO1xuXG4gICAgICAgICAgICAgICAgLy9pbml0WEhSTGlzdGVuZXIoKVxuICAgICAgICAgICAgICAgIGluaXRYSFJMaXN0ZW5lcihwb3B0aW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9wdGluLndpeF9jYXJ0X3RyaWdnZXJfYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgd2l4X2NhcnRfdHJpZ2dlcl9wb3B0aW5zLnB1c2gocG9wdGluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXHR9XG4gIFxuXG4gICAgLyoqXG4gICAgICogU2V0IHByZXZpZXcgbW9kZSBmb3IgcG9wdGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvcHRpbiBQb3B0aW5cbiAgICAgKiBAcmV0dXJucyBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRQcmV2aWV3UG9wdGluKHBvcHRpbikge1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBwb3B0aW4ucG9wdGluO1xuXG4gICAgICAgIHZhciBkaXZQb3B1cCA9IGRpdi5xdWVyeVNlbGVjdG9yKCcucG9wdGluLXBvcHVwJyk7XG4gICAgICAgIHZhciBwb3B0aW5UeXBlID0gZGl2UG9wdXAuZ2V0QXR0cmlidXRlKCdkYXRhLXBvcHRpbi10eXBlJyk7XG4gICAgICAgIHZhciBwb3B0aW5Mb2NhdGlvbiA9IGRpdlBvcHVwLmdldEF0dHJpYnV0ZSgnZGF0YS1wb3B0aW4tbG9jYXRpb24nKTtcblxuICAgICAgICB2YXIgaW5kaWNhdG9yUGFyZW50TWF4V2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgdmFyIGluZGljYXRvclJpZ2h0T2Zmc2V0ID0gXCJ1bnNldFwiO1xuICAgICAgICB2YXIgdG9wUHggPSAtNTA7XG5cbiAgICAgICAgc3dpdGNoIChwb3B0aW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdmdWxscGFnZSc6XG4gICAgICAgICAgICAgICAgdG9wUHggPSAxMDtcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JQYXJlbnRNYXhXaWR0aCA9IFwiMTAwdndcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JzaWRlJzpcbiAgICAgICAgICAgICAgICB0b3BQeCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb2JpbGUnOlxuICAgICAgICAgICAgICAgIGlmIChwb3B0aW5Mb2NhdGlvbi5pbmNsdWRlcygndG9wJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wUHggPSBwb3B0aW4uZmllbGRfcG9wdGluX2hlaWdodCArIDEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzb2NpYWxcIjpcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JSaWdodE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvcHVwUHJldmlld01lc3NhZ2UgPSBgXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWF4LXdpZHRoOiAke2luZGljYXRvclBhcmVudE1heFdpZHRofTsgaGVpZ2h0OiBhdXRvOyBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImhlaWdodDphdXRvICFpbXBvcnRhbnQ7d2lkdGg6YXV0byFpbXBvcnRhbnQ7bWluLXdpZHRoOjMwMHB4OyBiYWNrZ3JvdW5kOiNmZmYgIWltcG9ydGFudDtib3JkZXItcmFkaXVzOjRweCAhaW1wb3J0YW50O3BhZGRpbmc6NXB4IDEwcHggIWltcG9ydGFudDtwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O3otaW5kZXg6IDk5OTk5OTkgIWltcG9ydGFudDtyaWdodDoke2luZGljYXRvclJpZ2h0T2Zmc2V0fTtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O3RleHQtYWxpZ246Y2VudGVyICFpbXBvcnRhbnQ7dG9wOiR7dG9wUHh9cHggIWltcG9ydGFudDtcIj5UaGlzIGlzIGEgcHJldmlldyBvZiB5b3VyIHBvcC11cC4gUGxlYXNlIG5vdGUgdGhhdCBzdWJtaXNzaW9uIHdpbGwgbm90IGJlIGZ1bmN0aW9uYWwuPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5gO1xuICAgICAgICAvLyBjb25zdCBwb3B1cFByZXZpZXdNZXNzYWdlID0gJzxzcGFuIHN0eWxlPVwiaGVpZ2h0OmF1dG8haW1wb3J0YW50O3dpZHRoOiBhdXRvICFpbXBvcnRhbnQ7YmFja2dyb3VuZDogI2ZmZiAhaW1wb3J0YW50O2JvcmRlci1yYWRpdXM6IDRweCAhaW1wb3J0YW50O3BhZGRpbmc6IDVweCAxMHB4ICFpbXBvcnRhbnQ7cG9zaXRpb246IGZpeGVkICFpbXBvcnRhbnQ7ei1pbmRleDogOTk5OTk5OSAhaW1wb3J0YW50O3RvcDo1MHB4ICFpbXBvcnRhbnQ7bGVmdDogNTAlIWltcG9ydGFudDt0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkhaW1wb3J0YW50O2ZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O3RleHQtYWxpZ246IGNlbnRlcjshaW1wb3J0YW50O1wiPlRoaXMgaXMgYSBwcmV2aWV3IG9mIHlvdXIgcG9wLXVwLiBQbGVhc2Ugbm90ZSB0aGF0IHN1Ym1pc3Npb24gd2lsbCBub3QgYmUgZnVuY3Rpb25hbC48L3NwYW4+J1xuXG4gICAgICAgIGRpdlBvcHVwLmlubmVySFRNTCA9IHBvcHVwUHJldmlld01lc3NhZ2UgKyBkaXZQb3B1cC5pbm5lckhUTUw7XG4gICAgICAgIHBvcHRpbi5wb3B0aW4gPSBkaXYuaW5uZXJIVE1MO1xuXG4gICAgICAgIHJldHVybiBwb3B0aW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvcGlmeWxhbmd1YWdlUm91dGUoKXtcbiAgICAgICAgdmFyIHNob3BpZnlfbGFuZ19yb3V0ZSA9IFwiL1wiO1xuICAgICAgICBpZiAodHlwZW9mIFNob3BpZnkgIT09ICd1bmRlZmluZWQnICYmIFNob3BpZnkucm91dGVzICYmIFNob3BpZnkucm91dGVzLnJvb3QpIHtcbiAgICAgICAgICAgIHNob3BpZnlfbGFuZ19yb3V0ZSA9IFNob3BpZnkucm91dGVzLnJvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3BpZnlfbGFuZ19yb3V0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0WEhSTGlzdGVuZXIocG9wdGluKVxuICAgIHtcbiAgICAgICAgc2hvd0xvZygnSW5pdGlhbGl6ZWQgWEhSIExpc3RlbmVyJylcbiAgICAgICAgLy8gdmFyIHNfYWpheExpc3RlbmVyID0gbmV3IE9iamVjdCgpO1xuXG4gICAgICAgIC8vIC8vIEFkZGVkIGZvciBJRSBzdXBwb3J0XG4gICAgICAgIC8vIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gICAgIFhNTEh0dHBSZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQLjYuMFwiKTsgfVxuICAgICAgICAvLyAgICAgICAgIGNhdGNoIChlKSB7fVxuICAgICAgICAvLyAgICAgICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQLjMuMFwiKTsgfVxuICAgICAgICAvLyAgICAgICAgIGNhdGNoIChlKSB7fVxuICAgICAgICAvLyAgICAgICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpOyB9XG4gICAgICAgIC8vICAgICAgICAgY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QuXCIpO1xuICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIHNfYWpheExpc3RlbmVyLnRlbXBPcGVuID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW47XG4gICAgICAgIC8vIHNfYWpheExpc3RlbmVyLnRlbXBTZW5kID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7XG4gICAgICAgIC8vIHNfYWpheExpc3RlbmVyLmNhbGxiYWNrID0gZnVuY3Rpb24gKHRoKSB7XG4gICAgICAgIC8vICAgICB2YXIgX3VybCA9IFwiXCI7XG4gICAgICAgIC8vICAgICBpZiAodGguaGFzT3duUHJvcGVydHkoJ191cmwnKSkge1xuICAgICAgICAvLyAgICAgICAgICBfdXJsID0gdGguX3VybDtcbiAgICAgICAgLy8gICAgIH0gZWxzZSBpZih0aC5oYXNPd25Qcm9wZXJ0eSgndXJsJykpe1xuICAgICAgICAvLyAgICAgICAgIF91cmwgPSB0aC51cmw7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICBpZiAoW1xuICAgICAgICAvLyAgICAgICAgICcvY2FydC9hZGQuanMnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC9hZGQnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC91cGRhdGUuanMnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC91cGRhdGUnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC9jaGFuZ2UuanMnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC9jaGFuZ2UnLFxuICAgICAgICAvLyAgICAgICAgICcvY2FydC9jbGVhci5qcycsXG4gICAgICAgIC8vICAgICAgICAgJy9jYXJ0L2NsZWFyJyxcbiAgICAgICAgLy8gICAgIF0uaW5jbHVkZXMoX3VybCkpIHtcbiAgICAgICAgLy8gICAgICAgICBzaG93TG9nKCdhZGQtdG8tY2FydCB1cmwgZm91bmQsIGNhbGwgZ2xvYmFsIGxpc3RlbmVyJylcbiAgICAgICAgLy8gICAgICAgICAvL3Nob3dMb2coJ2xpc3RlbiBub3cnKVxuICAgICAgICAvLyAgICAgICAgIGxpc3RlblRvR2xvYmFsWGhyKHRoLCBwb3B0aW4sJ3hocicpXG4gICAgICAgIC8vICAgICB9XG5cblxuICAgICAgICAvLyAgICAgLy8gdGhpcy5tZXRob2QgOnRoZSBhamF4IG1ldGhvZCB1c2VkXG4gICAgICAgIC8vICAgICAvLyB0aGlzLnVybCAgICA6dGhlIHVybCBvZiB0aGUgcmVxdWVzdGVkIHNjcmlwdCAoaW5jbHVkaW5nIHF1ZXJ5IHN0cmluZywgaWYgYW55KSAodXJsZW5jb2RlZClcbiAgICAgICAgLy8gICAgIC8vIHRoaXMuZGF0YSAgIDp0aGUgZGF0YSBzZW50LCBpZiBhbnkgZXg6IGZvbz1iYXImYT1iICh1cmxlbmNvZGVkKVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihhLGIpIHtcbiAgICAgICAgLy8gICAgIGlmICghYSkgdmFyIGE9Jyc7XG4gICAgICAgIC8vICAgICBpZiAoIWIpIHZhciBiPScnO1xuICAgICAgICAvLyAgICAgc19hamF4TGlzdGVuZXIudGVtcE9wZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgLy8gICAgIHNfYWpheExpc3RlbmVyLm1ldGhvZCA9IGE7XG4gICAgICAgIC8vICAgICBzX2FqYXhMaXN0ZW5lci51cmwgPSBiO1xuICAgICAgICAvLyAgICAgaWYgKGEudG9Mb3dlckNhc2UoKSA9PSAnZ2V0Jykge1xuICAgICAgICAvLyAgICAgICAgIHNfYWpheExpc3RlbmVyLmRhdGEgPSBiLnNwbGl0KCc/Jyk7XG4gICAgICAgIC8vICAgICAgICAgc19hamF4TGlzdGVuZXIuZGF0YSA9IHNfYWpheExpc3RlbmVyLmRhdGFbMV07XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGEsYikge1xuICAgICAgICAvLyAgICAgaWYgKCFhKSB2YXIgYT0nJztcbiAgICAgICAgLy8gICAgIGlmICghYikgdmFyIGI9Jyc7XG4gICAgICAgIC8vICAgICBzX2FqYXhMaXN0ZW5lci50ZW1wU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAvLyAgICAgaWYoc19hamF4TGlzdGVuZXIubWV0aG9kLnRvTG93ZXJDYXNlKCkgPT0gJ3Bvc3QnKXNfYWpheExpc3RlbmVyLmRhdGEgPSBhO1xuICAgICAgICAvLyAgICAgc19hamF4TGlzdGVuZXIuY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICB4aG9vay5hZnRlcihmdW5jdGlvbiAocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF91cmwgPSByZXF1ZXN0LnVybDtcbiAgICAgICAgICAgIGlmIChbJy9jYXJ0L2FkZC5qcycsICcvY2FydC9hZGQnLCAnL2NhcnQvdXBkYXRlLmpzJywgJy9jYXJ0L3VwZGF0ZScsICcvY2FydC9jaGFuZ2UuanMnLCAnL2NhcnQvY2hhbmdlJywgJy9jYXJ0L2NsZWFyLmpzJywgJy9jYXJ0L2NsZWFyJ10uaW5jbHVkZXMoX3VybCkpIHtcbiAgICAgICAgICAgICAgICAgc2hvd0xvZygnYWRkLXRvLWNhcnQgdXJsIGZvdW5kLCBjYWxsIGdsb2JhbCBsaXN0ZW5lcicpOyAvL3Nob3dMb2coJ2xpc3RlbiBub3cnKVxuICAgICAgICAgICAgICAgICBsaXN0ZW5Ub0dsb2JhbFhocihyZXF1ZXN0LCBwb3B0aW4sICd4aHInLHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGluaXRYSFJMaXN0ZW5lcjIoKSB7XG4gICAgICAgIHZhciBvcGVuID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuLFxuICAgICAgICAgICAgc2VuZCA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZDtcblxuICAgICAgICBmdW5jdGlvbiBvcGVuUmVwbGFjZW1lbnQobWV0aG9kLCB1cmwsIGFzeW5jLCB1c2VyLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgdGhpcy5fdXJsID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIG9wZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRSZXBsYWNlbWVudChkYXRhKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMub25yZWFkeXN0YXRlY2hhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQTEFDRSBIRVJFIFlPVVIgQ09ERSBXSEVOIFJFUVVFU1QgSVMgU0VOVFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG9uUmVhZHlTdGF0ZUNoYW5nZVJlcGxhY2VtZW50O1xuICAgICAgICAgICAgcmV0dXJuIHNlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uUmVhZHlTdGF0ZUNoYW5nZVJlcGxhY2VtZW50KCkge1xuICAgICAgICAgICAgaWYodGhpcy5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuVG9HbG9iYWxYaHIodGhpcywgcG9wdGluLCAneGhyJywgbnVsbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRoaXMuX29ucmVhZHlzdGF0ZWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vbnJlYWR5c3RhdGVjaGFuZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbiA9IG9wZW5SZXBsYWNlbWVudDtcbiAgICAgICAgd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kID0gc2VuZFJlcGxhY2VtZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlblRvR2xvYmFsWGhyKHJlcXVlc3QsIHBvcHRpbiwgdHlwZSwgZGF0YT1udWxsKSB7XG4gICAgICAgIHZhciBzaG9waWZ5Q2FydFVyaSA9IFtdO1xuICAgICAgICB2YXIgcmVxdWVzdFVybCA9IG51bGw7XG4gICAgICAgIHZhciByZXNwb25zZSA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICBpZih0eXBlb2YgcmVxdWVzdC5pc0ZldGNoICE9J3VuZGVmaW5lZCcpe1xuICAgICAgICAgICB0eXBlID0gXCJmZXRjaFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodHlwZSA9PSAnZmV0Y2gnKSB7XG4gICAgICAgICAgICBzaG9waWZ5Q2FydFVyaSA9IFtcbiAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L2FkZC5qc2AsXG4gICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vY2FydC9hZGRgLFxuICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2NhcnQvdXBkYXRlLmpzYCxcbiAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L3VwZGF0ZWAsXG4gICAgICAgICAgICAgICAgYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vY2FydC9jaGFuZ2UuanNgLFxuICAgICAgICAgICAgICAgIGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2NhcnQvY2hhbmdlYCxcbiAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L2NsZWFyLmpzYCxcbiAgICAgICAgICAgICAgICBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9jYXJ0L2NsZWFyYFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgcmVxdWVzdFVybCA9IHJlcXVlc3QudXJsO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBkYXRhO1xuICAgICAgICAgICAgdmFyIHJlYWR5U3RhdGUgPSA0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvcGlmeUNhcnRVcmkgPSBbXG4gICAgICAgICAgICAgICAgJy9jYXJ0L2FkZC5qcycsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L2FkZCcsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L3VwZGF0ZS5qcycsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L2NoYW5nZS5qcycsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L2NoYW5nZScsXG4gICAgICAgICAgICAgICAgJy9jYXJ0L2NsZWFyLmpzJyxcbiAgICAgICAgICAgICAgICAnL2NhcnQvY2xlYXInLFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgcmVxdWVzdFVybCA9IHJlcXVlc3QuX3VybDtcbiAgICAgICAgICAgIHZhciByZWFkeVN0YXRlID0gMDtcbiAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAneGhyJykge1xuICAgICAgICAgICAgICAgICAgIC8vICByZWFkeVN0YXRlID0gcmVxdWVzdC5yZWFkeVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VXJsID0gcmVxdWVzdC51cmw7XG4gICAgICAgICAgICAgICAgICAgIHJlYWR5U3RhdGUgPSB0eXBlb2YgcmVxdWVzdC54aHIucmVhZHlTdGF0ZSAhPSBcInVuZGVmaW5lZFwiID8gcmVxdWVzdC54aHIucmVhZHlTdGF0ZSA6IHJlcXVlc3QucmVhZHlTdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5U3RhdGUgPT0gIDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3BpZnlDYXJ0VXJpLmluY2x1ZGVzKHJlcXVlc3RVcmwpICYmIHJlcXVlc3RVcmwgIT0gXCIvY2FydC5qc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL2NhcnQuanNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFwianNvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGlvbiA9PSBcImFkZGVkX3Byb2R1Y3RcIiAmJiBwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoKHJlcXVlc3RVcmwgPT0gc2hvcGlmeUNhcnRVcmlbMF0pIHx8IChyZXF1ZXN0VXJsID09IHNob3BpZnlDYXJ0VXJpWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICd4aHInKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICByZXNwb25zZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh0eXBlb2YgcmVxdWVzdC54aHIucmVzcG9uc2UgIT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVlc3QueGhyLnJlc3BvbnNlIDogcmVxdWVzdC5yZXNwb25zZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5zaG9waWZ5X2NhcnRfdHJpZ2dlcl9wcm9kdWN0cyA9PSBcImFueV9wcm9kdWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY2lmaWVkUHJvZHVjdHNBcnIgPSBwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlUHJvZHVjdElkID0gKHJlc3BvbnNlLnZhcmlhbnRfaWQudG9TdHJpbmcoKSB8fCByZXNwb25zZS5wcm9kdWN0X2lkLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BlY2lmaWVkUHJvZHVjdHNBcnIuaW5jbHVkZXMocmVzcG9uc2VQcm9kdWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYocG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGlvbiA9PSBcInJlbW92ZWRfcHJvZHVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigocmVxdWVzdFVybCAhPSBzaG9waWZ5Q2FydFVyaVswXSkgJiYgKHJlcXVlc3QgIT0gc2hvcGlmeUNhcnRVcmlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENhcnRQcm9kdWN0SWRzID0gcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9zaG9waWZ5X2NhcnRfcHJvZHVjdF9pZCcpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluR2V0Q29va2llKCdwb3B0aW5fc2hvcGlmeV9jYXJ0X3Byb2R1Y3RfaWQnKS5zcGxpdCgnLCcpIDogW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UHJvZHVjdElkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goZGF0YS5pdGVtcywgZnVuY3Rpb24oaW5kZXgsaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQcm9kdWN0SWRzLnB1c2goKGl0ZW0udmFyaWFudF9pZC50b1N0cmluZygpIHx8IGl0ZW0ucHJvZHVjdF9pZC50b1N0cmluZygpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHBvcHRpbi5zaG9waWZ5X2NhcnRfdHJpZ2dlcl9wcm9kdWN0cyA9PSBcImFueV9wcm9kdWN0XCIpICYmIChuZXdQcm9kdWN0SWRzLmxlbmd0aCA8IG9sZENhcnRQcm9kdWN0SWRzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKChwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMgPT0gXCJlbXB0eV9jYXJ0XCIpICYmIChkYXRhLml0ZW1fY291bnQgPCAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ2FydFByb2R1Y3RJZHMgPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3Nob3BpZnlfY2FydF9wcm9kdWN0X2lkJykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluR2V0Q29va2llKCdwb3B0aW5fc2hvcGlmeV9jYXJ0X3Byb2R1Y3RfaWQnKS5zcGxpdCgnLCcpIDogW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZENhcnRQcm9kdWN0SWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2gob2xkQ2FydFByb2R1Y3RJZHMsIGZ1bmN0aW9uKGluZGV4LE9sZHByb2R1Y3RJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3UHJvZHVjdElkcy5pbmNsdWRlcyhPbGRwcm9kdWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGVjaWZpZWRSZW1vdmVkUHJvZHVjdHMgPSBwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWNpZmllZFJlbW92ZWRQcm9kdWN0cy5pbmNsdWRlcyhPbGRwcm9kdWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfYWN0aW9uID09IFwiY2FydF9pdGVtXCIgfHwgcG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGlvbiA9PSBcImNhcnRfdmFsdWVcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbi5zaG9waWZ5X2NhcnRfdHJpZ2dlcl9jYXJ0X3NwZWNfZmlsdGVyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbi5zaG9waWZ5X2NhcnRfdHJpZ2dlcl9jYXJ0X3NwZWNfdmFsdWUgIT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FydFNwZWNGaWx0ZXIgPSBwb3B0aW4uc2hvcGlmeV9jYXJ0X3RyaWdnZXJfY2FydF9zcGVjX2ZpbHRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0U3BlY1ZhbHVlID0gcG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2NhcnRfc3BlY192YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcnRJdGVtT3JWYWx1ZUNvdW50ID0gcG9wdGluLnNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGlvbiA9PSBcImNhcnRfaXRlbVwiID8gZGF0YS5pdGVtX2NvdW50IDogKGRhdGEudG90YWxfcHJpY2UgLyAxMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2FydFNwZWNGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FydEl0ZW1PclZhbHVlQ291bnQgPiBjYXJ0U3BlY1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VxdWFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYXJ0SXRlbU9yVmFsdWVDb3VudCA9PSBjYXJ0U3BlY1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFBvcHRpbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfdGhhbl9vcl9lcXVhbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FydEl0ZW1PclZhbHVlQ291bnQgPj0gY2FydFNwZWNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGUgcmVxdWVzdCB3YXMgYW4gQUREIFRPIENBUlRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZigocmVxdWVzdFVybCA9PSBzaG9waWZ5Q2FydFVyaVswXSkgfHwgKHJlcXVlc3RVcmwgPT0gc2hvcGlmeUNhcnRVcmlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3QWRkZWRQcm9kdWN0SWQgPSByZXNwb25zZS5wcm9kdWN0X2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FydFByb2R1Y3RJZHMgPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3Nob3BpZnlfY2FydF9wcm9kdWN0X2lkJykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbkdldENvb2tpZSgncG9wdGluX3Nob3BpZnlfY2FydF9wcm9kdWN0X2lkJykuc3BsaXQoJywnKSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYXJ0UHJvZHVjdElkcy5pbmNsdWRlcyhuZXdBZGRlZFByb2R1Y3RJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJ0UHJvZHVjdElkcy5wdXNoKG5ld0FkZGVkUHJvZHVjdElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3Nob3BpZnlfY2FydF9wcm9kdWN0X2lkJywgY2FydFByb2R1Y3RJZHMuam9pbignLCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdQcm9kdWN0SWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goZGF0YS5pdGVtcywgZnVuY3Rpb24oaW5kZXgsaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvZHVjdElkcy5wdXNoKGl0ZW0udmFyaWFudF9pZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fc2hvcGlmeV9jYXJ0X3Byb2R1Y3RfaWQnLCBuZXdQcm9kdWN0SWRzLmpvaW4oJywnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnQ2FydCBFcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMTAwKVxuXG4gICAgfTsgLy9HZXQgSUUgVmVyc2lvblxuXG4gICAgIC8vR2V0IElFIFZlcnNpb25cblxuXG4gICAgIC8vR2V0IElFIFZlcnNpb25cbiAgICBmdW5jdGlvbiBHZXRJRVZlcnNpb24oKSB7XG4gICAgICAgIHZhciBzQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgICAgdmFyIElkeCA9IHNBZ2VudC5pbmRleE9mKFwiTVNJRVwiKTtcblxuICAgICAgICAvLyBJZiBJRSwgcmV0dXJuIHZlcnNpb24gbnVtYmVyLlxuICAgICAgICBpZiAoSWR4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNBZ2VudC5zdWJzdHJpbmcoSWR4KyA1LCBzQWdlbnQuaW5kZXhPZihcIi5cIiwgSWR4KSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgSUUgMTEgdGhlbiBsb29rIGZvciBVcGRhdGVkIHVzZXIgYWdlbnQgc3RyaW5nLlxuICAgICAgICBlbHNlIGlmICghIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1RyaWRlbnRcXC83XFwuLykpIHtcbiAgICAgICAgICAgIHJldHVybiAxMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vSXQgaXMgbm90IElFXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHNldFBvcHRpblN0eWxlKCl7XG4gICAgICAgIC8vIFNldCBzdHlsZSBwZXIgcG9wdGluIGFuZCBhcHBlbmQgdG8gRE9NXG4gICAgICAgIC8vIFRPRE86IE1vdmUgdG8gcG9wdGluLXN0eWxlLWhlL2VuLmNzcyBcbiAgICAgICAgc2hvd0xvZygnc2V0UG9wdGluU3R5bGUoKScpO1xuICAgICAgICBjbGVhclRpbWVvdXQocG9wdGluVGltZURlbGF5VHJpZ2dlcik7XG4gICAgICAgIHBvcHRpblRpbWVEZWxheVRyaWdnZXIgPSBudWxsO1xuICAgICAgICAvL2pRMjI0KFwiI3NldFBvcHRpblN0eWxlXCIpLnJlbW92ZSgpO1xuICAgICAgICBpZihqUTIyNChcIiNzZXRQb3B0aW5TdHlsZVwiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgcG9wdGluX3N0eWxlID0gJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIiBpZD1cInNldFBvcHRpblN0eWxlXCI+LnBvcHRpbi1wb3B1cCAuY2xvc2UteC1idXR0b257bWluLWhlaWdodDogaW5pdGlhbDtiYWNrZ3JvdW5kLWNvbG9yOmluaXRpYWw7fS5kcmFnZ2FibGUtY29udGFpbmVyIGZvcm17ZGlzcGxheTppbml0aWFsO2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDt3aWR0aDogaW5pdGlhbDtoZWlnaHQ6IGluaXRpYWw7dG9wOiBpbml0aWFsO3Bvc2l0aW9uOiBpbml0aWFsO30uZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuZHJhZ2dhYmxle2JvcmRlcjogbm9uZTt9LmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmlucHV0cy1jb250YWluZXIgaW5wdXR7YmFja2dyb3VuZC1pbWFnZTpub25lO2JhY2tncm91bmQtY29sb3I6I2ZmZmZmZjtiYWNrZ3JvdW5kOiNmZmZmZmY7Ym9yZGVyLXJhZGl1czowcHg7fS5lbXB0eS1maWVsZHtib3JkZXI6MnB4IHNvbGlkIHJlZCAhaW1wb3J0YW50fS5lbXB0eS1maWVsZDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZWQ7fS5lbXB0eS1maWVsZDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZWQ7fS5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIGlucHV0LCAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSBidXR0b257YmFja2dyb3VuZC1pbWFnZTogbm9uZTtwYWRkaW5nOiAwcHg7bWFyZ2luOiAwcHg7Ym94LXNpemluZzogYm9yZGVyLWJveDstd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O30uZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSBwe2JveC1zaXppbmc6IGluaXRpYWw7LXdlYmtpdC1ib3gtc2l6aW5nOiBpbml0aWFsOy1tb3otYm94LXNpemluZzogaW5pdGlhbDt9LnBvcHRpbi1wb3B1cCBhe3RleHQtZGVjb3JhdGlvbjogbm9uZTt9LnBvcHRpbi1wb3B1cCBhOmhvdmVye3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO308L3N0eWxlPic7XG4gICAgICAgICAgICBpZih1c2VyX2xhbmcgPT0gXCJoZVwiKXtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc3R5bGUgKz0gJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIHAsIC5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5pbnB1dHMtY29udGFpbmVyIGlucHV0e2ZvbnQtZmFtaWx5OiBcIk9wZW4gU2FucyBIZWJyZXcgIWltcG9ydGFudFwiO30nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalEyMjQoXCJoZWFkXCIpLmFwcGVuZChwb3B0aW5fc3R5bGUpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBBZGQgQW5pbWF0aW9uIENsYXNzZXNcbiAgICAgICAgLy8gVG9EbzogS2VlcCBVc2VkIEFuaW1hdGVkIENsYXNzZXNcbiAgICAgICAgdmFyIGVsQW5pID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHRpbl9hbmltYXRpb25zJyk7XG4gICAgICAgIGlmICghZWxBbmkpIHtcbiAgICAgICAgICAgIHZhciBwb3B0aW5fYW5pbWF0aW9ucyA9Jyc7XG4gICAgICAgICAgICBpZihhcGlfbGluay5pbmRleE9mKCdkZXYnKT49MCl7XG4gICAgICAgICAgICAgICAgaWYoalEyMjQoXCIjcG9wdGluX2FuaW1hdGlvbnNfcHJlbG9hZFwiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fYW5pbWF0aW9ucyA9ICc8bGluayByZWw9XCJwcmVsb2FkXCIgaWQ9XCJwb3B0aW5fYW5pbWF0aW9uc19wcmVsb2FkXCIgYXM9XCJzdHlsZVwiICBocmVmPVwiJytjc3NfbGluaysnL2Nzcy9wb3B0aW4tYW5pbWF0aW9ucy5jc3M/dmVyPTEwXCI+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoalEyMjQoXCIjcG9wdGluX2FuaW1hdGlvbnNcIikubGVuZ3RoPT0wKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX2FuaW1hdGlvbnMrPSAnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGlkPVwicG9wdGluX2FuaW1hdGlvbnNcIiBocmVmPVwiJytjc3NfbGluaysnL2Nzcy9wb3B0aW4tYW5pbWF0aW9ucy5jc3M/dmVyPTEwXCIgIGRlZmVyPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW5fYW5pbWF0aW9uc19wcmVsb2FkXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9hbmltYXRpb25zID0gJzxsaW5rIHJlbD1cInByZWxvYWRcIiBpZD1cInBvcHRpbl9hbmltYXRpb25zX3ByZWxvYWRcIiBhcz1cInN0eWxlXCIgIGhyZWY9XCInK2Nkbl9zZXJ2ZXIrJy9jc3MvcG9wdGluLWFuaW1hdGlvbnMuY3NzP3Zlcj0xMFwiPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiI3BvcHRpbl9hbmltYXRpb25zXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9hbmltYXRpb25zKz0gJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBpZD1cInBvcHRpbl9hbmltYXRpb25zXCIgaHJlZj1cIicrY2RuX3NlcnZlcisnL2Nzcy9wb3B0aW4tYW5pbWF0aW9ucy5jc3M/dmVyPTEwXCIgIGRlZmVyPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYocG9wdGluX2FuaW1hdGlvbnMpe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiaGVhZFwiKS5hcHBlbmQocG9wdGluX2FuaW1hdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluSnNGaWx0ZXIoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBSZXR1cm4gYXJyYXkgb2YgYWxsIGJyb3dzZXIganMgdmFyaWFibGVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsSnNWYXJpYWJsZXMoKXtcbiAgICAgICAgYXJyYXkgPSBbXVxuICAgICAgICBmb3IgKHZhciBqc192YXJpYWJsZV9uYW1lIGluIHRoaXMpe1xuICAgICAgICAgICAgaWYgKGpRMjI0LmluQXJyYXkodHlwZW9mIHRoaXNbanNfdmFyaWFibGVfbmFtZV0sWydudW1iZXInLCdzdHJpbmcnLCdib29sZWFuJ10pID4gLTEpXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh7a2V5OmpzX3ZhcmlhYmxlX25hbWUsdmFsdWU6IFN0cmluZyh0aGlzW2pzX3ZhcmlhYmxlX25hbWVdKX0pIDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGFwcGVuZFBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIC0+IChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSWYganMgaW4gdGhlIHJ1bGVzIC0+IFNob3cgcG9wdGluXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluSnNGaWx0ZXIocG9wdGluLGNsaWNrKXtcblxuICAgICAgICAvLyBJZiBjb29raWVzIGZpbHRlciBpcyBhY3RpdmVcbiAgICAgICAgaWYgKHBvcHRpbi5qc19maWx0ZXIuZGlzcGxheV9pZl9zcGVjaWZpY19qc19hY3RpdmUpe1xuXG4gICAgICAgICAgICAvLyBHZXQgYWxsIGJyb3dzZXIganMgdmFyaWFibGVzXG4gICAgICAgICAgICAkanNfYXJyYXkgPSBnZXRBbGxKc1ZhcmlhYmxlcygpO1xuXG4gICAgICAgICAgICAkcmVzdWx0X2FycmF5ID0gW107XG5cbiAgICAgICAgICAgIC8vIElmIGJyb3dzZXIganMgdmFyaWFibGVzIGlzIGF2YWlsYmUgXG4gICAgICAgICAgICBpZiAoJGpzX2FycmF5Lmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGVhY2gganMgdmFyaWFibGUgZmlsdGVyIHJ1bGUgdGhhdCB0aGEgcG9wdGluIGhhdmUgXG4gICAgICAgICAgICAgICAgalEyMjQuZWFjaChwb3B0aW4uanNfZmlsdGVyLmRpc3BsYXlfaWZfc3BlY2lmaWNfanMsZnVuY3Rpb24oaW5kZXgpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHBhcmFtdGVyIGFyZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuanNfbmFtZV9wYWlyLmxlbmd0aCA+IDAgJiYgIHRoaXMuanNfdmFsdWVfcGFpci5sZW5ndGggPiAwICYmIHRoaXMuanNfc2hvd19wYWlyLmxlbmd0aCA+MCApe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBhbmQgc2V0IHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICRqc19uYW1lX3JvbGVfcGFpciAgPSB0aGlzLmpzX25hbWVfcGFpci5zcGxpdCgnfDp8Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkanNfbmFtZV9yb2xlICAgICAgID0gJGpzX25hbWVfcm9sZV9wYWlyWzBdICE9IHVuZGVmaW5lZCA/ICRqc19uYW1lX3JvbGVfcGFpclswXTogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICRqc19uYW1lX3ZhbHVlICAgICAgPSAkanNfbmFtZV9yb2xlX3BhaXJbMV0gIT0gdW5kZWZpbmVkID8gJGpzX25hbWVfcm9sZV9wYWlyWzFdOiBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkanNfdmFsdWVfcm9sZV9wYWlyID0gdGhpcy5qc192YWx1ZV9wYWlyLnNwbGl0KCd8OnwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRqc192YWx1ZV9yb2xlICAgICAgPSAkanNfdmFsdWVfcm9sZV9wYWlyWzBdICE9IHVuZGVmaW5lZCA/ICRqc192YWx1ZV9yb2xlX3BhaXJbMF06IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkanNfdmFsdWVfdmFsdWUgICAgID0gJGpzX3ZhbHVlX3JvbGVfcGFpclsxXSAhPSB1bmRlZmluZWQgPyAkanNfdmFsdWVfcm9sZV9wYWlyWzFdOiBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkanNfc2hvd192YWx1ZSAgICAgID0gdGhpcy5qc19zaG93X3BhaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuRnVuY3Rpb24oXCJyZXR1cm4gdHlwZW9mIFwiICsgJGpzX25hbWVfdmFsdWUpKCkgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkanNfbmFtZV92YWx1ZS5pbmRleE9mKCcuJyk+LTEpeyAvLyB0eXBlIG9mIE9iamFjdCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGpzX25hbWUgICAgICAgID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGpzX3ZhbHVlICAgICAgID0ganNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkanNfdmFsdWVfcm9sZSx3aW5kb3cuRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyAkanNfbmFtZV92YWx1ZSkoKSwkanNfdmFsdWVfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0X2FycmF5LnB1c2goeydydWxlJzooJGpzX25hbWUgJiYgJGpzX3ZhbHVlKSwgJ3Nob3cnOiRqc19zaG93X3ZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKGpRMjI0LmluQXJyYXkod2luZG93LkZ1bmN0aW9uKFwicmV0dXJuIHR5cGVvZiBcIiArICRqc19uYW1lX3ZhbHVlKSgpLFsnbnVtYmVyJywnc3RyaW5nJywnYm9vbGVhbiddKSA+IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCgkanNfYXJyYXksZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGpzX25hbWUgICAgICAgID0ganNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkanNfbmFtZV9yb2xlLHRoaXMua2V5LCRqc19uYW1lX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRqc192YWx1ZSAgICAgICA9IGpzRmlsdGVyQ2hlY2tJZkluUm9sZXMoJGpzX3ZhbHVlX3JvbGUsdGhpcy52YWx1ZSwkanNfdmFsdWVfdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiAganMgdmFyaWFibGUgZmlsdGVyIC0gc2F2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoJGNfbmFtZSAmJiAkY192YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXN1bHRfYXJyYXkucHVzaCh7J3J1bGUnOigkanNfbmFtZSAmJiAkanNfdmFsdWUpLCAnc2hvdyc6JGpzX3Nob3dfdmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZiAod2luZG93LkZ1bmN0aW9uKFwidHlwZW9mIFwiKyRqc19uYW1lX3ZhbHVlKSgpID09IFwib2JqZWN0XCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkanNfbmFtZSAgICAgICAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkanNfdmFsdWUgICAgICAgPSBqc0ZpbHRlckNoZWNrSWZJblJvbGVzKCRqc192YWx1ZV9yb2xlLEpTT04uc3RyaW5naWZ5KHdpbmRvdy5GdW5jdGlvbihcInJldHVybiB0eXBlb2YgXCIgKyAkanNfbmFtZV92YWx1ZSkoKSksJGpzX3ZhbHVlX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgIGpzIHZhcmlhYmxlIGZpbHRlciAtIHNhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoJGNfbmFtZSAmJiAkY192YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdF9hcnJheS5wdXNoKHsncnVsZSc6KCRqc19uYW1lICYmICRqc192YWx1ZSksICdzaG93JzokanNfc2hvd192YWx1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgIGpzIHZhcmlhYmxlcyBmaWx0ZXIgYWdhaW5zdCB3ZWJzaXRlIGpzIHZhcmlhYmxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goJGpzX2FycmF5LGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGpzX25hbWUgICAgICAgID0ganNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkanNfbmFtZV9yb2xlLHRoaXMua2V5LCRqc19uYW1lX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGpzX3ZhbHVlICAgICAgID0ganNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkanNfdmFsdWVfcm9sZSx0aGlzLnZhbHVlLCRqc192YWx1ZV92YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgIGpzIHZhcmlhYmxlIGZpbHRlciAtIHNhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoJGNfbmFtZSAmJiAkY192YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdF9hcnJheS5wdXNoKHsncnVsZSc6KCRqc19uYW1lICYmICRqc192YWx1ZSksICdzaG93JzokanNfc2hvd192YWx1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLy9zaG93TG9nKCRyZXN1bHRfYXJyYXkpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgY29va2llIGZpbHRlciBhcnJheSAtIGNoZWNrIGZvciBjYW4gc2hvdyBvciBub3RcbiAgICAgICAgICAgICAgICBpZiAoJGpzX2FycmF5Lmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICAgICAgICAgICRmbGFnICAgICAgID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRkb250X3Nob3cgID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygkcmVzdWx0X2FycmF5KVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBkb250X3Nob3cgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCgkcmVzdWx0X2FycmF5LGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJ1bGUgJiYgdGhpcy5zaG93ID09ICdkb250X3Nob3cnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyAgICAgICA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkb250X3Nob3cgID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyAgICAgICA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICBpZiAoISRkb250X3Nob3cpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCgkcmVzdWx0X2FycmF5LGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ydWxlICYmIHRoaXMuc2hvdyA9PSAnc2hvdycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLnNob3cgPT0gJ3Nob3cnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICdzaG93JyBleGlzdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGZsYWc7XG5cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBhcHBlbmRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0IHwgY2xpY2s6Qm9vbGVhbiAtPiAoaWYgcG9wdGluIGNsaWNrIHRyaWdnZXIpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IElmIGNvb2tpZXMgaW4gdGhlIHJ1bGVzIC0+IFNob3cgcG9wdGluXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluQ29va2llc0ZpbHRlcihwb3B0aW4sY2xpY2spe1xuICAgICAgICAvLyBJZiBjb29raWVzIGZpbHRlciBpcyBhY3RpdmVcbiAgICAgICAgaWYgKHBvcHRpbi5jb29raWVfZmlsdGVyLmRpc3BsYXlfaWZfc3BlY2lmaWNfY29va2llX2FjdGl2ZSl7XG5cbiAgICAgICAgICAgIC8vIEdldCBhbGwgYnJvd3NlciBjb29raWVzXG4gICAgICAgICAgICAkY29va2llc19hcnJheSA9IGdldEFsbENvb2tpZXMoKTtcblxuICAgICAgICAgICAgJHJlc3VsdF9hcnJheSA9IFtdO1xuXG4gICAgICAgICAgICAvLyBJZiBicm93c2VyIGNvb2tpZSBpcyBhdmFpbGJlIFxuICAgICAgICAgICAgaWYgKCRjb29raWVzX2FycmF5Lmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGVhY2ggY29va2llIGZpbHRlciBydWxlIHRoYXQgdGhhIHBvcHRpbiBoYXZlIFxuICAgICAgICAgICAgICAgIGpRMjI0LmVhY2gocG9wdGluLmNvb2tpZV9maWx0ZXIuZGlzcGxheV9pZl9zcGVjaWZpY19jb29raWUsZnVuY3Rpb24oaW5kZXgpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHBhcmFtdGVyIGFyZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29va2llX25hbWVfcGFpci5sZW5ndGggPiAwICYmICB0aGlzLmNvb2tpZV92YWx1ZV9wYWlyLmxlbmd0aCA+IDAgJiYgdGhpcy5jb29raWVfc2hvd19wYWlyLmxlbmd0aCA+MCApe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBhbmQgc2V0IHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVfbmFtZV9yb2xlX3BhaXIgID0gdGhpcy5jb29raWVfbmFtZV9wYWlyLnNwbGl0KCd8OnwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVfbmFtZV9yb2xlICAgICAgID0gJGNvb2tpZV9uYW1lX3JvbGVfcGFpclswXSAhPSB1bmRlZmluZWQgPyAkY29va2llX25hbWVfcm9sZV9wYWlyWzBdOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZV9uYW1lX3ZhbHVlICAgICAgPSAkY29va2llX25hbWVfcm9sZV9wYWlyWzFdICE9IHVuZGVmaW5lZCA/ICRjb29raWVfbmFtZV9yb2xlX3BhaXJbMV06IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVfdmFsdWVfcm9sZV9wYWlyID0gdGhpcy5jb29raWVfdmFsdWVfcGFpci5zcGxpdCgnfDp8Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY29va2llX3ZhbHVlX3JvbGUgICAgICA9ICRjb29raWVfdmFsdWVfcm9sZV9wYWlyWzBdICE9IHVuZGVmaW5lZCA/ICRjb29raWVfdmFsdWVfcm9sZV9wYWlyWzBdOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZV92YWx1ZV92YWx1ZSAgICAgPSAkY29va2llX3ZhbHVlX3JvbGVfcGFpclsxXSAhPSB1bmRlZmluZWQgPyAkY29va2llX3ZhbHVlX3JvbGVfcGFpclsxXTogXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZV9zaG93X3ZhbHVlICAgICAgPSB0aGlzLmNvb2tpZV9zaG93X3BhaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGNvb2tpZSBmaWx0ZXIgYWdhaW5zdCB3ZWJzaXRlIGNvb2tpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goJGNvb2tpZXNfYXJyYXksZnVuY3Rpb24oaW5kZXgpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNfbmFtZSAgICAgICAgID0gY29va2llc0ZpbHRlckNoZWNrSWZJblJvbGVzKCRjb29raWVfbmFtZV9yb2xlLHRoaXMua2V5LCRjb29raWVfbmFtZV92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNfdmFsdWUgICAgICAgID0gY29va2llc0ZpbHRlckNoZWNrSWZJblJvbGVzKCRjb29raWVfdmFsdWVfcm9sZSx0aGlzLnZhbHVlLCRjb29raWVfdmFsdWVfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGNvb2tpZSBmaWx0ZXIgLSBzYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoJGNfbmFtZSAmJiAkY192YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0X2FycmF5LnB1c2goeydydWxlJzooJGNfbmFtZSAmJiAkY192YWx1ZSksICdzaG93JzokY29va2llX3Nob3dfdmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZygkcmVzdWx0X2FycmF5KTtcblxuICAgICAgICAgICAgICAgIC8vIElmIGNvb2tpZSBmaWx0ZXIgYXJyYXkgLSBjaGVjayBmb3IgY2FuIHNob3cgb3Igbm90XG4gICAgICAgICAgICAgICAgaWYgKCRjb29raWVzX2FycmF5Lmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICAgICAgICAgICRmbGFnICAgICAgID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRkb250X3Nob3cgID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygkcmVzdWx0X2FycmF5KVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBkb250X3Nob3cgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCgkcmVzdWx0X2FycmF5LGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJ1bGUgJiYgdGhpcy5zaG93ID09ICdkb250X3Nob3cnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyAgICAgICA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkb250X3Nob3cgID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyAgICAgICA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICBpZiAoISRkb250X3Nob3cpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaCgkcmVzdWx0X2FycmF5LGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ydWxlICYmIHRoaXMuc2hvdyA9PSAnc2hvdycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLnNob3cgPT0gJ3Nob3cnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICdzaG93JyBleGlzdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGZsYWc7XG5cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvb2tpZXNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkcm9sZSwkZmF0aGVyLCRzb24pe1xuXG4gICAgICAgICRmbGFnID0gZmFsc2U7XG4gICAgICAgIGlmICgkcm9sZSAhPSBcIlwiKXtcbiAgICAgICAgICAgIHN3aXRjaCAoJHJvbGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjb250YWluJzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSAkZmF0aGVyLmluZGV4T2YoJHNvbikgPiAtMSA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4YWN0JzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSAoJGZhdGhlcj09JHNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSAkZmF0aGVyLnN0YXJ0c1dpdGgoJHNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gJGZhdGhlci5lbmRzV2l0aCgkc29uKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZ3JlYXRlcl90aGFuJzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSBwYXJzZUZsb2F0KCRmYXRoZXIpID4gcGFyc2VGbG9hdCgkc29uKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVzc190aGFuJzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSBwYXJzZUZsb2F0KCRmYXRoZXIpIDwgcGFyc2VGbG9hdCgkc29uKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYW55X3ZhbHVlJzpcbiAgICAgICAgICAgICAgICAgICAgJGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGZsYWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ganNGaWx0ZXJDaGVja0lmSW5Sb2xlcygkcm9sZSwkZmF0aGVyLCRzb24pe1xuXG4gICAgICAgICRmbGFnID0gZmFsc2U7XG4gICAgICAgICRmYXRoZXIgPSAkZmF0aGVyPT1cIltdXCIgPyBcIlwiIDogU3RyaW5nKCRmYXRoZXIpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgJHNvbiAgICA9ICRzb249PVwiW11cIiA/IFwiXCIgOiBTdHJpbmcoJHNvbikudG9Mb3dlckNhc2UoKVxuICAgICAgICBpZiAoJHJvbGUgIT0gXCJcIil7XG4gICAgICAgICAgICBzd2l0Y2ggKCRyb2xlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29udGFpbic6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gJGZhdGhlci5pbmRleE9mKCRzb24pID4gLTEgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdleGFjdCc6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gKCRmYXRoZXI9PSRzb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gJGZhdGhlci5zdGFydHNXaXRoKCRzb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgICAgICAkZmxhZyA9ICRmYXRoZXIuZW5kc1dpdGgoJHNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gcGFyc2VGbG9hdCgkZmF0aGVyKSA+IHBhcnNlRmxvYXQoJHNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlc3NfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gcGFyc2VGbG9hdCgkZmF0aGVyKSA8IHBhcnNlRmxvYXQoJHNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FueV92YWx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICRmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmbGFnO1xuICAgIH1cbiAgICAvKmZ1bmN0aW9uIGdldFRhYlBvc2l0aW9uKHBvcHRpbixsb2NhdGlvbixpZCl7XG4gICAgICAgIHZhciBwb3B0aW5fc2VsZWN0b3I9alEyMjQoaWQpO1xuICAgICAgICAgICAgdmFyIHRhYl9vaHRtID0galEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiJykuZ2V0KDApLm91dGVySFRNTDtcbiAgICAgICAgICAgICB2YXIgdGFiX29odG1fbmV3ID0gdGFiX29odG0ucmVwbGFjZSgnZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsnLCdkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OycpLFxuICAgICAgICAgICAgIHRhYnNob3c9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwiZGF0YS10YWJzaG93XCIpO1xuXG4gICAgICAgICAgICAgICAgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQoJ2JvZHknKS5hcHBlbmQodGFiX29odG1fbmV3KTtcbiAgICAgICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIpLmZpbmQoJy5kcmFnZ2FibGUnKS5lYWNoKGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywnYWJzb2x1dGUnKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdjdXJzb3InLCdwb2ludGVyJyk7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmZpbmQoJy5mci1ib3gnKS5jc3MoJ3Bvc2l0aW9uJywncmVsYXRpdmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGpRMjI0KFwiI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJcIikuY3NzKFwiY3Vyc29yXCIsXCJwb2ludGVyXCIpO1xuXG4gICAgICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiKS5hdHRyKFwiZGF0YS1sb2FkLXBvcHRpblwiLHBvcHRpbi5wb3B0aW5faWQpO1xuXG4gICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiOm5vdCgjY2xvc2VUYWJYQnV0dG9uKVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIpLmlzKFwiOnZpc2libGVcIikpe1xuICAgICAgICAgICAgICAgICAgICBzaG93RWZmZWN0KHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUG9wdGluVGFiKHBvcHRpbil7XG4gICAgICAgIHZhciB0YWJfaWQ9XCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiLFxuICAgICAgICB0YWJfbG9jYXRpb249IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwiZGF0YS1wb3B0aW4tdGFibG9jYXRpb25cIiksXG4gICAgICAgIHRhYnNob3c9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwiZGF0YS10YWJzaG93XCIpO1xuICAgICAgICBnZXRUYWJQb3NpdGlvbihwb3B0aW4sdGFiX2xvY2F0aW9uLHRhYl9pZCk7XG4gICAgfSAqL1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdFRlYXNlcihwb3B0aW4sZnNob3cpe1xuICAgICAgICAvL2lzX3RlYXNlcnNfb25cbiAgICAgICAgdmFyIGN0X2p0X2NoZWNrPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlID1mYWxzZTtcbiAgICAgICAgaWYocG9wdGluLmRpc3BsYXkpe1xuICAgICAgICAgICAgaWYgKHBvcHRpbkNvb2tpZXNGaWx0ZXIocG9wdGluLGZhbHNlKSAmJiBwb3B0aW5Kc0ZpbHRlcihwb3B0aW4sZmFsc2UpICYmIEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbikpe1xuICAgICAgICAgICAgICAgIGN0X2p0X2NoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaG93TG9nKCdmc2hvdzonK2ZzaG93KTtcblxuICAgICAgICBpZiAocG9wdGluLmlzX3RlYXNlcnNfb24gJiYgcG9wdGluLmRpc3BsYXkgJiYgY3RfanRfY2hlY2spe1xuICAgICAgICAgICAgc2hvd0xvZyhcImV4dHJhY3RUZWFzZXJcIik7XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbiA9PSAnJyl7XG4gICAgICAgICAgICAgICAgalEyMjQud2hlbiggalEyMjQuYWpheChwb3B0aW4ucG9wdGluX3VybCkpLnRoZW4oZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSICkge1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluID0gZGF0YVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fZGF0YSA9IHBvcHRpbi5wb3B0aW4gPT0gJycgPyBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gOiBwb3B0aW4ucG9wdGluO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFiX29odG0gPSBqUTIyNChwb3B0aW4ucG9wdGluKS5maW5kKCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYicpLmdldCgwKS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wX2h0bWxfdGVhc2VyID0gdGFiX29odG0ucmVwbGFjZSgnaWQ9XCJwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCInLCAnaWQ9XCJwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIgZGF0YS1sb2FkLXBvcHRpbj1cIicgKyBwb3B0aW4ucG9wdGluX2lkICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb250X3N0eWxlX2NzcyA9ICBqUTIyNChwb3B0aW4ucG9wdGluKS5maW5kKFwiLnBvcHRpbi1jdXN0b20tZm9udFwiKS5nZXQoMCkub3V0ZXJIVE1MOyAgXG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KCdib2R5JykuYXBwZW5kKGZvbnRfc3R5bGVfY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3Bfc2hvd19jb252X3VzZXIgPSBwb3B0aW4uc3RvcF9zaG93aW5nX3RvX2NvbnZlcnRlZF91c2VycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2NvbnZlcnNpb25fY29va2llID0gcG9wdGluR2V0Q29va2llKCdwb3B0aW5fY29udmVyc2lvbl8nICsgcG9wdGluLnBvcHRpbl9pZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkVGVhc2VyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlID0gKGpRMjI0KHBvcHRpbi5wb3B0aW4pLmZpbmQoXCIjcG9wdGluTW9iaWxlQ29udGFpbmVyXCIpLmxlbmd0aCkgPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnN3aXRjaF9tb2JpbGVfZWRpdG9yO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9wX3Nob3dfY29udl91c2VyID09IDEgJiYgY2hlY2tfY29udmVyc2lvbl9jb29raWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgIGxvYWRUZWFzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi54X2Nsb3NlX2J1dHRvbiA9PSAwICYmIHBvcHRpbkdldENvb2tpZSgncG9wdGluX2NfcF9vX3hfY18nICsgcG9wdGluLnBvcHRpbl9pZCkgJiYgcG9wdGluLmRfZl9yPT0nYWxsQGRpc3BsYXlfZXZlcnl0aW1lX2V2ZXJ5cGFnZV81Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFRlYXNlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKGxhbmRpbmdfcGFnZV90ZWFzZXJfb24gJiYgdHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UhPSd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRUZWFzZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUYWJFbmFibGUocG9wdGluKSAmJiBsb2FkVGVhc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmNoZWNrID0gdHlwZW9mIGpRMjI0KHBvcHRpbi5wb3B0aW4pLmF0dHIoXCJkYXRhLXRhYnNob3dcIikhPSd1bmRlZmluZWQnID8galEyMjQocG9wdGluLnBvcHRpbikuYXR0cihcImRhdGEtdGFic2hvd1wiKTogJ2Fsd2F5cyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBfdmlld19jaGVjayA9IGhhc1NlZW5BUG9wdGluKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgaWYobGFuZGluZ19wYWdlX3RlYXNlcl9vbj09MSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBfdmlld19jaGVjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZihmY2hlY2sgPT0gJ2FmdGVyX2Nsb3NlJyAmJiBsYW5kaW5nX3BhZ2VfdGVhc2VyX29uPT0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzaG93ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZmNoZWNrID09ICdhbHdheXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkUG9wdGluVGVhc2VyKGZzaG93LCBwb3B0aW4sIHRlbXBfaHRtbF90ZWFzZXIsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gLy8gZWxzZSBpZihmY2hlY2s9PSdiZWZvcmVfc2hvdycgJiYgKHBvcHVwX3ZpZXdfY2hlY2s9PW51bGwgfHwgcG9wdXBfdmlld19jaGVjaz09MCkpe1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZjaGVjayA9PSAnYmVmb3JlX3Nob3cnICYmICFwb3B1cF92aWV3X2NoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkUG9wdGluVGVhc2VyKGZzaG93LCBwb3B0aW4sIHRlbXBfaHRtbF90ZWFzZXIsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmNoZWNrID09ICdhZnRlcl9jbG9zZScgJiYgZnNob3cgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5kaW5nX3BhZ2VfdGVhc2VyX29uID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BvcHRpbk9uQ2xpY2socG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkUG9wdGluVGVhc2VyKGZzaG93LCBwb3B0aW4sIHRlbXBfaHRtbF90ZWFzZXIsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LGZ1bmN0aW9uKCBkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgICAgIHBvcHRpbl9kYXRhID0gKHBvcHRpbi5wb3B0aW4gPT0gJycgPyBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gOiBwb3B0aW4ucG9wdGluKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFiX29odG0gPSBqUTIyNChwb3B0aW4ucG9wdGluKS5maW5kKCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYicpLmdldCgwKS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBfaHRtbF90ZWFzZXI9dGFiX29odG0ucmVwbGFjZSgnaWQ9XCJwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCInLCAnaWQ9XCJwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIgZGF0YS1sb2FkLXBvcHRpbj1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCInKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udF9zdHlsZV9jc3MgPSAgalEyMjQocG9wdGluLnBvcHRpbikuZmluZChcIi5wb3B0aW4tY3VzdG9tLWZvbnRcIikuZ2V0KDApLm91dGVySFRNTDsgIFxuICAgICAgICAgICAgICAgIGpRMjI0KCdib2R5JykuYXBwZW5kKGZvbnRfc3R5bGVfY3NzKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdG9wX3Nob3dfY29udl91c2VyID0gcG9wdGluLnN0b3Bfc2hvd2luZ190b19jb252ZXJ0ZWRfdXNlcnMsXG4gICAgICAgICAgICAgICAgY2hlY2tfY29udmVyc2lvbl9jb29raWU9IHBvcHRpbkdldENvb2tpZSgncG9wdGluX2NvbnZlcnNpb25fJyArIHBvcHRpbi5wb3B0aW5faWQpLFxuICAgICAgICAgICAgICAgIGxvYWRUZWFzZXI9dHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBpc01vYmlsZUNvbnRhaW5lckF2YWlsYWJsZSA9IChqUTIyNChwb3B0aW4ucG9wdGluKS5maW5kKFwiI3BvcHRpbk1vYmlsZUNvbnRhaW5lclwiKS5sZW5ndGgpID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuc3dpdGNoX21vYmlsZV9lZGl0b3I7XG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihzdG9wX3Nob3dfY29udl91c2VyPT0xICYmIGNoZWNrX2NvbnZlcnNpb25fY29va2llIT1cIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgbG9hZFRlYXNlcj1mYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYocG9wdGluLnhfY2xvc2VfYnV0dG9uPT0wICYmIHBvcHRpbkdldENvb2tpZSgncG9wdGluX2NfcF9vX3hfY18nICsgcG9wdGluLnBvcHRpbl9pZCkgJiYgcG9wdGluLmRfZl9yPT0nYWxsQGRpc3BsYXlfZXZlcnl0aW1lX2V2ZXJ5cGFnZV81Jyl7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRUZWFzZXI9ZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYW5kaW5nX3BhZ2VfdGVhc2VyX29uICYmIHR5cGVvZiBwb3B0aW5fbGFuZGluZ19wYWdlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRUZWFzZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGlzVGFiRW5hYmxlKHBvcHRpbikgICYmIGxvYWRUZWFzZXIpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmNoZWNrID0gdHlwZW9mIGpRMjI0KHBvcHRpbi5wb3B0aW4pLmF0dHIoXCJkYXRhLXRhYnNob3dcIikhPSd1bmRlZmluZWQnID8galEyMjQocG9wdGluLnBvcHRpbikuYXR0cihcImRhdGEtdGFic2hvd1wiKTogJ2Fsd2F5cyc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cF92aWV3X2NoZWNrID0gaGFzU2VlbkFQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgaWYobGFuZGluZ19wYWdlX3RlYXNlcl9vbj09MSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cF92aWV3X2NoZWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBpZihmY2hlY2sgPT0gJ2FmdGVyX2Nsb3NlJyAmJiBsYW5kaW5nX3BhZ2VfdGVhc2VyX29uPT0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzaG93ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoZmNoZWNrPT0nYWx3YXlzJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkUG9wdGluVGVhc2VyKGZzaG93LHBvcHRpbix0ZW1wX2h0bWxfdGVhc2VyLGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBpZihmY2hlY2s9PSdiZWZvcmVfc2hvdycgJiYgKHBvcHVwX3ZpZXdfY2hlY2s9PW51bGwgfHwgcG9wdXBfdmlld19jaGVjaz09MCkpe1xuICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihmY2hlY2s9PSdiZWZvcmVfc2hvdycgJiYgIXBvcHVwX3ZpZXdfY2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRQb3B0aW5UZWFzZXIoZnNob3cscG9wdGluLHRlbXBfaHRtbF90ZWFzZXIsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmNoZWNrID09ICdhZnRlcl9jbG9zZScgJiYgZnNob3c9PTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlID0gaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGVPYmpbcG9wdGluLnBvcHRpbl9pZF0gID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkUG9wdGluVGVhc2VyKGZzaG93LCBwb3B0aW4sIHRlbXBfaHRtbF90ZWFzZXIsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVUZWFzZXJPblBvcHVwU2hvdyhwb3B0aW4pe1xuICAgICAgICBpZiAodHlwZW9mIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIiArIHBvcHRpbi5wb3B0aW5faWQgKyBcIl1cIikuYXR0cihcImRhdGEtaGFzdGFiXCIpICE9IFwidW5kZWZpbmVkXCIgJiYgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiICsgcG9wdGluLnBvcHRpbl9pZCArIFwiXVwiKS5hdHRyKFwiZGF0YS1oYXN0YWJcIikgPT0gMSkge1xuICAgICAgICAgICAgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykuYWRkQ2xhc3MoXCJwb3B1cC1sb2FkZWRcIik7XG4gICAgICAgICAgICBzaG93VGVhc2VyRWZmZWN0KHBvcHRpbiwgJ2V4aXQnKTtcbiAgICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlVGFiKHBvcHRpbil7XG4gICAgICAgIHZhciB0ZWFzZXJfc2VsZWN0b3IgPSAnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJbZGF0YS1sb2FkLXBvcHRpbj1cIicrIHBvcHRpbi5wb3B0aW5faWQgKydcIl0nO1xuICAgICAgICB2YXIgcG9wdGluVGFiID0galEyMjQodGVhc2VyX3NlbGVjdG9yKTtcbiAgICAgICAgaWYodHlwZW9mIGpRMjI0KHBvcHRpbi5wb3B0aW4pLmF0dHIoXCJkYXRhLXRhYmVmZmVjdFwiKSE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgaWYocG9wdGluVGFiLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpICE9IG51bGwgJiYgcG9wdGluVGFiLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpIT0nJyl7XG4gICAgICAgICAgICBpZihwb3B0aW5BbmltYXRlVGFiW3BvcHRpbi5wb3B0aW5faWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvcHRpbkFuaW1hdGVUYWJbcG9wdGluLnBvcHRpbl9pZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHBvcHRpbkFuaW1hdGVUYWJbcG9wdGluLnBvcHRpbl9pZF0gPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciB0YWJBbmltYXRlID0gcG9wdGluVGFiLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpO1xuICAgICAgICAgICAgICAgICAgIHBvcHRpblRhYi50b2dnbGVDbGFzcyhcIm5vLWFuaW1hdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgIHBvcHRpblRhYi50b2dnbGVDbGFzcygncG9wdGluX19hbmltYXRlZCBhbmltYXRlX18nK3RhYkFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIC8vICAgIGNvbnNvbGUubG9nKFwiZGF0YS1wb3B0aW4tYW5pbWF0ZVwiLHRhYkFuaW1hdGUpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcikuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywnYmxvY2snLCdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZFBvcHRpblRlYXNlcihmc2hvdyxwb3B0aW4sdGVhc2VyX2h0bWwsaXNNb2JpbGVDb250YWluZXJBdmFpbGFibGUpe1xuICAgICAgICB2YXIgdGFiX2lkID0gXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiLFxuICAgICAgICB0aGlzX3BvcCA9IHBvcHRpbi5wb3B0aW4sXG4gICAgICAgIHRoaXNfcG9wID0gdGhpc19wb3AudHJpbSgpLFxuICAgICAgICB0YWJzaG93ID0galEyMjQocG9wdGluLnBvcHRpbikuYXR0cihcImRhdGEtdGFic2hvd1wiKSxcbiAgICAgICAgdGFiX3ZhcmlhdGlvbnMgPSBKU09OLnBhcnNlKGpRMjI0KHRoaXNfcG9wKS5maW5kKFwiICN0YWJfdmFyaWF0aW9uc19oaWRkZW5cIikudmFsKCkpLFxuICAgICAgICB0ZWFzZXJfbW9iaWxlX3ZpZXdfdHlwZSA9IGpRMjI0KHRoaXNfcG9wKS5hdHRyKFwiZGF0YS10ZWFzZXItbW9iaWxlLXZpZXdcIiksXG4gICAgICAgIHRlYXNlcl9kZXNrdG9wX3ZpZXdfdHlwZSA9IGpRMjI0KHRoaXNfcG9wKS5hdHRyKFwiZGF0YS10ZWFzZXItZGVza3RvcC12aWV3XCIpLFxuICAgICAgICBtb2JpbGVfdmlld190ZWFzZXJfaHRtbCA9IHRhYl92YXJpYXRpb25zW3RlYXNlcl9tb2JpbGVfdmlld190eXBlICsgXCItbW9iaWxlXCJdO1xuICAgICAgICAvL01ha2luZyBzdXJlIGl0cyBnZXR0aW5nIHRlYXNlciBhdHJpYnV0ZSB2YWx1ZXNcbiAgICAgICAgXG4gICAgICAgIGlmKHR5cGVvZiB0ZWFzZXJfbW9iaWxlX3ZpZXdfdHlwZSA9PSAndW5kZWZpbmVkJyAmJiBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJtb2JpbGVcIiAmJiBpc01vYmlsZUNvbnRhaW5lckF2YWlsYWJsZSl7XG4gICAgICAgICAgICB0aGlzX3BvcCA9ICBqUTIyNCh0aGlzX3BvcCkuZ2V0KDEpLm91dGVySFRNTDtcbiAgICAgICAgICAgIHRlYXNlcl9tb2JpbGVfdmlld190eXBlID0galEyMjQodGhpc19wb3ApLmF0dHIoXCJkYXRhLXRlYXNlci1tb2JpbGUtdmlld1wiKTtcbiAgICAgICAgICAgIG1vYmlsZV92aWV3X3RlYXNlcl9odG1sID0gdGFiX3ZhcmlhdGlvbnNbdGVhc2VyX21vYmlsZV92aWV3X3R5cGUgKyBcIi1tb2JpbGVcIl07XG4gICAgICAgIH0gXG4gICAgICAgIHZhciB0ZWFzZXJfc2VsZWN0b3IgPSAnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJbZGF0YS1sb2FkLXBvcHRpbj1cIicrIHBvcHRpbi5wb3B0aW5faWQgKydcIl0nO1xuICAgICAgICAvLyBzaG93TG9nKFwidGFiX3ZhcmlhdGlvbnM6XCIrdGFiX3ZhcmlhdGlvbnMpO1xuICAgICAgICAvLyBzaG93TG9nKFwidGVhc2VyX21vYmlsZV92aWV3X3R5cGU6XCIrdGVhc2VyX21vYmlsZV92aWV3X3R5cGUpO1xuICAgICAgICAvLyBzaG93TG9nKFwidGVhc2VyX2Rlc2t0b3Bfdmlld190eXBlOlwiK3RlYXNlcl9kZXNrdG9wX3ZpZXdfdHlwZSk7XG4gICAgICAgIC8vIHNob3dMb2coXCJtb2JpbGVfdmlld190ZWFzZXJfaHRtbDpcIittb2JpbGVfdmlld190ZWFzZXJfaHRtbCk7XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlQ29udGFpbmVyLXRhYlwiKS5yZW1vdmUoKTtcbiAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5EZXNrdG9wQ29udGFpbmVyLXRhYlwiKS5yZW1vdmUoKTtcbiAgICAgICAgaWYgKGlmTW9iaWxlUG9wdGluICYmIHBvcHRpbi5wb3B0aW5fdHlwZSAhPSBcIm1vYmlsZVwiICYmIGlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBtb2JpbGVfdmlld190ZWFzZXJfaHRtbCA9IG1vYmlsZV92aWV3X3RlYXNlcl9odG1sLnJlcGxhY2UoJ2lkPVwicG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiJywgJ2lkPVwicG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiIGRhdGEtbG9hZC1wb3B0aW49XCInICsgcG9wdGluLnBvcHRpbl9pZCArICdcIicpO1xuICAgICAgICAgICAgbW9iaWxlX3ZpZXdfdGVhc2VyX2h0bWwgPSBtb2JpbGVfdmlld190ZWFzZXJfaHRtbC5yZXBsYWNlKCdvbmNsaWNrPVwiY2xvc2VUYWJQb3B0aW5PblhjbGljaygpO1wiJywgXCJvbmNsaWNrPVxcXCJjbG9zZVRhYlBvcHRpbk9uWGNsaWNrKHRoaXMsJ1wiICsgcG9wdGluLnBvcHRpbl9pZCArIFwiJyk7XFxcIlwiKTtcblxuICAgICAgICAgICAgaWYgKGpRMjI0KHRlYXNlcl9zZWxlY3RvcikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcikucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqUTIyNChcImJvZHlcIikuYXBwZW5kKG1vYmlsZV92aWV3X3RlYXNlcl9odG1sKTtcbiAgICAgICAgICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVhc2VyX2h0bWwgPSB0ZWFzZXJfaHRtbC5yZXBsYWNlKCdvbmNsaWNrPVwiY2xvc2VUYWJQb3B0aW5PblhjbGljaygpO1wiJywgXCJvbmNsaWNrPVxcXCJjbG9zZVRhYlBvcHRpbk9uWGNsaWNrKHRoaXMsJ1wiICsgcG9wdGluLnBvcHRpbl9pZCArIFwiJyk7XFxcIlwiKTtcbiAgICAgICAgICAgIC8vc2hvd0xvZygndGVhc2VyX2h0bWw6Jyt0ZWFzZXJfaHRtbCk7XG4gICAgICAgICAgICBpZiAoalEyMjQodGVhc2VyX3NlbGVjdG9yKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZCh0ZWFzZXJfaHRtbCk7XG4gICAgICAgICAgfVxuICAgICAgICBjc3NGaXhUZWFzZXJzKHBvcHRpbik7XG5cbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5jc3MoJ2N1cnNvcicsIFwicG9pbnRlclwiKTtcbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKycgLmhhbmRsZS1pY29uJykucmVtb3ZlKCk7XG4gICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcisnIC5wb3MtaGVscGVyJykucmVtb3ZlKCk7XG4gICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcisnIC5oYW5kbGUtaWNvbi13cmFwcGVyJykucmVtb3ZlKCk7XG4gICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcikuYXR0cignZGF0YS1sb2FkLXBvcHRpbicsIHBvcHRpbi5wb3B0aW5faWQpO1xuICAgICAgICAvLyBqUTIyNCh0ZWFzZXJfc2VsZWN0b3IpLmZpbmQoJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJykucmVtb3ZlQXR0cihcImNvbnRlbnRlZGl0YWJsZVwiKTtcbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5maW5kKCdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXScpLnByb3AoXCJjb250ZW50ZWRpdGFibGVcIiwgZmFsc2UpO1xuICAgICAgICB2YXIgdGFiX2xvY2F0aW9uID0galEyMjQodGVhc2VyX3NlbGVjdG9yKS5hdHRyKFwiZGF0YS1wb3B0aW4tdGFibG9jYXRpb25cIik7XG4gICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcikuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdwb3NpdGlvbicsICdmaXhlZCcsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ3otaW5kZXgnLCAnOTk5OTk4JywgJ2ltcG9ydGFudCcpO1xuXG4gICAgICAgIGpRMjI0KHRlYXNlcl9zZWxlY3RvcikuZmluZCgnLmRyYWdnYWJsZScpLmVhY2goZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzKS5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywnYWJzb2x1dGUnKTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXMpLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnY3Vyc29yJywncG9pbnRlcicpO1xuICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmZyLWJveCcpLmNzcygncG9zaXRpb24nLCdyZWxhdGl2ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBqUTIyNCh0ZWFzZXJfc2VsZWN0b3IpLmNzcyhcImN1cnNvclwiLFwicG9pbnRlclwiKTtcbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICBqUTIyNCh0ZWFzZXJfc2VsZWN0b3IpLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnb3BhY2l0eScsICcxJyk7XG5cblxuICAgICAgICAvLyBpZiAodGFic2hvdyA9PSAnYWx3YXlzJykge1xuICAgICAgICAvLyAgICAgc2hvd1RlYXNlckVmZmVjdChwb3B0aW4sICdlbnRyeScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoalEyMjQodGVhc2VyX3NlbGVjdG9yKycgI2Nsb3NlVGFiWEJ1dHRvbicpLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICBqUTIyNCh0ZWFzZXJfc2VsZWN0b3IrJyAjY2xvc2VUYWJYQnV0dG9uJykuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCd6LWluZGV4JywgJzk5JywgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5pbWF0ZVRhYihwb3B0aW4pO1xuICAgICAgICAgICAgc2hvd1RlYXNlckVmZmVjdChwb3B0aW4sICdlbnRyeScpO1xuICAgICAgICB9LCA1MDApO1xuXG5cbiAgICAgICAgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdOm5vdCgjY2xvc2VUYWJYQnV0dG9uKSwjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJysgcG9wdGluLnBvcHRpbl9pZCArJ1wiXTpub3QoI3BvcHRpbkZvcm1DbG9zZVRleHQpJykub24oXCJjbGlja1wiLGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGlmKGpRMjI0KCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJysgcG9wdGluLnBvcHRpbl9pZCArJ1wiXScpLmlzKFwiOnZpc2libGVcIikgJiYgalEyMjQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiY2xhc3NcIikhPSdjbG9zZS1pY29uJyl7XG4gICAgICAgICAgICAgICAgaWYoalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykuaGFzQ2xhc3MoJ3RyaWFuZ2xlVGFiJykpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJbZGF0YS1sb2FkLXBvcHRpbj1cIicrIHBvcHRpbi5wb3B0aW5faWQgKydcIl0nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwb3B1cF9jaGVjayA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKTtcbiAgICAgICAgICAgICAgICBqUTIyNCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJbZGF0YS1sb2FkLXBvcHRpbj1cIicrIHBvcHRpbi5wb3B0aW5faWQgKydcIl0nKS5yZW1vdmVDbGFzcygncG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgIGlmKHBvcHVwX2NoZWNrLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgIHNob3dQb3B0aW5PbkNsaWNrKHBvcHRpbi5wb3B0aW5faWQsIHRydWUsIHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFZmZlY3QocG9wdGluKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNzc0ZpeFRlYXNlcnMocG9wdGluKXtcbiAgICAgICAgdmFyIHRlYXNlcl9zZWxlY3RvciA9ICcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJysgcG9wdGluLnBvcHRpbl9pZCArJ1wiXSc7XG5cbiAgICAgICAgalEyMjQoXCJbZGF0YS1sb2FkLXBvcHRpbj1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWltYWdlLXdyYXBwZXJcIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnaW1nJykuY3NzKFwid2lkdGhcIixqUTIyNCh0aGlzKS5jc3MoXCJ3aWR0aFwiKSk7XG4gICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCdpbWcnKS5jc3MoXCJoZWlnaHRcIixqUTIyNCh0aGlzKS5jc3MoXCJoZWlnaHRcIikpO1xuICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnaW1nJykuYXR0cihcImFsdFwiLHBvcHRpbi5wb3B0aW5fbmFtZSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgalEyMjQodGVhc2VyX3NlbGVjdG9yKS5maW5kKCdwLCBzcGFuLCBkaXY6bm90KC5wb3B0aW4tY3JlZGl0KSwgYnV0dG9uLCBsYWJlbCwgdWwsIG9sLCBsaSwgaW1nLCBzdHJvbmcsIGknKS5lYWNoKGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgdmFyIGNzc19zdHJpbmdfdGVhc2VycyA9ICcnO1xuICAgICAgICAgICAgalEyMjQuZWFjaCh0aGlzLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKCR0aGlzKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zcGVjaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3Nfc3RyaW5nX3RlYXNlcnMgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzX3N0cmluZ190ZWFzZXJzID0gY3NzX3N0cmluZ190ZWFzZXJzLnJlcGxhY2UoLyA/IWltcG9ydGFudC9nLCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc19zdHJpbmdfdGVhc2VycyA9IGNzc19zdHJpbmdfdGVhc2Vycy5yZXBsYWNlKC9cXDtiYXNlNjQvZywnOmJhc2U2NCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzX3N0cmluZ190ZWFzZXJzID0gY3NzX3N0cmluZ190ZWFzZXJzLnJlcGxhY2UoL1xcOy9nLCcgIWltcG9ydGFudDsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc19zdHJpbmdfdGVhc2VycyA9IGNzc19zdHJpbmdfdGVhc2Vycy5yZXBsYWNlKC9cXDpiYXNlNjQvZywnO2Jhc2U2NCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG93bmxvYWQgZm9udCBmaWxlIGZyb20gZ29vZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZS5pbmRleE9mKCdmb250LWZhbWlseScpICE9PS0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEZvbnQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXMpLmF0dHIoJ3N0eWxlJyxjc3Nfc3RyaW5nX3RlYXNlcnMpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1RlYXNlckVmZmVjdChwb3B0aW4sIGV0eXBlKXtcblxuICAgICAgICB2YXIgdGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvciA9IGpRMjI0KCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJysgcG9wdGluLnBvcHRpbl9pZCArJ1wiXScpO1xuXG4gICAgICAgIGlmKHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IubGVuZ3RoKXtcbiAgICAgICAgICAgIHZhciB0ZWFzZXJfZW50cnlfZWZmZWN0PVwiZW50cnlfZWZmZWN0LXVwXCI7XG4gICAgICAgICAgICB2YXIgdGVhc2VyX2V4aXRfZWZmZWN0PVwiZXhpdF9lZmZlY3Qtbm9uZVwiO1xuICAgICAgICAgICAgdGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3Rvci5yZW1vdmVDbGFzcygncG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgdmFyIHRlYXNlcl9lZmZlY3Q9XCJcIjtcblxuICAgICAgICAgICBpZihldHlwZT09J2VudHJ5Jyl7XG4gICAgICAgICAgICAgdGVhc2VyX2VmZmVjdCA9ICh0eXBlb2YgalEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuYXR0cihcImRhdGEtdGVhc2VyLWVudHJ5XCIpIT0gJ3VuZGVmaW5lZCcpID8galEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuYXR0cihcImRhdGEtdGVhc2VyLWVudHJ5XCIpIDogXCJlbnRyeV9lZmZlY3QtdXBcIjtcbiAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0ZWFzZXJfZWZmZWN0ID0gKHR5cGVvZiBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hdHRyKFwiZGF0YS10ZWFzZXItZXhpdFwiKSE9ICd1bmRlZmluZWQnKSA/IGpRMjI0KHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IpLmF0dHIoXCJkYXRhLXRlYXNlci1leGl0XCIpIDogXCJleGl0X2VmZmVjdC1ub25lXCI7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9cImVmZmVjdFwiOiBlZmZlY3RzIGZyb20gYW5pbWF0ZS5jc3NcbiAgICAgICAgICAgIC8vXCJzcGVlZFwiOiBhbmltYXRpb24gc3BlZWQoZGVmYXVsdCA9IDFzOyBzbG93ID0gMnM7IHNsb3dlciA9IDNzOyBmYXN0ID0gODAwIG1zOyBmYXN0ZXIgPSA1MDAgbXMpXG4gICAgICAgICAgICAvL1wiZGVsYXlcIjogYW5pbWF0aW9uIGRlbGF5KGRlZmF1bHQgPSAwIHNlY29uZHM7IDFzID0gMSBzZWNvbmRzOyAycyA9IDIgc2Vjb25kczsgM3MgPSAzIHNlY29uZHM7IDRzID0gNCBzZWNvbmRzOyA1cyA9IDUgc2Vjb25kcylcbiAgICAgICAgICAgIHZhciBhbmltYXRlQ2xhc3MgPSB7XCJlZmZlY3RcIjpudWxsLCBcInNwZWVkXCI6XCJfZGVmYXVsdFwiLCBcImRlbGF5XCI6XCItZGVmYXVsdFwifTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEVmZmVjdCA9IHRlYXNlcl9lZmZlY3Quc3BsaXQoJy0nKVsxXTtcblxuXG4gICAgICAgICAgICBzd2l0Y2goc2VsZWN0ZWRFZmZlY3Qpe1xuICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfbm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwidXBcIiA6XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9zbGlkZUluRG93blwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZG93blwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3NsaWRlSW5VcFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3NsaWRlSW5MZWZ0XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3NsaWRlSW5SaWdodFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmxpbmRcIiA6IC8vUmVtb3ZlZCBGb2xkIEVudHJ5RWZmZWN0XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9mbGlwSW5YXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib3VuY2VcIiA6XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9ib3VuY2VJblwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xpcFwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3pvb21JblwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXhwbG9kZVwiIDogLy9SZW1vdmVkIFB1enpsZSBFbnRyeUVmZmVjdFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfZmFkZUluXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmYWRlXCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfZmFkZUluXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmb2xkXCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfZmxpcEluWFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaGlnaGxpZ2h0XCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfdGFkYVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicHVmZlwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3B1bHNlXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwdWxzYXRlXCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfZmxhc2hcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjYWxlXCIgOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfaGVhcnRCZWF0XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzaGFrZVwiIDpcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3NoYWtlWFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2l6ZVwiIDogLy9SZW1vdmVkIFJlc2l6ZSBFbnRyeUVmZmVjdFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfem9vbUluXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsZS1vdXRcIiA6XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl96b29tSW5cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkcmFnX2NvbnQgPSB0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yO1xuXG4gICAgICAgICAgICBpZiggZXR5cGUgPT0gXCJleGl0XCIgKXtcbiAgICAgICAgICAgICAgICB2YXIgZXhpdE91dCA9IGFuaW1hdGVDbGFzcy5lZmZlY3Q7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IGV4aXRPdXQucmVwbGFjZShcIkluXCIsXCJPdXRcIik7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuYWRkQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICBpZiggYW5pbWF0ZUNsYXNzLmVmZmVjdC5pbmRleE9mKCdzbGlkZScpICE9PSAtMSAgKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuYWRkQ2xhc3MoJ2FuaW1hdGVfX2Zhc3RlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hZGRDbGFzcygnYW5pbWF0ZV8nK2FuaW1hdGVDbGFzcy5lZmZlY3QpO1xuXG4gICAgICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnRW50cnkgQW5pbWF0ZScpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hZGRDbGFzcygncG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiggYW5pbWF0ZUNsYXNzLmVmZmVjdC5pbmRleE9mKCdzbGlkZScpICE9PSAtMSAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IpLmFkZENsYXNzKCdhbmltYXRlX19mYXN0ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hZGRDbGFzcygnYW5pbWF0ZV8nK2FuaW1hdGVDbGFzcy5lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5jc3Moe1wiZGlzcGxheVwiOiBcImJsb2NrXCJ9KTtcblxuICAgICAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdFbnRyeSBBbmltYXRlIGVycjMnKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuYWRkQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIGFuaW1hdGVDbGFzcy5lZmZlY3QuaW5kZXhPZignc2xpZGUnKSAhPT0gLTEgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hZGRDbGFzcygnYW5pbWF0ZV9fZmFzdGVyJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvcikuY3NzKHtcImRpc3BsYXlcIjogXCJibG9ja1wifSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBjbGFzc2VzIGFmdGVyIDFzZWNcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5yZW1vdmVDbGFzcygncG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IpLnJlbW92ZUNsYXNzIChmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNsYXNzTmFtZS5tYXRjaCAoL1xcYmFuaW1hdGVfXFxTKy9nKSB8fCBbXSkuam9pbignICcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmKCBldHlwZSA9PSBcImV4aXRcIiApe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5jc3Moe1wiZGlzcGxheVwiOiBcIm5vbmVcIn0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggZXR5cGUgPT0gXCJlbnRyeVwiICYmIGpRMjI0KHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IpLmlzKFwiOmhpZGRlblwiKSl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfZWZmZWN0X3BvcHRpbl90ZWFzZXJfc2VsZWN0b3IpLmFkZENsYXNzKCdwb3B0aW5fX2FuaW1hdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2coXCJhbmltYXRlQ2xhc3MuZWZmZWN0OlwiK2FuaW1hdGVDbGFzcy5lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5hZGRDbGFzcygnYW5pbWF0ZV8nK2FuaW1hdGVDbGFzcy5lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX2VmZmVjdF9wb3B0aW5fdGVhc2VyX3NlbGVjdG9yKS5jc3Moe1wiZGlzcGxheVwiOiBcImJsb2NrXCJ9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sMTAwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG5cbiAgICBmdW5jdGlvbiByZW1vdmVUYWJodG1sKHBvcHRpbil7XG4gICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluTW9iaWxlQ29udGFpbmVyLXRhYlwiKS5yZW1vdmUoKTtcbiAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNwb3B0aW5EZXNrdG9wQ29udGFpbmVyLXRhYlwiKS5yZW1vdmUoKTtcbiAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIpLnJlbW92ZSgpO1xuICAgIH1cblxuXG5cbiAgICBmdW5jdGlvbiBhcHBlbmRQb3B0aW4ocG9wdGluLGNsaWNrKXtcblxuICAgICAgICBzaG93TG9nKCdBZGJsb2NrIHRyaWdnZXI6Jytwb3B0aW4uZGlzcGxheV9pZl9hZGJsb2NrX2FjdGl2ZSk7XG5cbiAgICAgICAgaWYgKHBvcHRpbi5kaXNwbGF5X2lmX2FkYmxvY2tfYWN0aXZlID09IFwieWVzXCIpe1xuICAgICAgICAgICAgalEyMjQud2hlbihqUTIyNC5nZXRTY3JpcHQoXCJodHRwczovL2Rpc3BsYXkucG9wdC5pbi9qcy93ZWJhZHMuanNcIikpLnRoZW4oZnVuY3Rpb24oKSB7IH0pLmZhaWwoIGFwcGVuZFBvcHRpbkludGVybmFsICk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIGFwcGVuZFBvcHRpbkludGVybmFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcHBlbmRQb3B0aW5JbnRlcm5hbCgpIHtcbiAgICAgICAgICAgIHNob3dMb2coJ2FwcGVuZFBvcHRpbicpO1xuICAgICAgICAgICAgc2hvd0xvZygnYXBwZW5kUG9wdGluOicgK2NsaWNrKTtcbiAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpbi5wb3B0aW5fdHlwZTonICtwb3B0aW4ucG9wdGluX3R5cGUpO1xuXG5cblxuICAgICAgICAgICAgaWYgKGNsaWNrIT11bmRlZmluZWQpe1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW4gPT0gJycgJiYgYWxsX3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluID09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQud2hlbiggalEyMjQuYWpheChwb3B0aW4ucG9wdGluX3VybCkpLnRoZW4oZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnYXBwZW5kUG9wdGluIGFqYXg6JyArZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2VtYmVkZGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B0aW5fY29udGFpbmVyX2Zvcm0gPSBqUTIyNChcIi5wb3B0aW4tZW1iZWRkZWRbZGF0YS1pZD0nXCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCInXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fY29udGFpbmVyX2Zvcm0uYXBwZW5kKHBvcHRpbi5wb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZChwb3B0aW4ucG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluICAgICAgICA9IHBvcHRpbi5wb3B0aW47XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gICAgPSBwb3B0aW4ucG9wdGluO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UG9wdGluKHBvcHRpbiwgY2xpY2spXG4gICAgICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX2RhdGEgPSAocG9wdGluLnBvcHRpbiA9PSAnJyA/IGFsbF9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA6IHBvcHRpbi5wb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09ICdlbWJlZGRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B0aW5fY29udGFpbmVyX2Zvcm0gPSBqUTIyNChcIi5wb3B0aW4tZW1iZWRkZWRbZGF0YS1pZD0nXCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCInXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9jb250YWluZXJfZm9ybS5hcHBlbmQocG9wdGluLnBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZChwb3B0aW4ucG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9IHBvcHRpbi5wb3B0aW47XG4gICAgICAgICAgICAgICAgICAgIHNldFBvcHRpbihwb3B0aW4sIGNsaWNrKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9wdGluQ29va2llc0ZpbHRlcihwb3B0aW4sY2xpY2spICYmIHBvcHRpbkpzRmlsdGVyKHBvcHRpbixjbGljaykpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluID09ICcnICYmIGFsbF9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNC53aGVuKCBqUTIyNC5hamF4KHBvcHRpbi5wb3B0aW5fdXJsKSkudGhlbihmdW5jdGlvbiggZGF0YSwgdGV4dFN0YXR1cywganFYSFIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90dGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluLnBvcHRpbiA9IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxfcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW4gPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBRLmNoZWNrUXVldWUocG9wdGluLGNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24oIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21vbml0b3JFcnJvcignYXBwZW5kUG9wdGluKCktPmVycm9yKCknLCdFcnJvciBnZXQgcG9wdGluIGZyb20gY2xvdWRmcm9udCcsdGV4dFN0YXR1cyxqcVhIUi5yZXNwb25zZVRleHQscG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW4gPSAocG9wdGluLnBvcHRpbiA9PSAnJyA/IGFsbF9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA6IHBvcHRpbi5wb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgUFEuY2hlY2tRdWV1ZShwb3B0aW4sY2xpY2spXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNTZWVuQVBvcHRpbihwb3B0aW4pe1xuICAgICAgICByZXR1cm4gcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9vX2FfZF8nK3BvcHRpbi5wb3B0aW5faWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc05vdFNlZW5BUG9wdGluKHBvcHRpbil7XG4gICAgICAgIHJldHVybiAhcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9vX2FfZF8nK3BvcHRpbi5wb3B0aW5faWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0Nsb3NlZEFQb3B0aW4ocG9wdGluKSB7XG4gICAgICAgIHJldHVybiBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX2NfcF9vX3hfY18nK3BvcHRpbi5wb3B0aW5faWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0NvbnZlcnRlZEFQb3B0aW4ocG9wdGluKSB7XG4gICAgICAgIHJldHVybiBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX2NvbnZlcnNpb25fJyArIHBvcHRpbi5wb3B0aW5faWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEVuZ2FnZW1lbnRXaXRoT3RoZXJQb3B0aW5zKHBvcHRpbilcbiAgICB7XG4gICAgICAgIHZhciBmbGFnID0gdHJ1ZTtcblxuICAgICAgICBpZiAoKCFwb3B0aW4uZW5nYWdlbWVudF93aXRoX290aGVyX3BvcHRpbl9maWx0ZXJfYWN0aXZlKSB8fCAocG9wdGluLmVuZ2FnZW1lbnRfd2l0aF9vdGhlcl9wb3B0aW5fZmlsdGVyID09IG51bGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdmFyIGV4cGxvZGUgPSBwb3B0aW4uZW5nYWdlbWVudF93aXRoX290aGVyX3BvcHRpbl9maWx0ZXIuc3BsaXQoJ3wnKTtcblxuICAgICAgICAvLyBzaG93IHx8IGRvbnRfc2hvd1xuICAgICAgICB2YXIgc2hvd1ZhbHVlID0gZXhwbG9kZSA/IGV4cGxvZGVbMF0gOiBmYWxzZTtcblxuICAgICAgICAvLyBzZWVuX3BvcHRpbiB8fCBub3Rfc2VlbiB8fCBjbG9zZWQgfHwgY29udmVydGVkXG4gICAgICAgIHZhciBjb25kaXRpb25PbmUgPSBleHBsb2RlID8gZXhwbG9kZVsxXSA6IGZhbHNlO1xuXG4gICAgICAgIC8vIHNlZW5fcG9wdGluIHx8IHBvcHVwIHx8IGZvcm1cbiAgICAgICAgdmFyIGNvbmRpdGlvblR3byA9IGV4cGxvZGUgPyBleHBsb2RlWzJdIDogZmFsc2U7XG5cbiAgICAgICAgLy8gYW55IHx8ICBhbGxfcG9wdGluc1xuICAgICAgICB2YXIgY29uZGl0aW9uVGhyZWUgPSBleHBsb2RlID8gZXhwbG9kZVszXSA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBjbGllbnRQb3B0aW5zID0gW107XG4gICAgICAgIGlmIChjb25kaXRpb25Ud28gPT0gXCJlbWJlZGRlZFwiKSB7XG4gICAgICAgICAgICBqUTIyNC5lYWNoKGFsbF9wb3B0aW5zLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5faWQgIT0gdGhpcy5wb3B0aW5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9wdGluX3R5cGUgPT0gXCJlbWJlZGRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uVGhyZWUgIT0gXCJhbnlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvcHRpbl9pZCA9PSBjb25kaXRpb25UaHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQb3B0aW5zLnB1c2godGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBvcHRpbnMucHVzaCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqUTIyNC5lYWNoKGFsbF9wb3B0aW5zLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5faWQgIT0gdGhpcy5wb3B0aW5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9wdGluX3R5cGUgIT0gXCJlbWJlZGRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uVGhyZWUgIT0gXCJhbnlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvcHRpbl9pZCA9PSBjb25kaXRpb25UaHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQb3B0aW5zLnB1c2godGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBvcHRpbnMucHVzaCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29uZGl0aW9uTWV0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGNsaWVudFBvcHRpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3dpdGNoIChjb25kaXRpb25PbmUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWVuX3BvcHRpbic6XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goY2xpZW50UG9wdGlucywgZnVuY3Rpb24oa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1NlZW5BUG9wdGluKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uTWV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25vdF9zZWVuJzpcbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChjbGllbnRQb3B0aW5zLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzTm90U2VlbkFQb3B0aW4odGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25NZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VkJzpcbiAgICAgICAgICAgICAgICAgICAgalEyMjQuZWFjaChjbGllbnRQb3B0aW5zLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xvc2VkQVBvcHRpbih0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbk1ldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb252ZXJ0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBqUTIyNC5lYWNoKGNsaWVudFBvcHRpbnMsIGZ1bmN0aW9uKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDb252ZXJ0ZWRBUG9wdGluKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uTWV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmRpdGlvbk1ldCkge1xuICAgICAgICAgICAgaWYgKHNob3dWYWx1ZSA9PSBcInNob3dcIikge1xuICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2hvd1ZhbHVlID09IFwic2hvd1wiKSB7XG4gICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbGFnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvdXJjZUNvZGVUYXJnZXQocG9wdGluKVxuICAgIHtcbiAgICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgICBpZiAoKCFwb3B0aW4uc291cmNlX2NvZGVfdGFyZ2V0X2FjdGl2ZSkgfHwgKHBvcHRpbi5zb3VyY2VfY29kZV90YXJnZXRfaHRtbCA9PSBudWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlX2NvZGUgPSBqUTIyNChcImh0bWxcIikuaHRtbCgpO1xuXG4gICAgICAgIHNvdXJjZV9jb2RlID0gc291cmNlX2NvZGUucmVwbGFjZSgvKDwhLS0uKj8tLT4pfCg8IS0tW1xcU1xcc10rPy0tPil8KDwhLS1bXFxTXFxzXSo/JCkvZywnJylcblxuICAgICAgICB2YXIgdHJpbW1lZFNvdXJjZUNvZGUgPSBzb3VyY2VfY29kZS5yZXBsYWNlKC9cXHMvZywnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIHRyaW1tZWRDb2RlVGFyZ2V0ID0gcG9wdGluLnNvdXJjZV9jb2RlX3RhcmdldF9odG1sLnJlcGxhY2UoL1xccy9nLCcnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmKCh0cmltbWVkU291cmNlQ29kZS5pbmNsdWRlcyh0cmltbWVkQ29kZVRhcmdldCkpICYmIChwb3B0aW4uc291cmNlX2NvZGVfdGFyZ2V0X3JvbGUgPT0gXCJzaG93XCIpKSB7XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICgodHJpbW1lZFNvdXJjZUNvZGUuaW5jbHVkZXModHJpbW1lZENvZGVUYXJnZXQpKSAmJiAocG9wdGluLnNvdXJjZV9jb2RlX3RhcmdldF9yb2xlID09IFwiZG9udF9zaG93XCIpKSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoKCF0cmltbWVkU291cmNlQ29kZS5pbmNsdWRlcyh0cmltbWVkQ29kZVRhcmdldCkpICYmIChwb3B0aW4uc291cmNlX2NvZGVfdGFyZ2V0X3JvbGUgPT0gXCJzaG93XCIpKSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZigoIXRyaW1tZWRTb3VyY2VDb2RlLmluY2x1ZGVzKHRyaW1tZWRDb2RlVGFyZ2V0KSkgJiYgKHBvcHRpbi5zb3VyY2VfY29kZV90YXJnZXRfcm9sZSA9PSBcImRvbnRfc2hvd1wiKSkge1xuICAgICAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIGZsYWc7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKCksIHBvcHRpbkZvcm1WYWxpZGF0aW9ucygpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogQ2hhbmdlIGlucHV0IGF0dHJpYnV0ZXMgdG8gc3VwcG9ydCB2YWxpZGF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmcoZSwgbGFuZGluZyA9IGZhbHNlKXtcbiAgICAgICAgdmFyIHBhdGggPSBsYW5kaW5nID8gZ2V0T3JpZ2luTGFuZGluZ1BhZ2UoKSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICBpZihwYXRoKXtcbiAgICAgICAgICAgIHZhciBuPW5ldyBSZWdFeHAoXCJbPyZdXCIrZStcIj0oW14mI10qKVwiLFwiaVwiKS5leGVjKHBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIG4/ZGVjb2RlVVJJKG5bMV0pOm51bGxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvcHRpbkZvcm1WYWxpZGF0aW9ucyhwb3B0aW4pe1xuXHRcdHZhciB0aGlzX3BvcCA9IFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nXCIrcG9wdGluLnBvcHRpbl9pZCtcIiddIFwiO1xuXHRcdHZhciBwb3BfbGFuZyA9IGpRMjI0KHRoaXNfcG9wKS5hdHRyKFwiZGF0YS1wb3AtbGFuZ1wiKTtcbiAgICAgICAgaWYoalEyMjQodGhpc19wb3ApLmxlbmd0aCl7XG5cbiAgICAgICAgICAgIC8vIEdyb3VwaW5nIGNoaWxkIGZpZWxkcyBpZiB0aGV5IGhhdmUgZGlmZmVyZW50IG5hbWUgYXR0cmlidXRlXG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuZmluZChcIi5maWVsZC1yYWRpbywgLmZpZWxkLWNoZWNrYm94XCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50SWQgPSBqUTIyNCh0aGlzKS5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgaWYocGFyZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZChcImlucHV0XCIpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHBhcmVudElkLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXHRcdFx0Ly8gQmxvY2sgbWVyZ2UgdGFncyBvbiBmcmVlIGFjY291bnRcblx0XHRcdGlmKCFpZl9mcmVlbWl1bSkge1xuXHRcdFx0XHR2YXIgZHRfb2JqID0gbmV3IEFycmF5KCk7XG5cdFx0XHRcdHZhciBkdCA9IGpRMjI0KHRoaXNfcG9wKS5maW5kKCcuZHluYW1pYy10ZXh0LXRhZ3MtaW5wdXQnKTtcblxuXHRcdFx0XHRpZihkdC5sZW5ndGgpe1xuXHRcdFx0XHRcdGR0ID0gZHQudGV4dCgpO1xuXHRcdFx0XHRcdGR0X29iaiA9IChkdCAhPSB1bmRlZmluZWQgJiYgZHQgIT0gJycpID8gSlNPTi5wYXJzZShkdCkgOiBuZXcgQXJyYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWZpbmVkX3RhZ19hcnIucHVzaCh7dGFnX2lucHV0Oidjb3VudHJ5JywgcHJlOjEsIHZhbHVlOnBvcF9jb3VudHJ5fSk7XG5cblx0XHRcdFx0ZHRfb2JqID0gZHRfb2JqLmNvbmNhdChkZWZpbmVkX3RhZ19hcnIpO1xuXHRcdFx0XHRqUTIyNChkdF9vYmopLmVhY2goZnVuY3Rpb24oaSl7XG5cdFx0XHRcdFx0dmFyIHRhZ19pbnB1dCA9IGR0X29ialtpXVsndGFnX2lucHV0J107XG5cdFx0XHRcdFx0dmFyIHByZSA9IGR0X29ialtpXVsncHJlJ107XG5cdFx0XHRcdFx0aWYodGFnX2lucHV0ICE9ICcnKXtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZV9pbnB1dDtcblx0XHRcdFx0XHRcdHZhciB0YWdfaW5wdXQgPSB0YWdfaW5wdXQucmVwbGFjZSgvWygpXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0YWdfaW5wdXQuc3Vic3RyaW5nKDAsIDEpID09ICc/Jyl7XG5cdFx0XHRcdFx0XHRcdHZhbHVlX2lucHV0ID0gZ2V0UXVlcnlTdHJpbmcodGFnX2lucHV0LnN1YnN0cmluZygxKSk7XG5cdFx0XHRcdFx0XHRcdHZhbHVlX2lucHV0ID0gdmFsdWVfaW5wdXQgIT0gbnVsbCA/IHZhbHVlX2lucHV0IDogZHRfb2JqW2ldWydjbGFzc19pbnB1dCddO1xuXHRcdFx0XHRcdFx0XHR0YWdfaW5wdXQgPSAnXFxcXCcrdGFnX2lucHV0O1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKHByZSkge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZV9pbnB1dCA9IGR0X29ialtpXVsndmFsdWUnXTtcblx0XHRcdFx0XHRcdFx0aWYocHJlID09IDIpIHtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZV9pbnB1dCA9IHZhbHVlX2lucHV0Wyhwb3BfbGFuZyA/IHBvcF9sYW5nIDogXCJlblwiKV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlX2lucHV0ID0galEyMjQoZHRfb2JqW2ldWydjbGFzc19pbnB1dCddKS50ZXh0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0YWdfaW5wdXQgPSAne3snK3RhZ19pbnB1dCsnfX0nO1xuXHRcdFx0XHRcdFx0alEyMjQodGhpc19wb3ApLmZpbmQoJy5mcm9hbGEtZWRpdG9yLXRleHQsIC5mcm9hbGEtZWRpdG9yLXRpY2tlcicpLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0dmFyIGR0UmVnRXhwID0gbmV3IFJlZ0V4cCh0YWdfaW5wdXQsJ2dtJyk7XG5cdFx0XHRcdFx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoJy5mci1tYXJrZXInKS5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0alEyMjQodGhpcykuaHRtbChqUTIyNCh0aGlzKS5odG1sKCkucmVwbGFjZShkdFJlZ0V4cCwgdmFsdWVfaW5wdXQpKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dmFyIGR0ID0galEyMjQodGhpc19wb3ApLmZpbmQoJy5keW5hbWljLWlucHV0LXRhZ3MtaW5wdXQnKTtcblx0XHRcdFx0aWYoZHQubGVuZ3RoKXtcblx0XHRcdFx0XHR2YXIgZHQgPSBkdC50ZXh0KCk7XG5cdFx0XHRcdFx0ZHRfb2JqID0gKGR0ICE9IHVuZGVmaW5lZCAmJiBkdCAhPSAnJykgPyBKU09OLnBhcnNlKGR0KSA6IG5ldyBBcnJheSgpO1xuXHRcdFx0XHRcdGpRMjI0KGR0X29iaikuZWFjaChmdW5jdGlvbihpKXtcblx0XHRcdFx0XHRcdHZhciBjbGFzc19pbnB1dCA9IGR0X29ialtpXVsnY2xhc3NfaW5wdXQnXTtcblx0XHRcdFx0XHRcdGlmKGNsYXNzX2lucHV0ICE9ICcnKXtcblx0XHRcdFx0XHRcdFx0dmFyIHRhZ19pbnB1dCA9IGR0X29ialtpXVsndGFnX2lucHV0J107XG5cdFx0XHRcdFx0XHRcdHZhciB0YWdfbGFiZWwgPSAoZHRfb2JqW2ldWyd0YWdfbGFiZWwnXSAhPT0gdW5kZWZpbmVkKSA/IGR0X29ialtpXVsndGFnX2xhYmVsJ10gOiAnJyA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZ19sYWJlbF91cHBlciA9ICh0YWdfbGFiZWwhPScnKSA/IHRhZ19sYWJlbC50b1VwcGVyQ2FzZSgpIDonJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnX2lucHV0X2N1c3RvbSA9IFwicG9wdGluRGVzaWduSW5wdXRDdXN0b21GaWVsZC1DVVNUT01fXCIrdGFnX2xhYmVsX3VwcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWdfaW5wdXRfY3VzdG9tX2J5X25hbWUgPSAnaW5wdXRbbmFtZT1cIicrdGFnX2xhYmVsKydcIl0nO1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWVfaW5wdXQgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR2YXIgY2xhc3NfaW5wdXQgPSBjbGFzc19pbnB1dC5yZXBsYWNlKC9bKCldL2csICcnKTtcblx0XHRcdFx0XHRcdFx0aWYoY2xhc3NfaW5wdXQuc3Vic3RyaW5nKDAsIDEpID09ICc/Jyl7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVfaW5wdXQgPSBnZXRRdWVyeVN0cmluZyhjbGFzc19pbnB1dC5zdWJzdHJpbmcoMSkpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYoY2xhc3NfaW5wdXQuc3Vic3RyaW5nKDAsIDEpID09ICcuJyB8fCBjbGFzc19pbnB1dC5zdWJzdHJpbmcoMCwgMSkgPT0gJyMnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVfaW5wdXQgPSBqUTIyNChkdF9vYmpbaV1bJ2NsYXNzX2lucHV0J10pLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWVfaW5wdXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRfaW5wdXQgPSBqUTIyNCh0aGlzX3BvcCkuZmluZCgnaW5wdXQjJyt0YWdfaW5wdXQrJywgdGV4dGFyZWEjJyt0YWdfaW5wdXQrJywgc2VsZWN0IycrdGFnX2lucHV0KycsIGlucHV0IycrdGFnX2lucHV0X2N1c3RvbSsnLCB0ZXh0YXJlYSMnK3RhZ19pbnB1dF9jdXN0b20rJywgc2VsZWN0IycrdGFnX2lucHV0X2N1c3RvbSsnLCBpbnB1dCMnK3RhZ19pbnB1dF9jdXN0b20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9pbnB1dC52YWwodmFsdWVfaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9pbnB1dC5hZGRDbGFzcyhcImhhcy11cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0YWdfbGFiZWwgIT0gJycgJiYgalEyMjQodGhpc19wb3ApLmZpbmQodGFnX2lucHV0X2N1c3RvbV9ieV9uYW1lKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQodGFnX2lucHV0X2N1c3RvbV9ieV9uYW1lKS52YWwodmFsdWVfaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQodGFnX2lucHV0X2N1c3RvbV9ieV9uYW1lKS5hZGRDbGFzcyhcImhhcy11cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJfZmllbGRzID0galEyMjQodGhpc19wb3ApLmZpbmQoJ1tuYW1lPVwiJyt0YWdfaW5wdXQrJ1wiXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdWJfZmllbGRzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdWJfZmllbGRzLmF0dHIoJ3R5cGUnKSA9PSBcInJhZGlvXCIgfHwgc3ViX2ZpZWxkcy5hdHRyKCd0eXBlJykgPT0gXCJjaGVja2JveFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0YWdfaW5wdXQgIT0gJ3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3gnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkX2NoaWxkX2lucHV0ID0galEyMjQodGhpc19wb3ApLmZpbmQoJ1tuYW1lPVwiJyt0YWdfaW5wdXQrJ1wiXVt2YWx1ZT1cIicrdmFsdWVfaW5wdXQrJ1wiXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9jaGlsZF9pbnB1dC5hZGRDbGFzcyhcImhhcy11cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9jaGlsZF9pbnB1dC5sZW5ndGggPyBzZWxlY3RlZF9jaGlsZF9pbnB1dC5nZXQoMCkuY2hlY2tlZCA9IHRydWUgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2lucHV0ID09ICdwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZENoZWNrYm94JyAmJiB2YWx1ZV9pbnB1dCA9PSAndHJ1ZScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRfY2hpbGRfaW5wdXQgPSBqUTIyNCh0aGlzX3BvcCkuZmluZCgnW25hbWU9XCInK3RhZ19pbnB1dCsnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2NoaWxkX2lucHV0LmFkZENsYXNzKFwiaGFzLXVwZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2NoaWxkX2lucHV0Lmxlbmd0aCA/IHNlbGVjdGVkX2NoaWxkX2lucHV0LmdldCgwKS5jaGVja2VkID0gdHJ1ZSA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8galEyMjQodGhpc19wb3ApLmZpbmQoJ2lucHV0IycrdGFnX2lucHV0KycsIHRleHRhcmVhIycrdGFnX2lucHV0KycsIHNlbGVjdCMnK3RhZ19pbnB1dCkudmFsKGNsYXNzX2lucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRqUTIyNCh0aGlzX3BvcCkuZmluZCgnLmZyb2FsYS1pbWFnZS13cmFwcGVyJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHZhciAkc2VsZWN0b3IgPSBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLXNlbGVjdG9yJyk7XG5cdFx0XHRcdFx0aWYoJHNlbGVjdG9yICE9IHVuZGVmaW5lZCAmJiAkc2VsZWN0b3IgIT0gJycpe1xuXHRcdFx0XHRcdFx0alEyMjQodGhpcykuZmluZCgnaW1nJykuYXR0cignc3JjJywgalEyMjQoJHNlbGVjdG9yKS5hdHRyKCdzcmMnKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiA+IGRpdjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuaW5wdXRzLWNvbnRhaW5lciBzZWxlY3Qgb3B0aW9uW3ZhbHVlPSdjaGlsZC1kZWZhdWx0J11cIikudmFsKCcnKTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIgPiBkaXY6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmlucHV0cy1jb250YWluZXIgaW5wdXRbdHlwZT0nbnVtYmVyJ11cIikuYXR0cihcInN0ZXBcIiwgXCIwLjAxXCIpO1xuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiA+IGRpdjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuaW5wdXRzLWNvbnRhaW5lciBpbnB1dFt0eXBlPSdudW1iZXInXVwiKS5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQWxsb3c6IGJhY2tzcGFjZSwgZGVsZXRlLCB0YWIsIGVzY2FwZSwgZW50ZXIsIGRlY2ltYWwgcG9pbnQsIG1pbnVzIHNpZ25cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gOCB8fCBldmVudC5rZXlDb2RlID09PSA5IHx8IGV2ZW50LmtleUNvZGUgPT09IDQ2IHx8IGV2ZW50LmtleUNvZGUgPT09IDExMCB8fCBldmVudC5rZXlDb2RlID09PSAxOTAgfHwgZXZlbnQua2V5Q29kZSA9PT0gMTg5IHx8IGV2ZW50LmtleUNvZGUgPT09IDEwOSB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdzogQ3RybCtBLCBDdHJsK0MsIEN0cmwrViwgQ3RybCtYXG4gICAgICAgICAgICAgICAgICAgIChldmVudC5jdHJsS2V5ID09PSB0cnVlICYmIChldmVudC5rZXlDb2RlID09PSA2NSB8fCBldmVudC5rZXlDb2RlID09PSA2NyB8fCBldmVudC5rZXlDb2RlID09PSA4NiB8fCBldmVudC5rZXlDb2RlID09PSA4OCkpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIEFsbG93OiBob21lLCBlbmQsIGxlZnQsIHJpZ2h0LCB1cCwgZG93blxuICAgICAgICAgICAgICAgICAgICAoZXZlbnQua2V5Q29kZSA+PSAzNSAmJiBldmVudC5rZXlDb2RlIDw9IDQwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgaXQgaGFwcGVuLCBkb24ndCBkbyBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBpdCBpcyBhIG51bWJlciBhbmQgc3RvcCB0aGUga2V5cHJlc3MgaWYgbm90XG4gICAgICAgICAgICAgICAgICAgIGlmICgoZXZlbnQuc2hpZnRLZXkgfHwgKGV2ZW50LmtleUNvZGUgPCA0OCB8fCBldmVudC5rZXlDb2RlID4gNTcpKSAmJiAoZXZlbnQua2V5Q29kZSA8IDk2IHx8IGV2ZW50LmtleUNvZGUgPiAxMDUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiID4gZGl2Om5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5pbnB1dHMtY29udGFpbmVyIGlucHV0W3R5cGU9J251bWJlciddXCIpLm9uKCdibHVyJyxmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0galEyMjQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykudmFsKCcwJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG51bSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihudW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobnVtKSkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS52YWwobnVtLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3VuZGVkID0gTWF0aC5yb3VuZCgobnVtICsgTnVtYmVyLkVQU0lMT04pICogMTAwKSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykudmFsKHJvdW5kZWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiID4gZGl2Om5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIFtuYW1lPSdwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZENoZWNrYm94J11bZGF0YS1hY3Rpb24tdmFsaWRhdGU9J3RydWUnXVwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFNlbGVjdCBhIHJhZGlvIG9yIGNoZWNrYm94IGlucHV0IGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIC8vIGpRMjI0KHRoaXNfcG9wICsgXCIuZHJhZ2dhYmxlLWNvbnRhaW5lciAuaW5wdXRzLWNvbnRhaW5lciAuZm9ybS1pbnB1dC1jbGFzcy5maWVsZC1jaGVja2JveFtkYXRhLWFjdGlvbi1yZXF1aXJlZD0ndHJ1ZSddIC5jaGVja2JveC1jaGlsZC1maWVsZDpmaXJzdC1jaGlsZCBpbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyAgICAgalEyMjQodGhpcykucHJvcCgncmVxdWlyZWQnLCB0cnVlKS5hdHRyKCdyZXF1aXJlZCcsIHRydWUpO1xuICAgICAgICAgICAgLy8gICAgIHRoaXMucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAvLyBqUTIyNCh0aGlzX3BvcCArIFwiLmRyYWdnYWJsZS1jb250YWluZXIgLmlucHV0cy1jb250YWluZXIgLmZvcm0taW5wdXQtY2xhc3MgLnJhZGlvLWNoaWxkLWZpZWxkOm50aC1jaGlsZCgxKSBpbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyAgICAgalEyMjQodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgLy8gICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyB9KTtcblxuICAgICAgICAgICAgLy9BZGQgcGF0dGVybiB0byBuYW1lIGZpZWxkIGlmIGl0cyByZXF1aXJlZFxuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5pbnB1dHMtY29udGFpbmVyIGlucHV0W25hbWU9J3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkTmFtZSddW3JlcXVpcmVkPSdyZXF1aXJlZCddXCIpLmF0dHIoJ3BhdHRlcm4nLCAnXig/PS5bXlxcXFxkXjw+XXsxLDQwfSQpLipcXFxcUysuKiQnKTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIuaW5wdXRzLWNvbnRhaW5lciBpbnB1dFtuYW1lPSdwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZE5hbWUnXVtyZXF1aXJlZD0ncmVxdWlyZWQnXVwiKS5hdHRyKCd0aXRsZScsICdQbGVhc2UgZW50ZXIgYXQgbGVhc3QgMiBvciBtb3JlIGNoYXJhY3RlcnMnKTtcblxuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5pbnB1dHMtY29udGFpbmVyIGlucHV0W25hbWU9J3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWwnXVtkYXRhLWFjdGlvbi12YWxpZGF0ZV1cIikubm90KCdbZGF0YS1hY3Rpb24tdmFsaWRhdGU9XCJuby12YWxpZGF0aW9uXCJdJykuYXR0cigndHlwZScsICdlbWFpbCcpO1xuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5pbnB1dHMtY29udGFpbmVyIGlucHV0W2RhdGEtbmFtZT0ncG9wdGluRGVzaWduV2Vic2l0ZUZpZWxkJ11bZGF0YS1hY3Rpb24tdmFsaWRhdGVdXCIpLmF0dHIoJ3R5cGUnLCAndXJsJyk7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLmlucHV0cy1jb250YWluZXIgaW5wdXRbZGF0YS1pbnB1dC10eXBlPSd1cmwnXVtkYXRhLWFjdGlvbi12YWxpZGF0ZV1cIikuYXR0cigndHlwZScsICd1cmwnKTtcbiAgICAgICAgICAgIHZhciB0ZWxfZmllbGQgPSBqUTIyNCh0aGlzX3BvcCArIFwiLmlucHV0cy1jb250YWluZXIgaW5wdXRbbmFtZT0ncG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRQaG9uZSddW2RhdGEtYWN0aW9uLXZhbGlkYXRlPSd0cnVlJ10sIFwiK3RoaXNfcG9wICsgXCIuZHJhZ2dhYmxlLWNvbnRhaW5lciAuaW5wdXRzLWNvbnRhaW5lciBpbnB1dFtuYW1lPSdwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZFBob25lJ11bZGF0YS1hY3Rpb24tdmFsaWRhdGU9J2Jhc2ljJ11cIik7XG4gICAgICAgICAgICB0ZWxfZmllbGQuYXR0cigncGF0dGVybicsICdeW1xcXFwrXFxcXChcXFxcKVxcXFwtXFxcXGRdKD86W1xcXFwrXFxcXChcXFxcKVxcXFwtXFxcXGRdfCAoPyFbIF0pKXs1LDEzfVtcXFxcK1xcXFwoXFxcXClcXFxcLVxcXFxkXSQnKTsgIC8vIGFjY2VwdHMgZGlnaXRzIGFuZCBjaGFycyArLCgsKSwtIGFuZCBpbm5lciBzcGFjZSBtaW5sZW5ndGggNywgbWF4bGVuZ3RoIDE1XG4gICAgICAgICAgICAvL3RlbF9maWVsZC5hdHRyKCdtYXhsZW5ndGgnLCAnMTUnKTtcbiAgICAgICAgICAgIC8vdGVsX2ZpZWxkLmF0dHIoJ21pbmxlbmd0aCcsICc3Jyk7XG4gICAgICAgICAgICB0ZWxfZmllbGQuYXR0cigndGl0bGUnLCBpZlVzZXJsYW5nSXNIZSgpID8gXCLXmdepINec15TXlteZ158g15HXmdefIDcg15wtMTUg16HXpNeo15XXqiAs15XXnNeU15nXnteg16Ig157XqdeZ157XldepINeR15DXldeq15nXldeqINeQ15Ug16HXmdee16DXmdedXCIgIDogXCJQbGVhc2UgZW50ZXIgNyB0byAxNSBkaWdpdHMgYW5kIGF2b2lkIHVzaW5nIGxldHRlcnMgb3Igc3ltYm9sc1wiKTtcbiAgICAgICAgICAgIHZhciBjaGVja2JveF9pbnB1dHMgPSBcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAgPiBkaXY6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmlucHV0cy1jb250YWluZXIgLmZvcm0taW5wdXQtY2xhc3MuZmllbGQtY2hlY2tib3hbZGF0YS1hY3Rpb24tcmVxdWlyZWQ9J3RydWUnXSBpbnB1dFwiO1xuICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCBjaGVja2JveF9pbnB1dHMsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkX3dyYXBwZXIgPSBqUTIyNCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiggZmllbGRfd3JhcHBlci5maW5kKCdpbnB1dCcpLmlzKCc6Y2hlY2tlZCcpICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmaWVsZF93cmFwcGVyLmZpbmQoJ2lucHV0JykucmVtb3ZlQXR0cigncmVxdWlyZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRfd3JhcHBlci5maW5kKCdpbnB1dCcpLnByb3AoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkX3dyYXBwZXIuZmluZChcIi5jaGVja2JveC1jaGlsZC1maWVsZDpmaXJzdC1jaGlsZCBpbnB1dFwiKS5hdHRyKCdyZXF1aXJlZCcsIHRydWUpLmF0dHIoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiID4gZGl2Om5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5mYWNlYm9vay1tZXNzYW5nZXItY29udmVyc2lvbi13cmFwXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdmFyIGRhdGVfZmllbGQgPSBqUTIyNCh0aGlzX3BvcCArIFwiLmlucHV0cy1jb250YWluZXJcIikuZmluZChcImlucHV0W2RhdGEtbmFtZT0ncG9wdGluRGVzaWduRGF0ZUZpZWxkJ10sIGlucHV0W2RhdGEtaW5wdXQtdHlwZT0nZGF0ZSddXCIpO1xuXG4gICAgICAgICAgICBpZiAoaXNJcGhvbmVQb3B0aW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZV9maWVsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwaWNrYWRheV9saW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgICAgICAgICAgICAgICBwaWNrYWRheV9saW5rLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgcGlja2FkYXlfbGluay5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgcGlja2FkYXlfbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9waWthZGF5L2Nzcy9waWthZGF5LmNzcycpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHBpY2thZGF5X2xpbmspO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBtPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7IFxuICAgICAgICAgICAgICAgICAgICBtLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgICAgICAgICAgICAgICAgbS5zcmM9XCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tb21lbnQuanMvMi4yNS4wL21vbWVudC5taW4uanNcIjsgXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICBwLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAub25sb2FkID0gZnVuY3Rpb24oKXsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRlX2ZpZWxkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQaWthZGF5KHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZGF0ZV9maWVsZFtpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXJSYW5nZTogODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRTdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07IFxuICAgICAgICAgICAgICAgICAgICAgICAgcC5zcmM9XCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3Bpa2FkYXkvcGlrYWRheS5qc1wiOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBpa2Etc2luZ2xlXCIpLmNzcyhcInotaW5kZXhcIiwgOTk5OTk5OTk5OSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlX2ZpZWxkID0galEyMjQodGhpc19wb3AgKyBcIi5pbnB1dHMtY29udGFpbmVyXCIpLmZpbmQoXCJpbnB1dFtkYXRhLW5hbWU9J3BvcHRpbkRlc2lnbkRhdGVGaWVsZCddLCBpbnB1dFtkYXRhLWlucHV0LXR5cGU9J2RhdGUnXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVwaWNrZXJIZWlnaHQgPSAgZGF0ZV9maWVsZC5jc3MoXCJoZWlnaHRcIik7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVfZmllbGQuY3NzKFwibGluZS1oZWlnaHRcIiwgZGF0ZXBpY2tlckhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVfZmllbGQub24oJ2ZvY3VzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmF0dHIoJ3R5cGUnKSA9PSBcInRleHRcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuYXR0cigndHlwZScsICdkYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZm9jdXMoKS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZpcmVmb3hQb3B0aW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfZmllbGQub24oJ2JsdXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmF0dHIoJ3R5cGUnLCAoalEyMjQodGhpcykudmFsKCkgPT0gXCJcIiA/ICd0ZXh0JyA6ICdkYXRlJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpZWxkIGlzIHNlYXJjaGFibGUgb3IgbXVsdGkgc2VsZWN0XG4gICAgICAgICAgICBqUTIyNC5lYWNoKFtcImN1c3RvbVwiLCBcIm11bHRpcGxlXCIsIFwiZGVmYXVsdFwiLCBcInNpbmdsZVwiXSwgZnVuY3Rpb24oc2VsZWN0X2lkeCwgc2VsZWN0X3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNfY3VzdG9tID0gc2VsZWN0X3R5cGUgPT0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgICAgICB2YXIgaXNfc2luZ2xlID0gc2VsZWN0X3R5cGUgPT0gXCJzaW5nbGVcIjtcbiAgICAgICAgICAgICAgICB2YXIgc2VhcmNoX3Rlcm0gPSBpc19jdXN0b20gPyBcImFjdGlvbi1zZWFyY2hcIiA6IFwibXVsdGlwbGVcIjtcbiAgICAgICAgICAgICAgICB2YXIgc2VhcmNoX3F1ZXJ5ID0gaXNfc2luZ2xlID8gXCJcIiA6IFwiW2RhdGEtXCIrc2VhcmNoX3Rlcm0rXCI9J3RydWUnXVwiO1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RzID0galEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyIC5pbnB1dHMtY29udGFpbmVyIHNlbGVjdFwiK3NlYXJjaF9xdWVyeSk7XG4gICAgICAgICAgICAgICAgalEyMjQoc2VsZWN0cykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3QgPSBqUTIyNCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzX211bHRpcGUgPSAgc2VsZWN0LmRhdGEoJ211bHRpcGxlJykgLy8gQ2hlY2sgaWYgZHJvcGRvd24gaXMgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyIC5pbnB1dHMtY29udGFpbmVyXCIpLmNzcyhcInotaW5kZXhcIiwgXCI5OTk5OTk5XCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0X2lkID0gc2VsZWN0LmdldCgwKS5pZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGRyb3Bkb3duIGhhc24ndCBiZWVuIGJ1aWx0IGFscmVhZHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIud3JhcHBlci1cIiArIHNlbGVjdF9pZCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBjdXN0b20gZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RfcGFyZW50ID0gc2VsZWN0LnBhcmVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaF90ZXh0ID0gdXNlcl9sYW5nID09IFwiaGVcIiA/IFwi15fXmdek15XXqVwiIDogXCJTZWFyY2guLi5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hfbm9fcmVzdWx0X3RleHQgPSB1c2VyX2xhbmcgPT0gXCJoZVwiID8gXCLXnNeQINeg157XpteQ15Ug16rXldem15DXldeqXCIgOiBcIk5vIHJlc3VsdHMgZm91bmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzX2N1c3RvbSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNfbXVsdGlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcGFyZW50LnByZXBlbmQoJzxkaXYgY2xhc3M9XCJwb3B0aW4tY3VzdG9tLXNlbGVjdCB3cmFwcGVyLScgKyBzZWxlY3RfaWQgKyAnXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1zZWxlY3QtdHlwZT1cIicgKyBzZWxlY3RfdHlwZSArICdcIiBwbGFjZWhvbGRlcj1cIicgKyBzZWFyY2hfdGV4dCArICdcIiBjbGFzcz1cInBvcHRpbi1tdWx0aS1zZWxlY3QtaW5wdXQgcG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXRcIiBkYXRhLWdyYW1tX2VkaXRvcj1cImZhbHNlXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgZGF0YS1zZWxlY3Q9XCInICsgc2VsZWN0X2lkICsgJ1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPjxkaXYgY2xhc3M9XCJwb3B0aW4tb3B0LWdyb3VwLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwicG9wdGluLW9wdC1ncm91cFwiPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9wYXJlbnQucHJlcGVuZCgnPGRpdiBjbGFzcz1cInBvcHRpbi1jdXN0b20tc2VsZWN0IHdyYXBwZXItJyArIHNlbGVjdF9pZCArICdcIj48aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLXNlbGVjdC10eXBlPVwiJyArIHNlbGVjdF90eXBlICsgJ1wiIHBsYWNlaG9sZGVyPVwiJyArIHNlYXJjaF90ZXh0ICsgJ1wiIGNsYXNzPVwicG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXRcIiBkYXRhLWdyYW1tX2VkaXRvcj1cImZhbHNlXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgZGF0YS1zZWxlY3Q9XCInICsgc2VsZWN0X2lkICsgJ1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPjxkaXYgY2xhc3M9XCJwb3B0aW4tb3B0LWdyb3VwLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwicG9wdGluLW9wdC1ncm91cFwiPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihpc19zaW5nbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9wYXJlbnQucHJlcGVuZCgnPGRpdiBjbGFzcz1cInBvcHRpbi1zaW5nbGUtc2VsZWN0IHdyYXBwZXItJyArIHNlbGVjdF9pZCArICdcIj48aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLXNlbGVjdC10eXBlPVwiJyArIHNlbGVjdF90eXBlICsgJ1wiIHBsYWNlaG9sZGVyPVwiJyArIChzZWxlY3QuYXR0cihcImRhdGEtcGxhY2Vob2xkZXJcIikgfHwgJycpICsgJ1wiIGNsYXNzPVwicG9wdGluLXNpbmdsZS1zZWxlY3QtaW5wdXRcIiBkYXRhLWdyYW1tX2VkaXRvcj1cImZhbHNlXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgZGF0YS1zZWxlY3Q9XCInICsgc2VsZWN0X2lkICsgJ1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPjxkaXYgY2xhc3M9XCJwb3B0aW4tb3B0LWdyb3VwLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwicG9wdGluLW9wdC1ncm91cFwiPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcGFyZW50LnByZXBlbmQoJzxkaXYgY2xhc3M9XCJwb3B0aW4tbXVsdGktc2VsZWN0IHdyYXBwZXItJyArIHNlbGVjdF9pZCArICdcIj48aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLXNlbGVjdC10eXBlPVwiJyArIHNlbGVjdF90eXBlICsgJ1wiIHBsYWNlaG9sZGVyPVwiJyArIChzZWxlY3QuYXR0cihcImRhdGEtcGxhY2Vob2xkZXJcIikgfHwgJycpICsgJ1wiIGNsYXNzPVwicG9wdGluLW11bHRpLXNlbGVjdC1pbnB1dFwiIGRhdGEtZ3JhbW1fZWRpdG9yPVwiZmFsc2VcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBkYXRhLXNlbGVjdD1cIicgKyBzZWxlY3RfaWQgKyAnXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+PGRpdiBjbGFzcz1cInBvcHRpbi1vcHQtZ3JvdXAtd3JhcHBlclwiPjxkaXYgY2xhc3M9XCJwb3B0aW4tb3B0LWdyb3VwXCI+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIud3JhcHBlci1cIiArIHNlbGVjdF9pZClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdGluX29wdF9ncm91cCA9IGpRMjI0KHdyYXBwZXIpLmZpbmQoXCIucG9wdGluLW9wdC1ncm91cFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdC5maW5kKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09IFwiY2hpbGQtZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzX2N1c3RvbSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc19tdWx0aXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluX29wdF9ncm91cC5hcHBlbmQoJzxsYWJlbCBjbGFzcz1cInBvcHRpbi1jdXN0b20tb3B0aW9uXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiJyArIHRoaXMudmFsdWUgKyAnXCIgaWQ9XCInICsgdGhpcy5pZCArICdcIj48c3Bhbj4nICsgdGhpcy5pbm5lclRleHQgKyAnPC9zcGFuPjwvbGFiZWw+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9vcHRfZ3JvdXAuYXBwZW5kKCc8c3BhbiBjbGFzcz1cInBvcHRpbi1jdXN0b20tb3B0aW9uXCIgZGF0YS12YWx1ZT1cIicgKyB0aGlzLnZhbHVlICsgJ1wiPicgKyB0aGlzLmlubmVyVGV4dCArIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGlzX3NpbmdsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fb3B0X2dyb3VwLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJwb3B0aW4tY3VzdG9tLW9wdGlvblwiIGRhdGEtdmFsdWU9XCInICsgdGhpcy52YWx1ZSArICdcIj4nICsgdGhpcy5pbm5lclRleHQgKyBcIjwvc3Bhbj5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fb3B0X2dyb3VwLmFwcGVuZCgnPGxhYmVsIGNsYXNzPVwicG9wdGluLWN1c3RvbS1vcHRpb25cIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCInICsgdGhpcy52YWx1ZSArICdcIiBpZD1cIicgKyB0aGlzLmlkICsgJ1wiPjxzcGFuPicgKyB0aGlzLmlubmVyVGV4dCArICc8L3NwYW4+PC9sYWJlbD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNfY3VzdG9tKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fb3B0X2dyb3VwLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJwb3B0aW4tY3VzdG9tLW9wdGlvbiBuby1yZXN1bHRcIiBkYXRhLXZhbHVlPVwiXCI+JyArIHNlYXJjaF9ub19yZXN1bHRfdGV4dCArIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3BhcmVudC5maW5kKFwiLnBvcHRpbi1jdXN0b20tc2VsZWN0LCAucG9wdGluLXNpbmdsZS1zZWxlY3QsIC5wb3B0aW4tbXVsdGktc2VsZWN0LCAucG9wdGluLW9wdC1ncm91cC13cmFwcGVyXCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IHNlbGVjdF9wYXJlbnQuY3NzKFwicGFkZGluZy1yaWdodFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZGRpbmctbGVmdFwiOiBzZWxlY3RfcGFyZW50LmNzcyhcInBhZGRpbmctbGVmdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBtaW5pbXVtIHBhZGRpbmcgb2YgdGhlIHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoc2VsZWN0LmNzcygncGFkZGluZy1sZWZ0JyksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUludChzZWxlY3QuY3NzKCdwYWRkaW5nLXJpZ2h0JyksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaW5QYWRkaW5nID0gTWF0aC5taW4ocGFkZGluZ0xlZnQsIHBhZGRpbmdSaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh3cmFwcGVyKS5maW5kKFwiaW5wdXRcIikuYXR0cihcInN0eWxlXCIsIHNlbGVjdC5hdHRyKFwic3R5bGVcIikpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IG1pblBhZGRpbmcrXCJweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFkZGluZy1sZWZ0XCI6IG1pblBhZGRpbmcrXCJweFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RXhwbGljaXRDU1NQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuY3NzKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gZ2V0RGVmYXVsdENTU1Byb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlICE9PSBkZWZhdWx0VmFsdWUpID8gdmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERlZmF1bHRDU1NQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wRWxlbWVudCA9IGpRMjI0KCc8ZGl2IHN0eWxlPVwib3BhY2l0eTowO3dpZHRoOjBweDtoZWlnaHQ6MHB4O292ZXJmbG93OmhpZGRlbjtcIj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0ZW1wRWxlbWVudC5jc3MocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9vcHRfZ3JvdXAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvbnQtZmFtaWx5XCI6IGdldEV4cGxpY2l0Q1NTUHJvcGVydHkoc2VsZWN0LCBcImZvbnQtZmFtaWx5XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9udC1zaXplXCI6IGdldEV4cGxpY2l0Q1NTUHJvcGVydHkoc2VsZWN0LCBcImZvbnQtc2l6ZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IGdldEV4cGxpY2l0Q1NTUHJvcGVydHkoc2VsZWN0LCAnY29sb3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmRcIjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpcmVjdGlvblwiOiBnZXRFeHBsaWNpdENTU1Byb3BlcnR5KHNlbGVjdCwgJ2RpcmVjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1hbGlnblwiOiBnZXRFeHBsaWNpdENTU1Byb3BlcnR5KHNlbGVjdCwgJ3RleHQtYWxpZ24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNCb3JkZXJSYWRpdXMgPSBzZWxlY3QuY3NzKFwiYm9yZGVyLXJhZGl1c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNCb3JkZXJSYWRpdXMgJiYgcGFyc2VJbnQoaGFzQm9yZGVyUmFkaXVzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fb3B0X2dyb3VwLmNzcyhcImJvcmRlci1yYWRpdXNcIiwgXCIxMHB4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gaGFuZGxlIGRyb3Bkb3duIGZ1bmN0aW9uYWxpdHkgaW5jbHVkaW5nIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyb3Bkb3duRnVuY3Rpb25hbGl0eSgpIHtcbiAgICAgICAgICAgICAgICAvLyBLZXlib2FyZCBuYXZpZ2F0aW9uXG4gICAgICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLm9mZigna2V5ZG93bi5kcm9wZG93bk5hdicpLm9uKCdrZXlkb3duLmRyb3Bkb3duTmF2JywgJy5wb3B0aW4tY3VzdG9tLXNlbGVjdC1pbnB1dCwgLnBvcHRpbi1zaW5nbGUtc2VsZWN0LWlucHV0LCAucG9wdGluLW11bHRpLXNlbGVjdC1pbnB1dCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFbJ0Fycm93RG93bicsICdBcnJvd1VwJywgJ0VudGVyJ10uaW5jbHVkZXMoZS5rZXkpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RfcGFyZW50ID0galEyMjQodGhpcykucGFyZW50cygnLmZvcm0taW5wdXQtY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdEdyb3VwID0gc2VsZWN0X3BhcmVudC5maW5kKCcucG9wdGluLW9wdC1ncm91cCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZU9wdGlvbnMgPSBvcHRHcm91cC5maW5kKCcucG9wdGluLWN1c3RvbS1vcHRpb246dmlzaWJsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c2VkSW5kZXggPSB2aXNpYmxlT3B0aW9ucy5pbmRleCh2aXNpYmxlT3B0aW9ucy5maWx0ZXIoJy5mb2N1c2VkJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicgfHwgZS5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU9wdGlvbnMucmVtb3ZlQ2xhc3MoJ2ZvY3VzZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzZWRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkSW5kZXggPSBlLmtleSA9PT0gJ0Fycm93RG93bicgPyAwIDogdmlzaWJsZU9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZEluZGV4ID0gZS5rZXkgPT09ICdBcnJvd0Rvd24nIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChmb2N1c2VkSW5kZXggKyAxKSAlIHZpc2libGVPcHRpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChmb2N1c2VkSW5kZXggLSAxICsgdmlzaWJsZU9wdGlvbnMubGVuZ3RoKSAlIHZpc2libGVPcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU9wdGlvbnMuZXEoZm9jdXNlZEluZGV4KS5hZGRDbGFzcygnZm9jdXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNlZE9wdGlvbiA9IHZpc2libGVPcHRpb25zLmZpbHRlcignLmZvY3VzZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c2VkT3B0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RfcGFyZW50LmZpbmQoJy5wb3B0aW4tbXVsdGktc2VsZWN0JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9IGZvY3VzZWRPcHRpb24uZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCAhY2hlY2tib3gucHJvcCgnY2hlY2tlZCcpKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkT3B0aW9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBmb2N1c2VkIG9wdGlvbiBpcyB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c2VkT3B0aW9uID0gdmlzaWJsZU9wdGlvbnMuZmlsdGVyKCcuZm9jdXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9jdXNlZE9wdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdEdyb3VwLnNjcm9sbFRvcChvcHRHcm91cC5zY3JvbGxUb3AoKSArIGZvY3VzZWRPcHRpb24ucG9zaXRpb24oKS50b3AgLSBvcHRHcm91cC5oZWlnaHQoKS8yICsgZm9jdXNlZE9wdGlvbi5oZWlnaHQoKS8yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVvcGVuIGRyb3Bkb3duIG9uIGlucHV0IGNsaWNrXG4gICAgICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLm9mZignY2xpY2sucmVvcGVuRHJvcGRvd24nKS5vbignY2xpY2sucmVvcGVuRHJvcGRvd24nLCAnLnBvcHRpbi1jdXN0b20tc2VsZWN0LWlucHV0LCAucG9wdGluLXNpbmdsZS1zZWxlY3QtaW5wdXQsIC5wb3B0aW4tbXVsdGktc2VsZWN0LWlucHV0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RfcGFyZW50ID0galEyMjQodGhpcykucGFyZW50cygnLmZvcm0taW5wdXQtY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXNlbGVjdF9wYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCcuZm9ybS1pbnB1dC1jbGFzcy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQodGhpcykuaGFzQ2xhc3MoJ3BvcHRpbi1jdXN0b20tc2VsZWN0LWlucHV0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9wYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcGFyZW50LnRvZ2dsZUNsYXNzKCdvcGVuZWQnLCAhc2VsZWN0X3BhcmVudC5maXJzdCgpLmhhc0NsYXNzKFwib3BlbmVkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKCFqUTIyNChzZWxlY3RfcGFyZW50KS5maW5kKCcucG9wdGluLWN1c3RvbS1vcHRpb24nKS5pcygnOnZpc2libGUnKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChzZWxlY3RfcGFyZW50KS5maW5kKCcubm8tcmVzdWx0JykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChzZWxlY3RfcGFyZW50KS5maW5kKCcubm8tcmVzdWx0JykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5pbnB1dHMtY29udGFpbmVyXCIpLmFkZENsYXNzKFwib3BlbmVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIENsb3NlIGRyb3Bkb3duIHdoZW4gY2xpY2tpbmcgb3V0c2lkZVxuICAgICAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vZmYoJ2NsaWNrLmNsb3NlRHJvcGRvd24nKS5vbignY2xpY2suY2xvc2VEcm9wZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqUTIyNChlLnRhcmdldCkuY2xvc2VzdCgnLmZvcm0taW5wdXQtY2xhc3MnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLmZvcm0taW5wdXQtY2xhc3MsIC5pbnB1dHMtY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKFwib3BlbmVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXQsIC5wb3B0aW4tbXVsdGktc2VsZWN0LWlucHV0XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBzZXQgdXAgdGhlIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5yZWFkeShoYW5kbGVEcm9wZG93bkZ1bmN0aW9uYWxpdHkpO1xuXG4gICAgICAgICAgICAvLyBTZWFyY2ggZm9yIG9wdGlvbnMgb24ga2V5dXBcbiAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbigna2V5dXAnLCAnLnBvcHRpbi1jdXN0b20tc2VsZWN0LWlucHV0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdF9pZCA9IGpRMjI0KGUudGFyZ2V0KS5hdHRyKCdkYXRhLXNlbGVjdCcpO1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndyYXBwZXItJytzZWxlY3RfaWQpWzBdO1xuICAgICAgICAgICAgICAgIHZhciBvcHRzID0gd3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHRpbi1jdXN0b20tb3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgIHZhciBvcHRMZW4gPSBvcHRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gZS50YXJnZXQudmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBqUTIyNCh3cmFwcGVyKS5maW5kKCcubm8tcmVzdWx0LCAucG9wdGluLWN1c3RvbS1vcHRpb24nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHh0VmFsdWUgPSBvcHRzW2ldLnRleHRDb250ZW50IHx8IG9wdHNbaV0uaW5uZXJUZXh0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0Q2xhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNCh3cmFwcGVyKS5hdHRyKCdkYXRhLWN1cnJlbnQtcGFyZW50JykgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRDbGFzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9wdHNbaV0uZ2V0QXR0cmlidXRlKCdjbGFzcycpICE9IHVuZGVmaW5lZCAmJiBvcHRzW2ldLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5pbmRleE9mKCdjdXN0b20tb3B0LScpID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRDbGFzcyA9IG9wdHNbaV0uZ2V0QXR0cmlidXRlKCdjbGFzcycpLnNwbGl0KFwiY3VzdG9tLW9wdC1cIilbMV0uc3BsaXQoXCIgXCIpWzBdID09IGpRMjI0KHdyYXBwZXIpLmF0dHIoJ2RhdGEtY3VycmVudC1wYXJlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1jYXRjaChlcnIpe3Nob3dMb2coZXJyKTt9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRDbGFzcyAmJiB0eHRWYWx1ZS50b1VwcGVyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzW2ldLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0c1tpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIWpRMjI0KHdyYXBwZXIpLmZpbmQoJy5wb3B0aW4tY3VzdG9tLW9wdGlvbicpLmlzKCc6dmlzaWJsZScpKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQod3JhcHBlcikuZmluZCgnLm5vLXJlc3VsdCcpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBIaWRlIGRyb3Bkb3duIG9wdGlvbnNcbiAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfZWwgPSBqUTIyNChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdF9wYXJlbnQgPSB0aGlzX2VsLnBhcmVudHMoXCIuZm9ybS1pbnB1dC1jbGFzc1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0X3BhcmVudC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5mb3JtLWlucHV0LWNsYXNzLCAuaW5wdXRzLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcIm9wZW5lZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXQsIC5wb3B0aW4tbXVsdGktc2VsZWN0LWlucHV0XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoJy5wb3B0aW4tbXVsdGktc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSwgLnBvcHRpbi1jdXN0b20tc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHNlbGVjdF9wYXJlbnQuZmluZChcIi5wb3B0aW4tY3VzdG9tLXNlbGVjdFwiKS5sZW5ndGggfHwgc2VsZWN0X3BhcmVudC5maW5kKFwiLnBvcHRpbi1zaW5nbGUtc2VsZWN0XCIpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgJiYgdGhpc19lbC5oYXNDbGFzcyhcInBvcHRpbi1jdXN0b20tb3B0aW9uXCIpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdF9wYXJlbnQuZmluZChcInNlbGVjdFwiKS52YWwodGhpc19lbC5hdHRyKFwiZGF0YS12YWx1ZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXN0b20gc2VsZWN0IGlzIGFsc28gYSBtdWx0aSBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgaWYoIXNlbGVjdF9wYXJlbnQuZmluZChcIi5wb3B0aW4tbXVsdGktc2VsZWN0LWlucHV0XCIpLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5mb3JtLWlucHV0LWNsYXNzLCAuaW5wdXRzLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcIm9wZW5lZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1jdXN0b20tc2VsZWN0LWlucHV0LCAucG9wdGluLW11bHRpLXNlbGVjdC1pbnB1dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdF9wYXJlbnQuZmluZChcIi5wb3B0aW4tbXVsdGktc2VsZWN0XCIpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcGFyZW50LmZpbmQoXCJzZWxlY3RcIikudmFsKHRoaXNfZWwuYXR0cihcImRhdGEtdmFsdWVcIikpO1xuICAgICAgICAgICAgICAgICAgICAvLyBqUTIyNChcIi5mb3JtLWlucHV0LWNsYXNzLCAuaW5wdXRzLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcIm9wZW5lZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXQsIC5wb3B0aW4tbXVsdGktc2VsZWN0LWlucHV0XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYoc2VsZWN0X3BhcmVudC5sZW5ndGggJiYgIXNlbGVjdF9wYXJlbnQuaGFzQ2xhc3MoXCJvcGVuZWRcIikpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgalEyMjQoXCIuZm9ybS1pbnB1dC1jbGFzcywgLmlucHV0cy1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoXCJvcGVuZWRcIik7XG4gICAgICAgICAgICAgICAgLy8gICAgIGpRMjI0KFwiLnBvcHRpbi1jdXN0b20tc2VsZWN0LWlucHV0LCAucG9wdGluLW11bHRpLXNlbGVjdC1pbnB1dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgLy8gfVxuXHRcdFx0XHQvLyBqUTIyNCgnLnBvcHRpbi1pbnB1dC1tc2cnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBPcGVuIGRyb3Bkb3duIG9wdGlvbnNcbiAgICAgICAgICAgIHZhciBjdXN0b21TZWxlY3RvcnMgPSBcIi5wb3B0aW4tc2luZ2xlLXNlbGVjdC1pbnB1dCwgLnBvcHRpbi1tdWx0aS1zZWxlY3QtaW5wdXRcIjtcbiAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbihcImZvY3VzXCIsICcucG9wdGluLWN1c3RvbS1zZWxlY3QtaW5wdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdF9wYXJlbnQgPSBqUTIyNCh0aGlzKS5wYXJlbnRzKFwiLmZvcm0taW5wdXQtY2xhc3NcIik7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIuZm9ybS1pbnB1dC1jbGFzc1wiKS5ub3Qoc2VsZWN0X3BhcmVudCkucmVtb3ZlQ2xhc3MoXCJvcGVuZWRcIik7XG4gICAgICAgICAgICAgICAgc2VsZWN0X3BhcmVudC50b2dnbGVDbGFzcyhcIm9wZW5lZFwiLCAhc2VsZWN0X3BhcmVudC5maXJzdCgpLmhhc0NsYXNzKFwib3BlbmVkXCIpKTtcbiAgICAgICAgICAgICAgICBqUTIyNChcIi5pbnB1dHMtY29udGFpbmVyXCIpLmFkZENsYXNzKFwib3BlbmVkXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGpRMjI0KGRvY3VtZW50KS5vbihcImNsaWNrXCIsIGN1c3RvbVNlbGVjdG9ycywgZnVuY3Rpb24gKCkgeyBcbiAgICAgICAgICAgIC8vICAgICBqUTIyNChjdXN0b21TZWxlY3RvcnMpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIC8vICAgICB2YXIgc2VsZWN0X3BhcmVudCA9IGpRMjI0KHRoaXMpLnBhcmVudHMoXCIuZm9ybS1pbnB1dC1jbGFzc1wiKTtcbiAgICAgICAgICAgIC8vICAgICBqUTIyNChcIi5mb3JtLWlucHV0LWNsYXNzXCIpLm5vdChzZWxlY3RfcGFyZW50KS5yZW1vdmVDbGFzcyhcIm9wZW5lZFwiKTtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcInRoaXMgb25lIGlzIGdldHRpbmcgY2FsbGVkXCIsIHNlbGVjdF9wYXJlbnQuaGFzQ2xhc3MoJ29wZScpKVxuICAgICAgICAgICAgLy8gICAgIHNlbGVjdF9wYXJlbnQudG9nZ2xlQ2xhc3MoXCJvcGVuZWRcIiwgIXNlbGVjdF9wYXJlbnQuZmlyc3QoKS5oYXNDbGFzcyhcIm9wZW5lZFwiKSk7XG4gICAgICAgICAgICAvLyAgICAgalEyMjQoXCIuaW5wdXRzLWNvbnRhaW5lclwiKS5hZGRDbGFzcyhcIm9wZW5lZFwiKTtcbiAgICAgICAgICAgIC8vICAgICBpZihbXCJkZWZhdWx0XCIsIFwibXVsdGlwbGVcIl0uaW5jbHVkZXMoalEyMjQodGhpcykuYXR0cihcImRhdGEtc2VsZWN0LXR5cGVcIikpKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgalEyMjQodGhpcykuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAvLyBNdWx0aSBzZWxlY3QgZHJvcGRvd25cbiAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbignY2hhbmdlJywgJy5wb3B0aW4tbXVsdGktc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSwgLnBvcHRpbi1jdXN0b20tc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZElucHV0UGFyZW50ID0galEyMjQoZS50YXJnZXQpLnBhcmVudHMoXCIuZmllbGQtbXVsdGktc2VsZWN0XCIpO1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZElucHV0ID0gc2VsZWN0ZWRJbnB1dFBhcmVudC5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbnB1dCA9IHNlbGVjdGVkSW5wdXQuaW5jbHVkZXMoXCJwb3B0aW5EZXNpZ25JbnB1dEN1c3RvbUZpZWxkLVwiKSA/IHNlbGVjdGVkSW5wdXQuc3BsaXQoXCJwb3B0aW5EZXNpZ25JbnB1dEN1c3RvbUZpZWxkLVwiKVsxXSA6IHNlbGVjdGVkSW5wdXQ7XG4gICAgICAgICAgICAgICAgcG9wdGluTXVsdGlTZWxlY3RUZXh0c1tzZWxlY3RlZElucHV0XSA9IFtdO1xuICAgICAgICAgICAgICAgIHBvcHRpbk11bHRpU2VsZWN0VmFsdWVzW3NlbGVjdGVkSW5wdXRdID0gW107XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhzZWxlY3RlZElucHV0LCBlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbnB1dFBhcmVudC5maW5kKCcucG9wdGluLW11bHRpLXNlbGVjdCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZCwgLnBvcHRpbi1jdXN0b20tc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluTXVsdGlTZWxlY3RUZXh0c1tzZWxlY3RlZElucHV0XS5wdXNoKGpRMjI0KHRoaXMpLnBhcmVudCgpLnRleHQoKS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5NdWx0aVNlbGVjdFZhbHVlc1tzZWxlY3RlZElucHV0XS5wdXNoKGpRMjI0KHRoaXMpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHBvcHRpbk11bHRpU2VsZWN0VGV4dHMpO1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2cocG9wdGluTXVsdGlTZWxlY3RWYWx1ZXMpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5wdXRQYXJlbnQuZmluZCgnLnBvcHRpbi1tdWx0aS1zZWxlY3QtaW5wdXQnKS52YWwocG9wdGluTXVsdGlTZWxlY3RUZXh0c1tzZWxlY3RlZElucHV0XS5qb2luKCcsICcpKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZElucHV0UGFyZW50LmZpbmQoJy5wb3B0aW4tZGVzaWduLWZpZWxkcy1mb3JtJykudmFsKHBvcHRpbk11bHRpU2VsZWN0VmFsdWVzW3NlbGVjdGVkSW5wdXRdWzBdKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZElucHV0UGFyZW50LmZpbmQoJy5wb3B0aW4tY3VzdG9tLXNlbGVjdC1pbnB1dCcpLnZhbChwb3B0aW5NdWx0aVNlbGVjdFRleHRzW3NlbGVjdGVkSW5wdXRdLmpvaW4oJywgJykpO1xuXG4gICAgICAgICAgICAgICAgaWYocG9wdGluTXVsdGlTZWxlY3RUZXh0c1tzZWxlY3RlZElucHV0XS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZElucHV0UGFyZW50LmFkZENsYXNzKFwiaGFzLXZhbHVlc1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZElucHV0UGFyZW50LnJlbW92ZUNsYXNzKFwiaGFzLXZhbHVlc1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gT3BlbiBkcm9wZG93biBvcHRpb25zXG4gICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2ZvY3VzJywgJy5wb3B0aW4tY3VzdG9tLXNlbGVjdC1pbnB1dCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdF9wYXJlbnQgPSBqUTIyNCh0aGlzKS5wYXJlbnRzKCcuZm9ybS1pbnB1dC1jbGFzcycpO1xuICAgICAgICAgICAgICAgIHNlbGVjdF9wYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuXHRcdFx0XHRpZighalEyMjQoc2VsZWN0X3BhcmVudCkuZmluZCgnLnBvcHRpbi1jdXN0b20tb3B0aW9uJykuaXMoJzp2aXNpYmxlJykpe1xuXHRcdFx0XHRcdGpRMjI0KHNlbGVjdF9wYXJlbnQpLmZpbmQoJy5uby1yZXN1bHQnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRqUTIyNChzZWxlY3RfcGFyZW50KS5maW5kKCcubm8tcmVzdWx0JykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHRcdFx0fVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIuaW5wdXRzLWNvbnRhaW5lclwiKS5maW5kKFwiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3RcIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmF0dHIoJ3JlcXVpcmVkJykpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5hdHRyKCdhcmlhLXJlcXVpcmVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5pbnB1dHMtY29udGFpbmVyIFtkYXRhLWFjdGlvbi1kZWZhdWx0LWhpZGRlbi12YWx1ZV1cIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coalEyMjQodGhpcyksIGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtYWN0aW9uLWRlZmF1bHQtaGlkZGVuLXZhbHVlJykpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLnZhbChqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLWFjdGlvbi1kZWZhdWx0LWhpZGRlbi12YWx1ZScpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuXHQvLyBTd2l0Y2ggYXR0cmlidXRlcyBvZiBhdXRvcGxheSBpdGVtc1xuXHRmdW5jdGlvbiBhdXRvcGxheUF0dHJTd2l0Y2goYXR0MSwgYXR0MiwgY29udGFpbmVyKXtcblx0XHRqUTIyNChjb250YWluZXIpLmZpbmQoJ2F1ZGlvLCB2aWRlbycpLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdGlmKGpRMjI0KHRoaXMpLmF0dHIoYXR0MSkpe1xuXHRcdFx0XHQvLyBqUTIyNCh0aGlzKS5yZW1vdmVBdHRyKGF0dDEpO1xuXHRcdFx0XHRqUTIyNCh0aGlzKS5wcm9wKGF0dDEsIGZhbHNlKTtcblx0XHRcdFx0alEyMjQodGhpcykuYXR0cihhdHQyLCB0cnVlKTtcblx0XHRcdFx0aWYoYXR0MiA9PSBcImF1dG9wbGF5XCIpe1xuXHRcdFx0XHRcdGpRMjI0KHRoaXMpLmdldCgwKS5wbGF5KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alEyMjQodGhpcykuZ2V0KDApLnBhdXNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFBvcHRpblRyaWdnZXIoKSwgaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdCB8IGNsaWNrOkJvb2xlYW4gLT4gKGlmIHBvcHRpbiBjbGljayB0cmlnZ2VyKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgc3R5bGUsIHBvc2l0aW9uIGFuZCBmdW5jdGlvbiBwZXIgcG9wdGluXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0UG9wdGluKHBvcHRpbiwgY2xpY2spe1xuXG4gICAgICAgIGdldEZha2VFbWFpbERvbWFpbnMoKTtcblxuICAgICAgICBzaG93TG9nKCdzZXRQb3B0aW4gcG9wdGluaWQ6ICcrcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgIHZhciBpc0VtYmVkZGVkUG9wdGluID0gcG9wdGluLnBvcHRpbl90eXBlID09IFwiZW1iZWRkZWRcIjtcbiAgICAgICAgaWYgKGlzRW1iZWRkZWRQb3B0aW4gJiYgdHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdmFyIHdpbmRvd0h0ID0galEyMjQoIHdpbmRvdyApLmhlaWdodCgpO1xuICAgICAgICAgICAgalEyMjQoJ2JvZHknKS5jc3Moe1xuICAgICAgICAgICAgICAgICdoZWlnaHQnIDogd2luZG93SHQgLSAyMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IE1vYmlsZSBwb3B0aW4gaW4gbW9iaWxlIG1vZGVcbiAgICAgICAgdmFyIHRoaXNfcG9wID0gXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ10gXCI7XG4gICAgICAgIC8qaWYoalEyMjQodGhpc19wb3ApLmZpbmQoXCIjY2xvc2VYQnV0dG9uXCIpLmxlbmd0aCl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuZmluZChcIiNjbG9zZVhCdXR0b25cIikuYXR0cihcIm9uY2xpY2tcIixcImNsb3NlUG9wdGluT25YY2xpY2sodGhpcyk7XCIpO1xuICAgICAgICB9Ki9cblxuICAgICAgICAvLyBDb3B5IHRoZSByZWRpcmVjdCBsaW5rIGZyb20gZGVrc3RvcCB2aWV3IHRvIHBhcmVudCBkaXZcbiAgICAgICAgdmFyIHJlZGlyZWN0X3VybF9ibGFuayA9IGpRMjI0KHRoaXNfcG9wKS5maW5kKFwiLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLnJlZGlyZWN0LXVybC1ibGFua1wiKTtcbiAgICAgICAgdmFyIHJlZGlyZWN0X3VybF9odG1sID0gcmVkaXJlY3RfdXJsX2JsYW5rLmxlbmd0aCA/IHJlZGlyZWN0X3VybF9ibGFuay5nZXQoMCkub3V0ZXJIVE1MIDogJyc7XG4gICAgICAgIGlmKGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlQ29udGFpbmVyXCIpLmxlbmd0aCl7XG4gICAgICAgICAgICBpc01vYmlsZUNvbnRhaW5lckF2YWlsYWJsZU9ialtwb3B0aW4ucG9wdGluX2lkXSA9IHRydWU7XG4gICAgICAgICAgICBpZihpZk1vYmlsZVBvcHRpbiAmJiBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJtb2JpbGVcIil7XG4gICAgICAgICAgICAgICAgLy8galEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXJcIikuYXR0cignaWQnLCAncG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyVGVtcCcpO1xuICAgICAgICAgICAgICAgIC8vIGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluVGhhbmtZb3VTY3JlZW5cIikuYXR0cignaWQnLCAncG9wdGluVGhhbmtZb3VTY3JlZW5UZW1wJyk7XG4gICAgICAgICAgICAgICAgLy8galEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVDb250YWluZXJcIikuYXR0cignaWQnLCAncG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyJyk7XG4gICAgICAgICAgICAgICAgLy8galEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVUaGFua1lvdVNjcmVlblwiKS5hdHRyKCdpZCcsICdwb3B0aW5UaGFua1lvdVNjcmVlbicpO1xuICAgICAgICAgICAgICAgIC8vIGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyVGVtcCwgI3BvcHRpblRoYW5rWW91U2NyZWVuVGVtcFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZUNvbnRhaW5lclwiKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lclwiKS5yZXBsYWNlV2l0aChqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZUNvbnRhaW5lclwiKS5nZXQoMCkub3V0ZXJIVE1MLnJlcGxhY2UoL3BvcHRpbk1vYmlsZUNvbnRhaW5lci9nbSwgJ3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lcicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVUaGFua1lvdVNjcmVlblwiKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpblRoYW5rWW91U2NyZWVuXCIpLnJlcGxhY2VXaXRoKGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlVGhhbmtZb3VTY3JlZW5cIikuZ2V0KDApLm91dGVySFRNTC5yZXBsYWNlKC9wb3B0aW5Nb2JpbGVUaGFua1lvdVNjcmVlbi9nbSwgJ3BvcHRpblRoYW5rWW91U2NyZWVuJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZVBsYXlTY3JlZW5cIikubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5QbGF5U2NyZWVuXCIpLnJlcGxhY2VXaXRoKGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlUGxheVNjcmVlblwiKS5nZXQoMCkub3V0ZXJIVE1MLnJlcGxhY2UoL3BvcHRpbk1vYmlsZVBsYXlTY3JlZW4vZ20sICdwb3B0aW5QbGF5U2NyZWVuJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZVdpbm5pbmdTY3JlZW5cIikubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5XaW5uaW5nU2NyZWVuXCIpLnJlcGxhY2VXaXRoKGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlV2lubmluZ1NjcmVlblwiKS5nZXQoMCkub3V0ZXJIVE1MLnJlcGxhY2UoL3BvcHRpbk1vYmlsZVdpbm5pbmdTY3JlZW4vZ20sICdwb3B0aW5XaW5uaW5nU2NyZWVuJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZUxvc2luZ1NjcmVlblwiKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbkxvc2luZ1NjcmVlblwiKS5yZXBsYWNlV2l0aChqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZUxvc2luZ1NjcmVlblwiKS5nZXQoMCkub3V0ZXJIVE1MLnJlcGxhY2UoL3BvcHRpbk1vYmlsZUxvc2luZ1NjcmVlbi9nbSwgJ3BvcHRpbkxvc2luZ1NjcmVlbicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVDb250YWluZXJcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVUaGFua1lvdVNjcmVlblwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpbk1vYmlsZVBsYXlTY3JlZW5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVXaW5uaW5nU2NyZWVuXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluTW9iaWxlTG9zaW5nU2NyZWVuXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHBvcHRpbiBIVE1MIGFmdGVyIHN3aXRjaGluZyBtb2Rlc1xuICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW4gPSBqUTIyNCh0aGlzX3BvcCkuZ2V0KDApLm91dGVySFRNTDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Nb2JpbGVDb250YWluZXIsICNwb3B0aW5Nb2JpbGVUaGFua1lvdVNjcmVlbiwgI3BvcHRpbk1vYmlsZVBsYXlTY3JlZW4sICNwb3B0aW5Nb2JpbGVXaW5uaW5nU2NyZWVuLCAjcG9wdGluTW9iaWxlTG9zaW5nU2NyZWVuXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgalEyMjQodGhpc19wb3ApLmFwcGVuZChyZWRpcmVjdF91cmxfaHRtbCk7XG5cbiAgICAgICAgaWYoalEyMjQodGhpc19wb3ApLmZpbmQoXCIjcG9wdGluRW5jUHplXCIpLmxlbmd0aCA9PSAwICYmIGpRMjI0KHRoaXNfcG9wKS5maW5kKFwiI2dhbWlmaWVkUHJpemVKU09OXCIpLmxlbmd0aCl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuZmluZChcIiNnYW1pZmllZFByaXplSlNPTlwiKS5hdHRyKFwiaWRcIiwgXCJwb3B0aW5FbmNQemVcIik7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuZmluZChcIiNwb3B0aW5FbmNQemVcIikucmVtb3ZlQXR0cihcImNsYXNzXCIpO1xuICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQoXCIjcG9wdGluRW5jUHplXCIpLnZhbChwb3B0aW5FbmMoalEyMjQodGhpc19wb3ApLmZpbmQoXCIjcG9wdGluRW5jUHplXCIpLnZhbCgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhdXRvcGxheUF0dHJTd2l0Y2goXCJhdXRvcGxheVwiLCBcImRhdGEtYXV0b3BsYXlcIiwgdGhpc19wb3AgKyBcIiNwb3B0aW5UaGFua1lvdVNjcmVlblwiKTtcblxuICAgICAgICB2YXIgcG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0ID0gZ2V0RGF0YVdpZHRoSGVpZ2h0KHBvcHRpbi5wb3B0aW4pO1xuXG4gICAgICAgIC8vIHZhciBwb3B0aW5fd2lkdGgsIHBvcHRpbl9oZWlnaHQ7XG5cbiAgICAgICAgdmFyIHRoaXNfcG9wdGluX3dpZHRoID0gcG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0Wyd3aWR0aCddO1xuICAgICAgICB2YXIgdGhpc19wb3B0aW5faGVpZ2h0ID0gcG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0WydoZWlnaHQnXTtcblxuICAgICAgICAvLyBTZXQgZ2xvYmFsIHBvcHRpbiBzaXplIFxuICAgICAgICAvLyBJZiBub3QgY2xpY2sgcHVsbCByZXFpdWVzdFxuICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHBvcHRpbl93aWR0aCA9ICB0aGlzX3BvcHRpbl93aWR0aCB8fCBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplLndpZHRoO1xuICAgICAgICAgICAgcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplLmhlaWdodDtcbiAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX2FyZWFfZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgZ2V0UG9wdGluUG9zaXRpb24ocG9wdGluKTtcbiAgICAgICAgICAgIC8vIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIiAmJiAocG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF8zXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF83XCIpKSApe1xuICAgICAgICAgICAgLy8gIHBvcHRpbl9wb3NpdGlvbl9jZW50ZXJfdXAgPSBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvc2l0aW9uX2NlbnRlci51cDtcbiAgICAgICAgICAgIC8vICBwb3B0aW5fcG9zaXRpb25fY2VudGVyX2xlZnQgPSBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvc2l0aW9uX2NlbnRlci5sZWZ0XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBzaG93TG9nKCdjbGljayB1bmRlZmluZWQ6JytjbGljayk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgc2hvd0xvZygnY2xpY2sgdHJ1ZTonK2NsaWNrKTtcbiAgICAgICAgICAgIHBvcHRpbl93aWR0aCA9ICB0aGlzX3BvcHRpbl93aWR0aCB8fCBwb3B0aW5fc2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHBvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgcG9wdGluX3NpemUuaGVpZ2h0O1xuICAgICAgICAgICAgcG9wdGluX2FyZWFfZmxhZyA9IGZhbHNlOyAgICAgICAgXG5cbiAgICAgICAgICAgIGdldFBvcHRpblBvc2l0aW9uKHBvcHRpbix0cnVlKTtcbiAgICAgICAgICAgIC8vIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIiAmJiAocG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF8zXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF83XCIpICkpe1xuICAgICAgICAgICAgLy8gIHBvcHRpbl9wb3NpdGlvbl9jZW50ZXJfdXAgPSBwb3B0aW5fcG9zaXRpb24udXA7XG4gICAgICAgICAgICAvLyAgcG9wdGluX3Bvc2l0aW9uX2NlbnRlcl9sZWZ0ID0gcG9wdGluX3Bvc2l0aW9uLmxlZnQ7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvd0xvZygnc2V0UG9wdGluJywgcG9wdGluX3dpZHRoLCBwb3B0aW5faGVpZ2h0KTtcbiAgICAgICAgLy8gSW5qZWN0IHBvcHRpbiB0byBET00gXG4gICAgICAgIC8valEyMjQoXCJib2R5XCIpLmFwcGVuZChwb3B0aW4ucG9wdGluKTtcbiAgICAgICAgLy9qUTIyNChcImJvZHlcIikuYXBwZW5kKGFwcGVuZFBvcHRpbihwb3B0aW4ucG9wdGluX3VybCkpO1xuICAgICAgICAvL2FwcGVuZFBvcHRpbihwb3B0aW4pO1xuXG4gICAgICAgIC8vIFNldCBGb3JtIHdyYXBwZXJcbiAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5UaGFua1lvdVNjcmVlblwiKS5hZGRDbGFzcygncG9wdGluX3RoYW5rX3lvdV9zY3JlZW4nKS5yZW1vdmVDbGFzcygnZHJhZ2dhYmxlLWNvbnRhaW5lcicpO1xuICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiI3BvcHRpblBsYXlTY3JlZW5cIikuYWRkQ2xhc3MoJ3BvcHRpbl9wbGF5X3NjcmVlbicpLnJlbW92ZUNsYXNzKCdkcmFnZ2FibGUtY29udGFpbmVyJyk7XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluV2lubmluZ1NjcmVlblwiKS5hZGRDbGFzcygncG9wdGluX3dpbm5pbmdfc2NyZWVuJykucmVtb3ZlQ2xhc3MoJ2RyYWdnYWJsZS1jb250YWluZXInKTtcbiAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5Mb3NpbmdTY3JlZW5cIikuYWRkQ2xhc3MoJ3BvcHRpbl9sb3Npbmdfc2NyZWVuJykucmVtb3ZlQ2xhc3MoJ2RyYWdnYWJsZS1jb250YWluZXInKTtcblx0XHRpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiICYmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8xXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfMlwiIHx8IChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIgJiYgIXBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5kaXNhYmxlX3Bvc3RfcGxheV9zY3JlZW4pKSl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLnBvcHRpbl9wbGF5X3NjcmVlblwiKS5odG1sKCc8Zm9ybSBtZXRob2Q9XCJQT1NUXCIgYWN0aW9uPVwiI1wiIGlkPVwicG9wdGluRm9ybVN1Ym1pdCcrcG9wdGluLnBvcHRpbl9pZCsnXCI+JytqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuXCIpLmh0bWwoKSArIFwiPC9mb3JtPlwiKTtcbiAgICAgICAgfWVsc2V7XG5cdFx0XHRqUTIyNCh0aGlzX3BvcCArIFwiLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuaHRtbCgnPGZvcm0gbWV0aG9kPVwiUE9TVFwiIGFjdGlvbj1cIiNcIiBpZD1cInBvcHRpbkZvcm1TdWJtaXQnK3BvcHRpbi5wb3B0aW5faWQrJ1wiPicralEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuaHRtbCgpICsgXCI8L2Zvcm0+XCIpO1xuICAgICAgICB9XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIucG9wdGluX3RoYW5rX3lvdV9zY3JlZW5cIikuaGlkZSgpO1xuICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLnBvcHRpbl9wbGF5X3NjcmVlblwiKS5oaWRlKCk7XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIucG9wdGluX3dpbm5pbmdfc2NyZWVuXCIpLmhpZGUoKTtcbiAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5wb3B0aW5fbG9zaW5nX3NjcmVlblwiKS5oaWRlKCk7XG5cbiAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQoJy5mcm9hbGEtZWRpdG9yLWxpbmsnKS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHQvLyAucG9wdGluLWZvcm0tbGluay1idXR0b24gaGFzIG93biBjbGljayBldmVudCBzbyBza2lwIHRoZSBldmVudCBpbiBpdHMgY2hpbGQgZWxlbWVudHNcblx0XHRcdGlmKCFqUTIyNCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcyhcInBvcHRpbi1mb3JtLWxpbmstYnV0dG9uXCIpKXtcblx0XHRcdFx0alEyMjQodGhpcykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRjbG9zZVBvcHRpbihwb3B0aW4ucG9wdGluX2lkKTtcblx0XHRcdFx0XHR9LDUwMCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pXG5cbiAgICAgICAgLy8gRm9ybSB2YWxpZGF0aW9uc1xuICAgICAgICBwb3B0aW5Gb3JtVmFsaWRhdGlvbnMocG9wdGluKTtcblxuXHRcdC8vIEVuYWJsZSBzcGluIGZvciB3aGVlbFxuXHRcdGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiKXtcblx0XHRcdGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIpIHtcblx0XHRcdFx0cG9wdGluLndoZWVsX2hhc19jb3Vwb24gPSBqUTIyNCh0aGlzX3BvcCArIFwiLnBvcHRpbl93aW5uaW5nX3NjcmVlblwiKS5maW5kKCcuZnJvYWxhLWVkaXRvci1jb3Vwb24nKS5sZW5ndGggPyB0cnVlIDogZmFsc2U7XG5cdFx0XHRcdGlmKCFwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuIHx8IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyICNwb3B0aW5Gb3JtU3VibWl0VGV4dFwiKS5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHRcdHBvcHRpblNwaW5XaGVlbEluaXQocG9wdGluKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuICAgICAgICAvLyBIb3ZlciBlZmZlY3Qgb24gYnV0dG9uc1xuICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCkuZmluZCgnLnN1Ym1pdERhcmtDb2xvcicpLmxlbmd0aCl7XG4gICAgICAgICAgICBqUTIyNCgnLmZyb2FsYS1lZGl0b3ItYnV0dG9uJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLnBhcmVudCgpLmF0dHIoJ2RhdGEtYmcnLCBqUTIyNCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGpRMjI0KCdkaXYucG9wdGluLWZvcm0tc3VibWl0LWJ1dHRvbicpLm1vdXNlZW50ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCcuZnJvYWxhLWVkaXRvci1idXR0b24nKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnJyk7XG4gICAgICAgICAgICB9KS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYoalEyMjQodGhpcykuZmluZCgnLmZyb2FsYS1lZGl0b3ItYnV0dG9uJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmZyb2FsYS1lZGl0b3ItYnV0dG9uJykuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLWNvbG9yJywgalEyMjQodGhpcykuYXR0cignZGF0YS1iZycpLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCkuZmluZCgnLmNsb3NlRGFya0NvbG9yJykubGVuZ3RoKXtcbiAgICAgICAgICAgIGpRMjI0KCcuZnJvYWxhLWVkaXRvci1idXR0b24nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykucGFyZW50KCkuYXR0cignZGF0YS1iZycsIGpRMjI0KHRoaXMpLmNzcygnYmFja2dyb3VuZC1jb2xvcicpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgalEyMjQoJ2Rpdi5wb3B0aW4tZm9ybS1jbG9zZS1idXR0b24nKS5tb3VzZWVudGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmZyb2FsYS1lZGl0b3ItYnV0dG9uJykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJycpO1xuICAgICAgICAgICAgfSkubW91c2VsZWF2ZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmZpbmQoJy5mcm9hbGEtZWRpdG9yLWJ1dHRvbicpLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmZpbmQoJy5mcm9hbGEtZWRpdG9yLWJ1dHRvbicpLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZC1jb2xvcicsIGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtYmcnKSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vU2V0IENvbnZlcnNpb24gUGF0aCBBbmQgTGlua3NcbiAgICAgICAgdmFyIGNvbnZVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgdmFyIGNvbnZQYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgY29udlBhdGggPSBjb252UGF0aFswXSA9PSAnLycgPyBjb252UGF0aC5zdWJzdHIoMSkgOiBjb252UGF0aDtcbiAgICAgICAgaWYoalEyMjQoXCIucmVkaXJlY3QtdXJsLWJsYW5rXCIpLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIGpRMjI0KFwiLnJlZGlyZWN0LXVybC1ibGFua1wiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEhyZWYgPSBqUTIyNCh0aGlzKS5hdHRyKFwiaHJlZlwiKTtcbiAgICAgICAgICAgICAgICBpZih0YXJnZXRIcmVmICYmIGNvbnZVcmwpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udkhyZWYgPSB0YXJnZXRIcmVmLnJlcGxhY2UoXCJ7Y29udmVyc2lvbl91cmx9XCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIiU3QmNvbnZlcnNpb25fdXJsJTdEXCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIntwYXRoX3VybH1cIiwncGF0aF91cmw9JytlbmNvZGVVUkkoY29udlBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIiU3QnBhdGhfdXJsJTdEXCIsJ3BhdGhfdXJsPScrZW5jb2RlVVJJKGNvbnZQYXRoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuYXR0cihcImhyZWZcIixjb252SHJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoalEyMjQoXCIucG9wdGluLWZvcm0tbGluay1idXR0b25cIikubGVuZ3RoPjApe1xuICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWZvcm0tbGluay1idXR0b25cIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBsaW5rX3NlbGVjdG9yPWpRMjI0KHRoaXMpLmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbGlua2J0bl9zcj1saW5rX3NlbGVjdG9yLnN1YnN0cmluZygxMSwxMCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtfYnV0dG9uX2Nzc19jbGFzcyA9IChsaW5rX3NlbGVjdG9yID09ICdwb3B0aW5Gb3JtMm5kbGlua2J0blRleHQnKSA/ICdidG4ybmREYXJrQ29sb3InIDogKGxpbmtfc2VsZWN0b3IgPT0gJ3BvcHRpbkZvcm0zbmRsaW5rYnRuVGV4dCcpID8gJ2J0bjNyZERhcmtDb2xvcicgOiAobGlua19zZWxlY3RvciA9PSAncG9wdGluRm9ybTR0aGxpbmtidG5UZXh0JykgPyAnYnRuNHRoRGFya0NvbG9yJyA6IChsaW5rX3NlbGVjdG9yID09ICdwb3B0aW5Gb3JtNXRobGlua2J0blRleHQnKSA/ICdidG41dGhEYXJrQ29sb3InIDonYnRuNnRoRGFya0NvbG9yJztcblxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRIcmVmPWpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLWJ0bnVybFwiKTtcbiAgICAgICAgICAgICAgICBpZih0YXJnZXRIcmVmICYmIGNvbnZVcmwpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udkhyZWYgPSB0YXJnZXRIcmVmLnJlcGxhY2UoXCJ7Y29udmVyc2lvbl91cmx9XCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIiU3QmNvbnZlcnNpb25fdXJsJTdEXCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIntwYXRoX3VybH1cIiwncGF0aF91cmw9JytlbmNvZGVVUkkoY29udlBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZIcmVmID0gY29udkhyZWYucmVwbGFjZShcIiU3QnBhdGhfdXJsJTdEXCIsJ3BhdGhfdXJsPScrZW5jb2RlVVJJKGNvbnZQYXRoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuYXR0cihcImRhdGEtYnRudXJsXCIsY29udkhyZWYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXNfcG9wKS5maW5kKCcuJytsaW5rX2J1dHRvbl9jc3NfY2xhc3MpLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KCcjJytsaW5rX3NlbGVjdG9yKycgLmZyb2FsYS1lZGl0b3ItbGluaycpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLnBhcmVudCgpLmF0dHIoJ2RhdGEtYmctJytsaW5rYnRuX3NyKydjb2xvcicsIGpRMjI0KHRoaXMpLmNzcygnYmFja2dyb3VuZC1jb2xvcicpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KCcjJytsaW5rX3NlbGVjdG9yKS5tb3VzZWVudGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCcuZnJvYWxhLWVkaXRvci1saW5rJykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9KS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzKS5maW5kKCcuZnJvYWxhLWVkaXRvci1saW5rJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCcuZnJvYWxhLWVkaXRvci1saW5rJykuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLWNvbG9yJywgalEyMjQodGhpcykuYXR0cignZGF0YS1iZy0nK2xpbmtidG5fc3IrJ2NvbG9yJyksICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIgfHwgcG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIil7XG4gICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplLmhlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplLndpZHRoID0gdGhpc19wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCA4MDA7XG4gICAgICAgICAgICBwb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IDUwMDtcbiAgICAgICAgICAgIGlmKFxuICAgICAgICAgICAgICAgIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfOVwiKSAmJiAhcG9wdGluX2hlaWdodFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcG9wdGluX3dpZHRoID0gcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGpRMjI0KCcuZnJvYWxhLWVkaXRvci10ZXh0LCAuZnJvYWxhLWVkaXRvci10aWNrZXIsIC5mcm9hbGEtZWRpdG9yLWxpbmsnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgc3RyID0galEyMjQodGhpcykuZ2V0KDApLmlubmVyVGV4dC5yZXBsYWNlKC8mbmJzcDsvZ2ksXCIgXCIpO1xuICAgICAgICAgICAgalEyMjQodGhpcykucGFyZW50cyhcIi5kcmFnZ2FibGVcIikuYXR0cignYXJpYS1sYWJlbCcsIHN0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGpRMjI0KCcuZnJvYWxhLWVkaXRvci1idXR0b24nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgc3RyID0galEyMjQodGhpcykuZ2V0KDApLmlubmVyVGV4dC5yZXBsYWNlKC8mbmJzcDsvZ2ksXCIgXCIpO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0galEyMjQodGhpcykucGFyZW50KCkuZmluZCgnaW5wdXQnKTtcblx0XHRcdGlmKGlucHV0Lmxlbmd0aCkge1xuXHRcdFx0XHRpbnB1dC5hdHRyKCdhcmlhLWxhYmVsJywgc3RyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRMjI0KHRoaXMpLnBhcmVudCgpLmF0dHIoJ2FyaWEtbGFiZWwnLCBzdHIpO1xuXHRcdFx0fVxuICAgICAgICB9KTtcblxuICAgICAgICBqUTIyNCh0aGlzX3BvcCkuYXR0cignZGF0YS1wb3B0aW4tdHlwZScscG9wdGluLnBvcHRpbl90eXBlKS5hdHRyKCdkYXRhLXBvcHRpbi1mb3JtYXQnLHBvcHRpbi5wb3B0aW5fZm9ybWF0KS5hdHRyKCdkYXRhLXBvcHRpbi10eXBlLWZvcm1hdCcscG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCk7XG4gICAgICAgIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcyl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuYXR0cignZGF0YS1wb3B0aW4tbG9jYXRpb24nLHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wKS5hZGRDbGFzcygncG9wdGluLWxpdmUnKTtcbiAgICAgICAgalEyMjQodGhpc19wb3ApLmNzcyh7XG4gICAgICAgICAgICBcImRpc3BsYXlcIjogXCJub25lXCIsXG4gICAgICAgICAgICBcIm1hcmdpblwiOiBcIjBweCBhdXRvXCIsXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiOlwidHJhbnNsYXRlKDAsMClcIixcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblwiOlwidHJhbnNmb3JtIC4zcyBlYXNlLW91dFwiLFxuICAgICAgICAgICAgXCJtaW4td2lkdGhcIjpwb3B0aW5fd2lkdGgrXCJweFwiLFxuICAgICAgICAgICAgXCJtYXgtd2lkdGhcIjpwb3B0aW5fd2lkdGgrXCJweFwiLFxuICAgICAgICAgICAgXCJ3aWR0aFwiOnBvcHRpbl93aWR0aCtcInB4XCIsXG4gICAgICAgICAgICBcIm1pbi1oZWlnaHRcIjpwb3B0aW5faGVpZ2h0K1wicHhcIixcbiAgICAgICAgICAgIFwibWF4LWhlaWdodFwiOnBvcHRpbl9oZWlnaHQrXCJweFwiLFxuICAgICAgICAgICAgXCJoZWlnaHRcIjpwb3B0aW5faGVpZ2h0K1wicHhcIixcbiAgICAgICAgICAgIFwiei1pbmRleFwiOiBcIjk5OTk5OTk5OTk5OTk5OVwiLFxuICAgICAgICAgICAgXCJwb3NpdGlvblwiOiAoaXNFbWJlZGRlZFBvcHRpbj9cImFic29sdXRlXCI6XCJmaXhlZFwiKSxcbiAgICAgICAgICAgIFwib3ZlcmZsb3dcIjogXCJ2aXNpYmxlXCIsXG4gICAgICAgICAgICBcImxlZnRcIjogXCIwcHhcIixcbiAgICAgICAgICAgIFwidG9wXCI6IFwiMHB4XCIsXG4gICAgICAgICAgICBcImJvdHRvbVwiOiBcIjBweFwiLFxuICAgICAgICAgICAgXCJyaWdodFwiOiBcIjBweFwiLFxuICAgICAgICAgICAgXCJsaW5lLWhlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm0tb3JpZ2luXCI6IFwiYm90dG9tXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKS5jc3Moe1wid2lkdGhcIjogcG9wdGluX3dpZHRoK1wicHhcIixcImJhY2tncm91bmQtY2xpcFwiOlwicGFkZGluZy1ib3hcIn0pO1xuICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLmFsdGVybmF0aXZlLWJhY2tncm91bmRcIikuY3NzKCdib3gtc2hhZG93JywgJzAgM3B4IDEycHggcmdiYSgwLDAsMCwuNSknKTtcbiAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwLm5vLWJveC1zaGFkb3cgLmFsdGVybmF0aXZlLWJhY2tncm91bmRcIikuY3NzKCdib3gtc2hhZG93JywgJycpO1xuXG4gICAgICAgIC8vIEZhbGxiYWNrIGJhY2tncm91bmQgZm9yIGNpcmN1bGFyIHRoYW5rIHlvdSBzY3JlZW5zIGNvcGllZCBmcm9tIG1haW4gc2NyZWVuc1xuICAgICAgICBpZihqUTIyNCh0aGlzX3BvcCArIFwiICNwb3B0aW5EcmFnZ2FibGVDb250YWluZXIgLmFsdGVybmF0aXZlLWJhY2tncm91bmRcIikubGVuZ3RoICYmICFqUTIyNCh0aGlzX3BvcCArIFwiICNwb3B0aW5UaGFua1lvdVNjcmVlbiAuYWx0ZXJuYXRpdmUtYmFja2dyb3VuZFwiKS5sZW5ndGgpe1xuICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiAjcG9wdGluVGhhbmtZb3VTY3JlZW5cIikucHJlcGVuZChqUTIyNCh0aGlzX3BvcCArIFwiICNwb3B0aW5EcmFnZ2FibGVDb250YWluZXIgLmFsdGVybmF0aXZlLWJhY2tncm91bmRcIikuY2xvbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoalEyMjQodGhpc19wb3AgKyBcIiAjcG9wdGluTW9iaWxlQ29udGFpbmVyIC5hbHRlcm5hdGl2ZS1iYWNrZ3JvdW5kXCIpLmxlbmd0aCAmJiAhalEyMjQodGhpc19wb3AgKyBcIiAjcG9wdGluTW9iaWxlVGhhbmtZb3VTY3JlZW4gLmFsdGVybmF0aXZlLWJhY2tncm91bmRcIikubGVuZ3RoKXtcbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wICsgXCIgI3BvcHRpbk1vYmlsZVRoYW5rWW91U2NyZWVuXCIpLnByZXBlbmQoalEyMjQodGhpc19wb3AgKyBcIiAjcG9wdGluTW9iaWxlQ29udGFpbmVyIC5hbHRlcm5hdGl2ZS1iYWNrZ3JvdW5kXCIpLmNsb25lKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90IG5lZWRlZCBhcyB3ZSBhcmUgdXNpbmcgYXJpYS1sYWJlbCBhYm92ZVxuICAgICAgICB2YXIgY2xvc2Vfc3RyaW5nID0gdGhpc19wb3AgKyBcIi5jbG9zZS1pY29uLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNjbG9zZVhCdXR0b24sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkZvcm1DbG9zZVRleHRcIjtcbiAgICAgICAgalEyMjQoY2xvc2Vfc3RyaW5nKS5hdHRyKCd0aXRsZScsICggaWZVc2VybGFuZ0lzSGUoKSA/IFwi16HXkteV16hcIiA6IFwiQ2xvc2VcIiApKS5hdHRyKCdkYXRhLXRpdGxlJywgKCBpZlVzZXJsYW5nSXNIZSgpID8gXCLXodeS15XXqFwiIDogXCJDbG9zZVwiICkpO1xuICAgICAgICBqUTIyNChjbG9zZV9zdHJpbmcpLm1vdXNlZW50ZXIoZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBqUTIyNChjbG9zZV9zdHJpbmcpLmF0dHIoJ3RpdGxlJywgJycpO1xuICAgICAgICB9KTtcbiAgICAgICAgalEyMjQoY2xvc2Vfc3RyaW5nKS5tb3VzZWxlYXZlKGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgalEyMjQoY2xvc2Vfc3RyaW5nKS5hdHRyKCd0aXRsZScsIGpRMjI0KGNsb3NlX3N0cmluZykuYXR0cignZGF0YS10aXRsZScpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHN1Ym1pdF9zdHJpbmcgPSB0aGlzX3BvcCArIFwiI3BvcHRpbkZvcm1TdWJtaXRUZXh0XCI7XG4gICAgICAgIGpRMjI0KHN1Ym1pdF9zdHJpbmcpLmF0dHIoJ3RpdGxlJywgKCBpZlVzZXJsYW5nSXNIZSgpID8gXCLXqdec15dcIiA6IFwiU3VibWl0XCIgKSkuYXR0cignZGF0YS10aXRsZScsICggaWZVc2VybGFuZ0lzSGUoKSA/IFwi16nXnNeXXCIgOiBcIlN1Ym1pdFwiICkpO1xuXHRcdGpRMjI0KHN1Ym1pdF9zdHJpbmcpLmZpbmQoJyNwb3B0aW5Gb3JtU3VibWl0QnV0dG9uJykudmFsKCggaWZVc2VybGFuZ0lzSGUoKSA/IFwi16nXnNeXXCIgOiBcIlN1Ym1pdFwiICkpO1xuICAgICAgICBqUTIyNChzdWJtaXRfc3RyaW5nKS5tb3VzZWVudGVyKGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgalEyMjQoc3VibWl0X3N0cmluZykuYXR0cigndGl0bGUnLCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBqUTIyNChzdWJtaXRfc3RyaW5nKS5tb3VzZWxlYXZlKGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgalEyMjQoc3VibWl0X3N0cmluZykuYXR0cigndGl0bGUnLCBqUTIyNChzdWJtaXRfc3RyaW5nKS5hdHRyKCdkYXRhLXRpdGxlJykpO1xuICAgICAgICB9KTtcblxuXHRcdGpRMjI0KCcucmVkaXJlY3QtdXJsLWJsYW5rJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0alEyMjQodGhpcykuaHRtbChqUTIyNCh0aGlzKS5hdHRyKCdocmVmJykpO1xuXHRcdH0pO1xuXG4gICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImVtYmVkZGVkXCIpe1xuICAgICAgICAgICAgdmFyIHRoaXNfcGFyZW50ID0galEyMjQodGhpc19wb3ApLnBhcmVudCgpO1xuICAgICAgICAgICAgaWYoIChqUTIyNCh0aGlzX3BvcCkucGFyZW50KCkuaGVpZ2h0KCkgPT0gMCkgfHwgKHRoaXNfcGFyZW50LmNzcygnaGVpZ2h0JykgPT0gdGhpc19wYXJlbnQuY3NzKCdsaW5lLWhlaWdodCcpKSApIHtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkucGFyZW50KCkuY3NzKHsnaGVpZ2h0JzogcG9wdGluX2hlaWdodCsncHgnfSk7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIiNjbG9zZVhCdXR0b24sIFwiK3RoaXNfcG9wICsgXCIjY2xvc2VTa2lwQnV0dG9uXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKS5jc3MoJ3RyYW5zZm9ybScsICdzY2FsZSgxLCAwKScpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKS5hdHRyKCdkYXRhLXNjYWxlJywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBqUTIyNCh0aGlzX3BvcCArICcuZnJvYWxhLWltYWdlLXdyYXBwZXInKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgaW1nX2xpbmsgPSBqUTIyNCh0aGlzKS5maW5kKCdhJyk7XG4gICAgICAgICAgICBpZihpbWdfbGluay5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHZhciBvdmVybGF5X2Nsb25lID0galEyMjQodGhpcykuZmluZCgnLmZyb2FsYS1pbWctb3ZlcmxheScpLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmZyb2FsYS1pbWctb3ZlcmxheScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGltZ19saW5rLnByZXBlbmQob3ZlcmxheV9jbG9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcInNvY2lhbFwiICYmICggcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfM1wiIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzZcIikgfHwgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcInNzaWRlXCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfMTlcIikgKXtcbiAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLWNyZWRpdCcpLmNzcyh7J2JvdHRvbSc6J2F1dG8nLCdib3R0b20nOicnfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBwb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uIGNsYXNzIHRvIGFsbCBkcmFnZ2FibGUgaW4gbW9iaWxlX2Zvcm1hdF82XG4gICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIiAmJiBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF82XCIpe1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmRyYWdnYWJsZTpub3QoI2Nsb3NlWEJ1dHRvbilcIikuYWRkQ2xhc3MoJ3BvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBYIG9yIFNraXAgYmFzZWQgb24gZGVzaWduIHNldHRpbmdzXG4gICAgICAgIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcyAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgaWYocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb3B0aW9uc190eXBlID09IFwiY2xvc2luZ19vcHRpb25zLXhcIil7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQoJ1tpZD1cImNsb3NlU2tpcEJ1dHRvblwiXScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZSA9PSBcImNsb3Npbmdfb3B0aW9ucy1idXR0b25cIil7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQoJ1tpZD1cImNsb3NlWEJ1dHRvblwiXScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZSA9PSBcImNsb3Npbmdfb3B0aW9ucy1cIil7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmZpbmQoJ1tpZD1cImNsb3NlWEJ1dHRvblwiXSwgW2lkPVwiY2xvc2VTa2lwQnV0dG9uXCJdJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBqUTIyNCh0aGlzX3BvcCkuZmluZCgnW2lkPVwiY2xvc2VYQnV0dG9uXCJdLCBbaWQ9XCJjbG9zZVNraXBCdXR0b25cIl0nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzX2Nsb3NlX2ljb24gPSBqUTIyNCh0aGlzKS5maW5kKCcuY2xvc2UtaWNvbicpO1xuICAgICAgICAgICAgdGhpc19jbG9zZV9pY29uX3dpZHRoID0gcGFyc2VJbnQodGhpc19jbG9zZV9pY29uLmNzcygnd2lkdGgnKSk7XG4gICAgICAgICAgICBpZighdGhpc19jbG9zZV9pY29uLmhhc0NsYXNzKCd1cGRhdGVkJykgJiYgdGhpc19jbG9zZV9pY29uX3dpZHRoID09IDMyKXtcbiAgICAgICAgICAgICAgICB0aGlzX2Nsb3NlX2ljb25fd2lkdGggPSA0NDtcbiAgICAgICAgICAgICAgICB0aGlzX2Nsb3NlX2ljb24uYWRkQ2xhc3MoJ3VwZGF0ZWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgeF93aWR0aCA9IHRoaXNfY2xvc2VfaWNvbl93aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgdmFyIG5ld19kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnIDogeF93aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCcgOiB4X3dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnIDogeF93aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZScgOiB4X3dpZHRoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNfY2xvc2VfaWNvbi5jc3MobmV3X2RhdGEpO1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcyhuZXdfZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYoIChwYXJzZUludChqUTIyNCh0aGlzKS5jc3MoJ2xlZnQnKSkgKyB0aGlzX2Nsb3NlX2ljb25fd2lkdGgpID4gcG9wdGluX3dpZHRoICkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3MoJ2xlZnQnLCAocG9wdGluX3dpZHRoLXRoaXNfY2xvc2VfaWNvbl93aWR0aCkrJ3B4JyApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTWFrZSBiYXIncyBwYXJlbnQgaGVpZ2h0IGVxdWFsIHRvIGJhclxuICAgICAgICBpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIil7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuY3NzKHtcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTkyMHB4JyxcbiAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogJzE5MjBweCcsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6IGpRMjI0KHRoaXNfcG9wICsgXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyXCIpLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICdtYXgtaGVpZ2h0JzogalEyMjQodGhpc19wb3AgKyBcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXJcIikuaGVpZ2h0KClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHNoYWRvdyBmcm9tIGZsaXAgdGltZXJcbiAgICAgICAgaWYoaXNTYWZhcmlQb3B0aW4gfHwgaWZNb2JpbGVQb3B0aW4pe1xuICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmFkZENsYXNzKCdjbGVhbi10aW1lcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIHdoYXRzYXBwIHRlbXBsYXRlIGluIG1vYmlsZVxuICAgICAgICBpZihpZk1vYmlsZVBvcHRpbiAmJiBqUTIyNCh0aGlzX3BvcCkubGVuZ3RoKXtcbiAgICAgICAgICAgIC8vIHNob3dMb2coIGpRMjI0KHRoaXNfcG9wKS5odG1sKCkgKTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKS5odG1sKCBqUTIyNCh0aGlzX3BvcCkuaHRtbCgpLnJlcGxhY2UoLyh3ZWIud2hhdHNhcHAuY29tKS9nLCBcImFwaS53aGF0c2FwcC5jb21cIikgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElzIG5ldyBlZGl0b3I/XG4gICAgICAgIGlmKCBwb3B0aW4ucG9wdGluX3R5cGUgaW4gZnJfdGVtcGxhdGVzICYmIGZyX3RlbXBsYXRlc1twb3B0aW4ucG9wdGluX3R5cGVdID49IHBhcnNlSW50KHBvcHRpbi5wb3B0aW5fZm9ybWF0LnNwbGl0KCdfJylbMV0pICl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuYWRkQ2xhc3MoJ29sZC1wb3B1cCcpLnJlbW92ZUNsYXNzKCduZXctcG9wdXAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKS5hZGRDbGFzcygnbmV3LXBvcHVwJykucmVtb3ZlQ2xhc3MoJ29sZC1wb3B1cCcpO1xuICAgICAgICAgICAgdmFyIHBvcHRpbl9sYW5nID0galEyMjQodGhpc19wb3ApLmZpbmQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXInKS5hdHRyKCdkYXRhLWxhbmcnKTtcbiAgICAgICAgICAgIHZhciBpc19lbmcgPSBwb3B0aW5fbGFuZyAmJiBwb3B0aW5fbGFuZyA9PSBcImhlXCIgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICBpZihpc19lbmcgJiYgdXNlcl9sYW5nID09IFwiZW5cIil7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3B0aW5fZGlzYWJsZV9mb250cykge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuY3NzKCdmb250LWZhbWlseScsICdQb3BwaW5zJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiI3BvcHRpbl9wb3BwaW5zX2ZvbnRfcHJlbG9hZFwiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInByZWxvYWRcIiBpZD1cInBvcHRpbl9wb3BwaW5zX2ZvbnRfcHJlbG9hZFwiIGFzPVwic3R5bGVcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5wb3B0LmluP2ZhbWlseT1Qb3BwaW5zJmRpc3BsYXk9c3dhcFwiPicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiI3BvcHRpbl9wb3BwaW5zX2ZvbnRfbGlua1wiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBpZD1cInBvcHRpbl9wb3BwaW5zX2ZvbnRfbGlua1wiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4/ZmFtaWx5PVBvcHBpbnMmZGlzcGxheT1zd2FwXCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKS5jc3MoJ2ZvbnQtZmFtaWx5JywgJ09wZW4gU2FucyBIZWJyZXcnKTtcbiAgICAgICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9wcmVsb2FkXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJwcmVsb2FkXCIgaWQ9XCJwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9wcmVsb2FkXCIgYXM9XCJzdHlsZVwiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4vP2ZhbWlseT1PcGVuJTIwU2FucyUyMEhlYnJldyZkaXNwbGF5PXN3YXBcIj4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoalEyMjQoXCIjcG9wdGluX29wZW5zYW5zaGVicmV3X2ZvbnRfbGlua1wiKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGlkPVwicG9wdGluX29wZW5zYW5zaGVicmV3X2ZvbnRfbGlua1wiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4vP2ZhbWlseT1PcGVuJTIwU2FucyUyMEhlYnJldyZkaXNwbGF5PXN3YXBcIj4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEtlZXAgei1pbmRleCBoaWdoZXN0IHZpYSBjc3NcbiAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXAgI2Nsb3NlWEJ1dHRvbicpLmNzcyh7J3otaW5kZXgnOicnfSk7XG4gICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwLm9sZC1wb3B1cCAjY2xvc2VYQnV0dG9uJykuY3NzKHsnbGVmdCc6J2F1dG8nLCdyaWdodCc6J2F1dG8nfSk7XG5cbiAgICAgICAgalEyMjQoXCIubm8tc2hvdy1pY29uXCIpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgICAgICAgalEyMjQoXCIuZmxpcCAubm8tc2hvdy1pY29uXCIpLmNzcygncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcblxuICAgICAgICBpZiAoIGZpZWxkX2Rlc2luZ1twb3B0aW4ucG9wdGluX3R5cGUgKyAnXycgKyBwb3B0aW4ucG9wdGluX2Zvcm1hdF0gIT0gdW5kZWZpbmVkICYmIGZpZWxkX2Rlc2luZ1twb3B0aW4ucG9wdGluX3R5cGUgKyAnXycgKyBwb3B0aW4ucG9wdGluX2Zvcm1hdF0udHlwZSA9PSBcInZlcnRpY2FsXCIgKSB7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLmlucHV0cy1jb250YWluZXIgaW5wdXQ6bm90KFt0eXBlPSdjaGVja2JveCddKVwiKS5jc3MoJ3dpZHRoJywnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3IgcmVhbGx5IG9sZCBwb3B0aW5zXG4gICAgICAgIGlmKCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2xpZ2h0Ym94JyB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2dhbWlmaWVkJyApIHtcbiAgICAgICAgICAgIHRoaXNfcG9wX3dpZHRoID0galEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpXCIpLmF0dHIoJ2RhdGEtd2lkdGgnKTtcbiAgICAgICAgICAgIGlmKCB0aGlzX3BvcF93aWR0aCA9PSB1bmRlZmluZWQgfHwgdGhpc19wb3Bfd2lkdGggPT0gJycgKSB7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3ApLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibGVmdFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjogKGpRMjI0KHdpbmRvdykuaGVpZ2h0KCkgLSA1MDApLzJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKS5jc3MoJ3dpZHRoJywgODAwKTtcbiAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuY3NzKCdoZWlnaHQnLCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmZpZWxkX2NoZWNrYm94X3JlcXVpcmVkID09ICdvbicpe1xuICAgICAgICAgICAgalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gaW5wdXRbbmFtZT1cInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3hcIl0nKS5wcm9wKCdyZXF1aXJlZCcsIHRydWUgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5maWVsZF9jaGVja2JveF9kZWZhdWx0X21hcmtlZCA9PSAnb24nKXtcbiAgICAgICAgICAgIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIGlucHV0W25hbWU9XCJwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZENoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIHRydWUgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsb3NlIHBvcHRpbiB3aGVuIGNsb3NlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICAgIGpRMjI0KCcucG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgdmFyIGNsb3NlQnRuQXR0ciA9IGpRMjI0KHRoaXMpLmRhdGEoKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRQb3B0aW5JZCA9IGpRMjI0KHRoaXMpLnBhcmVudHMoJy5wb3B0aW4tcG9wdXAnKS5hdHRyKCdkYXRhLXBvcHRpbi1pZCcpO1xuXG4gICAgICAgICAgICBpZighY2hlY2tQb3B0aW5DbG9zZUNyaXRlcmlhKHBhcmVudFBvcHRpbklkKSl7XG4gICAgICAgICAgICAgICAgc2V0Q2xvc2VQb3B0aW5PblhDb29raWUocGFyZW50UG9wdGluSWQpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmKGNsb3NlQnRuQXR0clsnY291bnRDb252ZXJzaW9uJ10gJiYgY2xvc2VCdG5BdHRyWydjb3VudENvbnZlcnNpb24nXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBidG5fY29udl90eXBlID0galEyMjQodGhpcykuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgICAgIGlmKGJ0bl9jb252X3R5cGUgPT09IFwicG9wdGluRm9ybUNsb3NlVGV4dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ0bl9jb252X3R5cGUgPSBcImNsb3NlX2J0blwiO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5Db252ZXJzaW9uKHBvcHRpbiwgbnVsbCwgYnRuX2NvbnZfdHlwZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWYoY2xvc2VCdG5BdHRyW1wibGlua1VybFwiXSAmJiBjbG9zZUJ0bkF0dHJbXCJsaW5rVXJsXCJdID09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHRpbiggcGFyZW50UG9wdGluSWQsIHRydWUgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY2xvc2VCdG5BdHRyW1wiYnRudXJsXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggIShjbG9zZUJ0bkF0dHJbXCJidG51cmxcIl0uaW5kZXhPZihcImh0dHA6Ly9cIikgIT0gLTEgfHwgY2xvc2VCdG5BdHRyW1wiYnRudXJsXCJdLmluZGV4T2YoXCJodHRwczovL1wiKSAhPSAtMSApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlQnRuQXR0cltcImJ0bnVybFwiXSA9IFwiLy9cIiArIGNsb3NlQnRuQXR0cltcImJ0bnVybFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhY2xvc2VCdG5BdHRyW1wiYnRudGFyZ2V0XCJdICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjbG9zZUJ0bkF0dHJbXCJidG51cmxcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihjbG9zZUJ0bkF0dHJbXCJidG51cmxcIl0sICdfYmxhbmsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGNsb3NlQnRuQXR0cltcImxhdW5jaFBvcHRpblwiXSAmJiBjbG9zZUJ0bkF0dHJbXCJsYXVuY2hQb3B0aW5cIl0gPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdGluKCBwYXJlbnRQb3B0aW5JZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B0aW5fcmVkaXJlY3QgPXt9O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fcmVkaXJlY3QucmVkaXJlY3RGcm9tQnRucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9yZWRpcmVjdC5wb3B0aW5fZnJvbSA9IHBhcmVudFBvcHRpbklkO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fcmVkaXJlY3QucG9wdGluX3RvID0gY2xvc2VCdG5BdHRyW1wibGF1bmNoUG9wdGluSWRcIl07XG4gICAgICAgICAgICAgICAgICAgIGlmKGNsb3NlQnRuQXR0cltcImxhdW5jaFBvcHRpbklkXCJdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG9Qb3B0aW4ocG9wdGluX3JlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHRpbiggcGFyZW50UG9wdGluSWQgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXHRcdGpRMjI0KCcucG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uJykub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oZSl7XG5cdFx0XHRpZiAoZS5rZXlDb2RlID09PSAzMiB8fCBlLmtleUNvZGUgPT09IDEzKSB7XG5cdFx0XHRcdGpRMjI0KGUudGFyZ2V0KS5jbGljaygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG4gICAgICAgIC8vIEFkZCBsZWZ0IGNzcyBwcm9wZXJ0eSB0byBvbGQgdGltZXIgcG9wdGluc1xuICAgICAgICB0aW1lcl9jb250YWluZXIgPSBqUTIyNCgnLnRpbWVyLWNvbnRhaW5lcicpO1xuICAgICAgICB0aW1lcl9jb250YWluZXIuY3NzKHsncG9zaXRpb24nOicnfSk7XG4gICAgICAgIGlmKHRpbWVyX2NvbnRhaW5lciAmJiB0aW1lcl9jb250YWluZXIuYXR0cignc3R5bGUnKSAmJiB0aW1lcl9jb250YWluZXIuYXR0cignc3R5bGUnKS5pbmRleE9mKCdsZWZ0JykgPT0gLTEpIHtcbiAgICAgICAgICAgIHBvaW50c19jb3VudCA9IDA7XG4gICAgICAgICAgICBqUTIyNCgnLnRpbWVyLXBvaW50cycpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZiggalEyMjQodGhpcykuaXMoJzp2aXNpYmxlJykgKXsgcG9pbnRzX2NvdW50KysgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lcl9sZWZ0ID0gJzI2MHB4JztcbiAgICAgICAgICAgIGlmKHBvaW50c19jb3VudCA+IDEpeyB0aW1lcl9sZWZ0ID0gJzExNHB4JyB9XG4gICAgICAgICAgICB0aW1lcl9jb250YWluZXIuY3NzKHsnbGVmdCc6IHRpbWVyX2xlZnR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoYW5nZSBwaG9uZSBpbnB1dCB0eXBlIGZyb20gJ3RleHQnIHRvICd0ZWwnIFxuICAgICAgICBzZXRUZWxGb3JNb2JpbGUocG9wdGluKTtcbiAgICAgICAgLy8gQ29weSBiYWNrZ3JvdW5kIHRvICcucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4nIGVsZW1lbnRcbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIgJiYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIiB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF85XCIpICl7XG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3RoYW5rX3lvdV9zY3JlZW5cIikucHJlcGVuZChqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjbGl0ZWJveEZvcm1hdDNDaXJjbGVcIikuY2xvbmUoIHRydWUgKSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdmFyIGRyYWdnYWJsZV9jb250YWluZXIgPSBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKTtcbiAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fdGhhbmtfeW91X3NjcmVlbjpub3QoJy5lZGl0ZWQnKVwiKS5jc3Moe1xuICAgICAgICAgICAgICAgICdoZWlnaHQnOmRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdoZWlnaHQnKSxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IGRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJyksXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6IGRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLXNpemUnKSxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6ZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtY29sb3InKSxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCc6IChkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpIT1cIm5vbmVcIj8gZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSA6ICcnKSsnICcrZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtY29sb3InKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuOm5vdCgnLmVkaXRlZCcpXCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2hlaWdodCcpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtc2l6ZScpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzpkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kJzogKGRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJykhPVwibm9uZVwiPyBkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpIDogJycpKycgJytkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fd2lubmluZ19zY3JlZW46bm90KCcuZWRpdGVkJylcIikuY3NzKHtcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzpkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnaGVpZ2h0JyksXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiBkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1zaXplJyksXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOmRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyksXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQnOiAoZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSE9XCJub25lXCI/IGRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJykgOiAnJykrJyAnK2RyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9sb3Npbmdfc2NyZWVuOm5vdCgnLmVkaXRlZCcpXCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2hlaWdodCcpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtc2l6ZScpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzpkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicpLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kJzogKGRyYWdnYWJsZV9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJykhPVwibm9uZVwiPyBkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpIDogJycpKycgJytkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRyYWdnYWJsZV9jb250YWluZXIuY3NzKHtcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCc6IChkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpIT1cIm5vbmVcIj8gZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSA6ICcnKSsnICcrZHJhZ2dhYmxlX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtY29sb3InKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBkcmFnZ2FibGVfY29udGFpbmVyLmF0dHIoJ2JhY2tncm91bmQnLCBkcmFnZ2FibGVfY29udGFpbmVyLmNzcygnYmFja2dyb3VuZCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpRMjI0KFwiLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24gKiwgLnBvcHRpbi1mb3JtLWNsb3NlLWJ1dHRvbiAqLCBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLm8tY2xvc2UsIFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuby1jbG9zZSAqXCIpLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKTtcbiAgICAgICAgLy8gQXBwZW5kIHNwZWNpYWwgc3R5bGUgZm9yIHBvcHRpbiBtb2JpbGUgdHlwZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIiAmJiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfMVwiIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzZcIilcbiAgICAgICAgKXtcbiAgICAgICAgICAgIHBvcHRpbl9zdHlsZSA9ICc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmZhLXBob25lLXNxdWFyZTpiZWZvcmV7Y29sb3I6JytqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZmEtcGhvbmUtc3F1YXJlXCIpLmNzcygnY29sb3InKSsnICFpbXBvcnRhbnR9PC9zdHlsZT4nO1xuICAgICAgICAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZChwb3B0aW5fc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmQW5kcm9pZFBvcHRpbktleWJvcmFkKHBvcHRpbixjbGljayk7XG5cbiAgICAgICAgLy8gaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcIm1vYmlsZVwiKXtcbiAgICAgICAgLy8gIC8vIHNob3dMb2coJ21vYmlsZScpO1xuICAgICAgICAvLyAgdmFyIGZpeGVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYmlsZUZvcm1hdDInKTtcblxuICAgICAgICAvLyAgZml4ZWQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyAgICAgICAgICAvLyBzaG93TG9nKGUudGFyZ2V0KTtcbiAgICAgICAgLy8gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyAgfSwgZmFsc2UpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZGlyZWN0aW9uID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fZW50cnlfZWZmZWN0LnNwbGl0KCctJylbMV07XG5cbiAgICAgICAgLy8gaWYgbm90IGNvbnRlbnQgbG9ja1xuICAgICAgICBpZiAoIXBhcnNlSW50KHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2NvbnRlbnRfbG9jaykpe1xuXG4gICAgICAgICAgICAvLyBJZiBwb3B0aW4gYXV0byBjbG9zZSBpcyBvblxuICAgICAgICAgICAgLy8gLT4gc2V0IHRpbWVvdXRcbiAgICAgICAgICAgIGlmIChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9hdXRvX2Nsb3NlICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnY2xvc2UgcG9wdGluIGF1dG8gYWZ0ZXIgJytwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9hdXRvX2Nsb3NlX3NlYysnIHNlY29uZHMnKTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJhdXRvX2Nsb3NlXCI7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdGluKHBvcHRpbi5wb3B0aW5faWQpO1xuICAgICAgICAgICAgICAgIH0sICBwYXJzZUludChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9hdXRvX2Nsb3NlX3NlYykqMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBwb3B0aW4gY2xvc2Ugb24gc2NyZWVuIGlzIG9uXG4gICAgICAgICAgICBpZiAocGFyc2VJbnQocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb25fc2NyZWVuX2NsaWNrKSl7XG4gICAgICAgICAgICAgICAgLy8gU2V0IG1vdXNlIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gU2V0IGZsYWdcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkub24oXCJtb3VzZWVudGVyXCIsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlcil7IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIgPSB7fSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hcmVhX2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9hcmVhX2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZWxlYXZlXCIsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlcil7IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIgPSB7fSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hcmVhX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fYXJlYV9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgY2xpY2sgZXZlbnQgb24gZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgalEyMjQod2luZG93KS5jbGljayhmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY2xpY2sgb24gc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWpRMjI0KGV2ZW50LnRhcmdldCkuY2xvc2VzdChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikubGVuZ3RoICYmICEoIWNsaWNrID8gcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fYXJlYV9mbGFnIDogcG9wdGluX2FyZWFfZmxhZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQodGhpc19wb3ApLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdjbG9zZSBwb3B0aW4gcG9wdGluX2Rlc2lnbl9jbG9zZV9vbl9zY3JlZW5fY2xpY2sxJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJiZ19jbGlja1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdGluKHBvcHRpbi5wb3B0aW5faWQsZmFsc2UsdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENsb3NlUG9wdGluT25YQ29va2llKHBvcHRpbi5wb3B0aW5faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2dF9wb3B0aW5faWQ9alEyMjQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcucG9wdGluLXBvcHVwJykuYXR0cignZGF0YS1wb3B0aW4taWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighalEyMjQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5sZW5ndGggJiYgKGV2dF9wb3B0aW5faWQ9PXBvcHRpbi5wb3B0aW5faWQgfHwgdHlwZW9mIGV2dF9wb3B0aW5faWQ9PSd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIChjbGljayA9PSB1bmRlZmluZWQgPyAhcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYXJlYV9mbGFnIDogIXBvcHRpbl9hcmVhX2ZsYWcgKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdjbG9zZSBwb3B0aW4nK3BvcHRpbi5wb3B0aW5faWQrJyBwb3B0aW5fZGVzaWduX2Nsb3NlX29uX3NjcmVlbl9jbGljazInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLmNsb3NlX3RyaWdnZXIgPSBcImJnX2NsaWNrXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW4ocG9wdGluLnBvcHRpbl9pZCxmYWxzZSx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2xvc2VQb3B0aW5PblhDb29raWUocG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IHBvcHRpbiBjbG9zZSBvcHRpb24gXG4gICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb3B0aW9uc190eXBlICE9IFwiY2xvc2luZ19vcHRpb25zLVwiKXtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb3B0aW9uc190eXBlID09IFwiY2xvc2luZ19vcHRpb25zLXhcIil7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNjbG9zZVNraXBCdXR0b25cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBwb3B0aW4ucG9wdGluX3R5cGUgaW4gZnJfdGVtcGxhdGVzICYmIGZyX3RlbXBsYXRlc1twb3B0aW4ucG9wdGluX3R5cGVdID49IHBhcnNlSW50KHBvcHRpbi5wb3B0aW5fZm9ybWF0LnNwbGl0KCdfJylbMV0pICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9wbGF5X3NjcmVlbiwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3dpbm5pbmdfc2NyZWVuLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fbG9zaW5nX3NjcmVlblwiKS5wcmVwZW5kKGh0bWxfcG9wdGluX3hfYnV0dG9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gI2Nsb3NlWEJ1dHRvbicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW5PblhjbGljayhqUTIyNCh0aGlzKS5nZXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3Nob3dfeF9jb21tZW50ICE9IG51bGwgJiYgIWlmTW9iaWxlUG9wdGluKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ3Nob3cgcG9wdGluIHggY29tbWVudDogJytwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fc2hvd194X2NvbW1lbnQubGVuZ3RoID49MSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikucHJlcGVuZChodG1sX2J1dHRvbl9ub3RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbm90ZSA9IGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5jbG9zZS1idXR0b24tbm90ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbm90ZS50ZXh0KHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3Nob3dfeF9jb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9sb2NhdGlvbi5pbmRleE9mKCdyaWdodCcpID4gLTEgfHwgcG9wdGluLnBvcHRpbl90eXBlPT0nYmFyJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5jbG9zZS1idXR0b24tbm90ZVwiKS5jc3MoJ3JpZ2h0JywnMHB4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24uaW5kZXhPZigndG9wJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5jbG9zZS1idXR0b24tbm90ZVwiKS5jc3MoJ3RvcCcsJzBweCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWFyZ2luID0gcGFyc2VJbnQoJG5vdGUuY3NzKCd0b3AnKSkqKC0xKSA+PSAkbm90ZS5oZWlnaHQoKSA/ICRub3RlLmNzcygndG9wJykgOiAnLScrKCRub3RlLmhlaWdodCgpKyhwYXJzZUludCgkbm90ZS5jc3MoJ3RvcCcpKSooLTEpKS8xLjUpKydweCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRub3RlLmNzcygndG9wJywkbWFyZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJyRtYXJnaW4nLCAkbWFyZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRub3RlLmNzcygndG9wJywnLTY1cHgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ2xvc2VCdXR0b25Ob3RlKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb3B0aW9uc190eXBlID09IFwiY2xvc2luZ19vcHRpb25zLWJ1dHRvblwiKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI2Nsb3NlWEJ1dHRvblwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHBvcHRpbi5wb3B0aW5fdHlwZSBpbiBmcl90ZW1wbGF0ZXMgJiYgZnJfdGVtcGxhdGVzW3BvcHRpbi5wb3B0aW5fdHlwZV0gPj0gcGFyc2VJbnQocG9wdGluLnBvcHRpbl9mb3JtYXQuc3BsaXQoJ18nKVsxXSkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9wbGF5X3NjcmVlbiwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3dpbm5pbmdfc2NyZWVuLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fbG9zaW5nX3NjcmVlblwiKS5wcmVwZW5kKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImNsb3NlWEJ1dHRvblwiIG9uY2xpY2s9XCJjbG9zZVBvcHRpbk9uWGNsaWNrKHRoaXMpO1wiIGNsYXNzPVwiY2xvc2UteC1idXR0b25cIiAgc3R5bGU9XCJ3aWR0aDogaW5pdGlhbDt0ZXh0LWFsaWduOiByaWdodDtkaXNwbGF5Om5vbmU7IG1hcmdpbi10b3A6IC0ycHg7LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO3BhZGRpbmc6IDVweDtjdXJzb3I6IHBvaW50ZXI7YmFja2dyb3VuZDogMCAwO2JvcmRlcjogMDtmbG9hdDogcmlnaHQ7Zm9udC1zaXplOiAyNXB4O2xpbmUtaGVpZ2h0OiAwLjU7Y29sb3I6ICMwMDA7dGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZjtmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MjApO29wYWNpdHk6IDAuNzt0ZXh0LXRyYW5zZm9ybTogbm9uZTtvdmVyZmxvdzogdmlzaWJsZTtmb250LWZhbWlseTogaW5oZXJpdDttYXJnaW46IDA7Zm9udDogaW5oZXJpdDthbGlnbi1pdGVtczogZmxleC1zdGFydDt0ZXh0LWFsaWduOiBjZW50ZXI7dGV4dC1pbmRlbnQ6IDBweDtsZXR0ZXItc3BhY2luZzogbm9ybWFsO3dvcmQtc3BhY2luZzogbm9ybWFsO3RleHQtcmVuZGVyaW5nOiBhdXRvO3dlYmtpdC13cml0aW5nLW1vZGU6IGhvcml6b250YWwtdGI7Zm9udC13ZWlnaHQ6Ym9sZDt6LWluZGV4OiA5OTk5O3Bvc2l0aW9uOiByZWxhdGl2ZTtcIj4nKyhwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudCB8fCAodXNlcl9sYW5nPT1cImVuXCI/c2tpcF9lbjpza2lwX2hlKSkrJzwvYnV0dG9uPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikucHJlcGVuZChodG1sX3BvcHRpbl9za2lwX2J1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdGluT25YY2xpY2soalEyMjQodGhpcykuZ2V0KDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHNob3cgJ3gnIGJ1dHRvbiBhZnRlciAncycgc2Vjb25kIFxuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfYWZ0ZXJfc2VjICE9IG51bGwgJiYgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fc2hvd194X2FmdGVyX3NlYyAhPSAwKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZSA9PSBcImNsb3Npbmdfb3B0aW9ucy1idXR0b25cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuY2xvc2UteC1idXR0b246bm90KCNjbG9zZVNraXBCdXR0b24pXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5za2lwX2J1dHRvbl9zZWNfY291bnRlciA9ICBwYXJzZUludChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfYWZ0ZXJfc2VjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdF9jbG9zZV9idXR0b24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHVzZXJfbGFuZz09XCJlblwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdF9jbG9zZV9idXR0b24gPSAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fc2hvd194X2NvbW1lbnQgfHwgKHVzZXJfbGFuZz09XCJlblwiP3NraXBfZW46c2tpcF9oZSkpKycgKCcrcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5za2lwX2J1dHRvbl9zZWNfY291bnRlcisnKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY2xvc2VfYnV0dG9uID0gJygnK3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2tpcF9idXR0b25fc2VjX2NvdW50ZXIrJykgJysocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fc2hvd194X2NvbW1lbnQgfHwgKHVzZXJfbGFuZz09XCJlblwiP3NraXBfZW46c2tpcF9oZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKS5wcmVwZW5kKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImNsb3NlWEJ1dHRvblwiIG9uY2xpY2s9XCJjbG9zZVBvcHRpbk9uWGNsaWNrKHRoaXMpO1wiIGNsYXNzPVwiY2xvc2UteC1idXR0b25cIiAgc3R5bGU9XCJ3aWR0aDogaW5pdGlhbDt0ZXh0LWFsaWduOiByaWdodDtkaXNwbGF5Om5vbmU7IG1hcmdpbi10b3A6IC0ycHg7LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO3BhZGRpbmc6IDVweDtjdXJzb3I6IHBvaW50ZXI7YmFja2dyb3VuZDogMCAwO2JvcmRlcjogMDtmbG9hdDogcmlnaHQ7Zm9udC1zaXplOiAyNXB4O2xpbmUtaGVpZ2h0OiAwLjU7Y29sb3I6ICMwMDA7dGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZjtmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MjApO29wYWNpdHk6IDAuNzt0ZXh0LXRyYW5zZm9ybTogbm9uZTtvdmVyZmxvdzogdmlzaWJsZTtmb250LWZhbWlseTogaW5oZXJpdDttYXJnaW46IDA7Zm9udDogaW5oZXJpdDthbGlnbi1pdGVtczogZmxleC1zdGFydDt0ZXh0LWFsaWduOiBjZW50ZXI7dGV4dC1pbmRlbnQ6IDBweDtsZXR0ZXItc3BhY2luZzogbm9ybWFsO3dvcmQtc3BhY2luZzogbm9ybWFsO3RleHQtcmVuZGVyaW5nOiBhdXRvO3dlYmtpdC13cml0aW5nLW1vZGU6IGhvcml6b250YWwtdGI7Zm9udC13ZWlnaHQ6Ym9sZDt6LWluZGV4OiA5OTk5O3Bvc2l0aW9uOiByZWxhdGl2ZTtcIj4nK2ZpcnN0X2Nsb3NlX2J1dHRvbisnPC9idXR0b24+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuY2xvc2UteC1idXR0b25cIikuY3NzKHtcImRpc3BsYXlcIjpcImJsb2NrXCIsXCJvcGFjaXR5XCI6XCIwLjVcIixcImN1cnNvclwiOlwibm90LWFsbG93ZWRcIn0pLnByb3AoJ2Rpc2FibGVkJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnNraXBfYnV0dG9uX3NlY19jb3VudGVyID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZV90ZXh0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZSA9PSAnY2xvc2luZ19vcHRpb25zLXgnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX3RleHQgPSAnJnRpbWVzOyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9jbG9zZV9vcHRpb25zX3R5cGUgPT0gJ2Nsb3Npbmdfb3B0aW9ucy1idXR0b24nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX3RleHQgPSB1c2VyX2xhbmc9PVwiZW5cIj9za2lwX2VuOnNraXBfaGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmNsb3NlLXgtYnV0dG9uXCIpLmh0bWwoY2xvc2VfdGV4dCkuY3NzKHtcIm9wYWNpdHlcIjpcIjFcIixcImN1cnNvclwiOlwicG9pbnRlclwifSkucHJvcCgnZGlzYWJsZWQnLGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnNraXBfYnV0dG9uX3NlY19jb3VudGVyLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgJ2NvdW50ZXInIHdoZXJldmVyIHlvdSB3YW50IHRvIGRpc3BsYXkgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZV90aW1lcl90ZXh0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHVzZXJfbGFuZz09XCJlblwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX3RpbWVyX3RleHQgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudCArICcgKCcrcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5za2lwX2J1dHRvbl9zZWNfY291bnRlcisnKSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZV90aW1lcl90ZXh0ID0gJygnK3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuc2tpcF9idXR0b25fc2VjX2NvdW50ZXIrJykgJytwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuY2xvc2UteC1idXR0b25cIikuaHRtbChjbG9zZV90aW1lcl90ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJkYXRhLXBvcHRpbi10eXBlXCIpID09IFwiYnJvd3NpbmdcIiAmJiBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwiZGF0YS1wb3B0aW4tbG9jYXRpb25cIikgPT0gXCJyaWdodC10b3BcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmNsb3NlLXgtYnV0dG9uXCIpLmNzcygncGFkZGluZycsICc1cHggNXB4IDVweCAyMHB4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI2Nsb3NlU2tpcEJ1dHRvblwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVzZV94ID0galEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5jbG9zZS14LWJ1dHRvbiwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSA+IC5jbG9zZS14LWJ1dHRvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBHZXRJRVZlcnNpb24oKSA9PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXNlX3guaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdzaG93IHBvcHRpbiB4IGJ1dHRvbiBhZnRlciAnK3BvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3Nob3dfeF9hZnRlcl9zZWMrJyBzZWNvbmRzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2VfeC5zaG93KDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXJzZUludChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfYWZ0ZXJfc2VjKSoxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvLyBKdXN0IHNob3cgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5jbG9zZS14LWJ1dHRvblwiKS5zaG93KDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuY2xvc2UteC1idXR0b25cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUG9wdGluIHNob3cgYW5pbWF0aW9uIHNwZWVkXG4gICAgICAgIHBvcHRpbl9hbmltYXRpb25fc3BlZWQgPSAzMDA7XG5cbiAgICAgICAgLy8gU2V0IGdsb2JhbCBwb3B0aW4gY29udGFpbmVyXG4gICAgICAgIHZhciBfdGhpcyA9IGpRMjI0KHRoaXNfcG9wKTtcblxuICAgICAgICAvLyBTZXQgZGVmYXVsdCBwb3B0aW4gcG9zdGlvbiBpbiB0aGUgc2NyZWVuXG4gICAgICAgIC8vIERlcGVuZCBvbiBwb3B0aW5fdHlwZSBhbmQgcG9wdGluX2Zvcm1hdCBcblxuICAgICAgICAvLyBWaWRlbyBmb3IgYWxsIHBvcHRpbnNcbiAgICAgICAgaWYoX3RoaXMuZmluZCgnLmZyb2FsYS1lZGl0b3ItdmlkZW8nKS5sZW5ndGggfHwgX3RoaXMuZmluZCgnLmRyYWdnYWJsZS5pbWFnZS1jaGFuZ2UtdmlkZW8nKS5sZW5ndGgpe1xuICAgICAgICAgICAgdmFyIG11dGVfdmlkZW8gPSAnJztcbiAgICAgICAgICAgIHZhciBpc19hdXRvcGxheSA9IF90aGlzLmRhdGEoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgICBpZighaXNGaXJlZm94UG9wdGluICYmIChpc19hdXRvcGxheSA9PSBcInRydWVcIiB8fCBpc19hdXRvcGxheSA9PSB0cnVlKSl7bXV0ZV92aWRlbyA9ICcmbXV0ZT0xJzt9XG4gICAgICAgICAgICBfdGhpcy5maW5kKCcjcG9wdGluJytfdGhpcy5kYXRhKCdzb3VyY2UnKSkuYXR0cignc3JjJyxfdGhpcy5kYXRhKCd1cmwnKSttdXRlX3ZpZGVvKS5wYXJlbnQoKS5jc3MoJ2Rpc3BsYXknLCdibG9jaycpO1xuICAgICAgICAgICAgX3RoaXMuZmluZCgnLmRyYWdnYWJsZS5pbWFnZS1jaGFuZ2UtdmlkZW8nKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIF90aGlzLmZpbmQoJy5mcm9hbGEtdmlkZW8td3JhcHBlcicpLmNzcygnZGlzcGxheScsJ25vbmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBfdGhpcy5maW5kKCcuZnItc2hvcGlmeS1wcm9kdWN0cycpLmxlbmd0aCA+IDAgJiYgX3RoaXMuZmluZCgnI3Nob3BpZnlQcm9kdWN0c0pTT04nKS5sZW5ndGggPiAwICl7XG4gICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCsnIC5mci1zaG9waWZ5LXByb2R1Y3RzIC5mci1zaG9waWZ5LWl0ZW0nKS5jc3Moe1xuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6J3JlbGF0aXZlJywnei1pbmRleCc6MlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibGlnaHRib3hcIil7XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfM1wiIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzlcIil7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpXCIpLmNzcyh7XCJib3gtc2hhZG93XCI6XCJub25lXCJ9KTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIF90aGlzLmNzcyh7XCJ0b3BcIjogcG9wdGluX3Bvc2l0aW9uX2NlbnRlcl91cCtcInB4XCIsJ21hcmdpbic6JzAgYXV0byd9KTtcbiAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJhclwiKXtcbiAgICAgICAgICAgIHN3aXRjaChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2xvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNlbnRlci10b3BcIjpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcInRvcFwiOlwiMHB4XCIsXCJib3R0b21cIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7XCJ0b3BcIjogXCJcIixcImJvdHRvbVwiOlwiMHB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzc2lkZVwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcInNvY2lhbFwiKXtcbiAgICAgICAgICAgIHN3aXRjaChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2xvY2F0aW9uKXtcbiAgICAgICAgICAgICAgICBjYXNlIFwibGVmdC10b3BcIjpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6JzBweCcsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4JyxcInRvcFwiOlwiMHB4XCIsXCJib3R0b21cIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsZWZ0LW1pZGxsZVwiOlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzonMHB4JywncmlnaHQnOicnLCdtYXJnaW4nOicwcHgnLFwidG9wXCI6ICh3aW5kb3cuaW5uZXJIZWlnaHQtcG9wdGluX2hlaWdodCkvMitcInB4XCIsXCJib3R0b21cIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsZWZ0LWJvdHRvbVwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBfdGhpcy5jc3MoeydsZWZ0JzonMHB4JywncmlnaHQnOicnLCdtYXJnaW4nOicwcHgnLFwidG9wXCI6ICh3aW5kb3cuaW5uZXJIZWlnaHQtcG9wdGluX2hlaWdodCAtICgocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcInNvY2lhbF9mb3JtYXRfMlwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJzb2NpYWxfZm9ybWF0XzZcIik/NDA6MCkpICtcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6JzBweCcsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4JyxcImJvdHRvbVwiOlwiMHB4XCIsXCJ0b3BcIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjZW50ZXItdG9wXCI6XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOih3aW5kb3cuaW5uZXJXaWR0aC1wb3B0aW5fd2lkdGgpLzIsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4JyxcInRvcFwiOlwiMHB4XCIsXCJib3R0b21cIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjZW50ZXItbWlkbGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOih3aW5kb3cuaW5uZXJXaWR0aC1wb3B0aW5fd2lkdGgpLzIsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4JyxcInRvcFwiOiAod2luZG93LmlubmVySGVpZ2h0LXBvcHRpbl9oZWlnaHQpLzIrXCJweFwiLFwiYm90dG9tXCI6XCJcIn0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyLWJvdHRvbVwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBfdGhpcy5jc3MoeydsZWZ0Jzood2luZG93LmlubmVyV2lkdGgtcG9wdGluX3dpZHRoKS8yLCdyaWdodCc6JycsJ21hcmdpbic6JzBweCcsXCJ0b3BcIjogKHdpbmRvdy5pbm5lckhlaWdodC1wb3B0aW5faGVpZ2h0IC0gKChwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwic29jaWFsX2Zvcm1hdF8yXCIgfHwgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcInNvY2lhbF9mb3JtYXRfNlwiKT80MDowKSkrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOih3aW5kb3cuaW5uZXJXaWR0aC1wb3B0aW5fd2lkdGgpLzIsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4JyxcImJvdHRvbVwiOlwiMHB4XCIsXCJ0b3BcIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodC10b3BcIjpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6JycsJ3JpZ2h0JzonMHB4JywnbWFyZ2luJzonMHB4JyxcInRvcFwiOlwiMHB4XCIsXCJib3R0b21cIjpcIlwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodC1taWRsbGVcIjpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6JycsJ3JpZ2h0JzonMHB4JywnbWFyZ2luJzonMHB4JyxcInRvcFwiOiAod2luZG93LmlubmVySGVpZ2h0LXBvcHRpbl9oZWlnaHQpLzIrXCJweFwiLFwiYm90dG9tXCI6XCJcIn0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicmlnaHQtYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOicnLCdyaWdodCc6JzBweCcsXCJib3R0b21cIjpcIjBweFwiLFwidG9wXCI6XCJcIn0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcInNvY2lhbFwiKXtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfMVwiIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzVcIiApXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5jbG9zZS14LWJ1dHRvbicpLmNzcyh7J3Bvc2l0aW9uJzonYWJzb2x1dGUnLCd0b3AnOicwcHgnLCdyaWdodCc6JzBweCcsJ3otaW5kZXgnOicxJywnbGluZS1oZWlnaHQnOicyNnB4J30pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIiB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF83XCIpe1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3Moe1wiYm94LXNoYWRvd1wiOlwibm9uZSAhaW1wb3J0YW50XCIsXCJvcGFjaXR5XCI6XCIwXCIsXCJ2aXNhYmlsaXR5XCI6XCJoaWRkZW5cIn0pO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5maW5kKCdpbWcnKS5maXJzdCgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJzaWRlXCIpe1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24hPT1cImxlZnRcIilcbiAgICAgICAgICAgICAgICBfdGhpcy5jc3Moe1wibGVmdFwiOlwiXCIsXCJ0b3BcIjpcIlwiLFwicmlnaHRcIjpcIjBweFwiLCdib3R0b20nOicwcHgnfSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcInJpZ2h0XCI6XCJcIixcInRvcFwiOlwiXCIsXCJsZWZ0XCI6XCIwcHhcIiwnYm90dG9tJzonMHB4J30pO1xuICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiYnJvd3NpbmdcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJmdWxscGFnZVwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcIm1vYmlsZVwiKXtcbiAgICAgICAgICAgIF90aGlzLmNzcyh7XCJib3R0b21cIjpcIlwiLFwicmlnaHRcIjpcIlwifSk7XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfOFwiKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpXCIpLmNzcyh7XCJib3gtc2hhZG93XCI6XCJub25lXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcImJvdHRvbVwiOlwiMHB4XCIsXCJyaWdodFwiOlwiMHB4XCJ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZnVsbHBhZ2VcIil7XG4gICAgICAgICAgICAgICAgaWYgKGlmU2Nyb2xsVmlzaWJsZSgpKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpIC5jbG9zZS14LWJ1dHRvblwiKS5jc3MoeydwYWRkaW5nLXJpZ2h0JzonMjVweCd9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIiB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF83XCIpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLnBvcHRpbi1wb3B1cCA+IGRpdlwiKS5jc3MoeydiYWNrZ3JvdW5kLWltYWdlJzonJ30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJicm93c2luZ1wiKXtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCArIFwiLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmNsb3NlLXgtYnV0dG9uXCIpLmNzcyh7J3BhZGRpbmctcmlnaHQnOicxNXB4J30pO1xuICAgICAgICAgICAgICAgIGlmIChqUTIyNCh0aGlzX3BvcCkuaGFzQ2xhc3MoJ29sZC1wb3B1cCcpICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb249PVwicmlnaHQtdG9wXCIpe1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzonJywncmlnaHQnOicwcHgnLCctbW96LXRyYW5zZm9ybSc6ICdzY2FsZVgoLTEpJywnLW8tdHJhbnNmb3JtJzogJ3NjYWxlWCgtMSknLCctd2Via2l0LXRyYW5zZm9ybSc6J3NjYWxlWCgtMSknLCd0cmFuc2Zvcm0nOidzY2FsZVgoLTEpJywnZmlsdGVyJzogJ0ZsaXBIJywnLW1zLWZpbHRlcic6IFwiRmxpcEhcIn0pO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5maW5kKCdwJykuY3NzKHsnLW1vei10cmFuc2Zvcm0nOiAnc2NhbGVYKC0xKScsJy1vLXRyYW5zZm9ybSc6ICdzY2FsZVgoLTEpJywnLXdlYmtpdC10cmFuc2Zvcm0nOidzY2FsZVgoLTEpJywndHJhbnNmb3JtJzonc2NhbGVYKC0xKScsJ2ZpbHRlcic6ICdGbGlwSCcsJy1tcy1maWx0ZXInOiBcIkZsaXBIXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmluZCgnLnBvcHRpbi1jcmVkaXQnKS5jc3MoJ3RyYW5zZm9ybScsJ3NjYWxlWCgtMSknKTtcbiAgICAgICAgICAgICAgICAgICAgfSwzMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIil7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24pe1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyLXRvcFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcInRvcFwiOiAwK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjZW50ZXItbWlkbGxlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3Moe1widG9wXCI6ICh3aW5kb3cuaW5uZXJIZWlnaHQtcG9wdGluX2hlaWdodCkvMitcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyLWJvdHRvbVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcInRvcFwiOiAod2luZG93LmlubmVySGVpZ2h0LXBvcHRpbl9oZWlnaHQpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcInRvcFwiOlwiMHB4XCJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzFcIiApe1xuICAgICAgICAgICAgICAgLy8galEyMjQodGhpc19wb3AgKyBcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpLmNzcyh7XCJib3gtc2hhZG93XCI6XCJub25lXCJ9KTtcblxuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXNfcG9wKycgLmZyLWdpZnRib3gtaW1hZ2VzIC5mci1naWZ0Ym94JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcic6ICdwb2ludGVyJywncG9zaXRpb24nOidyZWxhdGl2ZScsJ3otaW5kZXgnOjJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCsnIC5mci1naWZ0Ym94LWltYWdlcyAuZnItZ2lmdGJveCBpbWcuZ2lmdGJveC1pbWcnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJzogJ3BvaW50ZXInXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBfdGhpcy5jc3Moe1widG9wXCI6IHBvcHRpbl9wb3NpdGlvbl9jZW50ZXJfdXArXCJweFwiLCdtYXJnaW4nOicwIGF1dG8nfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggalEyMjQodGhpc19wb3ArJyAuZnItc2hvcGlmeS1wcm9kdWN0cycpICYmIGpRMjI0KHRoaXNfcG9wKycgLmZyLXNob3BpZnktcHJvZHVjdHMnKS5sZW5ndGggPiAwICl7XG4gICAgICAgICAgICBpZigod2luZG93LlNob3BpZnkgIT09IHVuZGVmaW5lZCAmJiB3aW5kb3cuU2hvcGlmeS5zaG9wKSB8fCAodHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UhPSd1bmRlZmluZWQnICYmIHBvcHRpbl9sYW5kaW5nX3BhZ2UgPT0gdHJ1ZSkpe1xuICAgICAgICAgICAgICAgIC8vIHdhaXQgdW50aWwgYWpheCBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICBzaG93TG9nKCdwcm9jZXNzIHNob3BpZnkgYWpheCcpO1xuICAgICAgICAgICAgICAgIHNldFNob3BpZnlSZWNlbnRseVZpZXdlZFByb2R1Y3QoKTtcbiAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdFJlY29tbWVuZGF0aW9ucyhwb3B0aW4pO1xuICAgICAgICAgICAgICAgIGdldFNob3BpZnlSZWNvbW1lbmRlZFByb2R1Y3RzKHBvcHRpbikudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZGlzcGxheSA9PSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3Nob3cgcG9wdXAgaWYgcHJvZHVjdHMgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UG9wdGluSG9vaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIHdoaWxlIHByb2Nlc3Npbmcgc2hvcGlmeSBhamF4OiBcIixlcnIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgc2hvd1BvcHRpbkhvb2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dQb3B0aW5Ib29rKCl7XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZnVsbHBhZ2VcIil7XG4gICAgICAgICAgICAgICAgLy8gRGlzcGxheSBwb3B0aW5cbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzX3BvcCkuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICAgICAgICAgc2hvd1BvcHRpbihwb3B0aW4sIGNsaWNrLDEpO1xuICAgICAgICAgICAgICAgIC8vIFNldCBBY2Nlc3NpYmlsaXR5XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBzZXRBY2Nlc3NpYmlsaXR5KHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzaXplX2RlbGF5ID0gMTAwO1xuICAgICAgICAgICAgLy8gZ2VuZXJhdG9yID0galEyMjQoJ21ldGFbbmFtZT1nZW5lcmF0b3JdJykuYXR0cihcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAvLyBpZiggZ2VuZXJhdG9yICYmIGdlbmVyYXRvci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ3aXhcIikgPj0gMCApIHtcbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJmdWxscGFnZVwiKXtcbiAgICAgICAgICAgICAgICByZXNpemVfZGVsYXkgPSAzNTA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoYW5nZSBwb3B0aW4gcG9zdGlvbiBhbmQgc2l6ZSBkZXBlbmQgb24gc2NyZWVuIHNpemVcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgd2luZG93UmVzaXplKHBvcHRpbiwgY2xpY2spO1xuICAgICAgICAgICAgICAgIGRvUmVzaXplUG9wdGluKHBvcHRpbiwgY2xpY2spO1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJmdWxscGFnZVwiKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSBwb3B0aW5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BvcHRpbihwb3B0aW4sIGNsaWNrLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIFNldCBBY2Nlc3NpYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWNjZXNzaWJpbGl0eShwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LHJlc2l6ZV9kZWxheSk7XG4gICAgICAgICAgICAvLyBSZXNldCByZWxldmF0IGNvb2tpZXMgdG8gZGVmYXVsdCB2YWx1ZVxuICAgICAgICAgICAgcmVzZXRSZWxldmVudENvb2tpZShwb3B0aW4pO1xuICAgICAgICB9IC8vIHNob3dQb3B0aW5Ib29rXG5cbiAgICAgICAgLy8gZGlzYWJsZSBzY3JvbGwgc28gdG91Y2ggZXZlbnQgY2FuIHdvcmsgZm9yIG1vYmlsZSAtIHNjcmF0Y2ggcG9wdXBcbiAgICAgICAgaWYgKGlmTW9iaWxlUG9wdGluICYmIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJnYW1pZmllZF9mb3JtYXRfMlwiKSB7XG4gICAgICAgICAgICBpZiAoalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNwb3B0aW5EcmFnZ2FibGVDb250YWluZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyBzdG9yZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBzY3JhdGNoUG9wdXBJbml0aWFsU2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgICAgICAgICBzY3JhdGNoUG9wdXBBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGpRMjI0KCdodG1sLCBib2R5JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwdmgnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImdhbWlmaWVkX2Zvcm1hdF8yXCIpIHtcbiAgICAgICAgICAgIGlmIChqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lcicpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSAjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyIC5wb3B0aW4tY291cG9uYmctd3JhcHBlcicpLmNzcyh7IHBvc2l0aW9uOiAnYWJzb2x1dGUnIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlmVXNlcmxhbmdJc0hlKCl7XG4gICAgICAgIHJldHVybiB1c2VyX2xhbmc9PVwiaGVcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogUG9wdGluOlBvcHRpbiBPYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogc2V0IFBob25lIGlucHV0IHRvICd0ZWwnIGZvciBtb2JpbGUgdXNlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRlbEZvck1vYmlsZShwb3B0aW4pe1xuICAgICAgICBpZiAoaWZNb2JpbGVQb3B0aW4pe1xuICAgICAgICAgICAgc2hvd0xvZygnc2V0VGVsRm9yTW9iaWxlJyk7XG4gICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkUGhvbmVcIikuYXR0cigndHlwZScsJ3RlbCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBQb3B0aW46UG9wdGluIE9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBzZXQgQWNjZXNzaWJpbGl0eSB0YWJpbmRleCBhbmQgYWx0LCB0aXRsZSBmb3IgdGhlIGNsb3NlICd4JyBidXR0b25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBY2Nlc3NpYmlsaXR5KHBvcHRpbil7XG5cblx0XHRqUTIyNCgnLnBvcHRpbi1wb3B1cCBbcm9sZT1cImFwcGxpY2F0aW9uXCJdJykucmVtb3ZlQXR0cihcInJvbGVcIik7XG5cdFx0alEyMjQoJy5wb3B0aW4tcG9wdXAnKS5hdHRyKFwicm9sZVwiLCBcImFwcGxpY2F0aW9uXCIpO1xuXHRcdGpRMjI0KCcucG9wdGluLXBvcHVwIGZvcm0nKS5hdHRyKFwicm9sZVwiLCBcImZvcm1cIik7XG5cbiAgICAgICAgdmFyIGNvdW50ZXIgPSAxO1xuXHRcdHNob3dQb3B0aW5Db3VudCsrOyAvLyBUbyBtYWtlIHN1cmUgdGhhdCB0d28gcG9wdGlucyBkb250IGhhdmUgbmVhcmJ5IHRhYmluZGV4XG5cdFx0dmFyIHRhYkNvdW50ID0gNTAwICsgKCBzaG93UG9wdGluQ291bnQgKiAxMDAgKTsgLy8gV2Ugc3RhcnQgd2l0aCB2ZXJ5IGhpZ2ggaW5kZXggc28gaXQgd29udCBjbGFzaCB3aXRoIHdlYnNpdGUncyBjb250ZW50XG5cblx0XHQvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHB1bGwgdGFiaW5kZXggZnJvbSBwb3B0aW4gb3IgYWRkIHRoZW0gYXV0b21hdGljYWxseVxuXHRcdHZhciB0aGlzX3BvcCA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKTtcblx0XHR2YXIgaGFzVGFiSW5kZXggPSB0aGlzX3BvcC5hdHRyKFwiZGF0YS1oYXMtdGFiaW5kZXhcIikgPT0gMTtcblx0XHR2YXIgbG93ZXN0X3RhYmluZGV4ID0gaGFzVGFiSW5kZXggPyB0YWJDb3VudCArIHBhcnNlSW50KHRoaXNfcG9wLmF0dHIoXCJkYXRhLWxvd2VzdC10YWJpbmRleFwiKSkgOiB0YWJDb3VudDtcblxuXHRcdGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSA+ICpcIikuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0Ly8gUGxhY2Vob2xkZXIgYW5kIGxvd2VzdCB0YWJpbmRleCBmb3IgaW5wdXRzXG5cdFx0XHRqUTIyNCh0aGlzKS5maW5kKFwiLmlucHV0cy1jb250YWluZXIgaW5wdXQsIC5pbnB1dHMtY29udGFpbmVyIHNlbGVjdCwgLmlucHV0cy1jb250YWluZXIgdGV4dGFyZWFcIikuZWFjaChmdW5jdGlvbihlKXtcblx0XHRcdFx0dmFyIHBsYWNlaG9sZGVyX3RleHQgPSBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLXBsYWNlaG9sZGVyJyk7XG5cdFx0XHRcdGlmKCFwbGFjZWhvbGRlcl90ZXh0KSB7XG5cdFx0XHRcdFx0cGxhY2Vob2xkZXJfdGV4dCA9IGpRMjI0KHRoaXMpLmF0dHIoJ3BsYWNlaG9sZGVyJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoalEyMjQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoXCJmaWVsZC1jb25zZW50LWNoZWNrYm94XCIpKXtcblx0XHRcdFx0XHRwbGFjZWhvbGRlcl90ZXh0ID0gaWZVc2VybGFuZ0lzSGUoKSA/IFwi16Yn16fXkdeV16fXoSDXnNeT15nXldeV16hcIiA6IFwiQ29uc2VudCBDaGVja2JveFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKCBwbGFjZWhvbGRlcl90ZXh0ICE9IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR2YXIgaXNfcnRsID0gdHJ1ZTtcblx0XHRcdFx0XHR2YXIgaW5wdXRfZGlyID0galEyMjQodGhpcykuY3NzKCdkaXJlY3Rpb24nKTtcblx0XHRcdFx0XHRpZihpbnB1dF9kaXIgIT0gdW5kZWZpbmVkICYmIGlucHV0X2RpciA9PSBcImx0clwiKXtcblx0XHRcdFx0XHRcdGlzX3J0bCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiggcGxhY2Vob2xkZXJfdGV4dC5pbmRleE9mKCcqJykgPT0gLTEgJiYgalEyMjQodGhpcykucHJvcCgncmVxdWlyZWQnKSApIHtcdFxuXHRcdFx0XHRcdFx0aWYoaWZVc2VybGFuZ0lzSGUoKSAmJiBpc19ydGwpe1xuXHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcl90ZXh0ID0gJyonICsgcGxhY2Vob2xkZXJfdGV4dDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyX3RleHQgPSBwbGFjZWhvbGRlcl90ZXh0ICsgJyonO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0alEyMjQodGhpcykuYXR0cih7XG5cdFx0XHRcdFx0XHRcdCdhcmlhLXJlcXVpcmVkJzp0cnVlLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0aGlzVGFiSW5kZXggPSBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLXRhYmluZGV4Jyk7XG5cdFx0XHRcdFx0dmFyIG5ld1RhYkluZGV4ID0gaGFzVGFiSW5kZXggPyAodGhpc1RhYkluZGV4ID8gdGFiQ291bnQgKyBwYXJzZUludCh0aGlzVGFiSW5kZXgpIDogdGFiQ291bnQpIDogdGFiQ291bnQrKztcblx0XHRcdFx0XHRqUTIyNCh0aGlzKS5hdHRyKHtcblx0XHRcdFx0XHRcdCd0YWJpbmRleCc6bmV3VGFiSW5kZXgsXG5cdFx0XHRcdFx0XHQnYXJpYS1sYWJlbCc6cGxhY2Vob2xkZXJfdGV4dCxcblx0XHRcdFx0XHRcdCdwbGFjZWhvbGRlcic6cGxhY2Vob2xkZXJfdGV4dCxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEhhbmRsZSBjb25zZW50IGJveCdzIHRhYmluZGV4IHNlcGFyYXRlbHlcblx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoJy5wb3B0aW4tY2hlY2tib3gtd3JhcHBlciBpbnB1dCcpLmVhY2goZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHZhciB0aGlzVGFiSW5kZXggPSBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLXRhYmluZGV4Jyk7XG5cdFx0XHRcdHZhciBuZXdUYWJJbmRleCA9IGhhc1RhYkluZGV4ID8gKHRoaXNUYWJJbmRleCA/IHRhYkNvdW50ICsgcGFyc2VJbnQodGhpc1RhYkluZGV4KSA6IHRhYkNvdW50KSA6IHRhYkNvdW50Kys7XG5cdFx0XHRcdHZhciBwbGFjZWhvbGRlcl90ZXh0ID0galEyMjQodGhpcykucGFyZW50KCkuZmluZChcIi5mcm9hbGEtZWRpdG9yLXRleHRcIikudGV4dCgpO1xuXHRcdFx0XHRqUTIyNCh0aGlzKS5hdHRyKHtcblx0XHRcdFx0XHQndGFiaW5kZXgnOm5ld1RhYkluZGV4LFxuXHRcdFx0XHRcdCdhcmlhLWxhYmVsJzpwbGFjZWhvbGRlcl90ZXh0LFxuXHRcdFx0XHRcdCdwbGFjZWhvbGRlcic6cGxhY2Vob2xkZXJfdGV4dCxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gTGV0IHNjcmVlbiByZWFkZXIga25vdyB0aGVyZSBpcyBhIHRpbWVyIG9uIHRoaXMgcG9wdGluXG5cdFx0XHRqUTIyNCh0aGlzKS5maW5kKCcuZmxpcC10aW1lci1jb250YWluZXInKS5lYWNoKGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHR2YXIgdGhpc1RhYkluZGV4ID0galEyMjQodGhpcykuYXR0cignZGF0YS10YWJpbmRleCcpO1xuXHRcdFx0XHR2YXIgbmV3VGFiSW5kZXggPSBoYXNUYWJJbmRleCA/ICh0aGlzVGFiSW5kZXggPyB0YWJDb3VudCArIHBhcnNlSW50KHRoaXNUYWJJbmRleCkgOiB0YWJDb3VudCkgOiB0YWJDb3VudCsrO1xuXHRcdFx0XHRqUTIyNCh0aGlzKS5hdHRyKHtcblx0XHRcdFx0XHQndGFiaW5kZXgnOm5ld1RhYkluZGV4XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIExldCBzY3JlZW4gcmVhZGVyIGtub3cgdGhlcmUgaXMgYSBjb3Vwb24gb24gdGhpcyBwb3B0aW5cblx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoJy5mcm9hbGEtZWRpdG9yLWNvdXBvbicpLmVhY2goZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHZhciBjYyA9IGpRMjI0KHRoaXMpLnRleHQoKTtcblx0XHRcdFx0aWYoY2Mpe1xuXHRcdFx0XHRcdGNjID0gY2Muc3BsaXQoXCJcIikuam9pbihcIixcIik7XG5cdFx0XHRcdFx0Y2MgPSBpZlVzZXJsYW5nSXNIZSgpID8gY2MgKyAnINen15XXpNeV158nIDogJ0NvdXBvbiAnICsgY2M7XG5cdFx0XHRcdFx0dmFyIHRoaXNUYWJJbmRleCA9IGpRMjI0KHRoaXMpLnBhcmVudHMoJy5wb3B0aW4tY291cG9uLWVsZW1lbnQnKS5hdHRyKCdkYXRhLXRhYmluZGV4Jyk7XG5cdFx0XHRcdFx0dmFyIG5ld1RhYkluZGV4ID0gaGFzVGFiSW5kZXggPyAodGhpc1RhYkluZGV4ID8gdGFiQ291bnQgKyBwYXJzZUludCh0aGlzVGFiSW5kZXgpIDogdGFiQ291bnQpIDogdGFiQ291bnQrKztcblx0XHRcdFx0XHRqUTIyNCh0aGlzKS5wYXJlbnRzKCcucG9wdGluLWNvdXBvbi1lbGVtZW50JykuYXR0cih7XG5cdFx0XHRcdFx0XHQndGFiaW5kZXgnOm5ld1RhYkluZGV4LFxuXHRcdFx0XHRcdFx0J2FyaWEtbGFiZWwnOiBjY1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gTGV0J3MgcmVhZCBpbWFnZSBhbHRzXG5cdFx0XHRqUTIyNCh0aGlzKS5maW5kKCcuZnJvYWxhLWltYWdlLXdyYXBwZXIgaW1nJykuZWFjaChmdW5jdGlvbihlKXtcblx0XHRcdFx0dmFyIHRoaXNUYWJJbmRleCA9IGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtdGFiaW5kZXgnKTtcblx0XHRcdFx0dmFyIG5ld1RhYkluZGV4ID0gaGFzVGFiSW5kZXggPyAodGhpc1RhYkluZGV4ID8gdGFiQ291bnQgKyBwYXJzZUludCh0aGlzVGFiSW5kZXgpIDogdGFiQ291bnQpIDogdGFiQ291bnQrKztcblx0XHRcdFx0alEyMjQodGhpcykuYXR0cih7XG5cdFx0XHRcdFx0J3RhYmluZGV4JzpuZXdUYWJJbmRleFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBXZSBzaG91bGQgZ2l2ZSB0aGVzZSBsb3dlc3QgdGFiaW5kZXggYnV0IHNpbmNlIHdlIGhhdmUgYXV0b2ZvY3VzIG9uIGZpcnN0IGlucHV0IHRoYXQncyB3aHkgd2UgaGF2ZSB0byBrZWVwIGFsbCB0aGUgZWxlbWVudCdzIHRhYmluZGV4IGhpZ2hlciB0aGFuIHRoZSBpbnB1dHNcblx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoJy5mcm9hbGEtZWRpdG9yLXRleHQsIC5mcm9hbGEtZWRpdG9yLXRpY2tlcicpLmVhY2goZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGpRMjI0KHRoaXMpLnBhcmVudHMoJy5mbGlwLXRpbWVyLWNvbnRhaW5lciwgLnBvcHRpbi1jaGVja2JveC13cmFwcGVyJykubGVuZ3RoID09IDApIHtcblx0XHRcdFx0XHR2YXIgdGhpc1RhYkluZGV4ID0galEyMjQodGhpcykucGFyZW50cyhcIi5kcmFnZ2FibGVcIikuYXR0cignZGF0YS10YWJpbmRleCcpO1xuXHRcdFx0XHRcdHZhciBuZXdUYWJJbmRleCA9IGhhc1RhYkluZGV4ID8gKHRoaXNUYWJJbmRleCA/IHRhYkNvdW50ICsgcGFyc2VJbnQodGhpc1RhYkluZGV4KSA6IHRhYkNvdW50KSA6IHRhYkNvdW50Kys7XG5cdFx0XHRcdFx0alEyMjQodGhpcykucGFyZW50cyhcIi5kcmFnZ2FibGVcIikuYXR0cih7XG5cdFx0XHRcdFx0XHQndGFiaW5kZXgnOm5ld1RhYkluZGV4XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBOZXh0IGlzIGxpbmtzIGFuZCBidXR0b25zLiBIaWdoZXIgdGhhbiB0ZXh0IGJ1dCBsZXNzIHRoYW4gY2xvc2UgYnV0dG9uXG5cdFx0XHRqUTIyNCh0aGlzKS5maW5kKFwiaW5wdXQucG9wdGluLWZvcm0tc3VibWl0LWJ1dHRvblwiKS5lYWNoKGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRqUTIyNCh0aGlzKS5hdHRyKCdyb2xlJywgJ2J1dHRvbicpO1xuXHRcdFx0XHR2YXIgdGhpc1RhYkluZGV4ID0galEyMjQodGhpcykucGFyZW50KCkuZmluZChcIi5mcm9hbGEtZWRpdG9yLWJ1dHRvblwiKS5hdHRyKCdkYXRhLXRhYmluZGV4Jyk7XG5cdFx0XHRcdHZhciBuZXdUYWJJbmRleCA9IGhhc1RhYkluZGV4ID8gKHRoaXNUYWJJbmRleCA/IHRhYkNvdW50ICsgcGFyc2VJbnQodGhpc1RhYkluZGV4KSA6IHRhYkNvdW50KSA6IHRhYkNvdW50Kys7XG5cdFx0XHRcdGpRMjI0KHRoaXMpLmF0dHIoe1xuXHRcdFx0XHRcdCd0YWJpbmRleCc6bmV3VGFiSW5kZXhcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoXCIucG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uLCAucG9wdGluLWZvcm0tbGluay1idXR0b25cIikuZWFjaChmdW5jdGlvbihlKXtcblx0XHRcdFx0alEyMjQodGhpcykuYXR0cigncm9sZScsIGpRMjI0KHRoaXMpLmdldCgwKS5jbGFzc05hbWUuaW5jbHVkZXMoXCJsaW5rXCIpID8gXCJsaW5rXCIgOiBcImJ1dHRvblwiKTtcblx0XHRcdFx0dmFyIHRoaXNUYWJJbmRleCA9IGpRMjI0KHRoaXMpLmF0dHIoJ2RhdGEtdGFiaW5kZXgnKTtcblx0XHRcdFx0dmFyIG5ld1RhYkluZGV4ID0gaGFzVGFiSW5kZXggPyAodGhpc1RhYkluZGV4ID8gdGFiQ291bnQgKyBwYXJzZUludCh0aGlzVGFiSW5kZXgpIDogdGFiQ291bnQpIDogdGFiQ291bnQrKztcblx0XHRcdFx0alEyMjQodGhpcykuYXR0cih7XG5cdFx0XHRcdFx0J3RhYmluZGV4JzpuZXdUYWJJbmRleFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBDbG9zZSBidXR0b24gc2hvdWxkIGJlIGFjY2Vzc2VkIGF0IHRoZSBlbmRcblx0XHRcdGpRMjI0KHRoaXMpLmZpbmQoXCIuY2xvc2UteC1idXR0b25cIikuZWFjaChmdW5jdGlvbihlKXtcblx0XHRcdFx0alEyMjQodGhpcykud3JhcElubmVyKCc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+Jyk7XG5cdFx0XHRcdHZhciB0aXRsZSA9ICh1c2VyX2xhbmc9PVwiaGVcIiA/ICfXodeS15XXqCDXpNeV16TXkNekJzogJ0Nsb3NlIHBvcHVwJyk7XG5cdFx0XHRcdHZhciB0aGlzVGFiSW5kZXggPSBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLXRhYmluZGV4Jyk7XG5cdFx0XHRcdHZhciBuZXdUYWJJbmRleCA9IGhhc1RhYkluZGV4ID8gKHRoaXNUYWJJbmRleCA/IHRhYkNvdW50ICsgcGFyc2VJbnQodGhpc1RhYkluZGV4KSA6IHRhYkNvdW50KSA6IHRhYkNvdW50Kys7XG5cdFx0XHRcdGpRMjI0KHRoaXMpLmF0dHIoe1xuXHRcdFx0XHRcdCd0YWJpbmRleCc6bmV3VGFiSW5kZXgsXG5cdFx0XHRcdFx0J2FyaWEtbGFiZWwnOnRpdGxlLFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0dmFyIGhpZ2hlc3RfdGFiaW5kZXggPSBoYXNUYWJJbmRleCA/IHRhYkNvdW50ICsgcGFyc2VJbnQodGhpc19wb3AuYXR0cihcImRhdGEtaGlnaGVzdC10YWJpbmRleFwiKSkgOiB0YWJDb3VudDtcblxuXHRcdC8vIFNldCBkZWZhdWx0IGZvY3VzIG9uIHRoZSBmaXJzdCBpbnB1dCBmaWVsZHMgaWYgbm8gY3VzdG9tIHRhYiBpbmRleCBhcmUgdGhlcmVcblx0XHRpZighaGFzVGFiSW5kZXgpe1xuXHRcdFx0Y29uc3QgZm9jdXNFbWJlZGRlZCA9IGlzUG9wdGluTGFuZGluZ1BhZ2UgPT0gdHJ1ZSA/IFwiXCIgOiBcIjpub3QoW2RhdGEtcG9wdGluLXR5cGU9J2VtYmVkZGVkJ10pXCI7XG4gICAgICAgICAgICB2YXIgZmlyc3RJbnB1dCA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiK2ZvY3VzRW1iZWRkZWQrXCIgLmlucHV0cy1jb250YWluZXIgaW5wdXQucG9wdGluLWRlc2lnbi1maWVsZHMtZm9ybVwiKS5maXJzdCgpO1xuICAgICAgICAgICAgdmFyIGlzSW5wdXREYXRlID0gZmlyc3RJbnB1dC5kYXRhKCdpbnB1dC10eXBlJykgPT0gJ2RhdGUnO1xuICAgICAgICAgICAgaWYoIWlzSW5wdXREYXRlKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RJbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXHRcdH1cblxuXHRcdHRoaXNfcG9wLmFwcGVuZChgXG5cdFx0XHQ8c3BhbiBjbGFzcz1cInBvcHRpbi10YWJpbmRleC1zdGFydFwiIHRhYmluZGV4PVwiYCsobG93ZXN0X3RhYmluZGV4LTEpK2BcIiBhcmlhLWxhYmVsPVwiYCsoXCJEaWFsb2cgcG9wdXAgc3RhcnRcIikrYFwiPjwvc3Bhbj5cblx0XHRcdDxzcGFuIGNsYXNzPVwicG9wdGluLXRhYmluZGV4LWVuZFwiIHRhYmluZGV4PVwiYCsoaGlnaGVzdF90YWJpbmRleCsxKStgXCIgYXJpYS1sYWJlbD1cImArKFwiRGlhbG9nIHBvcHVwIGVuZFwiKStgXCI+PC9zcGFuPlxuXHRcdGApO1xuXG5cdFx0Ly8gU2V0IGRlZmF1bHQgZm9jdXMgb24gdGhlIGZpcnN0IGlucHV0IGZpZWxkcyBpZiBubyBjdXN0b20gdGFiIGluZGV4IGFyZSB0aGVyZVxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdC8vIHNob3dMb2coIWhhc1RhYkluZGV4KTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIGhhcyBzZXQgZm9jdXMgb24gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHNcbiAgICAgICAgICAgIGNvbnN0IGlzQW55SW5wdXRGb2N1c2VkID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5pbnB1dHMtY29udGFpbmVyIGlucHV0OmZvY3VzXCIpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBcblx0XHRcdGlmKCFoYXNUYWJJbmRleCl7XG4gICAgICAgICAgICAgICAgaWYoIWlzQW55SW5wdXRGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdElucHV0ID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdOm5vdChbZGF0YS1wb3B0aW4tdHlwZT0nZW1iZWRkZWQnXSkgLmlucHV0cy1jb250YWluZXIgaW5wdXQucG9wdGluLWRlc2lnbi1maWVsZHMtZm9ybVwiKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNJbnB1dERhdGUgPSBmaXJzdElucHV0LmRhdGEoJ2lucHV0LXR5cGUnKSA9PSAnZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFpc0lucHV0RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RJbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdOm5vdChbZGF0YS1wb3B0aW4tdHlwZT0nZW1iZWRkZWQnXSkgLnBvcHRpbi10YWJpbmRleC1zdGFydFwiKS5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gc2hvd0xvZyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcblx0XHR9LDIwMDApO1xuXG5cdFx0dmFyIGlzRnVsbFNjcmVlbiA9IChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYXR0cignZGF0YS1wb3B0aW4tdHlwZScpID09IFwiZnVsbHBhZ2VcIik7XG5cdFx0dmFyIHBvcHRpblNoaWZ0SGVsZCA9IGZhbHNlO1xuXHRcdGpRMjI0KGRvY3VtZW50KS5vbigna2V5dXAga2V5ZG93bicsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYoZS50eXBlID09IFwia2V5ZG93blwiICYmIGUua2V5Q29kZSA9PSAxNil7IHBvcHRpblNoaWZ0SGVsZCA9IHRydWU7IH1cblx0XHRcdGlmKGUudHlwZSA9PSBcImtleXVwXCIgJiYgZS5rZXlDb2RlID09IDE2KXsgcG9wdGluU2hpZnRIZWxkID0gZmFsc2U7IH1cblx0XHR9KTtcblx0XHRqUTIyNChkb2N1bWVudCkub24oXCJrZXlkb3duXCIsIFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuaW5wdXRzLWNvbnRhaW5lciAuZnJvYWxhLWVkaXRvci1pbnB1dCA+IC5mb3JtLWlucHV0LWNsYXNzOmZpcnN0LWNoaWxkIGlucHV0OmZpcnN0LWNoaWxkLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5pbnB1dHMtY29udGFpbmVyIC5mb3JtLWlucHV0LWNsYXNzOmZpcnN0LWNoaWxkIHNlbGVjdCwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuaW5wdXRzLWNvbnRhaW5lciAuZm9ybS1pbnB1dC1jbGFzczpmaXJzdC1jaGlsZCB0ZXh0YXJlYVwiLCBmdW5jdGlvbihlKXtcblx0XHRcdGlmKGUua2V5Q29kZSA9PSA5KXtcblx0XHRcdFx0aWYocG9wdGluU2hpZnRIZWxkKXtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZihpc0Z1bGxTY3JlZW4pe1xuXHRcdFx0XHRcdFx0XHRqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gPiAjY2xvc2VYQnV0dG9uXCIpLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lciAjY2xvc2VYQnV0dG9uXCIpLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRqUTIyNChkb2N1bWVudCkub24oXCJrZXlkb3duXCIsIFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjY2xvc2VYQnV0dG9uXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYoZS5rZXlDb2RlID09IDEzIHx8IGUua2V5Q29kZSA9PSAzMil7XG5cdFx0XHRcdGpRMjI0KHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0XHR9XG5cdFx0XHRpZihlLmtleUNvZGUgPT0gOSl7XG5cdFx0XHRcdGlmKCFwb3B0aW5TaGlmdEhlbGQpe1xuXHRcdFx0XHRcdGlmKCFoYXNUYWJJbmRleCl7IC8vIEF2b2lkIGdvaW5nIHRvIGZpcnN0IGlucHV0IGFmdGVyIGNsb3NlIGJ1dHRvbiBpZiBjdXN0b20gdGFiIGluZGV4ZXMgYXJlIHVzZWRcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0dmFyIGZpcnN0X2lucHV0X3dyYXAgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCJdIC5pbnB1dHMtY29udGFpbmVyXCIpO1xuXHRcdFx0XHRcdFx0XHRmaXJzdF9pbnB1dF93cmFwLmZpbmQoXCIuZm9ybS1pbnB1dC1jbGFzczpmaXJzdC1jaGlsZFwiKS5sZW5ndGggPyBmaXJzdF9pbnB1dF93cmFwLmZpbmQoXCIuZm9ybS1pbnB1dC1jbGFzczpmaXJzdC1jaGlsZFwiKS5maW5kKFwiaW5wdXQucG9wdGluLWRlc2lnbi1maWVsZHMtZm9ybSwgdGV4dGFyZWEucG9wdGluLWRlc2lnbi1maWVsZHMtZm9ybVwiKS5maXJzdCgpLmZvY3VzKCkgOiBmaXJzdF9pbnB1dF93cmFwLmZpbmQoXCJpbnB1dC5wb3B0aW4tZGVzaWduLWZpZWxkcy1mb3JtLCB0ZXh0YXJlYS5wb3B0aW4tZGVzaWduLWZpZWxkcy1mb3JtXCIpLmZpcnN0KCkuZm9jdXMoKVxuXHRcdFx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRqUTIyNChkb2N1bWVudCkua2V5dXAoZnVuY3Rpb24oZSkge1xuXHRcdFx0IGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIiAmJiBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJlbWJlZGRlZFwiKSB7IC8vIGVzY2FwZSBrZXkgbWFwcyB0byBrZXljb2RlIGAyN2Bcblx0XHRcdFx0dmFyIGNsb3NlQnRuID0gXCIjY2xvc2VYQnV0dG9uXCI7XG5cdFx0XHRcdGlmKGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjY2xvc2VTa2lwQnV0dG9uXCIpLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRcdGNsb3NlQnRuID0gXCIjY2xvc2VTa2lwQnV0dG9uXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocG9wdGluICYmIHBvcHRpbi5wb3B0aW5faWQgJiYgY2xvc2VCdG4pe1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdGNsb3NlUG9wdGluT25YY2xpY2soXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIFwiK2Nsb3NlQnRuKTtcblx0XHRcdFx0XHR9LCA4MDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZihlLmtleUNvZGUgPT0gOSl7XG5cdFx0XHRcdHZhciBhY3RpdmVFTCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0XHRcdHZhciBsb3dlc3RfdGFiaW5kZXhfaXRlbSA9IHRoaXNfcG9wLmZpbmQoXCJbdGFiaW5kZXg9XCIrbG93ZXN0X3RhYmluZGV4K1wiXVwiKTtcblx0XHRcdFx0dmFyIGhpZ2hlc3RfdGFiaW5kZXhfaXRlbSA9IHRoaXNfcG9wLmZpbmQoXCJbdGFiaW5kZXg9XCIraGlnaGVzdF90YWJpbmRleCtcIl1cIik7XG5cdFx0XHRcdHZhciBpc19wb3B0aW5fZW5kID0galEyMjQoYWN0aXZlRUwpLmhhc0NsYXNzKFwicG9wdGluLXRhYmluZGV4LWVuZFwiKTtcblx0XHRcdFx0dmFyIGlzX3BvcHRpbl9zdGFydCA9IGpRMjI0KGFjdGl2ZUVMKS5oYXNDbGFzcyhcInBvcHRpbi10YWJpbmRleC1zdGFydFwiKTtcblx0XHRcdFx0Ly8gc2hvd0xvZyhpc19wb3B0aW5fZW5kLCBpc19wb3B0aW5fc3RhcnQsICFwb3B0aW5TaGlmdEhlbGQsIGpRMjI0KGFjdGl2ZUVMKSk7XG5cdFx0XHRcdGlmKCFwb3B0aW5TaGlmdEhlbGQpe1xuXHRcdFx0XHRcdGlmKGlzX3BvcHRpbl9lbmQpe1xuXHRcdFx0XHRcdFx0Ly8gc2hvd0xvZyhsb3dlc3RfdGFiaW5kZXhfaXRlbSk7XG5cdFx0XHRcdFx0XHRsb3dlc3RfdGFiaW5kZXhfaXRlbS5mb2N1cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZihpc19wb3B0aW5fc3RhcnQpe1xuXHRcdFx0XHRcdFx0Ly8gc2hvd0xvZyhoaWdoZXN0X3RhYmluZGV4X2l0ZW0pO1xuXHRcdFx0XHRcdFx0aGlnaGVzdF90YWJpbmRleF9pdGVtLmZvY3VzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbi10YWJpbmRleC1lbmRcIikub24oXCJmb2N1c1wiLCBmdW5jdGlvbigpe1xuXHRcdFx0Ly8gXHRqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbi10YWJpbmRleC1zdGFydFwiKS5mb2N1cygpO1xuXHRcdFx0Ly8gfSk7XG5cdFx0fSk7XG5cdFx0Ly8gaWYgKCFpZlVzZXJsYW5nSXNIZSgpKXtcblx0XHQvLyAgICAgdmFyIGZpcnN0X2lucHV0ID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5pbnB1dHMtY29udGFpbmVyIC5mb3JtLWlucHV0LWNsYXNzOmZpcnN0LWNoaWxkXCIpLmZpbmQoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKS5maXJzdCgpLmdldCgwKTtcblx0XHQvLyAgICAgaWYoZmlyc3RfaW5wdXQgIT09IHVuZGVmaW5lZCl7XG5cdFx0Ly8gICAgICAgICBmaXJzdF9pbnB1dC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3V0bGluZScsICcwcHgnLCAnaW1wb3J0YW50Jyk7XG5cdFx0Ly8gICAgIH1cblx0XHQvLyB9XG5cdH1cblxuICAgIGZ1bmN0aW9uIHNldEFjY2Vzc2liaWxpdHlUaGFua0FmdGVyU3VibWl0KHBvcHRpbil7XG5cdFx0aWYgKHBvcHRpbi5wb3B0aW5fdGFyZ2V0PT1cImxlYWRcIil7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IGlmVXNlcmxhbmdJc0hlKCkgJiYgaWZIZWJyb3coKSA/IFwi16DXqdec15cg15HXlNem15zXl9eUIVwiIDogXCJTZW50IHN1Y2Nlc3NmdWxseSFcIjtcbiAgICAgICAgICAgIHZhciAkZGl2ID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICAgICAgdmFyICRidG4gPSAkZGl2LmZpbmQoJyNwb3B0aW5Gb3JtU3VibWl0VGV4dCAuZnJvYWxhLWVkaXRvci1idXR0b24nKTtcbiAgICAgICAgICAgIHZhciB0eHQgPSAkYnRuLmZpbmQoJ3Agc3BhbicpO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbl9zdHlsZSA9ICdkaXJlY3Rpb246JysoaWZVc2VybGFuZ0lzSGUoKSAmJiBpZkhlYnJvdygpID8gJ3J0bCcgOiAnbHRyJyk7IFxuICAgICAgICAgICAgaWYodHh0Lmxlbmd0aCA+IDApeyBzdHlsZSA9IHR4dC5jc3MoXCJjb2xvclwiKTsgfVxuICAgICAgICAgICAgaWYoJGJ0bi5sZW5ndGggPT0gMCl7ICRidG4gPSAkZGl2LmZpbmQoJyNwb3B0aW5Gb3JtU3VibWl0VGV4dCcpOyB9XG4gICAgICAgICAgICB2YXIgbXNnSHRtbCA9ICc8c3BhbiByb2xlPVwiYWxlcnRcIiBzdHlsZT1cImNvbG9yOicrc3R5bGUrJztmb250LXNpemU6MThweDsnK2RpcmVjdGlvbl9zdHlsZSsnXCI+JyttZXNzYWdlKyc8L3NwYW4+JztcbiAgICAgICAgICAgICRidG4udGV4dCgnJykuYXBwZW5kKG1zZ0h0bWwpO1xuICAgICAgICAgICAgJGRpdi5maW5kKCdpbnB1dC5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaWZIZWJyb3coKXtcbiAgICAgICAgdmFyIHN0ciA9ICfXkCc7Ly9IZWJyZXcgQ2hhcmFjdGVyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN0ci5zZWFyY2goL1tcXHUwNTkwLVxcdTA1RkZdLyk7XG4gICAgICAgIHggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW2h0dHAtZXF1aXY9XCJDb250ZW50LVR5cGVcIl0nKTtcbiAgICAgICAgaWYocG9zaXRpb24gPj0gMCl7XG4gICAgICAgICAgICB4ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCJdJyk7XG4gICAgICAgICAgICBpZiAoeD09IG51bGwgfHwgeC5jb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigndXRmLTgnKSA+MCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBkb1Jlc2l6ZVBvcHRpbigpLCBwYWRkaW5nWEJ1dHRvbigpLCBzZXRQb3B0aW4oKSwgYWZ0ZXJQb3B0aW5TdWJtaXQoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBSZXR1cm4gYm9vbGVhbiBpZiBicm93c2VyIHNjcm9sbCBoZWlnaHQgaXMgdmlzaWJsZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlmU2Nyb2xsVmlzaWJsZSgpe1xuICAgICAgICByZXR1cm4gKGpRMjI0KFwiYm9keVwiKS5nZXQoMCkuc2Nyb2xsSGVpZ2h0ID4galEyMjQod2luZG93KS5oZWlnaHQoKSA/IHRydWUgOiBmYWxzZSApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBQb3B0aW4gLT4gUG9wdGluIE9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgY2xvc2UgYnV0dG9uIG5vdGUgcGVyIHBvcHRpblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDbG9zZUJ1dHRvbk5vdGUocG9wdGluKXtcbiAgICAgICAgdmFyIHRoaXNfY2xvc2VfYnV0dG9uID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmNsb3NlLXgtYnV0dG9uXCIpO1xuICAgICAgICB2YXIgdGhpc19jbG9zZV9ub3RlID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgLmNsb3NlLWJ1dHRvbi1ub3RlXCIpO1xuICAgICAgICBpZih0aGlzX2Nsb3NlX25vdGUpe1xuICAgICAgICAgICAgdGhpc19jbG9zZV9idXR0b24ub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdGhpc19zY2FsZSA9IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NjYWxlO1xuICAgICAgICAgICAgICAgIGlmKCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2xpZ2h0Ym94JyAmJiBmcl90ZW1wbGF0ZXNbJ2xpZ2h0Ym94J10gPD0gcGFyc2VJbnQocG9wdGluLnBvcHRpbl9mb3JtYXQuc3BsaXQoJ18nKVsxXSkgKXtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzX2Nsb3NlX2J1dHRvbil7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAjY2xvc2VCdXR0b25Ob3RlXCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2xlZnQnIDogdGhpc19jbG9zZV9idXR0b24ub2Zmc2V0KCkubGVmdCArICh0aGlzX2Nsb3NlX2J1dHRvbi5vdXRlcldpZHRoKCkgKiB0aGlzX3NjYWxlKSAtICh0aGlzX2Nsb3NlX25vdGUub3V0ZXJXaWR0aCgpICogdGhpc19zY2FsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnIDogKHRoaXNfY2xvc2VfYnV0dG9uLnBvc2l0aW9uKCkubGVmdCAvIHRoaXNfc2NhbGUpICsgdGhpc19jbG9zZV9idXR0b24ub3V0ZXJXaWR0aCgpIC0gdGhpc19jbG9zZV9ub3RlLm91dGVyV2lkdGgoKSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCcgOiAodGhpc19jbG9zZV9idXR0b24ucG9zaXRpb24oKS50b3AgLyB0aGlzX3NjYWxlKSAtIHRoaXNfY2xvc2Vfbm90ZS5vdXRlckhlaWdodCgpIC0gMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmlnaHQnIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX2Zhcl9sZWZ0ID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuYXR0cignZGF0YS13aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgI2Nsb3NlQnV0dG9uTm90ZVwiKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICdsZWZ0JyA6IHRoaXNfY2xvc2VfYnV0dG9uLm9mZnNldCgpLmxlZnQgKyAodGhpc19jbG9zZV9idXR0b24ub3V0ZXJXaWR0aCgpICogdGhpc19zY2FsZSkgLSAodGhpc19jbG9zZV9ub3RlLm91dGVyV2lkdGgoKSAqIHRoaXNfc2NhbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JyA6ICh0aGlzX2Zhcl9sZWZ0IC8gdGhpc19zY2FsZSkgLSB0aGlzX2Nsb3NlX25vdGUub3V0ZXJXaWR0aCgpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG9wJyA6IDMgLSB0aGlzX2Nsb3NlX25vdGUub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmlnaHQnIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNfY2xvc2Vfbm90ZS5jc3MoJ2Rpc3BsYXknLCdibG9jaycpO1xuICAgICAgICAgICAgfSkub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0aGlzX2Nsb3NlX25vdGUuY3NzKCdkaXNwbGF5Jywnbm9uZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCksIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogUG9wdGluIC0+IFBvcHRpbiBPYmplY3QgfCBjbGljayAtPiBCb29sZWFuIChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IEF1dG9QaWxvdCB0cmlnZ2VyXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJlbGV2YW50IGZvciBwb3B0aW4gd2l0aCBBdXRvUGlsb3QgZW5hYmxlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QXV0b1BpbG90KHBvcHRpbixjbGljayl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIC8vIElmIGJyb3dzZXIgc3VwcG9ydCBTZXNzaW9uIFN0b3JhZ2VcbiAgICAgICAgICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgcG9wdGluKXtcbiAgICAgICAgICAgICAgICBzaG93TG9nKCdzZXRBdXRvUGlsb3QyJyk7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5hdXRvX3BpbG90X3RyaWdnZXIgIT09IHVuZGVmaW5lZCAmJiAod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJhcHRfXCIrcG9wdGluLnBvcHRpbl9pZCkgPT0gbnVsbCB8fCB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImFwdF9cIitwb3B0aW4ucG9wdGluX2lkKT09IHVuZGVmaW5lZCkpe1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKHBvcHRpbi5hdXRvX3BpbG90X3RyaWdnZXIpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImFwdF9cIitwb3B0aW4ucG9wdGluX2lkLCBwb3B0aW4uYXV0b19waWxvdF90cmlnZ2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3dMb2coJ1NvcnJ5ISBObyBXZWIgU3RvcmFnZSBzdXBwb3J0IGFkZC9vciBwb3B0aW4uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSwgaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgdXNlciBvcmlnaW4gbGFuZGluZyBwYWdlIGluIHNlc3Npb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRPcmlnaW5MYW5kaW5nUGFnZSgpe1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICAvLyBJZiBicm93c2VyIHN1cHBvcnQgU2Vzc2lvbiBTdG9yYWdlXG4gICAgICAgICAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX29yaWdpbl9sYW5kaW5nX3BhZ2VcIikgPT0gbnVsbCB8fCB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9vcmlnaW5fbGFuZGluZ19wYWdlXCIpID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicG9wdGluX29yaWdpbl9sYW5kaW5nX3BhZ2VcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvd0xvZygnU29ycnkhIE5vIFdlYiBTdG9yYWdlIHN1cHBvcnQuLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5WaWV3KClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IHBvcHRpbiB2aWV3IHVybCBzZXNzaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0UG9wdGluVmlld2VkVXJsKHBvcHRpbil7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIC8vIElmIGJyb3dzZXIgc3VwcG9ydCBTZXNzaW9uIFN0b3JhZ2VcbiAgICAgICAgICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fdmlld2VkX3VybF9cIitwb3B0aW4ucG9wdGluX2lkKSA9PSBudWxsIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX3ZpZXdlZF91cmxfXCIrcG9wdGluLnBvcHRpbl9pZCkgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwb3B0aW5fdmlld2VkX3VybF9cIitwb3B0aW4ucG9wdGluX2lkLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93TG9nKCdTb3JyeSEgTm8gV2ViIFN0b3JhZ2Ugc3VwcG9ydC4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgc2hvd0xvZyhlcnIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljaygpLCBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdFxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBQb3B0aW4gLT4gUG9wdGluIE9iamVjdCB8IGNsaWNrIC0+IEJvb2xlYW4gKGlmIHBvcHRpbiBjbGljayB0cmlnZ2VyKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgcG9wdGluIHNpemUgdG8gLSBoZWlnaHQgJiB3aWR0aFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBJZiBjbGljayB0cmlnZ2VyIHNldCAncG9wdGluX3NpemUnIE9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBFbHNlIHNldCAncG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZScgQXJyYXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRQb3B0aW5TaXplKHBvcHRpbixjbGljayl7XG5cbiAgICAgICAgdmFyIHBvcHRpbl9zaXplID0ge307XG5cbiAgICAgICAgdmFyIHBvcHRpbl9kYXRhX3dpZHRoX2hlaWdodCA9IGdldERhdGFXaWR0aEhlaWdodChwb3B0aW4ucG9wdGluKTtcblxuICAgICAgICB2YXIgdGhpc19wb3B0aW5fd2lkdGggPSBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHRbJ3dpZHRoJ107XG4gICAgICAgIHZhciB0aGlzX3BvcHRpbl9oZWlnaHQgPSBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHRbJ2hlaWdodCddO1xuXG4gICAgICAgIC8vcG9wdGluc19zaXplID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGlmIChwb3B0aW4gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiKXtcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS5oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUud2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gIHBvcHRpbl9zaXplLmhlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICAvLyAgcG9wdGluX3NpemUud2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnc2V0UG9wdGluU2l6ZSAnK3RoaXNfcG9wdGluX3dpZHRoKycgJyt0aGlzX3BvcHRpbl9oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXNfcG9wdGluX3dpZHRoICE9IHVuZGVmaW5lZCAmJiB0aGlzX3BvcHRpbl93aWR0aCAhPSAnJyAmJiB0aGlzX3BvcHRpbl93aWR0aCAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgICAgICAgICAgbGl0Z2h0Ym94X3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzX3BvcHRpbl9oZWlnaHQgIT0gdW5kZWZpbmVkICYmIHRoaXNfcG9wdGluX2hlaWdodCAhPSAnJyAmJiB0aGlzX3BvcHRpbl9oZWlnaHQgIT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICAgICAgICAgIGxpdGdodGJveF9wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzMnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfOScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGl0Z2h0Ym94X3BvcHRpbl93aWR0aCA9IGxpdGdodGJveF9wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ3NldFBvcHRpblNpemUgJytsaXRnaHRib3hfcG9wdGluX3dpZHRoKycgJytsaXRnaHRib3hfcG9wdGluX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUgPSB7d2lkdGg6IGxpdGdodGJveF9wb3B0aW5fd2lkdGgsIGhlaWdodDogbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHR9O1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gbGl0Z2h0Ym94X3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIil7XG4gICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUgPSB7d2lkdGg6IGJhcl9wb3B0aW5fd2lkdGgsIGhlaWdodDogYmFyX3BvcHRpbl9oZWlnaHR9O1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gYmFyX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBiYXJfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF8xJyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzYnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBiYXJfcG9wdGluX3dpZHRoLCBoZWlnaHQ6IGJhcl9wb3B0aW5faGVpZ2h0fTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfMicgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF8zJyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzcnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfOCcpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2s9PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUgPSB7d2lkdGg6IGJhcl9wb3B0aW5fd2lkdGgsIGhlaWdodDogYmFyX3BvcHRpbl9oZWlnaHRfMn07XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IGJhcl9wb3B0aW5faGVpZ2h0XzI7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF85Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogYmFyX3BvcHRpbl93aWR0aCwgaGVpZ2h0OiBiYXJfcG9wdGluX2hlaWdodF80fTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF81JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzEwJyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogYmFyX3BvcHRpbl93aWR0aCwgaGVpZ2h0OiBiYXJfcG9wdGluX2hlaWdodF81fTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHRfNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwic3NpZGVcIil7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBzc2lkZV9wb3B0aW5fd2lkdGhfMiwgaGVpZ2h0OiBzc2lkZV9wb3B0aW5faGVpZ2h0fTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUud2lkdGggPSBzc2lkZV9wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IHNzaWRlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzQnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzgnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBzc2lkZV9wb3B0aW5fd2lkdGhfNCwgaGVpZ2h0OiBzc2lkZV9wb3B0aW5faGVpZ2h0XzR9O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IHNzaWRlX3BvcHRpbl93aWR0aF80O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBzc2lkZV9wb3B0aW5faGVpZ2h0XzQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzE5Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogc3NpZGVfcG9wdGluX3dpZHRoXzE5LCBoZWlnaHQ6IHNzaWRlX3BvcHRpbl9oZWlnaHRfMTl9O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IHNzaWRlX3BvcHRpbl93aWR0aF8xOTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gc3NpZGVfcG9wdGluX2hlaWdodF8xOTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBzc2lkZV9wb3B0aW5fd2lkdGgsIGhlaWdodDogc3NpZGVfcG9wdGluX2hlaWdodH07XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gc3NpZGVfcG9wdGluX3dpZHRoXzI7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IHNzaWRlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJzaWRlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBic2lkZV9wb3B0aW5fd2lkdGgsIGhlaWdodDogYnNpZGVfcG9wdGluX2hlaWdodH07XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemUud2lkdGggPSBic2lkZV9wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gYnNpZGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJicm93c2luZ1wiKXtcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2s9PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogYnJvd3NpbmdfcG9wdGluX3dpZHRoLCBoZWlnaHQ6IGJyb3dzaW5nX3BvcHRpbl9oZWlnaHR9O1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gYnJvd3NpbmdfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IGJyb3dzaW5nX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZnVsbHBhZ2VcIil7XG4gICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUgPSB7d2lkdGg6IGZ1bGxwYWdlX3BvcHRpbl93aWR0aCwgaGVpZ2h0OiBmdWxscGFnZV9wb3B0aW5faGVpZ2h0fTtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IFwiMTAwJVwiOyAvL2Z1bGxwYWdlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBcIjEwMCVcIjsgLy9mdWxscGFnZV9wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF84Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogZnVsbHBhZ2VfcG9wdGluX3dpZHRoXzIsIGhlaWdodDogZnVsbHBhZ2VfcG9wdGluX2hlaWdodF8yfTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUud2lkdGggPSBmdWxscGFnZV9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gZnVsbHBhZ2VfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJjb250ZW50XCIpe1xuICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBmdWxscGFnZV9wb3B0aW5fd2lkdGgsIGhlaWdodDogZnVsbHBhZ2VfcG9wdGluX2hlaWdodH07XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwic29jaWFsXCIpe1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xJyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF81Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogc29jaWFsX3BvcHRpbl93aWR0aCwgaGVpZ2h0OiBzb2NpYWxfcG9wdGluX2hlaWdodH07XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gc29jaWFsX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gc29jaWFsX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzInIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzYnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBzb2NpYWxfcG9wdGluX3dpZHRoXzIsIGhlaWdodDogc29jaWFsX3BvcHRpbl9oZWlnaHRfMn07XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gc29jaWFsX3BvcHRpbl93aWR0aF8yO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBzb2NpYWxfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF84Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogc29jaWFsX3BvcHRpbl93aWR0aF80LCBoZWlnaHQ6IHNvY2lhbF9wb3B0aW5faGVpZ2h0XzR9O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IHNvY2lhbF9wb3B0aW5fd2lkdGhfNDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gc29jaWFsX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBtb2JpbGVfcG9wdGluX3dpZHRoLCBoZWlnaHQ6IG1vYmlsZV9wb3B0aW5faGVpZ2h0fTtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IG1vYmlsZV9wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gbW9iaWxlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzMnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzgnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBtb2JpbGVfcG9wdGluX3dpZHRoXzIsIGhlaWdodDogbW9iaWxlX3BvcHRpbl9oZWlnaHRfMn07XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gbW9iaWxlX3BvcHRpbl93aWR0aF8yO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBtb2JpbGVfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF85Jyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHt3aWR0aDogbW9iaWxlX3BvcHRpbl93aWR0aCwgaGVpZ2h0OiBtb2JpbGVfcG9wdGluX2hlaWdodF80fTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gbW9iaWxlX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNScgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMTAnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBtb2JpbGVfcG9wdGluX3dpZHRoLCBoZWlnaHQ6IG1vYmlsZV9wb3B0aW5faGVpZ2h0XzV9O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBtb2JpbGVfcG9wdGluX2hlaWdodF81O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJlbWJlZGRlZFwiKXtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMScpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF8xO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzE7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzInKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUud2lkdGggPSBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gZW1iZWRkZWRfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8zJyl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gZW1iZWRkZWRfcG9wdGluX3dpZHRoXzM7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfMztcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF80O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUud2lkdGggPSBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemUuaGVpZ2h0ID0gZW1iZWRkZWRfcG9wdGluX2hlaWdodF81O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF82Jyl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gZW1iZWRkZWRfcG9wdGluX3dpZHRoXzY7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLmhlaWdodCA9IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNycpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS53aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF83O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0Xzc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjbGljaz09dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplID0ge3dpZHRoOiBwb3B0aW5fc2l6ZS53aWR0aCwgaGVpZ2h0OiBwb3B0aW5fc2l6ZS5oZWlnaHR9O1xuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuICAgICAgICAgICAgICAgIGlmIChjbGljayA9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl9zaXplLmhlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS53aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgcG9wdGluX3NpemUuaGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vICBwb3B0aW5fc2l6ZS53aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdzZXRQb3B0aW5TaXplICcrdGhpc19wb3B0aW5fd2lkdGgrJyAnK3RoaXNfcG9wdGluX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYodGhpc19wb3B0aW5fd2lkdGggIT0gdW5kZWZpbmVkICYmIHRoaXNfcG9wdGluX3dpZHRoICE9ICcnICYmIHRoaXNfcG9wdGluX3dpZHRoICE9IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAgICAgICBsaXRnaHRib3hfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXNfcG9wdGluX2hlaWdodCAhPSB1bmRlZmluZWQgJiYgdGhpc19wb3B0aW5faGVpZ2h0ICE9ICcnICYmIHRoaXNfcG9wdGluX2hlaWdodCAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgICAgICAgICAgbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ3NldFBvcHRpblNpemUgJytsaXRnaHRib3hfcG9wdGluX3dpZHRoKycgJytsaXRnaHRib3hfcG9wdGluX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUgPSB7d2lkdGg6IGxpdGdodGJveF9wb3B0aW5fd2lkdGgsIGhlaWdodDogbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHR9O1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplLndpZHRoID0gbGl0Z2h0Ym94X3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZS5oZWlnaHQgPSBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZSA9IHBvcHRpbl9zaXplO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCksaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW5faWQ6c3RyaW5nXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCBwb3B0aW5zW3BvcHRpbl9pZF0gc2tlbGV0b24gb2JqZWN0IHBlciBwb3B0aW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRQb3B0aW5zQXJyYXkocG9wdGluX2lkKXtcbiAgICAgICAgcG9wdGluc1twb3B0aW5faWRdID0ge1xuICAgICAgICAgICAgcG9wdGluX3NpemU6e30sXG4gICAgICAgICAgICBwb3B0aW5fdHJpZ2dlcjp7fSxcbiAgICAgICAgICAgIHBvcHRpbl9jZW50ZXI6e31cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSxpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbl9pZDpzdGlybmdcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IHBvcHRpbnNbcG9wdGluX2lkXSBza2VsZXRvbiBvYmplY3QgcGVyIHBvcHRpblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFBvcHRpbnNPbkNsaWNrQXJyYXkocG9wdGluX2lkKXtcbiAgICAgICAgcG9wdGluc1twb3B0aW5faWRdID0ge1xuICAgICAgICAgICAgcG9wdGluX3NpemU6e30sXG4gICAgICAgICAgICBwb3B0aW5fdHJpZ2dlcjp7fSxcbiAgICAgICAgICAgIHBvcHRpbl9jZW50ZXI6e31cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIC0+IChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IHNwZWNpYWwgc3R5bGUgZm9yIHBvcHRpbiBwb3N0aW9uIGlmIGFuZHJvaWQgcGhvbmUgZHVlIHRvIGtleWJvYXJkIGlzc3VzZSB3aGVuIHRhcHBpbmcgb24gZmllbGRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZkFuZHJvaWRQb3B0aW5LZXlib3JhZChwb3B0aW4sY2xpY2spe1xuICAgICAgICAvLyBTZXQgZGVmYXVsdCB0cmlnZ2VyIHRvIGZhbHNlXG4gICAgICAgIHZhciBrZXlib2FyZCA9ZmFsc2U7XG4gICAgICAgIC8vIEdldCBwb3B0aW4gdG9wIHBvc3Rpb24gYnkgcHggXG4gICAgICAgIHZhciBvX3RvcCA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ3RvcCcpO1xuICAgICAgICAvLyBHZXQgcG9wdGluIGJvdHRvbSBwb3N0aW9uIGJ5IHB4IFxuICAgICAgICB2YXIgb19ib3R0b20gPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdib3R0b20nKTtcbiAgICAgICAgLy8gaWYgYW5kcm9pZCBwaG9uZSBhbmQgcG9wdGluIHR5cGUgaW4gYXJyYXkgXG4gICAgICAgIHZhciBsaWdodGJveF9wYWRkID0gXCIxMHB4XCI7XG4gICAgICAgIHZhciBnYW1pZmllZF9wYWRkID0gXCIxMHB4XCI7XG4gICAgICAgIHZhciBtb2JpbGVfcGFkZCA9IFwiMTBweFwiO1xuICAgICAgICB2YXIgc3NpZGVfcGFkZCA9IFwiMHB4XCI7XG4gICAgICAgIHZhciBwYWRkaW5nX28gPSB7XCJsaWdodGJveFwiOmxpZ2h0Ym94X3BhZGQsXCJtb2JpbGVcIjptb2JpbGVfcGFkZCxcInNzaWRlXCI6c3NpZGVfcGFkZCxcImdhbWlmaWVkXCI6Z2FtaWZpZWRfcGFkZH07XG4gICAgICAgIGlmIChpZkFuZHJvaWRQb3B0aW4gJiYgalEyMjQuaW5BcnJheShwb3B0aW4ucG9wdGluX3R5cGUsW1wibGlnaHRib3hcIixcIm1vYmlsZVwiLFwic3NpZGVcIixcImdhbWlmaWVkXCJdKSA+LTEpe1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgIC8vIG9mZiBhbGwgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgICAgICBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuaW5wdXRzLWNvbnRhaW5lciBpbnB1dCcpLm9mZihcImNsaWNrXCIpO1xuICAgICAgICAgICAgICAgIC8valEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikub2ZmKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAgICAgalEyMjQod2luZG93KS5vZmYoXCJjbGlja1wiKTtcbiAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9TZXQgcG9wdGluIGZpZWxkIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAvLyBQdXNoIHBvcHRpbiB1cFxuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmlucHV0cy1jb250YWluZXIgaW5wdXRcIikub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBvcHRpbiBwb3N0aW9uIGlzIG5vdCB0b3BcbiAgICAgICAgICAgICAgICBpZiAoIWtleWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzc2lkZVwiICYmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF84Jykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmFuaW1hdGUoeyd0b3AnOlwiLTEwMHB4XCJ9LDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24uaW5kZXhPZigndG9wJykgPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24uaW5kZXhPZignYm90dG9tJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmFuaW1hdGUoeyd0b3AnOnBhZGRpbmdfb1twb3B0aW4ucG9wdGluX3R5cGVdfSwzMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmFuaW1hdGUoeyd0b3AnOnBhcnNlSW50KGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ3RvcCcpKSAtIDEwMCArJ3B4J30sMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9mZiB3aW5kb3cgcG9wdGluIHJlc2l6ZSBmdW5jdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIC8valEyMjQod2luZG93KS5vZmYoXCJyZXNpemVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vU2V0IHdpbmRvdyBjbGljayBldmVudFxuICAgICAgICAgICAgLy8gUHVzaCBwb3B0aW4gZG93biAtIGRlZmF1bHQgcG9zaXRpb25cbiAgICAgICAgICAgIGpRMjI0KHdpbmRvdykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBjbGlja2VkIG91dHNpZGUgcG9wdGluIGlucHV0cyBmaWVsZHMgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgaWYgKGpRMjI0KGUudGFyZ2V0KS5wYXJlbnRzKCcuaW5wdXRzLWNvbnRhaW5lcicpLmxlbmd0aCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9sb2NhdGlvbi5pbmRleE9mKCd0b3AnKSA9PSAtMSB8fCAocG9wdGluLnBvcHRpbl90eXBlID09IFwic3NpZGVcIiAmJiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOCcpKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24uaW5kZXhPZignYm90dG9tJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ3RvcCcsJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYW5pbWF0ZSh7J2JvdHRvbSc6b19ib3R0b219LDMwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hbmltYXRlKHsndG9wJzpwYXJzZUludChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCd0b3AnKSkgKyAxMDAgKydweCd9LDMwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHBvcHRpbiB3aW5kb3cgcmVzaXplIGJhY2sgdG8gb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2luZG93UmVzaXplKHBvcHRpbixjbGljayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNob3dQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IElmIHBvcHRpbiBjbGllbnQgaXMgbm90IGZyZWVtaXVtIC0+IHJlbW92ZSBwb3B0aW4gY3JlZGl0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IEVsc2UgLT4gQWRkIHBvcHRpbiBjcmVkaXQgaWYgZnJlZW1pdW0gYW5kIGNyZWRpdCBkaXYgbm90IGV4aXN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJQb3B0aW5DcmVkaXQocG9wdGluKXtcbiAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbi1jcmVkaXRcIikucmVtb3ZlKCk7XG4gICAgICAgIHNob3dMb2coJ2NsZWFyUG9wdGluQ3JlZGl0MScpO1xuICAgICAgICBpZiAocG9wdGluLmlmX3BvcHRpbl9jcmVkaXQpe1xuICAgICAgICAgICAgaW5zZXJ0UG9wdGluQ3JlZGl0KHBvcHRpbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBjbGVhclBvcHRpbkNyZWRpdCgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSW5zZXJ0IGNyZWRpdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFBvcHRpbkNyZWRpdChwb3B0aW4pe1xuICAgICAgICBzaG93TG9nKCdpbnNlcnRQb3B0aW5DcmVkaXQnKTtcbiAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY2hpbGRyZW4oJ2RpdiwgZm9ybScpLmFwcGVuZChodG1sX2NyZWRpdCk7XG4gICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW4tY3JlZGl0IGFcIikuYXR0cignaHJlZicsKHVzZXJfbGFuZz09XCJlblwiP3BvcHRpbl9jb21fdXJsOnBvcHRpbl9pbF91cmwpKyc/c3JjPScrd2luZG93LmxvY2F0aW9uLmhvc3QpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGNsb3NlUG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluX2lkOnN0cmluZ1xuICAgICAqIERlc2MgICAgICAgICAgICAgOiBJZiBwb3B0aW4gdHlwZSBpcyAnYmFyJyBhbmQgbG9jYXRpb24gaXMgJ3RvcCcgYW5kIHR5cGUgaXMgbm90IGRvd24gLT4gY2xvZGUgcGFkZGluZyBnYXBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaXhIdG1sUGFkZGluZygpe1xuICAgICAgICBpZiAoaWZfaHRtbF9wYWQpXG4gICAgICAgICAgICBqUTIyNChcImh0bWxcIikuYW5pbWF0ZSh7XCJwYWRkaW5nLXRvcFwiOiAnMHB4J30sNTAwKTtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICogU3RyaW5nIGZvcm1hdHRlciBmdW5jdGlvbnM6IGZvcm1hdFN0cmluZ1RvU2x1ZygpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IFRleHQ6c3RyaW5nXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IHRoaXMgZnVuY3Rpb24gbWFrZXMgcmVtb3ZlcyBzcGFjZXMgYW5kIGFkZHMgLSBvbiBzdHJpbmcgYWxzbyByZW1vdmVzIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0U3RyaW5nVG9TbHVnKFRleHQpIHtcbiAgICAgICAgcmV0dXJuIFRleHRcbiAgICAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcdyBdKy9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvICsvZywgJy0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogY3NzRml4KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogdmFsdWU6c3RyaW5nKGZvbnQtZmFtaWx5IHN0cmluZyBsaWtlICdEYXZpZCcpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IERvd25sb2FkICYgYXBwZW5kIGZvbnQgZmlsZSBmcm9tIGdvb2dsZSBpZiBmb250LWZhbWlseSAhPT0gJ09wZW4gU2FucydcbiAgICAgKi9cbiAgICB2YXIgcG9wdGluX2ZvbnRzID0gW1wiVmVyZGFuYSwrR2VuZXZhLCtzYW5zLXNlcmlmXCIsXCJBcmlhbCwrSGVsdmV0aWNhLCtzYW5zLXNlcmlmXCIsXCJBcmlhbCtCbGFjaywrR2FkZ2V0LCtzYW5zLXNlcmlmXCIsXCJDb21pYytTYW5zK01TLCtjdXJzaXZlLCtzYW5zLXNlcmlmXCIsXCJHZW9yZ2lhLCtzZXJpZlwiLFwiSW1wYWN0LCtDaGFyY29hbCwrc2Fucy1zZXJpZlwiLFwiTHVjaWRhK1NhbnMrVW5pY29kZSwrTHVjaWRhK0dyYW5kZSwrc2Fucy1zZXJpZlwiLFwiUGFsYXRpbm8rTGlub3R5cGUsK0Jvb2srQW50aXF1YSwrUGFsYXRpbm8sK3NlcmlmXCIsXCJUYWhvbWEsK0dlbmV2YSwrc2Fucy1zZXJpZlwiLFwiVGltZXMrTmV3K1JvbWFuLCtUaW1lcywrc2VyaWZcIixcIlRyZWJ1Y2hldCtNUywrSGVsdmV0aWNhLCtzYW5zLXNlcmlmXCJdO1xuXHR2YXIgcG9wdGluX2dvb2dsZV9mb250cyA9IFtcIkFjbG9uaWNhXCIsXCJBbGVmXCIsXCJBbGxhblwiLFwiQWxsZXJ0YSBTdGVuY2lsXCIsXCJBbGxlcnRhXCIsXCJBbWFyYW50aFwiLFwiQW1hdGljYSBTQ1wiLFwiQW5uaWUgVXNlIFlvdXIgVGVsZXNjb3BlXCIsXCJBbm9ueW1vdXMgUHJvXCIsXCJBbnRvblwiLFwiQXJjaGl0ZWN0cyBEYXVnaHRlclwiLFwiQXJpbW9cIixcIkFydGlmaWthXCIsXCJBcnZvXCIsXCJBc2FwXCIsXCJBc3NldFwiLFwiQXNzaXN0YW50XCIsXCJBc3Rsb2NoXCIsXCJCYW5nZXJzXCIsXCJCZW50aGFtXCIsXCJCZXZhblwiLFwiQmlnc2hvdCBPbmVcIixcIkJvd2xieSBPbmUgU0NcIixcIkJvd2xieSBPbmVcIixcIkJyYXdsZXJcIixcIkNhYmluXCIsXCJDYWxsaWdyYWZmaXR0aVwiLFwiQ2FuZGFsXCIsXCJDYW50YXJlbGxcIixcIkNhcmRvXCIsXCJDYXJ0ZXIgT25lXCIsXCJDYXVkZXhcIixcIkNlZGFydmlsbGUgQ3Vyc2l2ZVwiLFwiQ2hlcnJ5IENyZWFtIFNvZGFcIixcIkNoZXd5XCIsXCJDb2RhXCIsXCJDb21pbmcgU29vblwiLFwiQ29wc2VcIixcIkNvcmJlblwiLFwiQ291c2luZVwiLFwiQ292ZXJlZCBCeSBZb3VyIEdyYWNlXCIsXCJDcmFmdHkgR2lybHNcIixcIkNyaW1zb24gVGV4dFwiLFwiQ3J1c2hlZFwiLFwiQ3VwcnVtXCIsXCJEYW1pb25cIixcIkRhbmNpbmcgU2NyaXB0XCIsXCJEYXZpZCBMaWJyZVwiLFwiRGF3bmluZyBvZiBhIE5ldyBEYXlcIixcIkRpZGFjdCBHb3RoaWNcIixcIkRNIFNhbnNcIixcIkRvc2lzXCIsXCJEcm9pZCBTYW5zXCIsXCJEcm9pZCBTYW5zIE1vbm9cIixcIkRyb2lkIFNlcmlmXCIsXCJETSBTZXJpZiBEaXNwbGF5XCIsXCJFQiBHYXJhbW9uZFwiLFwiRXhvXCIsXCJFeHBsZXR1cyBTYW5zXCIsXCJGb250ZGluZXIgU3dhbmt5XCIsXCJGb3J1bVwiLFwiRnJhbmNvaXMgT25lXCIsXCJGcmFuayBSdWhsIExpYnJlXCIsXCJHZW9cIixcIkdpdmUgWW91IEdsb3J5XCIsXCJHb2JsaW4gT25lXCIsXCJHb3VkeSBCb29rbGV0dGVyIDE5MTFcIixcIkdyYXZpdGFzIE9uZVwiLFwiR3J1cHBvXCIsXCJIYW1tZXJzbWl0aCBPbmVcIixcIkhlZWJvXCIsXCJIb2x0d29vZCBPbmUgU0NcIixcIkhvbWVtYWRlIEFwcGxlXCIsXCJJbmNvbnNvbGF0YVwiLFwiSW5kaWUgRmxvd2VyXCIsXG5cdFwiSU0gRmVsbCBEVyBQaWNhXCIsXCJJTSBGZWxsIERXIFBpY2EgU0NcIixcIklNIEZlbGwgRG91YmxlIFBpY2FcIixcIklNIEZlbGwgRG91YmxlIFBpY2EgU0NcIixcIklNIEZlbGwgRW5nbGlzaFwiLFwiSU0gRmVsbCBFbmdsaXNoIFNDXCIsXCJJTSBGZWxsIEZyZW5jaCBDYW5vblwiLFwiSU0gRmVsbCBGcmVuY2ggQ2Fub24gU0NcIixcIklNIEZlbGwgR3JlYXQgUHJpbWVyXCIsXCJJTSBGZWxsIEdyZWF0IFByaW1lciBTQ1wiLFwiSXJpc2ggR3JvdmVyXCIsXCJJcmlzaCBHcm93bGVyXCIsXCJJc3RvayBXZWJcIixcIkpvc2VmaW4gU2Fuc1wiLFwiSm9zZWZpbiBTbGFiXCIsXCJKdWRzb25cIixcIkp1cmFcIixcIkp1c3QgQW5vdGhlciBIYW5kXCIsXCJKdXN0IE1lIEFnYWluIERvd24gSGVyZVwiLFwiS2FtZXJvblwiLFwiS2VuaWFcIixcIktyYW5reVwiLFwiS3Jlb25cIixcIktyaXN0aVwiLFwiTGEgQmVsbGUgQXVyb3JlXCIsXCJMYXRvXCIsXCJMZWFndWUgU2NyaXB0XCIsXCJMZWt0b25cIixcIkxpYnJlIEJhc2tlcnZpbGxlXCIsXCJMaW1lbGlnaHRcIiwgXCJMb2JzdGVyXCIsXCJMb2JzdGVyIFR3b1wiLFwiTG9yYVwiLFwiTG92ZSBZYSBMaWtlIEEgU2lzdGVyXCIsXCJMb3ZlZCBieSB0aGUgS2luZ1wiLFwiTHVja2llc3QgR3V5XCIsXCJNYWlkZW4gT3JhbmdlXCIsXCJNYWtvXCIsXCJNYXZlbiBQcm9cIixcIk1lZGRvblwiLFwiTWVkaWV2YWxTaGFycFwiLFwiTWVncmltXCIsXCJNZXJyaXdlYXRoZXJcIixcIk1ldHJvcGhvYmljXCIsXCJNaWNocm9tYVwiLFwiTWlsdG9uaWFuIFRhdHRvb1wiLFwiTWlsdG9uaWFuXCIsXCJNaXJpYW0gTGlicmVcIixcIk1vZGVybiBBbnRpcXVhXCIsXCJNb2xlbmdvXCIsXCJNb25vZmV0dFwiLFwiTW9udHNlcnJhdFwiLFwiTW91bnRhaW5zIG9mIENocmlzdG1hc1wiLFwiTXVsaVwiLFwiTmV1Y2hhXCIsXCJOZXV0b25cIixcIk5ld3MgQ3ljbGVcIixcIk5peGllIE9uZVwiLFwiTm9iaWxlXCIsXCJOb3ZhIEN1dFwiLFwiTm92YSBGbGF0XCIsXCJOb3ZhIE1vbm9cIixcIk5vdmEgT3ZhbFwiLFwiTm92YSBSb3VuZFwiLFwiTm92YSBTY3JpcHRcIixcIk5vdmEgU2xpbVwiLFwiTm92YSBTcXVhcmVcIixcIk51bml0b1wiLFwiTnVuaXRvIFNhbnNcIixcIk9GTCBTb3J0cyBNaWxsIEdvdWR5IFRUXCIsXG5cdFwiT2xkIFN0YW5kYXJkIFRUXCIsXCJPcGVuIFNhbnNcIixcIk9wZW4gU2FucyBDb25kZW5zZWRcIixcIk9wZW4gU2FucyBIZWJyZXdcIixcIk9yYml0cm9uXCIsXCJPc3dhbGRcIixcIk92ZXIgdGhlIFJhaW5ib3dcIixcIlBhY2lmaWNvXCIsXCJQYXRyaWNrIEhhbmRcIixcIlBheXRvbmUgT25lXCIsXCJQZXJtYW5lbnQgTWFya2VyXCIsXCJQaGlsb3NvcGhlclwiLFwiUGxheVwiLFwiUGxheWZhaXIgRGlzcGxheVwiLFwiUG9ka292YVwiLFwiUG9wcGluc1wiLFwiUFQgU2Fuc1wiLFwiUFQgU2FucyBOYXJyb3dcIixcIlBUIFNlcmlmXCIsXCJQVCBTZXJpZiBDYXB0aW9uXCIsXCJQdXJpdGFuXCIsXCJRdWF0dHJvY2VudG9cIixcIlF1YXR0cm9jZW50byBTYW5zXCIsXCJRdWlja3NhbmRcIixcIlJhZGxleVwiLFwiUmFsZXdheVwiLFwiUmVkcmVzc2VkXCIsXCJSZWVuaWUgQmVhbmllXCIsXCJSb2NrIFNhbHRcIixcIlJva2tpdHRcIixcIlJvYm90b1wiLFwiUnViaWtcIixcIlJ1c2xhbiBEaXNwbGF5XCIsXCJTY2hvb2xiZWxsXCIsXCJTZWN1bGFyIE9uZVwiLFwiU2hhZG93cyBJbnRvIExpZ2h0XCIsXCJTaGFudGlcIixcIlNpZ21hciBPbmVcIixcIlNpeCBDYXBzXCIsXCJTbGFja2V5XCIsXCJTbXl0aGVcIixcIlNvdXJjZSBTYW5zIFByb1wiLFwiU3BlY2lhbCBFbGl0ZVwiLFwiU3RhcmRvcyBTdGVuY2lsXCIsXCJTdWUgRWxsZW4gRnJhbmNpc2NvXCIsXCJTdWV6IE9uZVwiLFwiU3Vuc2hpbmV5XCIsXCJTd2Fua3kgYW5kIE1vbyBNb29cIixcIlN5bmNvcGF0ZVwiLFwiVGFuZ2VyaW5lXCIsXCJUZW5vciBTYW5zXCIsXCJUZXJtaW5hbCBEb3NpcyBMaWdodFwiLFwiVGhlIEdpcmwgTmV4dCBEb29yXCIsXCJUaW5vc1wiLFwiVWJ1bnR1XCIsXCJVbHRyYVwiLFwiVW5rZW1wdFwiLFwiVW5pZnJha3R1ckNvb2tcIixcIlVuaWZyYWt0dXJNYWd1bnRpYVwiLFwiVmFyZWxhXCIsXCJWYXJlbGEgUm91bmRcIixcIlZpYnVyXCIsXCJWb2xsa29yblwiLFwiVlQzMjNcIixcIldhaXRpbmcgZm9yIHRoZSBTdW5yaXNlXCIsXCJXYWxscG9ldFwiLFwiV2FsdGVyIFR1cm5jb2F0XCIsXCJXaXJlIE9uZVwiLFwiWWFub25lIEthZmZlZXNhdHpcIixcIlllc2V2YSBPbmVcIixcIlpleWFkYVwiLFwiWmlsbGEgU2xhYlwiXTtcbiAgICBmdW5jdGlvbiBnZXRGb250KHZhbHVlKXtcbiAgICAgICAgc3BsaXQgPSB2YWx1ZS5zcGxpdCgnZm9udC1mYW1pbHknKVsxXS5zcGxpdCgnOycpWzBdO1xuICAgICAgICB2YXIgZm9udF9uYW1lID0gc3BsaXQucmVwbGFjZSgnIWltcG9ydGFudCcsJycpLnJlcGxhY2UoL1xcOi9nLCcnKS5yZXBsYWNlKC9cXFwiL2csJycpLnJlcGxhY2UoL1xcJy9nLCcnKS50cmltKCk7XG5cdFx0dmFyIGN1c3RvbUZvbnRzID0galEyMjQoXCIucG9wdGluLXBvcHVwXCIpLmF0dHIoXCJkYXRhLWN1c3RvbS1mb250c1wiKTtcblx0XHRpZihjdXN0b21Gb250cyAhPSB1bmRlZmluZWQgJiYgY3VzdG9tRm9udHMuc3BsaXQoXCIsXCIpLmluY2x1ZGVzKGZvbnRfbmFtZSkpe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgX2ZvbnQgPSBmb250X25hbWUucmVwbGFjZSgvXFxzL2csICcrJyk7XG4gICAgICAgIGpRMjI0KCdsaW5rJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhpc19ocmVmID0galEyMjQodGhpcykuYXR0cignaHJlZicpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICB0aGlzX2hyZWYuaW5kZXhPZignenA0NnNjNmd3c2kycWt2b2x6ZGIya2c1MnUweWZmd2gubGFtYmRhLXVybC51cy13ZXN0LTIub24uYXdzJykgPT0gLTEgJiZcbiAgICAgICAgICAgICAgICB0aGlzX2hyZWYuaW5kZXhPZihfZm9udC50b0xvd2VyQ2FzZSgpKSA9PSAtMSAmJlxuICAgICAgICAgICAgICAgIHBvcHRpbl9mb250cy5pbmRleE9mKF9mb250KSA9PSAtMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcG9wdGluX2ZvbnRzLnB1c2goX2ZvbnQpO1xuICAgICAgICAgICAgICAgIGlmKF9mb250PT1cIk9wZW4rU2FucytIZWJyZXdcIil7XG4gICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiI3BvcHRpbl9vcGVuc2Fuc2hlYnJld19mb250X3ByZWxvYWRcIikubGVuZ3RoPT0wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJwcmVsb2FkXCIgaWQ9XCJwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9wcmVsb2FkXCIgYXM9XCJzdHlsZVwiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4vP2ZhbWlseT1PcGVuJTIwU2FucyUyMEhlYnJldyZkaXNwbGF5PXN3YXBcIj4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZihqUTIyNChcIiNwb3B0aW5fb3BlbnNhbnNoZWJyZXdfZm9udF9saW5rXCIpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGlkPVwicG9wdGluX29wZW5zYW5zaGVicmV3X2ZvbnRfbGlua1wiIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4vP2ZhbWlseT1PcGVuJTIwU2FucyUyMEhlYnJldyZkaXNwbGF5PXN3YXBcIj4nKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZF9zbHVnPWZvcm1hdFN0cmluZ1RvU2x1ZyhfZm9udCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250X3ByZWxvYWRfaWQ9XCJwb3B0aW4tcHJlbG9hZC1cIitmb3JtYXR0ZWRfc2x1ZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRfbGlua19pZD1cInBvcHRpbi1saW5rLVwiK2Zvcm1hdHRlZF9zbHVnO1xuXHRcdFx0XHRcdFx0aWYoIXBvcHRpbl9nb29nbGVfZm9udHMuaW5jbHVkZXMoZm9udF9uYW1lKSl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXBvcHRpbl9kaXNhYmxlX2ZvbnRzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNCgnIycrZm9udF9wcmVsb2FkX2lkKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwicHJlbG9hZFwiIGlkPVwiJytmb250X3ByZWxvYWRfaWQrJ1wiIGFzPVwic3R5bGVcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5wb3B0LmluP2ZhbWlseT0nK19mb250KycmZGlzcGxheT1zd2FwXCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KCcjJytmb250X2xpbmtfaWQpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaWQ9XCInK2ZvbnRfbGlua19pZCsnXCIgIGhyZWY9XCJodHRwczovL2ZvbnRzLnBvcHQuaW4/ZmFtaWx5PScrX2ZvbnQrJyZkaXNwbGF5PXN3YXBcIiB0eXBlPVwidGV4dC9jc3NcIj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihwb3B0aW5fZGlzYWJsZV9mb250cyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZm9ybWF0dGVkX3NsdWchPT0ncG9wcGlucycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNCgnIycrZm9udF9wcmVsb2FkX2lkKS5sZW5ndGg9PTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJ2hlYWQnKS5hcHBlbmQoJzxsaW5rIHJlbD1cInByZWxvYWRcIiBpZD1cIicrZm9udF9wcmVsb2FkX2lkKydcIiBhcz1cInN0eWxlXCIgaHJlZj1cImh0dHBzOi8vZm9udHMucG9wdC5pbj9mYW1pbHk9JytfZm9udCsnJmRpc3BsYXk9c3dhcFwiPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KCcjJytmb250X2xpbmtfaWQpLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGlkPVwiJytmb250X2xpbmtfaWQrJ1wiICBocmVmPVwiaHR0cHM6Ly9mb250cy5wb3B0LmluP2ZhbWlseT0nK19mb250KycmZGlzcGxheT1zd2FwXCIgdHlwZT1cInRleHQvY3NzXCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkU2NyYXRjaENhcmRGdW5jdGlvbmFsaXR5KHBvcHRpbikge1xuICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImdhbWlmaWVkX2Zvcm1hdF8yXCIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jb3VudFNjcmF0Y2hQcm9ncmVzcyA9IGZ1bmN0aW9uIChwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihwZXJjZW50KSA8PSA1MCkge1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluU2NyYXRjaEFyZWFcIikuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNwb3B0aW5EcmFnZ2FibGVDb250YWluZXInKS5yZW1vdmVDbGFzcyhcInBvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpblsnZGVzaWduX3Byb3BlcnRpZXMnXSAmJiBwb3B0aW5bJ2Rlc2lnbl9wcm9wZXJ0aWVzJ11bJ2Rpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiddICYmIHBvcHRpblsnZGVzaWduX3Byb3BlcnRpZXMnXVsnZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuJ10gPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd193aW5uaW5nX3NjcmVlbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmTGlua0NvbnZlcnNpb24ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fcGxheV9zY3JlZW5cIikuYWRkQ2xhc3MoXCJwb3B0aW4tdmlzaWJsZSBwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LDgwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9wdGluU2NyYXRjaENhcmRJbml0KCcnLCBwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qTWFuYWdlIFBvcHRpbiBUYWIqL1xuICAgIGZ1bmN0aW9uIGlzVGFiRW5hYmxlKHBvcHRpbil7XG4gICAgICAgIC8vaWYoIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVtkYXRhLWhhc3RhYj0nMSddXCIpLmxlbmd0aCA+IDAgJiYgcG9wdGluLmlzX3RlYXNlcnNfb24pe1xuICAgICAgICBpZihwb3B0aW4uaXNfdGVhc2Vyc19vbil7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlBvcHRpbiBOZXdzIFRpY2tlciovXG4gICAgZnVuY3Rpb24gbG9hZHBvcHRpbk5ld3NUaWNrZXIocG9wdGluKXtcbiAgICAgICAgaWYoalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItdGlja2VyXCIpLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWVkaXRvci10aWNrZXJcIikuZWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydF93aWR0aD1qUTIyNCh0aGlzKS5wYXJlbnQoJy5wb3B0aW4tbmV3c3RpY2tlci1lbGVtZW50Jykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG50RGF0YSA9IGpRMjI0KHRoaXMpLmRhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG50U3BlZWQgPSBudERhdGFbJ2R1cmF0aW9uJ10gPyBudERhdGFbJ2R1cmF0aW9uJ10gOiA3MDAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnREdXJhdGlvbiA9IG50U3BlZWQgLyA0MDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudERpcmVjdGlvbiA9IG50RGF0YVsnZGlyZWN0aW9uJ10gPyBudERhdGFbJ2RpcmVjdGlvbiddIDogXCJsZWZ0XCIgO1xuXG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcyh7XCJvdmVyZmxvd1wiOlwiaGlkZGVuXCIsXCJ3aWR0aFwiOnBhcnRfd2lkdGgrXCJweFwiLFwicG9zaXRpb25cIjpcInJlbGF0aXZlXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykud3JhcElubmVyKCc8ZGl2IGNsYXNzPVwianMtcG9wdGluTmV3c1RpY2tlci13cmFwcGVyIGRpci0nK250RGlyZWN0aW9uKydcIj48ZGl2IGNsYXNzPVwianMtcG9wdGluTmV3c1RpY2tlclwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAwcHg7bWFyZ2luLWxlZnQ6IDBweDs7d2hpdGUtc3BhY2U6IG5vd3JhcDtcIj48L2Rpdj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmpzLXBvcHRpbk5ld3NUaWNrZXItd3JhcHBlcicpLmNzcyh7XCJhbmltYXRpb24tZHVyYXRpb25cIjogbnREdXJhdGlvbisncycsIFwiLW1vei1hbmltYXRpb24tZHVyYXRpb25cIjpudER1cmF0aW9uKydzJywgXCItd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvblwiOm50RHVyYXRpb24rJ3MnfSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sMTAwKTtcbiAgICAgICAgfVxuICAgIH1cblx0XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHBvcHRpblZpZXdlZCgpLCBwb3B0aW5Db252ZXJzaW9uLCBjbG9zZVBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSXQgYnVpbGRzIHRoZSBwb3B0aW4gb2JqZWN0IHRoYXQgaXMgdG8gYmUgc2VudCBpbiBET00gZXZlbnRzXG4gICAgICovXG5cdGZ1bmN0aW9uIHBvcHRpbkV2ZW50RGV0YWlscyhwb3B0aW4sIGV4dHJhcyl7XG5cdFx0ZXh0cmFzID0gZXh0cmFzID8gZXh0cmFzIDoge307XG5cdFx0dmFyIHBvcHRpbkRldGFpbHMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRcdFwicG9wdGluX2lkXCIgOiBwb3B0aW4ucG9wdGluX2lkLFxuXHRcdFx0XCJwb3B0aW5fbmFtZVwiIDogcG9wdGluLnBvcHRpbl9uYW1lLFxuXHRcdFx0XCJwb3B0aW5fdGFyZ2V0XCIgOiBwb3B0aW4ucG9wdGluX3RhcmdldCxcblx0XHRcdFwicG9wdGluX3R5cGVcIiA6IHBvcHRpbi5wb3B0aW5fdHlwZSxcblx0XHRcdFwiYWNjb3VudF9pZFwiIDogcG9wdGluLmFjY291bnRfaWRcblx0XHR9LCBleHRyYXMpO1xuXHRcdHJldHVybiBwb3B0aW5EZXRhaWxzO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdCB8IGNsaWNrOkJvb2xlYW4gKGlmIHBvcHRpbiBjbGljayB0cmlnZ2VyKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBNYWtlIHRoZSBwb3B0aW4gdmlzaWJsZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3dQb3B0aW4ocG9wdGluLCBjbGljayx0YWIpe1xuICAgICAgICBpZiAoIHBvcHRpblRpbWVyKHBvcHRpbikgKXtcbiAgICAgICAgICAgIHNob3dMb2coJ3Nob3dQb3B0aW46ICcrcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgICAgICAvL3NldEpxdWVyeVVpU2hha2VBbmltYXRpb24oKTtcbiAgICAgICAgICAgIGNzc0ZpeChwb3B0aW4pO1xuICAgICAgICAgICAgY2xlYXJQb3B0aW5DcmVkaXQocG9wdGluKTtcbiAgICAgICAgICAgIC8valEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdLCAucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG4gICAgICAgICAgICBpZiAoIHBvcHRpbi5wb3B0aW5fdGFyZ2V0ID09IFwic29jaWFsX3Byb29mXCIgKXtcbiAgICAgICAgICAgICAgICBzZXRTb2NpYWxQcm9vZkJlaGF2ZXJJbnRlcnZhbChwb3B0aW4sIGNsaWNrKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVGFiaHRtbChwb3B0aW4pO1xuICAgICAgICAgICAgICAgIHNob3dFZmZlY3QocG9wdGluLFwiZW50cnlcIik7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5zaG93biA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmplY3RGYWNlYm9va1BsdWdpbihwb3B0aW4pO1xuICAgICAgICAgICAgYW5pbWF0ZUJ1dHRvbihwb3B0aW4pO1xuXG5cdFx0XHQvLyBFbmFibGUgc3BpbiBmb3Igd2hlZWxcblx0XHRcdGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiKXtcblx0XHRcdFx0aWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzFcIikge1xuXHRcdFx0XHRcdGFuaW1hdGVHaWZ0Ym94KHBvcHRpbik7XG5cdFx0XHRcdFx0Z2FtaWZpZWRHaWZ0Ym94KHBvcHRpbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuICAgICAgICAgICAgaWYoICEocG9wdGluLnBvcHRpbl90eXBlID09ICdlbWJlZGRlZCcgfHwgcG9wdGluLnBvcHRpbl90eXBlID09ICdmdWxscGFnZScpICl7XG4gICAgICAgICAgICAgICAgbG9hZGJnQW5pbWF0aW9uT3ZlcmxheShwb3B0aW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2FkcG9wdGluTmV3c1RpY2tlcihwb3B0aW4pO1xuICAgICAgICAgICAgbG9hZFNjcmF0Y2hDYXJkRnVuY3Rpb25hbGl0eShwb3B0aW4pXG4gICAgICAgICAgICBsb2FkY291cG9uYnV0dG9uKHBvcHRpbik7XG4gICAgICAgICAgICByZWFkeWxpbmtidXR0b25zKHBvcHRpbik7XG4gICAgICAgICAgICAvL3Nob3dFZmZlY3QocG9wdGluKTtcbiAgICAgICAgICAgIHB1c2hIdG1sRG93bihwb3B0aW4pO1xuICAgICAgICAgICAgcGFkZGluZ1hCdXR0b24ocG9wdGluKTtcbiAgICAgICAgICAgIHBvcHRpbkZvcm1DbGlja1N1Ym1pdChwb3B0aW4sIGNsaWNrKTtcbiAgICAgICAgICAgIC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5kYXRhX3BvaW50Lm9uU2hvdyhwb3B0aW4pO1xuICAgICAgICAgICAgaWYoIXBvcHRpbi5pc190ZWFzZXJzX29uKXtcbiAgICAgICAgICAgICAgICBwb3B0aW5WaWV3ZWQocG9wdGluKTtcbiAgICAgICAgICAgIH1lbHNlIGlmKHBvcHRpbi5pc190ZWFzZXJzX29uICYmIGpRMjI0KCdkaXYjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJyArIHBvcHRpbi5wb3B0aW5faWQgKyAnXCJdJykubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIiArIHBvcHRpbi5wb3B0aW5faWQgKyBcIl1cIikuYXR0cihcImRhdGEtdGFic2hvd1wiKSAhPSAndW5kZWZpbmVkJyAmJiBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCJdXCIpLmF0dHIoXCJkYXRhLXRhYnNob3dcIikgIT0gJ2FmdGVyX2Nsb3NlJyl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpblZpZXdlZChwb3B0aW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYocG9wdGluLmlzX3RlYXNlcnNfb24gJiYgalEyMjQoJ2RpdiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInICsgcG9wdGluLnBvcHRpbl9pZCArICdcIl0nKS5sZW5ndGggPT0gMCAmJiBqUTIyNCgnLnBvcHRpbi1wb3B1cC5wb3B0aW4tbGl2ZVtkYXRhLXBvcHRpbi1pZD1cIicgKyBwb3B0aW4ucG9wdGluX2lkICsgJ1wiXScpLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIHBvcHRpblZpZXdlZChwb3B0aW4pO1xuICAgICAgICAgICAgfVxuXG5cdFx0fVxuICAgIH1cblxuICAgIC8vIGFzeW5jIGZ1bmN0aW9uIHNldFNvY2lhbFByb29mQmVoYXZlcihwb3B0aW4sIGNsaWNrLCRzbGVlcCl7XG4gICAgLy8gIHZhciBpID0gMDsgIFxuICAgIC8vICBmb3IoaSA7IGk8cG9wdGluLnNvY2lhbF9wcm9vZi5sZW5ndGg7IGkrKyl7XG4gICAgLy8gICAgICBpZiAoc29jaWFsUHJvb2ZJbnRlcnZhbFtwb3B0aW4ucG9wdGluX2lkXS5hY3RpdmUpe1xuICAgIC8vICAgICAgICAgIHJldmlldyA9IHBvcHRpbi5zb2NpYWxfcHJvb2ZbaV1cbiAgICAvLyAgICAgICAgICBzZXRTb2NpYWxQcm9vZlJldmlldyhwb3B0aW4scmV2aWV3KTtcbiAgICAvLyAgICAgICAgICBhd2FpdCBzbGVlcCgkc2xlZXApXG4gICAgLy8gICAgICAgICAgaGlkZUVmZmVjdChwb3B0aW4pO1xuICAgIC8vICAgICAgICAgIGF3YWl0IHNsZWVwKCRzbGVlcCk7XG4gICAgLy8gICAgICB9XG4gICAgLy8gICAgIH07XG4gICAgLy8gfVxuXG4gICAgLy8gZnVuY3Rpb24gc2V0U29jaWFsUHJvb2ZCZWhhdmVySW50ZXJ2YWwocG9wdGluLCBjbGljayl7XG4gICAgLy8gIHNob3dMb2coJ3NldFNvY2lhbFByb29mQmVoYXZlckludGVydmFsJylcblxuICAgIC8vICBpZiAocG9wdGluLnNvY2lhbF9wcm9vZi5sZW5ndGg+MCl7XG4gICAgLy8gICAgICBpbnNlcnRQb3B0aW5DcmVkaXQocG9wdGluKTtcbiAgICAvLyAgICAgIHZhciAkcG9wdGluICA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKVxuICAgIC8vICAgICAgdmFyICRzbGVlcCA9ICRwb3B0aW4uYXR0cignZGF0YS1yZXZpZXctbG9vcCcpID09IHVuZGVmaW5lZCA/IDUwMDAgOiAgJHBvcHRpbi5hdHRyKCdkYXRhLXJldmlldy1sb29wJykqMTAwMFxuICAgIC8vICAgICAgc29jaWFsUHJvb2ZJbnRlcnZhbFtwb3B0aW4ucG9wdGluX2lkXSA9IHthY3RpdmU6dHJ1ZSwgaW50ZXJ2YWw6bnVsbH07XG4gICAgLy8gICAgICBzZXRTb2NpYWxQcm9vZkJlaGF2ZXIocG9wdGluLCBjbGljaywkc2xlZXApXG4gICAgLy8gICAgICAvLyBzaG93TG9nKCRzbGVlcClcbiAgICAvLyAgICAgIHNvY2lhbFByb29mSW50ZXJ2YWxbcG9wdGluLnBvcHRpbl9pZF0uaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgIC8vICAgICAgICAgIHNldFNvY2lhbFByb29mQmVoYXZlcihwb3B0aW4sIGNsaWNrLCRzbGVlcClcbiAgICAvLyAgICAgIH0sJHNsZWVwKnBvcHRpbi5zb2NpYWxfcHJvb2YubGVuZ3RoKjIpXG4gICAgLy8gIH1cbiAgICAvLyB9XG5cbiAgICAvLyBmdW5jdGlvbiBjYW5jZWxTb2NpYWxQcm9vZkludGVydmFsKHBvcHRpbl9pZCl7XG4gICAgLy8gIGlmIChzb2NpYWxQcm9vZkludGVydmFsW3BvcHRpbl9pZF0gIT09IHVuZGVmaW5lZCl7XG4gICAgLy8gICAgICBzb2NpYWxQcm9vZkludGVydmFsW3BvcHRpbl9pZF0uYWN0aXZlID0gZmFsc2U7XG4gICAgLy8gICAgICBjbGVhckludGVydmFsKHNvY2lhbFByb29mSW50ZXJ2YWxbcG9wdGluX2lkXS5pbnRlcnZhbCk7XG4gICAgLy8gIH1cbiAgICAvLyB9XG5cbiAgICAvLyBmdW5jdGlvbiBzZXRTb2NpYWxQcm9vZlJldmlldyhwb3B0aW4scmV2aWV3KXtcbiAgICAvLyAgc2hvd0xvZygnc2V0U29jaWFsUHJvb2ZSZXZpZXcnKVxuICAgIC8vICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdib3gtc2hhZG93Jywnbm9uZScpXG4gICAgLy8gICR0aGlzID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNzb2NpYWxQcm9vZkNvbnRhaW5lclwiKVxuICAgIC8vICAkdGhpcy5maW5kKCcjc3BUZXh0JykuaHRtbChyZXZpZXcudGV4dClcbiAgICAvLyAgJHRoaXMuZmluZCgnI3NwQ3JlYXRlZCcpLmh0bWwocmV2aWV3LmNyZWF0ZWRfYXQpXG4gICAgLy8gICR0aGlzLmZpbmQoJyNzcFJhdGluZycpLmh0bWwocmV2aWV3LnJhdGluZylcbiAgICAvLyAgJHRoaXMuZmluZCgnI3NwTmFtZScpLmh0bWwocmV2aWV3LnJldmlld2VyX25hbWUpXG4gICAgLy8gICR0aGlzLmZpbmQoJyNzcFByb2ZpbGVJbWcgaW1nJykuYXR0cignc3JjJyxyZXZpZXcucmV2aWV3ZXJfaW1nKVxuXG4gICAgLy8gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgIHNob3dFZmZlY3QocG9wdGluKTtcbiAgICAvLyAgfSwyMDApXG4gICAgLy8gfVxuXG4gICAgLy8gZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICAvLyAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbiAgICAvLyB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2hvd1BvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogaW5qZWN0IGZhY2Vib29rIGNoYXQgcGx1Z2luIGNvZGUgdG8gRE9NXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5qZWN0RmFjZWJvb2tQbHVnaW4ocG9wdGluKXtcbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZStcIl9cIitwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcInNvY2lhbF9mb3JtYXRfM1wiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZStcIl9cIitwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcInNvY2lhbF9mb3JtYXRfN1wiKXtcbiAgICAgICAgICAgIHNob3dMb2coJ2luZ2VjdEZhY2Vib29rQ2hhdCcpO1xuICAgICAgICAgICAgaW5qZWN0X2NoYXRfc2RrID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5mYWNlYm9vay1wbHVnaW5cIikuYXR0cignZGF0YS1mYWNlYm9vay1jaGF0LXBsdWdpbicpO1xuICAgICAgICAgICAgaWYgKGluamVjdF9jaGF0X3Nkay5pbmRleE9mKCdzZGsuanMnKSA+MCl7XG4gICAgICAgICAgICAgICAgaW5qZWN0X2NoYXRfc2RrID0gaW5qZWN0X2NoYXRfc2RrLnJlcGxhY2UoXCJzZGsuanNcIiwgXCJzZGsveGZibWwuY3VzdG9tZXJjaGF0LmpzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalEyMjQoJ2JvZHknKS5hcHBlbmQoaW5qZWN0X2NoYXRfc2RrKTtcbiAgICAgICAgfWVsc2UgaWYocG9wdGluLnBvcHRpbl90eXBlK1wiX1wiK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwic29jaWFsX2Zvcm1hdF80XCIgfHwgcG9wdGluLnBvcHRpbl90eXBlK1wiX1wiK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwic29jaWFsX2Zvcm1hdF84XCIpe1xuICAgICAgICAgICAgc2hvd0xvZygnaW5nZWN0RmFjZWJvb2tTZW5kVG9NZXNzYW5nZXJQbHVnaW4nKTtcbiAgICAgICAgICAgIC8vZmFjZWJvb2tfbWVzc2FuZ2VyX2RhdGFfcmVmID0gJ3BvcHRpbi0nK3BvcHRpbi5wb3B0aW5faWQrJ3xjbGllbnQtJytnZXRDbGllbnRJZCgpKyd8dW5pcWUtJytNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KTtcbiAgICAgICAgICAgIGZhY2Vib29rX21lc3Nhbmdlcl9kYXRhX3JlZiA9IHBvcHRpbi5wb3B0aW5faWQrJy0nK2dldENsaWVudElkKCkrJy0nK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpO1xuICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5mYWNlYm9vay1wbHVnaW4gLmZiLXNlbmQtdG8tbWVzc2VuZ2VyXCIpLmF0dHIoJ2RhdGEtcmVmJyxmYWNlYm9va19tZXNzYW5nZXJfZGF0YV9yZWYpO1xuICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC51aS13cmFwcGVyXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIWpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZmFjZWJvb2stcGx1Z2luXCIpLmlzKCc6ZW1wdHknKSl7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5mYWNlYm9vay1tZXNzYW5nZXItY29udmVyc2lvbi1pbWdcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBqUTIyNCgnYm9keScpLmFwcGVuZChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZhY2Vib29rLXBsdWdpblwiKS5hdHRyKCdkYXRhLWZhY2Vib29rLXNlbmQtdG8tbWVzc2FuZ2VyLXBsdWdpbicpKTtcbiAgICAgICAgICAgIH0sNzUwKVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFB1c2ggaHRtbCBkb3duXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVzaEh0bWxEb3duKHBvcHRpbil7XG4gICAgICAgIHNob3dMb2coJ3B1c2hIdG1sRG93bicpO1xuICAgICAgICBpZiAoKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJhclwiICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24gPT0gXCJjZW50ZXItdG9wXCIpIHx8IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKCdkYXRhLXdlbGxjb21lLXNjcmVlbicpPT0nMScpe1xuICAgICAgICAgICAgalEyMjQoXCJodG1sXCIpLmFuaW1hdGUoe1wicGFkZGluZy10b3BcIjogalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCtcInB4XCJ9LCAzMDApO1xuICAgICAgICAgICAgaWZfaHRtbF9wYWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzaG93UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBBZGQgcGFkZGluZy1yaWdodCB0byBwb3B0aW4gJ1gnIGJ1dHRvbiBpZiBwb3B0aW4gdHlwZSBpbiBbJ2JhcicsJ2Z1bGxwYWdlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRkaW5nWEJ1dHRvbihwb3B0aW4pe1xuICAgICAgICBpZiAoaWZTY3JvbGxWaXNpYmxlKCkpe1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImZ1bGxwYWdlXCIgKXtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuY2xvc2UteC1idXR0b25cIikuY3NzKCdwYWRkaW5nLXJpZ2h0Jywoc2NyZWVuLndpZHRoPT0xOTIwID8gJzQ2cHgnOiAnMjBweCcpKTtcbiAgICAgICAgICAgICAgICB9LDMwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNob3dQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46T2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IE1ha2UgYWxsIGNzcyBwcm9wZXJ0aWVzICFpbXBvcnRhbnQgc28gd2Vic2l0ZSBjc3Mgd29uJ3QgY2hhbmdlIHRoZSBwb3B0aW4gc3R5bGVcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogRG93bmxvYWQgcG9wdGluIHRleHQgZm9udFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNzc0ZpeChwb3B0aW4pe1xuICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWltYWdlLXdyYXBwZXJcIikuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGltZyA9IGpRMjI0KHRoaXMpLmZpbmQoJ2ltZycpO1xuICAgICAgICAgICAgaW1nLmNzcyhcIndpZHRoXCIsalEyMjQodGhpcykuY3NzKFwid2lkdGhcIikpO1xuICAgICAgICAgICAgaW1nLmNzcyhcImhlaWdodFwiLGpRMjI0KHRoaXMpLmNzcyhcImhlaWdodFwiKSk7XG5cdFx0XHRpbWcuYXR0cihcImFsdFwiLCAoaW1nLmF0dHIoXCJhbHRcIikgfHwgcG9wdGluLnBvcHRpbl9uYW1lKSApO1xuICAgICAgICAgICAgaW1nLmNzcyhcIm1heC13aWR0aFwiLCBqUTIyNCh0aGlzKS5jc3MoXCJ3aWR0aFwiKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGpRMjI0KCcuZnJvYWxhLWVkaXRvci1idXR0b24nKS5jc3MoJ3dpZHRoJywgJzEwMCUnKTtcbiAgICBcbiAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuZmluZCgncCwgaW5wdXQsIGEsIHNwYW4sIGRpdiwgYnV0dG9uLCBsYWJlbCwgdWwsIG9sLCBsaSwgaW1nLCBzdHJvbmcsIGknKS5lYWNoKGZ1bmN0aW9uKGUpe1xuICAgIFxuICAgICAgICAgICAgLy8gS2VlcCBjdXJzb3IgYWx3YXlzIGFzIHBvaW50ZXJcbiAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmlzKCdhJykpe1xuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcygnY3Vyc29yJywncG9pbnRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihqUTIyNCh0aGlzKS5wYXJlbnRzKCdhJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3MoJ2N1cnNvcicsJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIXBvcHRpbl9sb2FkY29udHJvbF9maXgpe1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3dpZHRoID0galEyMjQodGhpcykuZ2V0KDApLnN0eWxlLndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBpc19jbG9zZV9idXR0b24gPSAoalEyMjQodGhpcykuYXR0cignaWQnKSA9PSAnY2xvc2VYQnV0dG9uJykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYodGhpc193aWR0aCAhPSAnJyAmJiAhaXNfY2xvc2VfYnV0dG9uKXtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpc193aWR0aC5pbmRleE9mKCdweCcpID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc193aWR0aCA9IHBhcnNlSW50KHRoaXNfd2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHRpbl9kYXRhX3dpZHRoX2hlaWdodCA9IGdldERhdGFXaWR0aEhlaWdodChwb3B0aW4ucG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhX3dpZHRoID0gcG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YV93aWR0aCl7IHRoaXNfd2lkdGggPSBNYXRoLm1pbihkYXRhX3dpZHRoLCB0aGlzX3dpZHRoKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc193aWR0aCA9IHRoaXNfd2lkdGgrJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSAnc29jaWFsX2Zvcm1hdF82JyAmJiBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ICE9ICdzc2lkZV9mb3JtYXRfMTknKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFqUTIyNCh0aGlzKS5pcygnaW1nJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8valEyMjQodGhpcykuY3NzKHsnbWF4LXdpZHRoJzp0aGlzX3dpZHRofSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjc3Nfc3RyaW5nID0gJyc7XG4gICAgICAgICAgICBqUTIyNC5lYWNoKHRoaXMuYXR0cmlidXRlcywgZnVuY3Rpb24oJHRoaXMpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnNwZWNpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc19zdHJpbmcgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzX3N0cmluZyA9IGNzc19zdHJpbmcucmVwbGFjZSgvID8haW1wb3J0YW50L2csJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzX3N0cmluZyA9IGNzc19zdHJpbmcucmVwbGFjZSgvXFw7YmFzZTY0L2csJzpiYXNlNjQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc19zdHJpbmcgPSBjc3Nfc3RyaW5nLnJlcGxhY2UoL1xcOy9nLCcgIWltcG9ydGFudDsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc19zdHJpbmcgPSBjc3Nfc3RyaW5nLnJlcGxhY2UoL1xcOmJhc2U2NC9nLCc7YmFzZTY0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEb3dubG9hZCBmb250IGZpbGUgZnJvbSBnb29nbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlLmluZGV4T2YoJ2ZvbnQtZmFtaWx5JykgIT09LTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rm9udCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgalEyMjQodGhpcykuYXR0cignc3R5bGUnLGNzc19zdHJpbmcpO1xuXG4gICAgICAgIH0pO1xuXG5cblxuICAgICAgICBqUTIyNCgnI3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3ggLmZvcm0taW5wdXQtY2xhc3MsIC5wb3B0aW4tcG9wdXAgaW5wdXRbdHlwZT1cInJhZGlvXCJdLCAucG9wdGluLXBvcHVwIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLmNzcyh7J3dpZHRoJzonJywnbWF4LXdpZHRoJzonJ30pO1xuXG5cbiAgICAgICAgalEyMjQoJy5maWVsZC1jb25zZW50LWNoZWNrYm94IGlucHV0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcygnd2lkdGgnLCBqUTIyNCh0aGlzKS5jc3MoJ2hlaWdodCcpKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBwb3B0aW4gdGltZXIgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOk9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBJZiBwb3B0aW4gdHlwZSA9PSAndGltZXInIC0+IFNldCBwb3B0aW4gJ3RpbWVyJyBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2Vjb25kUGxheSh0aW1lLCBwb3B0aW5faWQpIHtcbiAgICAgICAgdmFyIHRpbWVyX3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5mbGlwLXRpbWVyLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcInBsYXlcIik7XG4gICAgICAgIHZhciBhYSA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLnNlY29uZFBsYXkgLmZsaXAtaXRlbS5hY3RpdmVcIik7XG4gICAgICAgIGlmIChhYS5odG1sKCkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhYSA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLnNlY29uZFBsYXkgLmZsaXAtaXRlbVwiKS5lcSgwKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLm5leHQoXCIuZmxpcC1pdGVtXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZmxpcC10aW1lci1jb250YWluZXJcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwbGF5XCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGFhLmlzKFwiOmxhc3QtY2hpbGRcIikpIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLnNlY29uZFBsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgYWEgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5zZWNvbmRQbGF5IC5mbGlwLWl0ZW1cIikuZXEoMCk7XG4gICAgICAgICAgICBhYS5hZGRDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLnNlY29uZFBsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLm5leHQoXCIuZmxpcC1pdGVtXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZmxpcC10aW1lci1jb250YWluZXJcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwbGF5XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWludXRlUGxheSh0aW1lLCBwb3B0aW5faWQpIHtcbiAgICAgICAgdmFyIHRpbWVyX3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5mbGlwLXRpbWVyLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcInBsYXlcIik7XG4gICAgICAgIHZhciBhYSA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbS5hY3RpdmVcIik7XG4gICAgICAgIGlmIChhYS5odG1sKCkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhYSA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbVwiKS5lcSgwKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAubmV4dChcIi5mbGlwLWl0ZW1cIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChhYS5pcyhcIjpsYXN0LWNoaWxkXCIpKSB7XG4gICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5taW51dGVQbGF5IC5mbGlwLWl0ZW1cIikucmVtb3ZlQ2xhc3MoXCJiZWZvcmVcIik7XG4gICAgICAgICAgICBhYS5hZGRDbGFzcyhcImJlZm9yZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGFhID0gdGltZXJfcG9wdGluLmZpbmQoXCIubWludXRlUGxheSAuZmxpcC1pdGVtXCIpLmVxKDApO1xuICAgICAgICAgICAgYWEuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAubmV4dChcIi5mbGlwLWl0ZW1cIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbS5wZXJzcGVjdGl2ZVwiKS5yZW1vdmVDbGFzcygncGVyc3BlY3RpdmUnKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaG91cnNQbGF5KHRpbWUsIHBvcHRpbl9pZCkge1xuICAgICAgICB2YXIgdGltZXJfcG9wdGluID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl1cIik7XG4gICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKFwicGxheVwiKTtcbiAgICAgICAgdmFyIGFhID0gdGltZXJfcG9wdGluLmZpbmQoXCIuaG91cnNQbGF5IC5mbGlwLWl0ZW0uYWN0aXZlXCIpO1xuICAgICAgICBpZiAoYWEuaHRtbCgpID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWEgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5ob3Vyc1BsYXkgLmZsaXAtaXRlbVwiKS5lcSgwKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAubmV4dChcIi5mbGlwLWl0ZW1cIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChhYS5pcyhcIjpsYXN0LWNoaWxkXCIpKSB7XG4gICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5ob3Vyc1BsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgYWEgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5ob3Vyc1BsYXkgLmZsaXAtaXRlbVwiKS5lcSgwKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuY2xvc2VzdChcIi5mbGlwLXRpbWVyLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInBsYXlcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5ob3Vyc1BsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAubmV4dChcIi5mbGlwLWl0ZW1cIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KFwiLmZsaXAtdGltZXItY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGxheVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLmhvdXJzUGxheSAuZmxpcC1pdGVtLnBlcnNwZWN0aXZlXCIpLnJlbW92ZUNsYXNzKCdwZXJzcGVjdGl2ZScpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzUGxheSh0aW1lLCBwb3B0aW5faWQpIHtcbiAgICAgICAgdmFyIHRpbWVyX3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5mbGlwLXRpbWVyLWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcInBsYXlcIik7XG4gICAgICAgIHZhciBhYSA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLmRheXNQbGF5IC5mbGlwLWl0ZW0uYWN0aXZlXCIpO1xuICAgICAgICBpZiAoYWEuaHRtbCgpID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWEgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5kYXlzUGxheSAuZmxpcC1pdGVtXCIpLmVxKDApO1xuICAgICAgICAgICAgYWEuYWRkQ2xhc3MoXCJiZWZvcmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5uZXh0KFwiLmZsaXAtaXRlbVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInBlcnNwZWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZmxpcC10aW1lci1jb250YWluZXJcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwbGF5XCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGFhLmlzKFwiOmxhc3QtY2hpbGRcIikpIHtcbiAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLmRheXNQbGF5IC5mbGlwLWl0ZW1cIikucmVtb3ZlQ2xhc3MoXCJiZWZvcmVcIik7XG4gICAgICAgICAgICBhYS5hZGRDbGFzcyhcImJlZm9yZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGFhID0gdGltZXJfcG9wdGluLmZpbmQoXCIuZGF5c1BsYXkgLmZsaXAtaXRlbVwiKS5lcSgwKTtcbiAgICAgICAgICAgIGFhLmFkZENsYXNzKFwiYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwicGVyc3BlY3RpdmVcIilcbiAgICAgICAgICAgICAgICAuY2xvc2VzdChcIi5mbGlwLXRpbWVyLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInBsYXlcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5kYXlzUGxheSAuZmxpcC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYmVmb3JlXCIpO1xuICAgICAgICAgICAgYWEuYWRkQ2xhc3MoXCJiZWZvcmVcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwZXJzcGVjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5uZXh0KFwiLmZsaXAtaXRlbVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInBlcnNwZWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZmxpcC10aW1lci1jb250YWluZXJcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJwbGF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJfcG9wdGluLmZpbmQoXCIuZGF5c1BsYXkgLmZsaXAtaXRlbS5wZXJzcGVjdGl2ZVwiKS5yZW1vdmVDbGFzcygncGVyc3BlY3RpdmUnKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9wdGluVGltZXIocG9wdGluKXtcbiAgICAgICAgdmFyIHRpbWVyX2NvbnQgPSBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnRpbWVyLWNvbnRhaW5lcicpO1xuICAgICAgICBpZih0aW1lcl9jb250Lmxlbmd0aCAmJiB0aW1lcl9jb250Lmhhc0NsYXNzKCcudGltZXItc3RhcnRlZCcpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyX2NvbnQuYWRkQ2xhc3MoJy50aW1lci1zdGFydGVkJyk7XG4gICAgICAgICAgICAvLyBJZiBwb3B0aW4gdHlwZSAndGltZXInXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnRpbWVyX3ZlciA9PSAxIHx8XG4gICAgICAgICAgICAgICAgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnRpbWVyX3ZlciA9PSAyIHx8XG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMudGltZXJfdmVyID09IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImVtYmVkZGVkX2Zvcm1hdF81XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJsaWdodGJveF9mb3JtYXRfNVwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwibGlnaHRib3hfZm9ybWF0XzExXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJiYXJfZm9ybWF0XzVcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImJhcl9mb3JtYXRfMTBcIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXJfdmVyID0gMTtcbiAgICAgICAgICAgICAgICBpZihwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMudGltZXJfdmVyID09IDIpe1xuICAgICAgICAgICAgICAgICAgICB0aW1lcl92ZXIgPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcm9sZSA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy50aW1lci5zcGxpdCgnQCcpOyAvLyB0aW1lclRpbWUgLyB0aW1lckRhdGVcbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IHJvbGVbMV0uc3BsaXQoJ3wnKTsgLy8gMDEvMjEvMjAxOSBkYXRlIHwgMTA6NDUgUE0gVGltZSB8ICsyIEdNVFxuICAgICAgICAgICAgICAgIC8vIElmIHJvbGUgaXMgdGltZSBcbiAgICAgICAgICAgICAgICBpZiAocm9sZVswXSA9PSAndGltZXJUaW1lJyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWNvbmRzID0gcGFyc2VJbnQodGltZVswXSkqNjArcGFyc2VJbnQodGltZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlY29uZHMgPSBzZWNvbmRzICUgNjAgPT0gMSA/IHNlY29uZHMgKyAxIDogc2Vjb25kcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50X2Rvd24gPSBuZXcgRGF0ZSgobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgKHNlY29uZHMgKiAxMDAwKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgdGltZXIgZGF0ZVxuXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDbG9jayhwb3B0aW4ucG9wdGluX2lkLGNvdW50X2Rvd24scG9wdGluLHRpbWVyX3Zlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHJvbGUgaXMgZGF0ZVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvL3ZhciBjb3VudF9kb3duID0gbmV3IERhdGUodGltZVswXSsnICcrKHRpbWVbMV0uc3BsaXQoJyAnKSlbMF0rJyBHTVQnK3RpbWVbMl0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRfZG93biA9IG5ldyBEYXRlKHRpbWVbMF0rJyAnK3RpbWVbMV0rJyBHTVQnKyh0aW1lWzJdPT1cIjBcIiA/JyswJzp0aW1lWzJdKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKGNvdW50X2Rvd24uZ2V0U2Vjb25kcygpID09IDEpeyBjb3VudF9kb3duID0gbmV3IERhdGUoY291bnRfZG93bi5nZXRUaW1lKCkgKyAxMDAwKTsgfVxuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKHRpbWVbMF0rJyAnK3RpbWVbMV0rJyBHTVQnK3RpbWVbMl0pO1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKHRpbWVbMl09PVwiMFwiID8neWVzJzonbm8nKTtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhjb3VudF9kb3duKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgZGF0ZSBoYXZlIG5vdCBwYXNzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrSWZUaW1lcihwb3B0aW4sY291bnRfZG93bikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSB0aW1lciBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ2xvY2socG9wdGluLnBvcHRpbl9pZCxjb3VudF9kb3duLHBvcHRpbix0aW1lcl92ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHNob3cgcG9wdGluXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aW1lcl9jb250Lmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHBvcHRpblRpbWVyKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluX2lkOnN0cmluZyB8IGVuZHRpbWU6IERhdGUoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBpbml0aWFsaXplIHRoZSBwb3B0aW4gdGltZXIgY2xvY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXNldENsb2NrKGVuZHRpbWUsIHBvcHRpbl9pZCwgY2FsbGVyKXtcbiAgICAgICAgaWYodHlwZW9mIGVuZHRpbWUgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgdmFyIHRpbWVyX3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICAgICAgdGltZXJfcG9wdGluLmZpbmQoJy5mbGlwLXRpbWVyLWNvbnRhaW5lcicpLmFkZENsYXNzKCdwbGF5Jyk7XG4gICAgICAgICAgICB2YXIgdCA9IGdldFRpbWVSZW1haW5pbmcoZW5kdGltZSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFNlYyA9IHBhcnNlSW50KHRpbWVyX3BvcHRpbi5maW5kKCcuc2Vjb25kUGxheSAuZmxpcC1pdGVtLmFjdGl2ZSAudXAgLmlubicpLnRleHQoKSk7XG4gICAgICAgICAgICB2YXIgc2VjVGltZURpZmYgPSBNYXRoLmFicyggKGlzTmFOKGN1cnJlbnRTZWMpID8gMCA6IGN1cnJlbnRTZWMpIC0gdC5zZWNvbmRzKTtcbiAgICAgICAgICAgIHNob3dMb2coJ3NlY1RpbWVEaWZmJywgc2VjVGltZURpZmYsIGN1cnJlbnRTZWMpO1xuXG4gICAgICAgICAgICBpZihzZWNUaW1lRGlmZiB8fCBjYWxsZXIgPT0gJ3Byb2dyYW0nKXtcbiAgICAgICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5zZWNvbmRQbGF5IC5mbGlwLWl0ZW1cIikucmVtb3ZlQ2xhc3MoXCJiZWZvcmVcIik7XG4gICAgICAgICAgICAgICAgdGltZXJfcG9wdGluLmZpbmQoXCIuc2Vjb25kUGxheSAuZmxpcC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKCcuc2Vjb25kUGxheSAuZmxpcC1pdGVtIC51cCAuaW5uJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZihwYXJzZUludChqUTIyNCh0aGlzKS50ZXh0KCkpID09IHQuc2Vjb25kcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmxpcF9pdGVtID0galEyMjQodGhpcykuY2xvc2VzdCgnLmZsaXAtaXRlbScpLnByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsaXBfaXRlbS5hZGRDbGFzcyhcImJlZm9yZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KFwiLmZsaXAtaXRlbVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGN1cnJlbnRNaW4gPSBwYXJzZUludCh0aW1lcl9wb3B0aW4uZmluZCgnLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbS5hY3RpdmUgLnVwIC5pbm4nKS50ZXh0KCkpO1xuICAgICAgICAgICAgdmFyIG1pblRpbWVEaWZmID0gTWF0aC5hYnMoIChpc05hTihjdXJyZW50TWluKSA/IDAgOiBjdXJyZW50TWluKSAtIHQubWludXRlcyk7XG4gICAgICAgICAgICBzaG93TG9nKCdtaW5UaW1lRGlmZicsIG1pblRpbWVEaWZmLCBjdXJyZW50TWluKTtcbiAgICAgICAgICAgIGlmKG1pblRpbWVEaWZmIHx8IGNhbGxlciA9PSAncHJvZ3JhbScpe1xuICAgICAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLm1pbnV0ZVBsYXkgLmZsaXAtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImJlZm9yZVwiKTtcbiAgICAgICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZChcIi5taW51dGVQbGF5IC5mbGlwLWl0ZW1cIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgdGltZXJfcG9wdGluLmZpbmQoJy5taW51dGVQbGF5IC5mbGlwLWl0ZW0gLnVwIC5pbm4nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcnNlSW50KGpRMjI0KHRoaXMpLnRleHQoKSkgPT0gdC5taW51dGVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGlwX2l0ZW0gPSBqUTIyNCh0aGlzKS5jbG9zZXN0KCcuZmxpcC1pdGVtJykucHJldigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxpcF9pdGVtLmFkZENsYXNzKFwiYmVmb3JlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoXCIuZmxpcC1pdGVtXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3VycmVudEhyID0gcGFyc2VJbnQodGltZXJfcG9wdGluLmZpbmQoJy5ob3Vyc1BsYXkgLmZsaXAtaXRlbS5hY3RpdmUgLnVwIC5pbm4nKS50ZXh0KCkpO1xuICAgICAgICAgICAgdmFyIGhyVGltZURpZmYgPSBNYXRoLmFicyggKGlzTmFOKGN1cnJlbnRIcikgPyAwIDogY3VycmVudEhyKSAtIHQuaG91cnMpO1xuICAgICAgICAgICAgc2hvd0xvZygnaHJUaW1lRGlmZicsIGhyVGltZURpZmYsIGN1cnJlbnRIcik7XG4gICAgICAgICAgICBpZihoclRpbWVEaWZmIHx8IGNhbGxlciA9PSAncHJvZ3JhbScpe1xuICAgICAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLmhvdXJzUGxheSAuZmxpcC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYmVmb3JlXCIpO1xuICAgICAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKFwiLmhvdXJzUGxheSAuZmxpcC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIHRpbWVyX3BvcHRpbi5maW5kKCcuaG91cnNQbGF5IC5mbGlwLWl0ZW0gLnVwIC5pbm4nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcnNlSW50KGpRMjI0KHRoaXMpLnRleHQoKSkgPT0gdC5ob3Vycyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmxpcF9pdGVtID0galEyMjQodGhpcykuY2xvc2VzdCgnLmZsaXAtaXRlbScpLnByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsaXBfaXRlbS5hZGRDbGFzcyhcImJlZm9yZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KFwiLmZsaXAtaXRlbVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXkgPSBwYXJzZUludCh0aW1lcl9wb3B0aW4uZmluZCgnLmRheXNQbGF5IC5mbGlwLWl0ZW0uYWN0aXZlIC51cCAuaW5uJykudGV4dCgpKTtcbiAgICAgICAgICAgIHZhciBkYXlUaW1lRGlmZiA9IE1hdGguYWJzKCAoaXNOYU4oY3VycmVudERheSkgPyAwIDogY3VycmVudERheSkgLSB0LmRheXMpO1xuICAgICAgICAgICAgc2hvd0xvZygnZGF5VGltZURpZmYnLCBkYXlUaW1lRGlmZiwgY3VycmVudERheSk7XG4gICAgICAgICAgICBpZihkYXlUaW1lRGlmZiB8fCBjYWxsZXIgPT0gJ3Byb2dyYW0nKXtcbiAgICAgICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXIgLmRheXNQbGF5IC5mbGlwLWl0ZW1cIikucmVtb3ZlQ2xhc3MoXCJiZWZvcmVcIik7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyIC5kYXlzUGxheSAuZmxpcC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIGpRMjI0KCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyIC5kYXlzUGxheSAuZmxpcC1pdGVtIC51cCAuaW5uJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZihwYXJzZUludChqUTIyNCh0aGlzKS50ZXh0KCkpID09IHQuZGF5cyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKHBhcnNlSW50KGpRMjI0KHRoaXMpLnRleHQoKSksIHQuZGF5cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmxpcF9pdGVtID0galEyMjQodGhpcykuY2xvc2VzdCgnLmZsaXAtaXRlbScpLnByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsaXBfaXRlbS5hZGRDbGFzcyhcImJlZm9yZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KFwiLmZsaXAtaXRlbVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZWZpeDAobnVtKXtcbiAgICAgICAgcmV0dXJuICgnMCcrbnVtKS5zbGljZSgtMik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDbG9jayhwb3B0aW5faWQsZW5kdGltZSxwb3B0aW4sdGltZXJfdmVyKSB7XG4gICAgICAgIC8vdmFyIGNsb2NrID0galEyMjQoJy50aW1lci1jb250YWluZXInKTtcbiAgICAgICAgdmFyIHRpbWVyX3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICBzaG93TG9nKCdpbml0aWFsaXplQ2xvY2soKSB8IGVuZHRpbWU6ICcrZW5kdGltZSsnLCBwb3B0aW5faWQ6ICcrcG9wdGluX2lkKTtcbiAgICAgICAgLy8gZ2V0IHRpbWVyIGNvbnRhaW5lclxuICAgICAgICBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbl9pZCsnXScpLnNob3coKTtcblxuICAgICAgICBpZih0aW1lcl92ZXIgPT0gMikge1xuXG4gICAgICAgICAgICBqUTIyNCh3aW5kb3cpLm9uKFwiYmx1ciBmb2N1cyBob3ZlclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZUeXBlID0gIHRpbWVyX3BvcHRpbi5maW5kKCcuZmxpcC10aW1lci1jb250YWluZXInKS5hdHRyKFwiZGF0YS1wcmV2LXR5cGVcIik7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZUeXBlICE9IGUudHlwZSkgeyAgIC8vICByZWR1Y2UgZG91YmxlIGZpcmUgaXNzdWVzXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldENsb2NrKGVuZHRpbWUscG9wdGluX2lkLCd3aW5kb3cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aW1lcl9wb3B0aW4uZmluZCgnLmZsaXAtdGltZXItY29udGFpbmVyJykuYXR0cihcImRhdGEtcHJldi10eXBlXCIsIGUudHlwZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW5faWQrJ10gLnRpbWVyLWNvbnRhaW5lcicpLmFkZENsYXNzKCd0aW1lci1zdGFydGVkJyk7XG4gICAgICAgICAgICB2YXIgdCA9IGdldFRpbWVSZW1haW5pbmcoZW5kdGltZSk7XG4gICAgICAgICAgICBzaG93TG9nKCdnZXRUaW1lUmVtYWluaW5nJywgdCk7XG4gICAgICAgICAgICB2YXIgZmxpcF9jb250ID0galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW5faWQrJ10gLmZsaXAtdGltZXItY29udGFpbmVyJyk7XG4gICAgICAgICAgICB2YXIgZmxpcF93cmFwID0gZmxpcF9jb250LmZpbmQoJy5kYXlzUGxheSwgLmhvdXJzUGxheSwgLm1pbnV0ZVBsYXksIC5zZWNvbmRQbGF5Jyk7XG4gICAgICAgICAgICBmbGlwX3dyYXAuZmluZCgnLmZsaXAtaXRlbScpLmFmdGVyKCc8ZGl2IGNsYXNzPVwiZmxpcC1pdGVtLWhvbGRlclwiPjwvZGl2PicpO1xuICAgICAgICAgICAgZmxpcF93cmFwLmZpbmQoJy5mbGlwLWl0ZW0nKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IHQuZGF5czsgaWR4ID49IDA7IGlkeC0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNob3d0aW1lID0gcHJlZml4MChpZHgpO1xuICAgICAgICAgICAgICAgIGZsaXBfY29udC5maW5kKCcuZGF5c1BsYXkgLmZsaXAtaXRlbS1ob2xkZXInKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJmbGlwLWl0ZW1cIj48ZGl2IGNsYXNzPVwiYW5pbS13cmFwXCI+PGRpdiBjbGFzcz1cInVwXCI+PGRpdiBjbGFzcz1cInNoYWRvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJpbm5cIj4nK3Nob3d0aW1lKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZG93blwiPjxkaXYgY2xhc3M9XCJzaGFkb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwiaW5uXCI+JytzaG93dGltZSsnPC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDIzOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hvd3RpbWUgPSBwcmVmaXgwKGlkeCk7XG4gICAgICAgICAgICAgICAgZmxpcF9jb250LmZpbmQoJy5ob3Vyc1BsYXkgLmZsaXAtaXRlbS1ob2xkZXInKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJmbGlwLWl0ZW1cIj48ZGl2IGNsYXNzPVwiYW5pbS13cmFwXCI+PGRpdiBjbGFzcz1cInVwXCI+PGRpdiBjbGFzcz1cInNoYWRvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJpbm5cIj4nK3Nob3d0aW1lKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZG93blwiPjxkaXYgY2xhc3M9XCJzaGFkb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwiaW5uXCI+JytzaG93dGltZSsnPC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDU5OyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hvd3RpbWUgPSBwcmVmaXgwKGlkeCk7XG4gICAgICAgICAgICAgICAgZmxpcF9jb250LmZpbmQoJy5taW51dGVQbGF5IC5mbGlwLWl0ZW0taG9sZGVyJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZmxpcC1pdGVtXCI+PGRpdiBjbGFzcz1cImFuaW0td3JhcFwiPjxkaXYgY2xhc3M9XCJ1cFwiPjxkaXYgY2xhc3M9XCJzaGFkb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwiaW5uXCI+JytzaG93dGltZSsnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImRvd25cIj48ZGl2IGNsYXNzPVwic2hhZG93XCI+PC9kaXY+PGRpdiBjbGFzcz1cImlublwiPicrc2hvd3RpbWUrJzwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSA1OTsgaWR4ID49IDA7IGlkeC0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNob3d0aW1lID0gcHJlZml4MChpZHgpO1xuICAgICAgICAgICAgICAgIGZsaXBfY29udC5maW5kKCcuc2Vjb25kUGxheSAuZmxpcC1pdGVtLWhvbGRlcicpLmFwcGVuZCgnPGRpdiBjbGFzcz1cImZsaXAtaXRlbVwiPjxkaXYgY2xhc3M9XCJhbmltLXdyYXBcIj48ZGl2IGNsYXNzPVwidXBcIj48ZGl2IGNsYXNzPVwic2hhZG93XCI+PC9kaXY+PGRpdiBjbGFzcz1cImlublwiPicrc2hvd3RpbWUrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJkb3duXCI+PGRpdiBjbGFzcz1cInNoYWRvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJpbm5cIj4nK3Nob3d0aW1lKyc8L2Rpdj48L2Rpdj48L2Rpdj48ZGl2PicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGltZXJfYmdfZmxpcF9jb2xvciA9ICggZmxpcF93cmFwLmNzcygnYmFja2dyb3VuZC1jb2xvcicpPT0ncmdiYSgwLCAwLCAwLCAwKScgPyAncmdiKDI1NSwgMjU1LCAyNTUpJyA6IGZsaXBfd3JhcC5jc3MoJ2JhY2tncm91bmQtY29sb3InKSk7XG4gICAgICAgICAgICBzaG93TG9nKFwiZmxpcF93cmFwXCIsdGltZXJfYmdfZmxpcF9jb2xvcik7XG5cbiAgICAgICAgICAgIGZsaXBfY29udC5maW5kKCcuZmxpcC1pdGVtJykuY3NzKCdib3JkZXItcmFkaXVzJywgZmxpcF93cmFwLmNzcygnYm9yZGVyLXJhZGl1cycpKTtcbiAgICAgICAgICAgIGZsaXBfY29udC5maW5kKCcuZmxpcC1pdGVtIC5hbmltLXdyYXAgPiBkaXYnKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCB0aW1lcl9iZ19mbGlwX2NvbG9yKTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aW1lciBjbG9jayBcbiAgICAgICAgICAgIC8vIFJ1biBldmVyeSBzZWNvbmRcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsb2NrKCkge1xuICAgICAgICAgICAgICAgIGlmKGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluX2lkKyddIC5mbGlwLXRpbWVyLWNvbnRhaW5lcicpLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRpbWUgcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZ2V0VGltZVJlbWFpbmluZyhlbmR0aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnZ2V0VGltZVJlbWFpbmluZycsIHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNvdW50ZG93biAgLSBpZiB0aW1lciBmaW5pc2hlZFxuICAgICAgICAgICAgICAgICAgICAvLyAtPiBjbG9zZSBwb3B0aW5cbiAgICAgICAgICAgICAgICAgICAgLy8gLT4gY2xlYXIgaW50ZXJ2YWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gZmFsc2UgfHwgdC50b3RhbCA8IDEwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJ0aW1lclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW4ocG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtjbGVhckludGVydmFsKHVwZGF0ZUNsb2NrSW50ZXJ2YWwpO31jYXRjaChlcnIpe31cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZygnUGxheSBzZWNvbmRzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQbGF5KHQsIHBvcHRpbl9pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHQuc2Vjb25kcyA9PSAwICYmIHQubWludXRlcyA+PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdQbGF5IG1pbnV0ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVQbGF5KHQsIHBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0LnNlY29uZHMgPT0gMCAmJiB0Lm1pbnV0ZXMgPT0gMCAmJiB0LmhvdXJzID49IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ1BsYXkgaG91cnMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3Vyc1BsYXkodCwgcG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHQuc2Vjb25kcyA9PSAwICYmIHQubWludXRlcyA9PSAwICYmIHQuaG91cnMgPj0gMCAmJiB0LmRheXMgPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnUGxheSBkYXlzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5c1BsYXkodCwgcG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lX3N0ciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAvL3Nob3dMb2codGltZXJfcG9wdGluLmZpbmQoJyNob3Vyc1BsYXknKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRpbWVyX3BvcHRpbi5maW5kKCcjdGltZXJIb3VycycpLmlzKCc6dmlzaWJsZScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlzX3N0ciA9IHRpbWVyX3BvcHRpbi5maW5kKFwiLmRheXNQbGF5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZV9zdHIgKz0gKGRheXNfc3RyLmZpbmQoXCIuZmxpcC1pdGVtLmFjdGl2ZSAudXBcIikudGV4dCgpIHx8IGRheXNfc3RyLmZpbmQoXCIuZmxpcC1pdGVtOmZpcnN0LWNoaWxkIC51cFwiKS50ZXh0KCkgKSsnICcrZGF5c19zdHIuZmluZChcIi5mcm9hbGEtZWRpdG9yLXRleHRcIikudGV4dCgpICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3Vyc19zdHIgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5ob3Vyc1BsYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lX3N0ciArPSAoaG91cnNfc3RyLmZpbmQoXCIuZmxpcC1pdGVtLmFjdGl2ZSAudXBcIikudGV4dCgpIHx8IDI0KSsnICcraG91cnNfc3RyLmZpbmQoXCIuZnJvYWxhLWVkaXRvci10ZXh0XCIpLnRleHQoKSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbnV0ZV9zdHIgPSB0aW1lcl9wb3B0aW4uZmluZChcIi5taW51dGVQbGF5XCIpO1xuICAgICAgICAgICAgICAgICAgICB0aW1lX3N0ciArPSAobWludXRlX3N0ci5maW5kKFwiLmZsaXAtaXRlbS5hY3RpdmUgLnVwXCIpLnRleHQoKSB8fCA1OSApKycgJyttaW51dGVfc3RyLmZpbmQoXCIuZnJvYWxhLWVkaXRvci10ZXh0XCIpLnRleHQoKSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWNvbmRfc3RyID0gdGltZXJfcG9wdGluLmZpbmQoXCIuc2Vjb25kUGxheVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZV9zdHIgKz0gc2Vjb25kX3N0ci5maW5kKFwiLmZsaXAtaXRlbS5hY3RpdmUgLnVwXCIpLnRleHQoKSsnICcrc2Vjb25kX3N0ci5maW5kKFwiLmZyb2FsYS1lZGl0b3ItdGV4dFwiKS50ZXh0KCk7XG5cdFx0XHRcdFx0dGltZV9zdHIgPSBpZlVzZXJsYW5nSXNIZSgpID8gdGltZV9zdHIgKyAnINeY15nXmdee16gnIDogJ1RpbWVyICcgKyB0aW1lX3N0cjtcbiAgICAgICAgICAgICAgICAgICAgZmxpcF9jb250LmF0dHIoJ2FyaWEtbGFiZWwnLCB0aW1lX3N0cik7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodXBkYXRlQ2xvY2tJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluX2lkKyddIC5mbGlwLXRpbWVyLWNvbnRhaW5lcicpLmFkZENsYXNzKCdyZXNldCcpO1xuICAgICAgICAgICAgcmVzZXRDbG9jayhlbmR0aW1lLCBwb3B0aW5faWQsICdwcm9ncmFtJyk7XG5cblxuICAgICAgICAgICAgdXBkYXRlQ2xvY2soKTtcblxuICAgICAgICAgICAgLy8gUnVuIGV2ZXJ5IHNlY29uZFxuICAgICAgICAgICAgdHJ5e2NsZWFySW50ZXJ2YWwodXBkYXRlQ2xvY2tJbnRlcnZhbCk7fWNhdGNoKGVycil7fVxuXG4gICAgICAgICAgICBpZihqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbl9pZCsnXSAuZmxpcC10aW1lci1jb250YWluZXInKS5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2xvY2tJbnRlcnZhbCA9IHNldEludGVydmFsKHVwZGF0ZUNsb2NrLCAxMDAwKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW5faWQrJ10gLmZsaXAtdGltZXItY29udGFpbmVyJykucmVtb3ZlQ2xhc3MoJ3Jlc2V0Jyk7XG4gICAgICAgICAgICB9LDEwMDApO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBjbG9jayA9IGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluX2lkKyddIC50aW1lci1jb250YWluZXInKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRpbWVyIGNsb2NrIFxuICAgICAgICAgICAgLy8gUnVuIGV2ZXJ5IHNlY29uZFxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2xvY2soKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRpbWUgcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgdmFyIHQgPSBnZXRUaW1lUmVtYWluaW5nKGVuZHRpbWUpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogc2V0IHRpbWVyIG5ldyBkYXRlIGRhdGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgaWYoalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW5faWQrJ10gLmZsaXAtdGltZXItY29udGFpbmVyJykubGVuZ3RoPjApe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciAgZGF5cyAgICAgICA9ICgnMCcgKyB0LmRheXMpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyICBob3VycyAgICAgID0gKCcwJyArIHQuaG91cnMpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyICBtaW51dGVzICAgID0gKCcwJyArIHQubWludXRlcykuc2xpY2UoLTIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgIHNlY29uZHMgICAgPSAoJzAnICsgdC5zZWNvbmRzKS5zbGljZSgtMik7XG5cbiAgICAgICAgICAgICAgICAgICAgY2xvY2suZmluZCgnI3RpbWVyRGF5cyAuZmlyc3QnKS50ZXh0KGRheXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBjbG9jay5maW5kKCcjdGltZXJEYXlzIC5zZWNvbmQnKS50ZXh0KGRheXNbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjbG9jay5maW5kKCcjdGltZXJIb3VycyAuZmlyc3QnKS50ZXh0KGhvdXJzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvY2suZmluZCgnI3RpbWVySG91cnMgLnNlY29uZCcpLnRleHQoaG91cnNbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjbG9jay5maW5kKCcjdGltZXJNaW51dGVzIC5maXJzdCcpLnRleHQobWludXRlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGNsb2NrLmZpbmQoJyN0aW1lck1pbnV0ZXMgLnNlY29uZCcpLnRleHQobWludXRlc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNsb2NrLmZpbmQoJyN0aW1lclNlY29uZHMgLmZpcnN0JykudGV4dChzZWNvbmRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvY2suZmluZCgnI3RpbWVyU2Vjb25kcyAuc2Vjb25kJykudGV4dChzZWNvbmRzWzFdKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb3VudGRvd24gIC0gaWYgdGltZXIgZmluaXNoZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gLT4gY2xvc2UgcG9wdGluXG4gICAgICAgICAgICAgICAgICAgIC8vIC0+IGNsZWFyIGludGVydmFsXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ID09IGZhbHNlIHx8IHQudG90YWwgPCAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdHJpZ2dlciA9IFwidGltZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdGluKHBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnl7Y2xlYXJJbnRlcnZhbCh1cGRhdGVDbG9ja0ludGVydmFsKTt9Y2F0Y2goZXJyKXt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh1cGRhdGVDbG9ja0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSdW4gb25jZVxuICAgICAgICAgICAgdXBkYXRlQ2xvY2soKTtcblxuICAgICAgICAgICAgaWYoalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW5faWQrJ10gLmZsaXAtdGltZXItY29udGFpbmVyJykubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVDbG9ja0ludGVydmFsID0gc2V0SW50ZXJ2YWwodXBkYXRlQ2xvY2ssIDEwMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSdW4gZXZlcnkgc2Vjb25kXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogdXBkYXRlQ2xvY2soKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBlbmR0aW1lOiBEYXRlKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmV0dXJuIHRpbWVyIG9iamVjdCB3aXRoIHVwZGF0ZWQgdGltZXIgdGltZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRpbWVSZW1haW5pbmcoZW5kdGltZSkge1xuICAgICAgICB2YXIgdCA9IGVuZHRpbWUuZ2V0VGltZSgpIC0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0b3RhbCc6IHQsXG4gICAgICAgICAgICAnZGF5cyc6ICBNYXRoLmZsb29yKHQgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpLFxuICAgICAgICAgICAgJ2hvdXJzJzogTWF0aC5mbG9vcigodCAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpLFxuICAgICAgICAgICAgJ21pbnV0ZXMnOiBNYXRoLmZsb29yKCh0IC8gMTAwMCAvIDYwKSAlIDYwKSxcbiAgICAgICAgICAgICdzZWNvbmRzJzogTWF0aC5mbG9vcigodCAvIDEwMDApICUgNjApXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHBvcHRpblRpbWVyKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdCB8IGVuZHRpbWU6IERhdGUoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBSZXR1cm4gYm9vbGVhbiBpZiB0aW1lciBlbmQgb3Igbm90XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hlY2tJZlRpbWVyKHBvcHRpbixlbmR0aW1lKXtcbiAgICAgICAgdmFyIHQgPSBlbmR0aW1lLmdldFRpbWUoKSAtIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIHJldHVybiAodCA8PSAwIHx8IGVuZHRpbWU9PSBcIkludmFsaWQgRGF0ZVwiID8gZmFsc2UgOiB0cnVlICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNob3dQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0IHwgY2xpY2s6Qm9vbGVhbiAoaWYgcG9wdGluIGNsaWNrIHRyaWdnZXIpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCBwb3B0aW4gZm9ybSBzdWJtaXQgZXZlbnRzXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluRm9ybUNsaWNrU3VibWl0KHBvcHRpbiwgY2xpY2spe1xuXG4gICAgICAgIHNob3dMb2coJ3BvcHRpbkZvcm1DbGlja1N1Ym1pdDogJytwb3B0aW4ucG9wdGluX2lkKTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gW2lkPVwicG9wdGluRm9ybVN1Ym1pdCcrcG9wdGluLnBvcHRpbl9pZCsnXCJdJykub2ZmKFwiY2xpY2tcIik7XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgc2hvd0xvZyhlcnIpXG4gICAgICAgIH1cblxuICAgICAgICAvLyAvLyBTZXQgY3Vyc29yIHRvICdwb2ludGVyJyBpZiBlbnRlciBhbmQgJ2F1dG8nIGlmIG91dCBvZiBmb3JtIGNvbnRhaW5lclxuICAgICAgICAvLyBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAjcG9wdGluRm9ybVN1Ym1pdCcrcG9wdGluLnBvcHRpbl9pZCsnJykub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbihlKXtcbiAgICAgICAgLy8gIGlmICggalEyMjQoZS50YXJnZXQpLmhhc0NsYXNzKCdwb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykgfHwgalEyMjQoZS50YXJnZXQpLnBhcmVudHMoJy5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykubGVuZ3RoID4gMCl7XG4gICAgICAgIC8vICAgICAgalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKS5jc3MoJ2N1cnNvcicsICdwb2ludGVyJykuY2hpbGRyZW4oKS5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XG4gICAgICAgIC8vICB9XG4gICAgICAgIC8vICBpZiAoIGpRMjI0KGUudGFyZ2V0KS5oYXNDbGFzcygncG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uJykgfHwgalEyMjQoZS50YXJnZXQpLnBhcmVudHMoJy5wb3B0aW4tZm9ybS1jbG9zZS1idXR0b24nKS5sZW5ndGggPiAwKXtcbiAgICAgICAgLy8gICAgICBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAucG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uJykuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpLmNoaWxkcmVuKCkuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpO1xuICAgICAgICAvLyAgfVxuICAgICAgICAvLyB9KS5vbignbW91c2VvdXQnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgLy8gIGlmICggIWpRMjI0KGUudGFyZ2V0KS5oYXNDbGFzcygncG9wdGluLWZvcm0tc3VibWl0LWJ1dHRvbicpICYmICEoalEyMjQoZS50YXJnZXQpLnBhcmVudHMoJy5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykubGVuZ3RoID4gMCkpe1xuICAgICAgICAvLyAgICAgIGpRMjI0KGpRMjI0LnRhcmdldCkuY3NzKCdjdXJzb3InLCAnYXV0bycpLmNoaWxkcmVuKCkuY3NzKCdjdXJzb3InLCAnYXV0bycpO1xuICAgICAgICAvLyAgfVxuICAgICAgICAvLyAgaWYgKCAhalEyMjQoZS50YXJnZXQpLmhhc0NsYXNzKCdwb3B0aW4tZm9ybS1jbG9zZS1idXR0b24nKSAmJiAhKGpRMjI0KGUudGFyZ2V0KS5wYXJlbnRzKCcucG9wdGluLWZvcm0tY2xvc2UtYnV0dG9uJykubGVuZ3RoID4gMCkpe1xuICAgICAgICAvLyAgICAgIGpRMjI0KGpRMjI0LnRhcmdldCkuY3NzKCdjdXJzb3InLCAnYXV0bycpLmNoaWxkcmVuKCkuY3NzKCdjdXJzb3InLCAnYXV0bycpO1xuICAgICAgICAvLyAgfVxuICAgICAgICAvLyB9KTtcblxuICAgICAgICAvLyBTZXQgcG9wdGluIGNsaWNrIGV2ZW50XG4gICAgICAgIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSBbaWQ9XCJwb3B0aW5Gb3JtU3VibWl0Jytwb3B0aW4ucG9wdGluX2lkKydcIl0nKS5vbignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIFtpZD1cInBvcHRpbkZvcm1TdWJtaXQnK3BvcHRpbi5wb3B0aW5faWQrJ1wiXScpLm9mZihcInN1Ym1pdFwiKTtcbiAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgIHNob3dMb2coZXJyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2xpY2sgZXZlbnQgIGhhdmUgY2xhc3MgJyxwb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJ1xuICAgICAgICAgICAgaWYgKCBqUTIyNChlLnRhcmdldCkuaGFzQ2xhc3MoJ3BvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKSB8fCBqUTIyNChlLnRhcmdldCkucGFyZW50cygnLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKS5sZW5ndGggPiAwKXtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGNsaWNrIGV2ZW50IG9uIHRhZyAnUCcgfHwgJ0RJVicgfHwgJ0lNRydcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGpRMjI0KGUudGFyZ2V0KS5wcm9wKCd0YWdOYW1lJykpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoZS50YXJnZXQpLnByb3AoJ3RhZ05hbWUnKSA9PSBcIlBcIiB8fFxuICAgICAgICAgICAgICAgICAgICBqUTIyNChlLnRhcmdldCkucGFyZW50cygnLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKS5wcm9wKCd0YWdOYW1lJykgPT0gXCJQXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgKCBqUTIyNChlLnRhcmdldCkucHJvcCgndGFnTmFtZScpID09IFwiRElWXCIgJiYgalEyMjQoZS50YXJnZXQpLmhhc0NsYXNzKCdkcmFnZ2FibGUnKSApIHx8XG4gICAgICAgICAgICAgICAgICAgICggalEyMjQoZS50YXJnZXQpLnBhcmVudHMoJy5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykucHJvcCgndGFnTmFtZScpID09IFwiRElWXCIgJiYgalEyMjQoZS50YXJnZXQpLnBhcmVudHMoJy5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykuaGFzQ2xhc3MoJ2RyYWdnYWJsZScpICkgfHxcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoZS50YXJnZXQpLnByb3AoJ3RhZ05hbWUnKSA9PSBcIklNR1wiIHx8XG4gICAgICAgICAgICAgICAgICAgIChwb3B0aW4ucG9wdGluX3R5cGU9PSBcIm1vYmlsZVwiICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0PT0gXCJmb3JtYXRfMVwiKSB8fFxuICAgICAgICAgICAgICAgICAgICAocG9wdGluLnBvcHRpbl90eXBlPT0gXCJtb2JpbGVcIiAmJiBwb3B0aW4ucG9wdGluX2Zvcm1hdD09IFwiZm9ybWF0XzJcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBvcHRpbi5wb3B0aW5fdHlwZT09IFwibW9iaWxlXCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF82XCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIChwb3B0aW4ucG9wdGluX3R5cGU9PSBcIm1vYmlsZVwiICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0PT0gXCJmb3JtYXRfN1wiKSB8fFxuICAgICAgICAgICAgICAgICAgICAocG9wdGluLnBvcHRpbl90eXBlPT0gXCJtb2JpbGVcIiAmJiBwb3B0aW4ucG9wdGluX2Zvcm1hdD09IFwiZm9ybWF0XzExXCIpXG4gICAgICAgICAgICAgICAgKXtcblxuICAgICAgICAgICAgICAgICAgICB0cnl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX3BvcCA9IGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfZm9ybSA9IGpRMjI0KGUudGFyZ2V0KS5wYXJlbnRzKCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXS5wb3B0aW4tcG9wdXAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXAnKS5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19mb3JtLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBkZWZhdWx0IHN1Ym1pdCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcmVkaXJlY3QgbGluayB0byByZWRpcmVjdCBhcnJheSBhZnRlciBwb3B0aW4gZm9ybSBzdWJtaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIHBvcHRpbi5wb3B0aW5fdHlwZT09IFwibW9iaWxlXCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQ9PSBcImZvcm1hdF8xXCIgKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICggcG9wdGluLnBvcHRpbl90eXBlPT0gXCJtb2JpbGVcIiAmJiBwb3B0aW4ucG9wdGluX2Zvcm1hdD09IFwiZm9ybWF0XzZcIiApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBwb3B0aW4ucG9wdGluX3R5cGU9PSBcIm1vYmlsZVwiICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0PT0gXCJmb3JtYXRfMTFcIiApXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIGEnKS5oYXNDbGFzcygnZmEtcGhvbmUtc3F1YXJlJykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfdXJsID0galEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIC5mYS1waG9uZS1zcXVhcmUnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gYS5jYWxsLWxpbmsnKS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfdXJsID0galEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIC5jYWxsLWxpbmsnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gLmZhLXBob25lJykubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X3VybCA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSAuZmEtcGhvbmUnKS5wYXJlbnQoKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF91cmwgPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gLmZhLXBob25lLXNxdWFyZScpLnBhcmVudCgpLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpbkZvcm1UcmlnZ2VyU3VibWl0Jytwb3B0aW4ucG9wdGluX2lkKycgc3VibWl0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoaWRkZW5GaWVsZHMgPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gLmlucHV0cy1jb250YWluZXIgW2RhdGEtbmFtZT1cInBvcHRpbkRlc2lnbkhpZGRlbkZpZWxkXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZHMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLnZhbChqUTIyNCh0aGlzKS52YWwoKSB8fCAnICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0IHN1Ym1pdCBwb3B0aW4gZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIgJiYgIXBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5kaXNhYmxlX3Bvc3RfcGxheV9zY3JlZW4pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX2pzX2Zvcm0gPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gI3BvcHRpblBsYXlTY3JlZW4gZm9ybScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfanNfZm9ybSA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSAjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyIGZvcm0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94X3ZhbGlkaXR5ID0gdGhpc19qc19mb3JtLmZpbmQoXCIuZm9ybS1pbnB1dC1jbGFzcy5maWVsZC1jaGVja2JveFtkYXRhLWFjdGlvbi1yZXF1aXJlZD0ndHJ1ZSddIC5jaGVja2JveC1jaGlsZC1maWVsZCBpbnB1dDpjaGVja2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGlvX3ZhbGlkaXR5ID0gdGhpc19qc19mb3JtLmZpbmQoXCIuZm9ybS1pbnB1dC1jbGFzcy5maWVsZC1yYWRpb1tkYXRhLWFjdGlvbi1yZXF1aXJlZD0ndHJ1ZSddIC5yYWRpby1jaGlsZC1maWVsZCBpbnB1dDpjaGVja2VkXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdF9jaGVja2JveCA9IHRoaXNfanNfZm9ybS5maW5kKFwiLmZvcm0taW5wdXQtY2xhc3MuZmllbGQtY2hlY2tib3hbZGF0YS1hY3Rpb24tcmVxdWlyZWQ9J3RydWUnXSAuY2hlY2tib3gtY2hpbGQtZmllbGQgaW5wdXRcIikuZmlyc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrYm94X3ZhbGlkaXR5Lmxlbmd0aCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0X2NoZWNrYm94LnByb3AoJ3JlcXVpcmVkJywgdHJ1ZSkuYXR0cigncmVxdWlyZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRfcmFkaW8gPSB0aGlzX2pzX2Zvcm0uZmluZChcIi5mb3JtLWlucHV0LWNsYXNzLmZpZWxkLXJhZGlvW2RhdGEtYWN0aW9uLXJlcXVpcmVkPSd0cnVlJ10gLnJhZGlvLWNoaWxkLWZpZWxkIGlucHV0XCIpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyYWRpb192YWxpZGl0eS5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdF9yYWRpby5wcm9wKCdyZXF1aXJlZCcsIHRydWUpLmF0dHIoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwaG9uZV9maWVsZCA9IHRoaXNfZm9ybS5maW5kKCdpbnB1dCNwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZFBob25lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwaG9uZV9maWVsZC5sZW5ndGggJiYgcGhvbmVfZmllbGQuYXR0cignZGF0YS1hY3Rpb24tdmFsaWRhdGUnKSA9PSAnYWR2YW5jZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwb3J0X251bWJlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGhvbmVfbnVtYmVyID0gcGhvbmVfZmllbGQudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocGhvbmVfbnVtYmVyICYmIHBob25lX251bWJlci5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihudWxsID09IHBob25lX251bWJlci5tYXRjaCgvLS0rL2cpICYmIDAgPT0gcGhvbmVfbnVtYmVyLnJlcGxhY2UoLyhcXGQrfC0pL2cgLCAnJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lX251bWJlciA9IHBob25lX251bWJlci5yZXBsYWNlKC8tL2cgLCAnJykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdF8yID0gcGhvbmVfbnVtYmVyLnN1YnN0cmluZygwLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdF8zID0gcGhvbmVfbnVtYmVyLnN1YnN0cmluZygwLCAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBbJzAyJywnMDMnLCcwNCcsJzA4JywnMDknXS5pbmNsdWRlcyhmaXJzdF8yKSAmJiBudWxsICE9IHBob25lX251bWJlci5tYXRjaCgvXlxcd3szfVxcd3szfVxcd3szfSQvZykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X251bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBbJzA1MCcsJzA1MScsJzA1MicsJzA1MycsJzA1NCcsJzA1NScsJzA1OCcsJzA3MicsJzA3MycsJzA3NCcsJzA3NicsJzA3NycsJzA3OSddLmluY2x1ZGVzKGZpcnN0XzMpICYmIG51bGwgIT0gcGhvbmVfbnVtYmVyLm1hdGNoKC9eXFx3ezN9XFx3ezN9XFx3ezR9JC9nKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydF9udW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZXBvcnRfbnVtYmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbUlkID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHBob25lX2ZpZWxkKS5wYXJlbnQoKS5hcHBlbmQoJzxzcGFuIGlkPVwibScrcmFuZG9tSWQrJ1wiIGNsYXNzPVwicG9wdGluLWlucHV0LW1zZyBwb3B0aW4taW5wdXQtbXNnLTQgcG9wdGluLWlucHV0LWVycm9yXCI+157Xodek16gg15TXmNec16TXldefINep15LXldeZPC9zcGFuPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0galEyMjQocGhvbmVfZmllbGQpLnBhcmVudHMoXCIuZHJhZ2dhYmxlLWNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXNfc2NhbGUgPj0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIjY1wiK3JhbmRvbUlkKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCI6KChqUTIyNChcIiNtXCIrcmFuZG9tSWQpLm9mZnNldCgpLnRvcCAtIGNvbnRhaW5lci5vZmZzZXQoKS50b3ApL3RoaXNfc2NhbGUpICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJ3aWR0aFwiKSkgKyAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhlaWdodFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwiaGVpZ2h0XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiaGFzLXBvcHRpbi1pbnB1dC1tc2dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihwaG9uZV9maWVsZC5sZW5ndGggJiYgcGhvbmVfZmllbGQuYXR0cignZGF0YS1hY3Rpb24tdmFsaWRhdGUnKSA9PSAnaW50ZXJuYXRpb25hbCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1tc2dcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBob25lX251bWJlciA9IHBob25lX2ZpZWxkLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwaG9uZUlucHV0ID0gcGhvbmVfZmllbGQuZ2V0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0aW9uTWVzc2FnZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRGb3JtYXQgPSAocGhvbmVJbnB1dC52YWx1ZVswXT09PVwiK1wiKSA/IGludGxUZWxJbnB1dFV0aWxzLm51bWJlckZvcm1hdC5JTlRFUk5BVElPTkFMIDogaW50bFRlbElucHV0VXRpbHMubnVtYmVyRm9ybWF0Lk5BVElPTkFMO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGFnID0gdGhpc19mb3JtLmZpbmQoXCIuaXRpX19zZWxlY3RlZC1mbGFnIC5pdGlfX2ZsYWdcIikuYXR0cihcImNsYXNzXCIpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkTnVtYmVyID0gaW50bFRlbElucHV0VXRpbHMuZm9ybWF0TnVtYmVyKHBob25lSW5wdXQudmFsdWUsIGZsYWcsIGN1cnJlbnRGb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lSW5wdXQudmFsdWUgPSBmb3JtYXR0ZWROdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRpID0gd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuZ2V0SW5zdGFuY2UocGhvbmVJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwaG9uZUlucHV0LnZhbHVlLmxlbmd0aCAmJiBwaG9uZV9maWVsZC5hdHRyKCdkYXRhLWFjdGlvbi1yZXF1aXJlZCcpID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25NZXNzYWdlID0gaWZVc2VybGFuZ0lzSGUoKSA/IFwi15nXqSDXnNeU15bXmdefINee16HXpNeoINeY15zXpNeV158g16rXp9eZ159cIiA6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcGhvbmUgbnVtYmVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaG9uZUlucHV0LnZhbHVlLmxlbmd0aCAmJiAhaXRpLmlzVmFsaWROdW1iZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZSA9IGlmVXNlcmxhbmdJc0hlKCkgPyBcItee16HXpNeoINec15Ag16rXp9eZ158g4oCTINeZ16kg15zXoNeh15XXqiDXqdeV15EuXCIgOiBcIkludmFsaWQgbnVtYmVyIC0gcGxlYXNlIHRyeSBhZ2FpblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LW1zZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWxpZGF0aW9uTWVzc2FnZSAhPSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbUlkID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHBob25lSW5wdXQpLnBhcmVudCgpLmFwcGVuZCgnPHNwYW4gaWQ9XCJtJytyYW5kb21JZCsnXCIgY2xhc3M9XCJwb3B0aW4taW5wdXQtbXNnIHBvcHRpbi1pbnB1dC1tc2ctNSBwb3B0aW4taW5wdXQtZXJyb3JcIj4nK3ZhbGlkYXRpb25NZXNzYWdlKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBqUTIyNChwaG9uZUlucHV0KS5wYXJlbnRzKFwiLmRyYWdnYWJsZS1jb250YWluZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX3NjYWxlID0gcGFyc2VGbG9hdCh0aGlzX3BvcC5hdHRyKCdkYXRhLXNjYWxlJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKFwiaGFzLXBvcHRpbi1pbnB1dC1tc2dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGpRMjI0KFwiI21cIityYW5kb21JZCkuY2xvbmUoKS5hdHRyKFwiaWRcIiwgXCJjXCIrcmFuZG9tSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiOigoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5vZmZzZXQoKS50b3AgLSBjb250YWluZXIub2Zmc2V0KCkudG9wKS90aGlzX3NjYWxlKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCI6KChqUTIyNChcIiNtXCIrcmFuZG9tSWQpLm9mZnNldCgpLmxlZnQgLSBjb250YWluZXIub2Zmc2V0KCkubGVmdCkvdGhpc19zY2FsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjpwYXJzZUludChqUTIyNChcIiNtXCIrcmFuZG9tSWQpLmNzcyhcImhlaWdodFwiKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbWFpbF9maWVsZCA9IHRoaXNfZm9ybS5maW5kKCdpbnB1dCNwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZEVtYWlsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbWFpbF9maWVsZC5sZW5ndGgpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRlQWN0aW9uID0gZW1haWxfZmllbGQuYXR0cignZGF0YS1hY3Rpb24tdmFsaWRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGlvbiA9IHZhbGlkYXRlQWN0aW9uID8gdmFsaWRhdGVBY3Rpb24gOiBcImNoZWNrLXR5cG9zXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrX3R5cG9zID0gdmFsaWRhdGVBY3Rpb24uaW5jbHVkZXMoJ3R5cG9zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrX2J1c2luZXNzX2VtYWlsID0gdmFsaWRhdGVBY3Rpb24uaW5jbHVkZXMoJ2J1c2luZXNzJyk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNWYWxpZEVtYWlsKGVtYWlsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC9eW2EtekEtWjAtOSsuXy9cXFxcXFwtQCAoKVxcW1xcXV0rJC8udGVzdChlbWFpbCkgJiYgL15bYS16QS1aMC05Ll8lKy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfShcXC5bYS16QS1aXXsyLH0pKiQvLnRlc3QoZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0J1c2luZXNzRW1haWwoZW1haWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW1haWxEb21haW4gPSBlbWFpbC5zcGxpdCgnQCcpWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShmYWtlRW1haWxEb21haW5zLmluY2x1ZGVzKGVtYWlsRG9tYWluKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrX3R5cG9zIHx8IGNoZWNrX2J1c2luZXNzX2VtYWlsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcG9ydF9lbWFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW1haWxfYWRkcmVzcyA9IGVtYWlsX2ZpZWxkLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JfbWVzc2FnZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVtYWlsX2FkZHJlc3MgJiYgZW1haWxfYWRkcmVzcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2hlY2tfdHlwb3MgJiYgIWlzVmFsaWRFbWFpbChlbWFpbF9hZGRyZXNzKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9IGlmVXNlcmxhbmdJc0hlKCkgPyAgXCLXmdepINep15LXmdeQ15XXqiDXm9eq15nXkSDXkdee15nXmdecLlwiIDogXCJUaGVyZSBhcmUgdHlwb3MgaW4gdGhlIGVtYWlsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X2VtYWlsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrX2J1c2luZXNzX2VtYWlsICYmICFpc0J1c2luZXNzRW1haWwoZW1haWxfYWRkcmVzcykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSBpZlVzZXJsYW5nSXNIZSgpID8gXCLXqNenINee15nXmdec15nXnSDXoteh16fXmdeZ150g157Xldeq16jXmdedLlwiIDogXCJPbmx5IGJ1c2luZXNzIGVtYWlscyBhcmUgYWxsb3dlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydF9lbWFpbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVwb3J0X2VtYWlsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5kb21JZCA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoZW1haWxfZmllbGQpLnBhcmVudCgpLmFwcGVuZCgnPHNwYW4gaWQ9XCJtJytyYW5kb21JZCsnXCIgY2xhc3M9XCJwb3B0aW4taW5wdXQtbXNnIHBvcHRpbi1pbnB1dC1tc2ctNiBwb3B0aW4taW5wdXQtZXJyb3JcIj4nK2Vycm9yX21lc3NhZ2UrJzwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBqUTIyNChlbWFpbF9maWVsZCkucGFyZW50cyhcIi5kcmFnZ2FibGUtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfc2NhbGUgPSBwYXJzZUZsb2F0KHRoaXNfcG9wLmF0dHIoJ2RhdGEtc2NhbGUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3NjYWxlID49IDEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBcImNcIityYW5kb21JZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI2NcIityYW5kb21JZCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkudG9wIC0gY29udGFpbmVyLm9mZnNldCgpLnRvcCkvdGhpc19zY2FsZSkgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjooKGpRMjI0KFwiI21cIityYW5kb21JZCkub2Zmc2V0KCkubGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0KS90aGlzX3NjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOnBhcnNlSW50KGpRMjI0KFwiI21cIityYW5kb21JZCkuY3NzKFwid2lkdGhcIikpICsgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJoZWlnaHRcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJoYXMtcG9wdGluLWlucHV0LW1zZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJpcnRoZGF5RmllbGQgPSB0aGlzX2Zvcm0uZmluZCgnaW5wdXQjcG9wdGluRGVzaWduQmlydGhkYXlGaWVsZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYmlydGhkYXlGaWVsZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4taW5wdXQtbXNnXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiaXJ0aGRheSA9IGJpcnRoZGF5RmllbGQudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYmlydGhkYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJpcnRoZGF5RGF0ZSA9IG5ldyBEYXRlKGJpcnRoZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYmlydGhkYXlEYXRlID49IHRvZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JfbWVzc2FnZSA9IGlmVXNlcmxhbmdJc0hlKCkgPyBcIteZ16kg15zXlNeW15nXnyDXqteQ16jXmdeaINec15nXk9eUINeq16fXmdefLlwiIDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBiaXJ0aGRheS5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5kb21JZCA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmlydGhkYXlGaWVsZC5wYXJlbnQoKS5hcHBlbmQoJzxzcGFuIGlkPVwibScrcmFuZG9tSWQrJ1wiIGNsYXNzPVwicG9wdGluLWlucHV0LW1zZyBwb3B0aW4taW5wdXQtbXNnLTcgcG9wdGluLWlucHV0LWVycm9yXCI+JytlcnJvcl9tZXNzYWdlKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gYmlydGhkYXlGaWVsZC5wYXJlbnRzKFwiLmRyYWdnYWJsZS1jb250YWluZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc19zY2FsZSA9IHBhcnNlRmxvYXQodGhpc19wb3AuYXR0cignZGF0YS1zY2FsZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXNfc2NhbGUgPj0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKFwiaGFzLXBvcHRpbi1pbnB1dC1tc2dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChqUTIyNChcIiNtXCIrcmFuZG9tSWQpLmNsb25lKCkuYXR0cihcImlkXCIsIFwiY1wiK3JhbmRvbUlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIjY1wiK3JhbmRvbUlkKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiOigoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5vZmZzZXQoKS50b3AgLSBjb250YWluZXIub2Zmc2V0KCkudG9wKS90aGlzX3NjYWxlKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGVmdFwiOigoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5vZmZzZXQoKS5sZWZ0IC0gY29udGFpbmVyLm9mZnNldCgpLmxlZnQpL3RoaXNfc2NhbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6cGFyc2VJbnQoalEyMjQoXCIjbVwiK3JhbmRvbUlkKS5jc3MoXCJ3aWR0aFwiKSkgKyAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjpwYXJzZUludChqUTIyNChcIiNtXCIrcmFuZG9tSWQpLmNzcyhcImhlaWdodFwiKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImhhcy1wb3B0aW4taW5wdXQtbXNnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX2Zvcm0uZmluZChcIi5wb3B0aW4taW5wdXQtZXJyb3JcIikubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzX2pzX2Zvcm1bMF0uY2hlY2tWYWxpZGl0eSgpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNfc3VibWl0X3BvcHRpbl9ydW4pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19zdWJtaXRfcG9wdGluX3J1biA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU3BpbnQgdGhlbiB3aGVlbCBiZWZvcmUgc3VibWl0IGlmIHBvc3RfcGxheV9zY3JlZW4gaXMgZGlzYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigocG9wdGluLnBvcHRpbl90eXBlPT0gXCJnYW1pZmllZFwiICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0PT0gXCJmb3JtYXRfM1wiKSAmJiBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuKXsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5TcGluV2hlZWxJbml0KHBvcHRpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRQb3B0aW4ocG9wdGluLCBjbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX3N1Ym1pdF9wb3B0aW5fcnVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3VibWl0X3BvcHRpbl9kaXNhYmxlX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfanNfZm9ybVswXS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0X2NoZWNrYm94LnByb3AoJ3JlcXVpcmVkJywgZmFsc2UpLmF0dHIoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0X3JhZGlvLnByb3AoJ3JlcXVpcmVkJywgZmFsc2UpLmF0dHIoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpeyAvL2ZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgcmVwb3J0VmFsaWRpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19qc19mb3JtLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpWzBdLmNoZWNrVmFsaWRpdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHRfY2hlY2tib3gucHJvcCgncmVxdWlyZWQnLCBmYWxzZSkuYXR0cigncmVxdWlyZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHRfcmFkaW8ucHJvcCgncmVxdWlyZWQnLCBmYWxzZSkuYXR0cigncmVxdWlyZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBwYWdlIHJlZnJlc2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25pdG9yRXJyb3IoJ3BvcHRpbkNvbnZlcnNpb24oKS0+Y2FsbCB0byBtb2JpbGUnLGVyciwnT0snLGZhbHNlLHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgZm9ybSBzdWJtaXRcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIFtpZD1cInBvcHRpbkZvcm1TdWJtaXQnK3BvcHRpbi5wb3B0aW5faWQrJ1wiXScpLm9uKCdzdWJtaXQnLGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygncG9wdGluRm9ybUNsaWNrU3VibWl0Jytwb3B0aW4ucG9wdGluX2lkKycgc3VibWl0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBzdWJtaXQgcG9wdGluIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc19zdWJtaXRfcG9wdGluX3J1bil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc3VibWl0X3BvcHRpbl9ydW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRQb3B0aW4ocG9wdGluLCBjbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19zdWJtaXRfcG9wdGluX3J1biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3VibWl0X3BvcHRpbl9kaXNhYmxlX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgcGFnZSByZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvcGlmeVByb2R1Y3RSZWNvbW1lbmRhdGlvbnMocG9wdGluKXtcbiAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIC5mci1zaG9waWZ5LWl0ZW0tYnRuIGEnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgc2hvcGlmeVByb2R1Y3RTZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgc2hvcGlmeVByb2R1Y3RTZXR0aW5nc1tcImJ1dHRvbl90ZXh0XCJdID0galEyMjQodGhpcykudGV4dCgpO1xuICAgICAgICAgICAgc2hvcGlmeVByb2R1Y3RTZXR0aW5nc1tcInByb2R1Y3RfdXJsXCJdID0galEyMjQodGhpcykuYXR0cihcImRhdGEtdXJsXCIpO1xuICAgICAgICAgICAgc2hvcGlmeVByb2R1Y3RTZXR0aW5nc1tcInByb2R1Y3RfbmFtZVwiXSA9IGpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLXByb2R1Y3QtbmFtZVwiKTtcbiAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0U2V0dGluZ3NbXCJwcm9kdWN0X2lkXCJdID0galEyMjQodGhpcykuYXR0cihcImRhdGEtcHJvZHVjdC1pZFwiKTtcbiAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0U2V0dGluZ3NbXCJ2YXJpYW50X2lkXCJdID0galEyMjQodGhpcykuYXR0cihcImRhdGEtdmFyaWFudC1pZFwiKTtcbiAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0U2V0dGluZ3NbXCJidXR0b25zX2FjdGlvblwiXSA9IGpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLWJ1dHRvbnMtYWN0aW9uXCIpO1xuICAgICAgICAgICAgcG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdID0gc2hvcGlmeVByb2R1Y3RTZXR0aW5ncztcbiAgICAgICAgICAgIHBvcHRpbkNvbnZlcnNpb24ocG9wdGluLCBudWxsLCBcInNob3BpZnlfcHJvZHVjdHNcIiwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH0gICAgXG4gICAgLypcbiAgICAqIFNob3BpZnkgcmVjZW50bHkgdmlld2VkIHByb2R1Y3RzXG4gICAgKiBEZXNjICAgICAgICAgICAgICA6IFN0b3JlIHNob3BpZnkgcmVjZW50bHkgdmlld2VkIHByb2R1Y3QgaWRcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gc2V0U2hvcGlmeVJlY2VudGx5Vmlld2VkUHJvZHVjdCgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5TaG9waWZ5QW5hbHl0aWNzKSB7XG4gICAgICAgICAgICB2YXIgc2hvcGlmeV9wYWdlX3R5cGUgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UucGFnZVR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNob3BpZnlfcGFnZV90eXBlICE9ICd1bmRlZmluZWQnICYmIHNob3BpZnlfcGFnZV90eXBlID09IFwicHJvZHVjdFwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2VudF9wcm9kdWN0X2lkcyA9IHBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fc2hvcGlmeV9yZWNlbnRfcHJvZHVjdF9pZCcpID8gcG9wdGluR2V0Q29va2llKCdwb3B0aW5fc2hvcGlmeV9yZWNlbnRfcHJvZHVjdF9pZCcpLnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgICAgICAgICAgICAgIGlmIChTaG9waWZ5QW5hbHl0aWNzLm1ldGEucHJvZHVjdCAmJiAodHlwZW9mIFNob3BpZnlBbmFseXRpY3MubWV0YS5zZWxlY3RlZFZhcmlhbnRJZCAhPSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkVmFyaWFudElkID0gU2hvcGlmeUFuYWx5dGljcy5tZXRhLnNlbGVjdGVkVmFyaWFudElkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVjZW50X3Byb2R1Y3RfaWRzLmluY2x1ZGVzKHNlbGVjdGVkVmFyaWFudElkKSB8fCAocmVjZW50X3Byb2R1Y3RfaWRzLmxlbmd0aCA+IDIgJiYgcmVjZW50X3Byb2R1Y3RfaWRzWzJdID09IHNlbGVjdGVkVmFyaWFudElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZW50X3Byb2R1Y3RfaWRzLnVuc2hpZnQoc2VsZWN0ZWRWYXJpYW50SWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNlbnRfcHJvZHVjdF9pZHMubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZW50X3Byb2R1Y3RfaWRzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZShcInBvcHRpbl9zaG9waWZ5X3JlY2VudF9wcm9kdWN0X2lkXCIscmVjZW50X3Byb2R1Y3RfaWRzLmpvaW4oXCIsXCIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2hvd1BvcHRpbigpXG4gICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluXG4gICAgKiBEZXNjICAgICAgICAgICAgIDogVGhpcyBmdW5jdGlvbiB3aWxsIGZldGNoIHNob3BpZnkgcHJvZHVjdHMgaWYgcGl4ZWwgcnVuIG9uIFNob3BpZnlcbiAgICAqL1xuICAgZnVuY3Rpb24gZ2V0U2hvcGlmeVJlY29tbWVuZGVkUHJvZHVjdHMocG9wdGluLCBzcHJKU09OKXtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIHZhciBzaG9waWZ5UHJvZHVjdHNKU09OID0ge307XG5cbiAgICAgICAgICAgIGlmIChqUTIyNChcImlucHV0I3Nob3BpZnlQcm9kdWN0c0pTT05cIikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0c0pTT04gPSBKU09OLnBhcnNlKGpRMjI0KFwiI3Nob3BpZnlQcm9kdWN0c0pTT05cIikudmFsKCkpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIC8vIHBhc3Npbmcgc3BySlNPTiBmb3IgdGVhc2Vyc1xuICAgICAgICAgICAgaWYoc3BySlNPTiAmJiBzcHJKU09OLmNhdGVnb3J5KXtcbiAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdHNKU09OID0gc3BySlNPTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB2YXIgcGFyYW0gPSB7XG4gICAgICAgICAgICAgICAgXCJjYXRlZ29yeVwiOnNob3BpZnlQcm9kdWN0c0pTT04/LmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgIFwicHJvZHVjdHNcIjpzaG9waWZ5UHJvZHVjdHNKU09OPy5tYW51YWxfcHJvZHVjdHMsXG4gICAgICAgICAgICAgICAgXCJsaW1pdFwiOiAoc2hvcGlmeVByb2R1Y3RzSlNPTj8uY2F0ZWdvcnkgPT0gXCJtYW51YWxcIikgPyBzaG9waWZ5UHJvZHVjdHNKU09OPy5tYW51YWxfcHJvZHVjdHMubGVuZ3RoIDogc2hvcGlmeVByb2R1Y3RzSlNPTj8uY291bnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiggcGFyYW0uY2F0ZWdvcnkgPT0gXCJsYXN0X3Zpc2l0ZWRcIiApe1xuICAgICAgICAgICAgICAgIHZhciByZWNlbnRfcHJvZHVjdF9pZHMgPSBwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3Nob3BpZnlfcmVjZW50X3Byb2R1Y3RfaWQnKSA/IHBvcHRpbkdldENvb2tpZSgncG9wdGluX3Nob3BpZnlfcmVjZW50X3Byb2R1Y3RfaWQnKS5zcGxpdChcIixcIikgOiBbXTtcblxuICAgICAgICAgICAgICAgIHBhcmFtW1wicHJvZHVjdHNcIl0gPSByZWNlbnRfcHJvZHVjdF9pZHM7XG4gICAgICAgICAgICAgICAgcGFyYW1bXCJsaW1pdFwiXSA9IChyZWNlbnRfcHJvZHVjdF9pZHMubGVuZ3RoIDw9IHNob3BpZnlQcm9kdWN0c0pTT04/LmNvdW50KSA/IHJlY2VudF9wcm9kdWN0X2lkcy5sZW5ndGggOiBzaG9waWZ5UHJvZHVjdHNKU09OPy5jb3VudDtcbiAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdHNKU09OLmNhdGVnb3J5ID0gXCJtYW51YWxcIjtcbiAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdHNKU09OLmNhdGVnb3J5X29yaWdpbmFsID0gXCJsYXN0X3Zpc2l0ZWRcIjtcbiAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdHNKU09OLm1hbnVhbF9wcm9kdWN0cyA9IHBhcmFtW1wicHJvZHVjdHNcIl07XG5cblxuXG4gICAgICAgICAgICAgICAgaWYoIHR5cGVvZiBwb3B0aW5fbGFuZGluZ19wYWdlIT0ndW5kZWZpbmVkJyAmJiBwb3B0aW5fbGFuZGluZ19wYWdlID09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcImRpc3BsYXlcIjp0cnVlfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCByZWNlbnRfcHJvZHVjdF9pZHMubGVuZ3RoIDw9IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XCJkaXNwbGF5XCI6ZmFsc2V9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcmVjZW50X3Byb2R1Y3RfaWRzLmxlbmd0aCA+IDAgJiYgc3BySlNPTil7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZighc3BySlNPTil7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRQcm9kdWN0UmVjb21tZW5kYXRpb25SZXF1ZXN0KCBwb3B0aW4sIHNob3BpZnlQcm9kdWN0c0pTT04gLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9kID0gKHJlc3VsdD8uZGF0YT8ucHJvZHVjdHMpID8gcmVzdWx0LmRhdGEucHJvZHVjdHMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zaG9waWZ5UHJvZHVjdEN1cnJlbmN5ID0gcmVzdWx0LmN1cnJlbmN5ID8gcmVzdWx0LmN1cnJlbmN5IDogXCJVU0RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTaG9waWZ5UHJvZHVjdERhdGEocG9wdGluLnBvcHRpbl9pZCwgcHJvZCwgcG9wdGluICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcImRpc3BsYXlcIjp0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS5jYXRlZ29yeSA9PSBcInByb2R1Y3RfaW5fY2FydFwiKSB7XG5cbiAgICAgICAgICAgICAgICBpZih3aW5kb3cuU2hvcGlmeSAhPT0gdW5kZWZpbmVkICYmIHdpbmRvdy5TaG9waWZ5LnNob3Ape1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2hvcGlmeWxhbmd1YWdlUm91dGUoKStcImNhcnQuanNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSwgXCJqc29uXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGNhcnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXNwbGF5U2hvcGlmeVByb2R1Y3REYXRhKCBwb3B0aW4ucG9wdGluX2lkLCBjYXJ0Lml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzb2x2ZSh7XCJkaXNwbGF5XCI6dHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhcnQuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RWYXJpYW50SWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FydC5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gcHJvZHVjdFZhcmlhbnRJZHMucHVzaChpdGVtLnZhcmlhbnRfaWQudG9TdHJpbmcoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bXCJwcm9kdWN0c1wiXSA9IHByb2R1Y3RWYXJpYW50SWRzLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0c0pTT04uY2F0ZWdvcnkgPSBcIm1hbnVhbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3BpZnlQcm9kdWN0c0pTT04ubWFudWFsX3Byb2R1Y3RzID0gcGFyYW1bXCJwcm9kdWN0c1wiXS5zbGljZSgwLCAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlbmRQcm9kdWN0UmVjb21tZW5kYXRpb25SZXF1ZXN0KHBvcHRpbiwgc2hvcGlmeVByb2R1Y3RzSlNPTilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighc3BySlNPTil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRQcm9kdWN0UmVjb21tZW5kYXRpb25SZXF1ZXN0KCBwb3B0aW4sIHNob3BpZnlQcm9kdWN0c0pTT04gLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zaG9waWZ5UHJvZHVjdEN1cnJlbmN5ID0gcmVzdWx0LmN1cnJlbmN5ID8gcmVzdWx0LmN1cnJlbmN5IDogXCJVU0RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTaG9waWZ5UHJvZHVjdERhdGEocG9wdGluLnBvcHRpbl9pZCwgcmVzdWx0LmRhdGEucHJvZHVjdHMsIHBvcHRpbiwgcHJvZHVjdFZhcmlhbnRJZHMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93aW5nIGJlc3Qgc2VsbGVycyB3aGVuIG5vIHByb2R1Y3RzIGluIGNhcnQgYW5kIHRlYXNlciBpcyBvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FydC5pdGVtX2NvdW50ID09IDAgJiYgcG9wdGluPy5pc190ZWFzZXJzX29uICYmICFzcHJKU09OKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9waWZ5UHJvZHVjdHNKU09OLmNhdGVnb3J5ID0gXCJwcm9kdWN0X2NvbGxlY3Rpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUHJvZHVjdFJlY29tbWVuZGF0aW9uUmVxdWVzdCggcG9wdGluLCBzaG9waWZ5UHJvZHVjdHNKU09OICwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zaG9waWZ5UHJvZHVjdEN1cnJlbmN5ID0gcmVzdWx0LmN1cnJlbmN5ID8gcmVzdWx0LmN1cnJlbmN5IDogXCJVU0RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVNob3BpZnlQcm9kdWN0RGF0YShwb3B0aW4ucG9wdGluX2lkLCByZXN1bHQuZGF0YS5wcm9kdWN0cywgcG9wdGluICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBmZXRjaCBzaG9waWZ5IGRhdGFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKmRpc3BsYXlTaG9waWZ5UHJvZHVjdERhdGEoIHBvcHRpbi5wb3B0aW5faWQsIG1vY0pTT04uaXRlbXMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTsqL1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKCB0eXBlb2YgcG9wdGluX2xhbmRpbmdfcGFnZSE9J3VuZGVmaW5lZCcgJiYgcG9wdGluX2xhbmRpbmdfcGFnZSA9PSB0cnVlICl7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1wiZGlzcGxheVwiOnRydWV9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0uY2F0ZWdvcnkgPT0gXCJtYW51YWxcIiB8fCBwYXJhbS5jYXRlZ29yeSA9PSBcInByb2R1Y3RfY29sbGVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XCJkaXNwbGF5XCI6dHJ1ZX0pO1xuICAgICAgICAgICAgICAgIGlmKCAhc3BySlNPTiApe1xuICAgICAgICAgICAgICAgICAgICBzZW5kUHJvZHVjdFJlY29tbWVuZGF0aW9uUmVxdWVzdCggcG9wdGluLCBzaG9waWZ5UHJvZHVjdHNKU09OICwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZCA9IChyZXN1bHQ/LmRhdGE/LnByb2R1Y3RzKSA/IHJlc3VsdC5kYXRhLnByb2R1Y3RzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2hvcGlmeVByb2R1Y3RDdXJyZW5jeSA9IHJlc3VsdC5jdXJyZW5jeSA/IHJlc3VsdC5jdXJyZW5jeSA6IFwiVVNEXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5U2hvcGlmeVByb2R1Y3REYXRhKHBvcHRpbi5wb3B0aW5faWQsIHByb2QsIHBvcHRpbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XCJkaXNwbGF5XCI6dHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgIH1cblxuICAgZnVuY3Rpb24gc2VuZFByb2R1Y3RSZWNvbW1lbmRhdGlvblJlcXVlc3QocG9wdGluLCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICB1cmw6IGFwaV9saW5rK1wiL2FwaS9kaXNwbGF5L3Nob3BpZnkvcHJvZHVjdC1yZWNvbW1lbmRhdGlvbi9cIitwb3B0aW4ucG9wdGluX2lkLFxuICAgICAgICAgICB0eXBlOiBcInBvc3RcIixcbiAgICAgICAgICAgZGF0YTogcGF5bG9hZCxcbiAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgfSwgXCJqc29uXCIpXG4gICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgLy9kaXNwbGF5U2hvcGlmeVByb2R1Y3REYXRhKHBvcHRpbi5wb3B0aW5faWQsIGRhdGEuZGF0YS5wcm9kdWN0cywgcG9wdGluICk7XG4gICAgICAgICAgICAgICAgICAgLy9yZXNvbHZlKHtcImRpc3BsYXlcIjp0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBmZXRjaCBzaG9waWZ5IGRhdGFcIik7XG4gICAgICAgICAgICAgICByZWplY3QoZGF0YSk7XG4gICAgICAgICAgIH0pO1xuICAgfVxuXG4gICBmdW5jdGlvbiBkaXNwbGF5U2hvcGlmeVByb2R1Y3REYXRhKHBvcHRpbklkLCBwcm9kdWN0cywgcG9wdGluLCBjYXJ0VmFyaWFudHMpe1xuICAgICAgIFxuICAgICAgICB2YXIgc2hvcGlmeUxheW91dFdpZHRoID0ge1xuICAgICAgICAgICAgdmVydGljYWw6ezE6WzEwMCwxNTAsMjAwLDI1MCwzMDBdfSxcbiAgICAgICAgICAgIGhvcml6b250YWw6e1xuICAgICAgICAgICAgICAgIDE6WzE1MCwxODAsMjAwLDI4MCwzNTBdLFxuICAgICAgICAgICAgICAgIDI6WzIwMCwzMDAsNDAwLDU1MCw3NTBdLFxuICAgICAgICAgICAgICAgIDM6WzQwMCw0NTAsNjIwLDY4MCw4MDBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiggcG9wdGluICYmIHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImZ1bGxwYWdlXCIgKXtcbiAgICAgICAgICAgIHNob3BpZnlMYXlvdXRXaWR0aFsnaG9yaXpvbnRhbCddWzFdID0gWzE1MCwxODAsMjAwLDQwMCw2MDBdO1xuICAgICAgICAgICAgc2hvcGlmeUxheW91dFdpZHRoWydob3Jpem9udGFsJ11bMl0gPSBbMjUwLDMwMCw0MDAsODAwLDEwMF07XG4gICAgICAgICAgICBzaG9waWZ5TGF5b3V0V2lkdGhbJ2hvcml6b250YWwnXVszXSA9IFs0MDAsNTAwLDYyMCw5MDAsMTIwMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZihqUTIyNChcIiNzaG9waWZ5UHJvZHVjdHNKU09OXCIpLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdmFyIHNob3BpZnlQcm9kdWN0c0pTT04gPSBKU09OLnBhcnNlKGpRMjI0KFwiI3Nob3BpZnlQcm9kdWN0c0pTT05cIikudmFsKCkpO1xuICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBjbnQgPSAwO1xuICAgICAgICB2YXIgcHJvZFRvRGlzcGxheSA9IFtdO1xuICAgICAgICB2YXIgc2VsZWN0ZWRQcm9kc0FyciA9IFtdO1xuICAgICAgICBpZihzaG9waWZ5UHJvZHVjdHNKU09OLmNhdGVnb3J5ID09IFwibGFzdF92aXNpdGVkXCIpe1xuICAgICAgICAgICAgc2VsZWN0ZWRQcm9kc0FyciA9IHBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fc2hvcGlmeV9yZWNlbnRfcHJvZHVjdF9pZCcpID8gcG9wdGluR2V0Q29va2llKCdwb3B0aW5fc2hvcGlmeV9yZWNlbnRfcHJvZHVjdF9pZCcpLnNwbGl0KFwiLFwiKSA6IFtdOyAgICAgICAgICAgICAgICBcbiAgICAgICAgfWVsc2UgaWYoc2hvcGlmeVByb2R1Y3RzSlNPTi5jYXRlZ29yeSA9PSBcIm1hbnVhbFwiKXtcbiAgICAgICAgICAgIHNlbGVjdGVkUHJvZHNBcnIgPSBzaG9waWZ5UHJvZHVjdHNKU09OLm1hbnVhbF9wcm9kdWN0cy5sZW5ndGggPyBzaG9waWZ5UHJvZHVjdHNKU09OLm1hbnVhbF9wcm9kdWN0cyA6IFtdO1xuICAgICAgICB9ZWxzZSBpZihzaG9waWZ5UHJvZHVjdHNKU09OLmNhdGVnb3J5ID09IFwicHJvZHVjdF9pbl9jYXJ0XCIpe1xuICAgICAgICAgICAgc2VsZWN0ZWRQcm9kc0FyciA9IChjYXJ0VmFyaWFudHM/Lmxlbmd0aCkgPyBjYXJ0VmFyaWFudHMgOiBbXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzZWxlY3RlZFByb2RzQXJyID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZihwcm9kdWN0cy5sZW5ndGggPiAwKXtcblxuICAgICAgICAgICAgcHJvZHVjdHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuXG4gICAgICAgICAgICAgICAgaWYoIGl0ZW0udmFyaWFudHMgJiYgaXRlbS52YXJpYW50cy5sZW5ndGggPiAwICl7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udmFyaWFudHMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdPYmogPSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHNlbGVjdGVkUHJvZHNBcnIuaW5kZXhPZiggdi5pZC50b1N0cmluZygpICkgIT0gLTEgfHwgc2VsZWN0ZWRQcm9kc0FyciA9PSAwICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ09ialtcInByb2R1Y3RfaWRcIl0gPSBpdGVtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdPYmpbXCJ2YXJpYW50X2lkXCJdID0gdi5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nT2JqW1wiaW1hZ2VcIl0gPSBpdGVtLmltYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdPYmpbXCJkZXNjXCJdID0gaXRlbS5ib2R5X2h0bWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ09ialtcInRpdGxlXCJdID0gaXRlbS50aXRsZSArICgodi50aXRsZSAmJiB2LnRpdGxlIT0nRGVmYXVsdCBUaXRsZScpID8gXCIgLSBcIit2LnRpdGxlIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ09ialtcImhhbmRsZVwiXSA9IGl0ZW0uaGFuZGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdPYmpbXCJpbnZlbnRvcnlfcXVhbnRpdHlcIl0gPSB2LmludmVudG9yeV9xdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nT2JqW1wicHJpY2VcIl0gPSAoIHYucHJlc2VudG1lbnRfcHJpY2VzICYmIHYucHJlc2VudG1lbnRfcHJpY2VzLmxlbmd0aCA+IDAgJiYgdi5wcmVzZW50bWVudF9wcmljZXNbMF0ucHJpY2UgJiYgdi5wcmVzZW50bWVudF9wcmljZXNbMF0ucHJpY2UuYW1vdW50ICkgPyB2LnByZXNlbnRtZW50X3ByaWNlc1swXS5wcmljZS5hbW91bnQgOiB2LnByaWNlIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nT2JqW1wiY3VycmVuY3lfc3ltYm9sXCJdID0gd2luZG93LnNob3BpZnlQcm9kdWN0Q3VycmVuY3kgPyB3aW5kb3cuc2hvcGlmeVByb2R1Y3RDdXJyZW5jeSA6IFwiVVNEXCIgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdPYmpbXCJjb21wYXJlX2F0X3ByaWNlXCJdID0gdi5jb21wYXJlX2F0X3ByaWNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIG1heCAzIHByb2R1Y3RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJvZFRvRGlzcGxheS5sZW5ndGggPD0gMyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2RUb0Rpc3BsYXkucHVzaChzZXR0aW5nT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJTeW1ib2xPYmogPSB7IEFFRDogJ9ivLtilJywgQUZOOiAn2IsnLCBBTEw6ICdMJywgQU1EOiAn1o8nLCBBTkc6ICfGkicsIEFPQTogJ0t6JywgQVJTOiAnJCcsIEFVRDogJyQnLCBBV0c6ICfGkicsIEFaTjogJ+KCvCcsIEJBTTogJ0tNJywgQkJEOiAnJCcsIEJEVDogJ+CnsycsIEJHTjogJ9C70LInLCBCSEQ6ICcu2K8u2KgnLCBCSUY6ICdGQnUnLCBCTUQ6ICckJywgQk5EOiAnJCcsIEJPQjogJyRiJywgQk9WOiAnQk9WJywgQlJMOiAnUiQnLCBCU0Q6ICckJywgQlRDOiAn4oK/JywgQlROOiAnTnUuJywgQldQOiAnUCcsIEJZTjogJ0JyJywgQllSOiAnQnInLCBCWkQ6ICdCWiQnLCBDQUQ6ICckJywgQ0RGOiAnRkMnLCBDSEU6ICdDSEUnLCBDSEY6ICdDSEYnLCBDSFc6ICdDSFcnLCBDTEY6ICdDTEYnLCBDTFA6ICckJywgQ05ZOiAnwqUnLCBDT1A6ICckJywgQ09VOiAnQ09VJywgQ1JDOiAn4oKhJywgQ1VDOiAnJCcsIENVUDogJ+KCsScsIENWRTogJyQnLCBDWks6ICdLxI0nLCBESkY6ICdGZGonLCBES0s6ICdrcicsIERPUDogJ1JEJCcsIERaRDogJ9iv2KwnLCBFRUs6ICdrcicsIEVHUDogJ8KjJywgRVJOOiAnTmZrJywgRVRCOiAnQnInLCBFVEg6ICfOnicsIEVVUjogJ+KCrCcsIEZKRDogJyQnLCBGS1A6ICfCoycsIEdCUDogJ8KjJywgR0VMOiAn4oK+JywgR0dQOiAnwqMnLCBHSEM6ICfigrUnLCBHSFM6ICdHSOKCtScsIEdJUDogJ8KjJywgR01EOiAnRCcsIEdORjogJ0ZHJywgR1RROiAnUScsIEdZRDogJyQnLCBIS0Q6ICckJywgSE5MOiAnTCcsIEhSSzogJ2tuJywgSFRHOiAnRycsIEhVRjogJ0Z0JywgSURSOiAnUnAnLCBJTFM6ICfigqonLCBJTVA6ICfCoycsIElOUjogJ+KCuScsIElRRDogJ9i5LtivJywgSVJSOiAn77e8JywgSVNLOiAna3InLCBKRVA6ICfCoycsIEpNRDogJ0okJywgSk9EOiAnSkQnLCBKUFk6ICfCpScsIEtFUzogJ0tTaCcsIEtHUzogJ9C70LInLCBLSFI6ICfhn5snLCBLTUY6ICdDRicsIEtQVzogJ+KCqScsIEtSVzogJ+KCqScsIEtXRDogJ0tEJywgS1lEOiAnJCcsIEtaVDogJ+KCuCcsIExBSzogJ+KCrScsIExCUDogJ8KjJyxcblx0XHRcdFx0IExLUjogJ+KCqCcsIExSRDogJyQnLCBMU0w6ICdNJywgTFRDOiAnxYEnLCBMVEw6ICdMdCcsIExWTDogJ0xzJywgTFlEOiAnTEQnLCBNQUQ6ICdNQUQnLCBNREw6ICdsZWknLCBNR0E6ICdBcicsIE1LRDogJ9C00LXQvScsIE1NSzogJ0snLCBNTlQ6ICfigq4nLCBNT1A6ICdNT1AkJywgTVJPOiAnVU0nLCBNUlU6ICdVTScsIE1VUjogJ+KCqCcsIE1WUjogJ1JmJywgTVdLOiAnTUsnLCBNWE46ICckJywgTVhWOiAnTVhWJywgTVlSOiAnUk0nLCBNWk46ICdNVCcsIE5BRDogJyQnLCBOR046ICfigqYnLCBOSU86ICdDJCcsIE5PSzogJ2tyJywgTlBSOiAn4oKoJywgTlpEOiAnJCcsIE9NUjogJ++3vCcsIFBBQjogJ0IvLicsIFBFTjogJ1MvLicsIFBHSzogJ0snLCBQSFA6ICfigrEnLCBQS1I6ICfigqgnLCBQTE46ICd6xYInLCBQWUc6ICdHcycsIFFBUjogJ++3vCcsIFJNQjogJ++/pScsIFJPTjogJ2xlaScsIFJTRDogJ9CU0LjQvS4nLCBSVUI6ICfigr0nLCBSV0Y6ICdS4oKjJywgU0FSOiAn77e8JywgU0JEOiAnJCcsIFNDUjogJ+KCqCcsIFNERzogJ9isLtizLicsIFNFSzogJ2tyJywgU0dEOiAnUyQnLCBTSFA6ICfCoycsIFNMTDogJ0xlJywgU09TOiAnUycsIFNSRDogJyQnLCBTU1A6ICfCoycsIFNURDogJ0RiJywgU1ROOiAnRGInLCBTVkM6ICckJywgU1lQOiAnwqMnLCBTWkw6ICdFJywgVEhCOiAn4Li/JywgVEpTOiAnU00nLCBUTVQ6ICdUJywgVE5EOiAn2K8u2KonLCBUT1A6ICdUJCcsIFRSTDogJ+KCpCcsIFRSWTogJ+KCuicsIFRURDogJ1RUJCcsIFRWRDogJyQnLCBUV0Q6ICdOVCQnLCBUWlM6ICdUU2gnLCBVQUg6ICfigrQnLCBVR1g6ICdVU2gnLCBVU0Q6ICckJywgVVlJOiAnVVlJJywgVVlVOiAnJFUnLCBVWVc6ICdVWVcnLCBVWlM6ICfQu9CyJywgVkVGOiAnQnMnLCBWRVM6ICdCcy5TJywgVk5EOiAn4oKrJywgVlVWOiAnVlQnLCBXU1Q6ICdXUyQnLCBYQUY6ICdGQ0ZBJywgWEJUOiAnyYMnLCBYQ0Q6ICckJywgWE9GOiAnQ0ZBJywgWFBGOiAn4oKjJywgWFNVOiAnU3VjcmUnLCBYVUE6ICdYVUEnLCBZRVI6ICfvt7wnLCBaQVI6ICdSJywgWk1XOiAnWksnLCBaV0Q6ICdaJCcsIFpXTDogJyQnIH07XG4gICAgICAgICAgICAgICAgdmFyIGludmVudG9yeSA9IGlmVXNlcmxhbmdJc0hlKCkgPyBcIteZ15fXmdeT15XXqiDXkdee15zXkNeZXCIgOiBcInJlbWFpbmluZyBpdGVtc1wiXG4gICAgICAgICAgICAgICAgcHJvZFRvRGlzcGxheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5JZCtcIl0gLmZyLXNob3BpZnktcHJvZHVjdHMgLmZyLXNob3BpZnktaXRlbTpudGgtY2hpbGQoXCIrKGNudCsxKStcIilcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW5jeV9zeW1ib2wgPSBpdGVtLmN1cnJlbmN5X3N5bWJvbCA/IGl0ZW0uY3VycmVuY3lfc3ltYm9sIDogXCJVU0RcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbmN5U3ltYm9sID0gY3VyclN5bWJvbE9ialtjdXJyZW5jeV9zeW1ib2xdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggaXRlbS5pbWFnZSAmJiBpdGVtLmltYWdlLnNyYyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1pbWcgaW1nXCIpLmF0dHIoXCJzcmNcIiwgaXRlbS5pbWFnZS5zcmMpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1pbWcgaW1nXCIpLmF0dHIoXCJzcmNcIiwgIGNkbl9zZXJ2ZXIgKyBcIi9jc3MvaW1hZ2VzL3ZfMi9wcm9kdWN0LW5vLWltZy5wbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW0udGl0bGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggaXRlbS50aXRsZS5sZW5ndGggPiA1MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRpdGxlID0gaXRlbS50aXRsZS5zdWJzdHJpbmcoMCwgNTApICsgJy4uLic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tdGl0bGVcIikudGV4dChpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tdGl0bGVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW0uZGVzYyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1kZXNjXCIpLnRleHQoaXRlbS5kZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tZGVzY1wiKS50ZXh0KFwiXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtLmhhbmRsZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaG9waWZ5X3Byb2RfdXJsID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIFwiL3Byb2R1Y3RzL1wiICsgaXRlbS5oYW5kbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggaXRlbS52YXJpYW50X2lkICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcGlmeV9wcm9kX3VybCA9IHNob3BpZnlfcHJvZF91cmwgKyBcIj92YXJpYW50PVwiICsgaXRlbS52YXJpYW50X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlLmZpbmQoXCIuZnItc2hvcGlmeS1pdGVtLWJ0biBhXCIpLmF0dHIoXCJkYXRhLXVybFwiLCBzaG9waWZ5X3Byb2RfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtLnByaWNlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tcHJpY2UgLmJlZm9yZS1kaXNjXCIpLnRleHQoIGN1cnJlbmN5U3ltYm9sICsgaXRlbS5wcmljZSApO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1wcmljZSAuYmVmb3JlLWRpc2NcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5wcmljZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tcHJpY2UgLmFmdGVyLWRpc2NcIikudGV4dCggY3VycmVuY3lTeW1ib2wgKyBpdGVtLmNvbXBhcmVfYXRfcHJpY2UgKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZmluZChcIi5mci1zaG9waWZ5LWl0ZW0tcHJpY2UgLmFmdGVyLWRpc2NcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5pbnZlbnRvcnlfcXVhbnRpdHkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlLmZpbmQoXCIuZnItc2hvcGlmeS1pdGVtLWludmVudG9yeS1xdWFudGl0eVwiKS50ZXh0KCBpdGVtLmludmVudG9yeV9xdWFudGl0eSArIFwiIFwiICsgaW52ZW50b3J5ICk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlLmZpbmQoXCIuZnItc2hvcGlmeS1pdGVtLWludmVudG9yeS1xdWFudGl0eVwiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1idG4gYVwiKS5hdHRyKFwiZGF0YS1wcm9kdWN0LW5hbWVcIiwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1idG4gYVwiKS5hdHRyKFwiZGF0YS1wcm9kdWN0LWlkXCIsIGl0ZW0ucHJvZHVjdF9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1idG4gYVwiKS5hdHRyKFwiZGF0YS12YXJpYW50LWlkXCIsIGl0ZW0udmFyaWFudF9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZS5maW5kKFwiLmZyLXNob3BpZnktaXRlbS1idG4gYVwiKS5hdHRyKFwiZGF0YS1idXR0b25zLWFjdGlvblwiLCBzaG9waWZ5UHJvZHVjdHNKU09OLmJ1dHRvbnNfYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNudCA9IGNudCsxO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH0pOyBcblxuICAgICAgICAgICAgICAgIHZhciBwcm9kQ291bnQgPSAzO1xuICAgICAgICAgICAgICAgIGlmKHNob3BpZnlQcm9kdWN0c0pTT04uY291bnQgPCAzKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvZENvdW50ID0gc2hvcGlmeVByb2R1Y3RzSlNPTi5jb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoc2hvcGlmeVByb2R1Y3RzSlNPTi5jYXRlZ29yeSA9PSBcIm1hbnVhbFwiICYmIHByb2RUb0Rpc3BsYXkubGVuZ3RoIDw9IDMpe1xuICAgICAgICAgICAgICAgICAgICBwcm9kQ291bnQgPSBwcm9kVG9EaXNwbGF5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihwcm9kVG9EaXNwbGF5Lmxlbmd0aCA8IHNob3BpZnlQcm9kdWN0c0pTT04uY291bnQpe1xuICAgICAgICAgICAgICAgICAgICBwcm9kQ291bnQgPSBwcm9kVG9EaXNwbGF5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwbHlXaWR0aFRvU2hvcGlmeVByb2R1Y3RzKFwiaG9yaXpvbnRhbFwiLHByb2RDb3VudCk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBseVdpZHRoVG9TaG9waWZ5UHJvZHVjdHMobGF5b3V0LGxlbil7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbklkK1wiXSAgLmZyb2FsYS1zaG9waWZ5LXdyYXBwZXJcIikuYXR0cihcImRhdGEtc2l6ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IHNpemUgPyBzaXplLnNwbGl0KFwiLVwiKVsxXSA6IFwiM1wiOyAgXG4gICAgICAgICAgICAgICAgICAgIGlmKGxlbiA9PSAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5JZCtcIl0gLmZyLXNob3BpZnktcHJvZHVjdHMgLmZyLXNob3BpZnktaXRlbTpub3QoOmZpcnN0LWNoaWxkKVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYobGVuID09IDIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbklkK1wiXSAuZnItc2hvcGlmeS1wcm9kdWN0cyAuZnItc2hvcGlmeS1pdGVtOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bnRoLWNoaWxkKDIpKVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5JZCtcIl0gIC5mcm9hbGEtc2hvcGlmeS13cmFwcGVyXCIpLmNzcyggXCJ3aWR0aFwiLCBzaG9waWZ5TGF5b3V0V2lkdGhbbGF5b3V0XVtsZW5dW3NpemUtMV0gKyBcInB4XCIgKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2FsaWduIGl0IGNlbnRlclxuICAgICAgICAgICAgICAgICAgICBpZihwcm9kVG9EaXNwbGF5Lmxlbmd0aCA8IHNob3BpZnlQcm9kdWN0c0pTT04uY291bnQgJiYgc2hvcGlmeVByb2R1Y3RzSlNPTi5jYXRlZ29yeSAhPSBcIm1hbnVhbFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX2xlZnQgPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLndpZHRoKCkgLSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuZnJvYWxhLXNob3BpZnktd3JhcHBlcicpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuZnJvYWxhLXNob3BpZnktd3JhcHBlcicpLmNzcyh7J2xlZnQnOih0aGlzX2xlZnQvMikrJ3B4J30pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sNTAwKTtcblxuICAgICAgICB9XG4gICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluRm9ybUNsaWNrU3VibWl0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBJZiBwb3B0aW4gaGF2ZSBhIHJlZGlyZWN0IHRvIGJsYW5rIHBhZ2UuLi4gb3BlbiBwYWdlIGluIG5ldyB0YWJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZkxpbmtDb252ZXJzaW9uKHBvcHRpbil7XG4gICAgICAgIHNob3dMb2coJ2lmTGlua0NvbnZlcnNpb24nKTtcbiAgICAgICAgaWYgKGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuZmluZCgnI3JlZGlyZWN0QmxhbmsnKS5sZW5ndGg+MCl7XG4gICAgICAgICAgICBzaG93TG9nKCdpZkxpbmtDb252ZXJzaW9uMScpO1xuXG4gICAgICAgICAgICAvL2pRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuZmluZCgnI3JlZGlyZWN0QmxhbmsnKVswXS5jbGljaygpO1xuICAgICAgICAgICAgLy9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X2ZsYWc9dHJ1ZTtcbiAgICAgICAgICAgIHBvcHRpblJlZGlyZWN0VG9VcmwocG9wdGluLCdjbGljaycsJyNyZWRpcmVjdEJsYW5rJyk7XG5cbiAgICAgICAgfWVsc2UgaWYoalEyMjQoJ1tkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5maW5kKCcucmVkaXJlY3QtdXJsLWJsYW5rJykubGVuZ3RoPjApe1xuICAgICAgICAgICAgc2hvd0xvZygnaWZMaW5rQ29udmVyc2lvbjInKTtcblxuICAgICAgICAgICAgLy9qUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoJy5yZWRpcmVjdC11cmwtYmxhbmsnKVswXS5jbGljaygpO1xuICAgICAgICAgICAgLy9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X2ZsYWc9dHJ1ZTtcbiAgICAgICAgICAgIHBvcHRpblJlZGlyZWN0VG9VcmwocG9wdGluLCdjbGljaycsJy5yZWRpcmVjdC11cmwtYmxhbmsnKTtcbiAgICAgICAgfWVsc2UgaWYocG9wdGluLmdhbWlmaWVkX3ByaXplICYmIHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90byA9PSB0cnVlICYmIHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90b19vcHRpb25zLnJlZGlyZWN0X3RvX3VybCAhPSB1bmRlZmluZWQpe1xuXHRcdFx0Ly8gV2hlZWwgc3VibWlzc2lvbiA6IFBvc3QtcGxheSBpcyB2aXNpYmxlLCBSZWRpcmVjdGlvbiBvbiBwcml6ZSwgTm8gcmVkaXJlY3Rpb24gZGVsYXkgc2V0XG4gICAgICAgICAgICBzaG93TG9nKCdpZkxpbmtDb252ZXJzaW9uMycpO1xuICAgICAgICAgICAgLy9qUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoJyNyZWRpcmVjdEJsYW5rJylbMF0uY2xpY2soKTtcbiAgICAgICAgICAgIC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnPXRydWU7XG5cdFx0XHRwb3B0aW5SZWRpcmVjdFRvVXJsKHBvcHRpbiwnZGlyZWN0JywnZ2FtaWZpZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzdWJtaXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0IHwgY2xpY2s6Qm9vbGVhbiAoaWYgcG9wdGluIGNsaWNrIHRyaWdnZXIpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJldHVybiBib29sZWFuIGlmIGZvcm0gaXMgZW1wdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZlN1Ym1pdEVtcHR5Rm9ybShwb3B0aW4sIGNsaWNrKXtcbiAgICAgICAgLy8gc2hvd0xvZygnaWZTdWJtaXRFbXB0eUZvcm06ICcrcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgIHZhciBlbXB0eV9mbGFnID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNfdmFsdWU9MDtcbiAgICAgICAgdmFyIGZpZWxkc1RvQ2hlY2sgPSBqUTIyNCggXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkZvcm1TdWJtaXRcIitwb3B0aW4ucG9wdGluX2lkK1wiIC5wb3B0aW4tZGVzaWduLWZpZWxkcy1mb3JtOm5vdCgjcG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRDaGVja2JveClcIik7XG4gICAgICAgIGlmIChmaWVsZHNUb0NoZWNrLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgZmllbGRzVG9DaGVjay5lYWNoKGZ1bmN0aW9uKCRpbmRleCl7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZihoYXNfdmFsdWU9PTApe1xuICAgICAgICAgICAgICAgICAgICBpZighalEyMjQoXCIjXCIrdGhpcy5pZCkuaXMoXCI6Y2hlY2tlZFwiKSAmJiAoalEyMjQoXCIjXCIrdGhpcy5pZCkuYXR0cihcInR5cGVcIik9PVwiY2hlY2tib3hcIiB8fCBqUTIyNChcIiNcIit0aGlzLmlkKS5hdHRyKFwidHlwZVwiKT09XCJyYWRpb1wiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eV9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZigoalEyMjQoXCIjXCIrdGhpcy5pZCkuYXR0cihcInR5cGVcIikhPVwiY2hlY2tib3hcIiB8fCBqUTIyNChcIiNcIit0aGlzLmlkKS5hdHRyKFwidHlwZVwiKSE9XCJyYWRpb1wiKSAmJiB2YWx1ZSAhPT0gJycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlfZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNfdmFsdWU9MTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGVtcHR5X2ZsYWcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnJvd3NlciB2YWxpZGF0aW9uIHdvcmtzIHdpdGhvdXQgdGhpc1xuICAgICAgICAvLyBjaGVja2JveFdyYXBwZXIgPSBqUTIyNCggXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3hcIik7XG4gICAgICAgIC8vIGlmIChjaGVja2JveFdyYXBwZXIubGVuZ3RoID4gMCl7XG4gICAgICAgIC8vICBjaGVja2JveElucHV0ID0gY2hlY2tib3hXcmFwcGVyLmZpbmQoJ2lucHV0Jyk7XG4gICAgICAgIC8vICBpZiggKCBjaGVja2JveElucHV0LnByb3AoJ3JlcXVpcmVkJykgJiYgY2hlY2tib3hJbnB1dC5wcm9wKCdjaGVja2VkJykgKSApIHtcbiAgICAgICAgLy8gICAgICBlbXB0eV9mbGFnID0gdHJ1ZTtcbiAgICAgICAgLy8gIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHJldHVybiBlbXB0eV9mbGFnO1xuICAgICAgICAvL3JldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzdWJtaXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IHJlbW92ZSAnZW1wdHktZmllbGQnIGNsYXNzIGlmIHBvcHRpbiBmb3JtIGlucHV0IGtleSBkb3duXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25JbnB1dEtleURvd24ocG9wdGluKXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmlucHV0cy1jb250YWluZXIgaW5wdXRcIikub2ZmKFwia2V5dXAga2V5ZG93blwiKTtcbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBzaG93TG9nKGVycilcbiAgICAgICAgfVxuICAgICAgICBqUTIyNCggXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmlucHV0cy1jb250YWluZXIgaW5wdXRcIikub24oJ2tleXVwJyxmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmIChqUTIyNCh0aGlzKS5oYXNDbGFzcygnZW1wdHktZmllbGQnKSl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykucmVtb3ZlQ2xhc3MoJ2VtcHR5LWZpZWxkJyk7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0Qm9yZGVyQXR0ciA9IGpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLWJvcmRlclwiKTtcbiAgICAgICAgICAgICAgICBpZihpbnB1dEJvcmRlckF0dHIpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3MoJ2JvcmRlcicsIGlucHV0Qm9yZGVyQXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluRm9ybUNsaWNrU3VibWl0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdCB8IGNsaWNrOkJvb2xlYW4gKGlmIHBvcHRpbiBjbGljayB0cmlnZ2VyKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiByZW1vdmUgJ2VtcHR5LWZpZWxkJyBjbGFzcyBpZiBwb3B0aW4gZm9ybSBpbnB1dCBrZXkgZG93blxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1Ym1pdFBvcHRpbihwb3B0aW4sIGNsaWNrKXtcbiAgICAgICAgXG4gICAgICAgIHZhciAkalEyMjRfZGl2ID0galEyMjQoJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdIFtpZD1cInBvcHRpbkZvcm1TdWJtaXQnK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSAuaW5wdXRzLWNvbnRhaW5lcicpO1xuXG4gICAgICAgIC8vIGlmKCFqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluRm9ybVN1Ym1pdFwiK3BvcHRpbi5wb3B0aW5faWQrXCJcIikuZ2V0KDApLnJlcG9ydFZhbGlkaXR5KCkpe1xuICAgICAgICAvLyAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gSWYgZm9ybSBpbnB1dHMgZW1wdHlcbiAgICAgICAgLy8gLT4gc2hha2UgYW5pbWF0aW9uXG4gICAgICAgIC8vIC0+IEFkZCAnLmVtcHR5LWZpZWxkJyBjbGFzc1xuICAgICAgICBpZiAoIWlmU3VibWl0RW1wdHlGb3JtKHBvcHRpbiwgY2xpY2spKXtcbiAgICAgICAgICAgIGlmICghaWZNb2JpbGVQb3B0aW4pe1xuICAgICAgICAgICAgICAgICRqUTIyNF9kaXYuYWRkQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fc2hha2VYJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkalEyMjRfZGl2LnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICRqUTIyNF9kaXYucmVtb3ZlQ2xhc3MgKGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNsYXNzTmFtZS5tYXRjaCAoL1xcYmFuaW1hdGVfXFxTKy9nKSB8fCBbXSkuam9pbignICcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LDEwMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgJy5lbXB0eS1maWVsZCcgY2xhc3MgdG8gZW1haWwgZmlsZWQgXG4gICAgICAgICAgICAvLyBFbHNlIEFkZCAnLmVtcHR5LWZpZWxkJyBjbGFzcyB0byBmaXJzdCBmaWxlZCBcbiAgICAgICAgICAgIHZhciBwb3B0aW5TdWJtaXR0ZWQgPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW4ucG9wdGluX2lkKydcIl0gW2lkPVwicG9wdGluRm9ybVN1Ym1pdCcrcG9wdGluLnBvcHRpbl9pZCsnXCJdJylcbiAgICAgICAgICAgIHZhciBwb3B0aW5FbWFpbEZpZWxkID0gcG9wdGluU3VibWl0dGVkLmZpbmQoJ2lucHV0I3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWwnKTtcbiAgICAgICAgICAgIGlmIChwb3B0aW5FbWFpbEZpZWxkLmxlbmd0aD09MSl7XG4gICAgICAgICAgICAgICAgcG9wdGluRW1haWxGaWVsZC5hdHRyKFwiZGF0YS1ib3JkZXJcIiwgcG9wdGluRW1haWxGaWVsZC5jc3MoXCJib3JkZXJcIikpO1xuICAgICAgICAgICAgICAgIHBvcHRpbkVtYWlsRmllbGQuY3NzKCdib3JkZXInLCdub25lJykuYWRkQ2xhc3MoJ2VtcHR5LWZpZWxkJyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdGluRmlyc3RGaWVsZCA9IHBvcHRpblN1Ym1pdHRlZC5maW5kKCcuaW5wdXRzLWNvbnRhaW5lciBpbnB1dCcpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgcG9wdGluRmlyc3RGaWVsZC5hdHRyKFwiZGF0YS1ib3JkZXJcIiwgcG9wdGluRmlyc3RGaWVsZC5jc3MoXCJib3JkZXJcIikpO1xuICAgICAgICAgICAgICAgIHBvcHRpbkZpcnN0RmllbGQuY3NzKCdib3JkZXInLCdub25lJykuYWRkQ2xhc3MoJ2VtcHR5LWZpZWxkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBpbnB1dCBrZXlkb3duIGV2ZW50XG4gICAgICAgICAgICBvbklucHV0S2V5RG93bihwb3B0aW4pO1xuICAgICAgICAgICAgLy8gc3RvcCBmdW5jdGlvblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd0xvZygnc3VibWl0UG9wdGluOiAnK3BvcHRpbi5wb3B0aW5faWQpO1xuXG4gICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY29udmVydCA9IHRydWU7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgLy8gSW5pdGlhdGUgcG9wdGluIGNvbnZlcnRpb24gYWpheCBjYWxsXG4gICAgICAgICAgICBwb3B0aW5Db252ZXJzaW9uKHBvcHRpbixjbGljayk7XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgLy8gbW9uaXRvciBlcnJvclxuICAgICAgICAgICAgbW9uaXRvckVycm9yKCdzdWJtaXRQb3B0aW4oKS0+cG9wdGluQ29udmVyc2lvbigpJyxlcnIsJycsJycscG9wdGluKTtcbiAgICAgICAgICAgIC8vIHJlZGlyZWN0IHVzZXIgdG8gcG9wdGluIHJlZGlyZWN0IHBhZ2VcbiAgICAgICAgICAgIHJlZGlyZWN0QWZ0ZXJDb252ZXJzaW9uKHBvcHRpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSAnc29jaWFsX2Zvcm1hdF8yJyAmJiBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ICE9IFwic29jaWFsX2Zvcm1hdF82XCIgJiYgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSBcInNzaWRlX2Zvcm1hdF8xOVwiKXtcbiAgICAgICAgICAgIC8vIFNldCBhY3Rpb25zIGFmdGVyIHBvcHRpbiBzdWJtaXQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgICAgICBhZnRlclBvcHRpblN1Ym1pdChwb3B0aW4sY2xpY2spO1xuICAgICAgICB9XG5cblx0XHQvLyBXaGVlbCBzdWJtaXNzaW9uIDogUG9zdC1wbGF5IGlzIHZpc2libGUsIFJlZGlyZWN0aW9uIG9uIHByaXplLCBObyByZWRpcmVjdGlvbiBkZWxheSBzZXRcblx0XHRpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiKSB7XG5cdFx0XHRpZihwb3B0aW4uZ2FtaWZpZWRfcHJpemUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvID09IHRydWUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfdG9fdXJsICE9IHVuZGVmaW5lZCl7XG5cdFx0XHRcdHNob3dMb2coJ2lmTGlua0NvbnZlcnNpb24zJyk7XG5cdFx0XHRcdC8valEyMjQoJ1tkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5maW5kKCcjcmVkaXJlY3RCbGFuaycpWzBdLmNsaWNrKCk7XG5cdFx0XHRcdC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnPXRydWU7XG5cdFx0XHRcdGlmKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIiAmJiBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuKXtcblx0XHRcdFx0XHR2YXIgcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF9jbG9zZV9kZWxheTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRwb3B0aW5SZWRpcmVjdFRvVXJsKHBvcHRpbiwnZGlyZWN0JywnZ2FtaWZpZWQnKTtcblx0XHRcdFx0XHR9LCByZWRpcmVjdF9jbG9zZV9kZWxheSA/IChwYXJzZUludChyZWRpcmVjdF9jbG9zZV9kZWxheSkgKyAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiA/IDggOiAwKSkgKiAxMDAwIDogKHBvcHRpbi53aGVlbF9oYXNfY291cG9uID8gZGVmYXVsdF9jbG9zZV9kZWxheSAqIDMgOiBkZWZhdWx0X2Nsb3NlX2RlbGF5KSAqIDEwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBvcHRpblJlZGlyZWN0VG9VcmwocG9wdGluLCdkaXJlY3QnLCdnYW1pZmllZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzdWJtaXRQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0IHwgY2xpY2s6Qm9vbGVhbiAoaWYgcG9wdGluIGNsaWNrIHRyaWdnZXIpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IEFqYXggY2FsbCB3aXRoIGNvbnZlcnNpb24gZGF0YVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBvcHRpbkNvbnZlcnNpb24ocG9wdGluLCBjbGljaywgY291bnRfY29udmVyc2lvbiA9ICcnLCBlbCA9IG51bGwpe1xuXG4gICAgICAgIGpRMjI0KFwiLnBvcHRpbi1pbnB1dC1hdXRvZmlsbFwiKS5yZW1vdmUoKTtcbiAgICAgICAgalEyMjQoXCIucG9wdGluLWlucHV0LXN1Z2dlc3Rpb25cIikucmVtb3ZlKCk7XG5cblx0XHRzaG93TG9nKCdwb3B0aW5Db252ZXJzaW9uOiAnK3BvcHRpbi5wb3B0aW5faWQpO1xuXG5cdFx0Ly8gTmV3ZXIgcG9wdGluIHN1Ym1pdCBldmVudFxuXHRcdGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXS5wb3B0aW4tcG9wdXAnKS5hZGRDbGFzcygncG9wdGluLXN1Ym1pdHRlZCcpO1xuXHRcdHZhciBwb3B0aW5FdmVudEJ1dHRvbiA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXS5wb3B0aW4tcG9wdXAgZGl2IycrKGNvdW50X2NvbnZlcnNpb24gIT0gJycgPyBjb3VudF9jb252ZXJzaW9uIDogJ3BvcHRpbkZvcm1TdWJtaXRUZXh0JykpO1xuXHRcdHZhciBwb3B0aW5FdmVudEJ1dHRvblRleHQgPSBcIlwiO1xuXHRcdGlmKHBvcHRpbkV2ZW50QnV0dG9uLmxlbmd0aCAmJiBjb3VudF9jb252ZXJzaW9uICE9ICdjb3Vwb24nKXtcblx0XHRcdHBvcHRpbkV2ZW50QnV0dG9uID0gcG9wdGluRXZlbnRCdXR0b24uZmlyc3QoKTtcblx0XHRcdHBvcHRpbkV2ZW50QnV0dG9uVGV4dCA9IHBvcHRpbkV2ZW50QnV0dG9uLnRleHQoKS50cmltKCk7XG5cdFx0fSBlbHNlIGlmKGNvdW50X2NvbnZlcnNpb24gPT0gXCJzaG9waWZ5X3Byb2R1Y3RzXCIpe1xuXHRcdFx0cG9wdGluRXZlbnRCdXR0b25UZXh0ID0gcG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdW1wiYnV0dG9uX3RleHRcIl07XG5cdFx0fVxuXHRcdFxuXHRcdHZhciBwb3B0aW5FdmVudEV4dHJhcyA9IHtcImV2ZW50X25hbWVcIiA6IFwicG9wdGluU3VibWl0XCIsIFwiYnV0dG9uX3RleHRcIjogcG9wdGluRXZlbnRCdXR0b25UZXh0fTtcblx0XHRpZihjb3VudF9jb252ZXJzaW9uID09IFwic2hvcGlmeV9wcm9kdWN0c1wiKXtcblx0XHRcdHBvcHRpbkV2ZW50RXh0cmFzW1wic2hvcGlmeVwiXSA9IHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXTtcblx0XHR9XG5cbiAgICAgICAgaWYoY291bnRfY29udmVyc2lvbiAhPSAnY291cG9uJyl7XG4gICAgICAgICAgICBjb25zdCBvblBvcHRpblN1Ym1pdEV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwicG9wdGluU3VibWl0XCIsIHtidWJibGVzOiB0cnVlLCBkZXRhaWw6IHBvcHRpbkV2ZW50RGV0YWlscyhwb3B0aW4sIHBvcHRpbkV2ZW50RXh0cmFzKX0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChvblBvcHRpblN1Ym1pdEV2ZW50KTtcbiAgICBcbiAgICAgICAgICAgIC8vIE9sZGVyIHBvcHRpbiBzdWJtaXQgZXZlbnRcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25wb3B0aW5TdWJtaXQgPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICAgICAgICAgICAgICBvbnBvcHRpblN1Ym1pdChwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2V0IGZyZWVGaWVsZCB2YWx1ZSB3aXRoIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIGpRMjI0KCBcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluRm9ybVN1Ym1pdFwiK3BvcHRpbi5wb3B0aW5faWQrXCIgLnBvcHRpbi1kZXNpZ24tZmllbGRzLWZvcm1cIikuZWFjaChmdW5jdGlvbigkaW5kZXgpe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkLmluZGV4T2YoJ0ZyZWVGaWVsZCcpICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcygnZGlzcGxheScsJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0galEyMjQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlb2xkZXIgPSBqUTIyNCh0aGlzKS5hdHRyKCdwbGFjZWhvbGRlcicpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS52YWwoXCJhOlwiK3BsYWNlb2xkZXIrXCI9Jj1cIitcImI6XCIrdmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cdFx0XG5cblxuICAgICAgICAvLyBHZXQgQXV0b1BpbG90IHRyaWdnZXIgXG4gICAgICAgIHRyaWdnZXIgPSBwb3B0aW4uYXV0b19waWxvdF90cmlnZ2VyID09IHVuZGVmaW5lZCA/ICdmYWxzZScgOiBwb3B0aW4uYXV0b19waWxvdF90cmlnZ2VyO1xuICAgICAgICAvLyBHZXQgc3VibWl0ZWQgZm9ybSBkYXRhXG4gICAgICAgIC8vIHBvcHRpbl9wYXJhbXMgPSBqUTIyNCggXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkZvcm1TdWJtaXRcIitwb3B0aW4ucG9wdGluX2lkICkuc2VyaWFsaXplKCk7XG5cbiAgICAgICAgY2hlY2tib3hfY2hlY2tlZCA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXSBmb3JtID4gI3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3ggaW5wdXQnKS5wcm9wKCdjaGVja2VkJyk7XG5cbiAgICAgICAgcG9wdGluX3BhcmFtcyA9IHtcbiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgICBwX3RhcmdldDogcG9wdGluLnBvcHRpbl90YXJnZXQsXG4gICAgICAgICAgICBjaGVja2JveF9jaGVja2VkOiBjaGVja2JveF9jaGVja2VkLFxuICAgICAgICAgICAgcmVmZXJyZXI6IGdldFJlZmVycmVyKCksXG4gICAgICAgICAgICBwcmV2aW91c191cmw6IGdldFByZXZpb3VzVXJsKCksXG4gICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgcG9wdGluX2lkOiBwb3B0aW4ucG9wdGluX2lkLFxuICAgICAgICAgICAgdGl0bGU6IGRvY3VtZW50LnRpdGxlLFxuICAgICAgICAgICAgY2xpZW50X2lkOiBnZXRDbGllbnRJZCgpLFxuICAgICAgICAgICAgdmlzaXRvcjogaWZNb2JpbGVQb3B0aW4gPyAnbW9iaWxlJyA6ICdkZXNrdG9wJyxcbiAgICAgICAgICAgIGZhY2Vib29rX21lc3Nhbmdlcl9kYXRhX3JlZjogZmFjZWJvb2tfbWVzc2FuZ2VyX2RhdGFfcmVmLFxuICAgICAgICAgICAgb3JpZ2luX2xhbmRpbmdfcGFnZTogZ2V0T3JpZ2luTGFuZGluZ1BhZ2UoKSxcbiAgICAgICAgICAgIHByZXZpb3VzX3Zpc2l0ZWRfcGFnZXM6IGdldFByZXZpb3VzVmlzaXRlZFBhZ2VzKCksXG4gICAgICAgICAgICBwcmV2aW91c192aXNpdGVkX3BhZ2VzX3dpdGhfY3VycmVudF9wYWdlOiBnZXRQcmV2aW91c1Zpc2l0ZWRQYWdlc1dpdGhDdXJyZW50UGFnZSgpLFxuICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX3RpbWVfc3RhbXA6IGdldFByZXZpb3VzVmlzaXRlZFBhZ2VzV2l0aFRpbWVTdGFtcCgpLFxuICAgICAgICAgICAgYWxsX3Zpc2l0ZWRfcGFnZXM6IGdldEFsbFZpc2l0ZWRQYWdlcygpLFxuICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb246IHN0b3JlX2ludGVncmF0aW9uLFxuICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQ6IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkLFxuICAgICAgICAgICAgYnJvd3Nlcl9sYW5ndWFnZTogd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSxcbiAgICAgICAgICAgIG9wZXJhdGluZ19zeXN0ZW06IHdpbmRvdy5uYXZpZ2F0b3I/LnVzZXJBZ2VudERhdGE/LnBsYXRmb3JtIHx8IHdpbmRvdy5uYXZpZ2F0b3I/LnBsYXRmb3JtIHx8ICdVbmtub3duJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwb3B0aW5fZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHZhciBmcmVlT3B0aW9ucyA9IFtcInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkTmFtZVwiLCBcInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWxcIiwgXCJwb3B0aW5EZXNpZ25JbnB1dFRleHRGaWVsZFBob25lXCIsIFwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRNZXNzYWdlXCIsIFwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRDaGVja2JveFwiXTtcblxuICAgICAgICB2YXIgbmV3X2V4dHJhX2ZpZWxkcyA9IHt9O1xuICAgICAgICB2YXIgYWxsX2V4dHJhX2ZpZWxkcyA9IHt9O1xuICAgICAgICB2YXIgaXNfYWN0aXZlID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0uYWN0aXZlXCIpLmxlbmd0aCA/IFwiLmFjdGl2ZVwiIDogXCJcIjtcbiAgICAgICAgaWYoY291bnRfY29udmVyc2lvbiAhPSAnY291cG9uJyl7XG4gICAgICAgICAgICBqUTIyNCggXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIitpc19hY3RpdmUrXCIgI3BvcHRpbkZvcm1TdWJtaXRcIitwb3B0aW4ucG9wdGluX2lkK1wiIC5wb3B0aW4tZGVzaWduLWZpZWxkcy1mb3JtXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3R5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfaWQgPSB0aGlzLmlkO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX25hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3ZhbHVlID0galEyMjQodGhpcykuYXR0cignZGF0YS1hcnJheS12YWx1ZScpID8gSlNPTi5wYXJzZSh0aGlzX3ZhbHVlKSA6IHRoaXNfdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfcGxhY2Vob2xkZXIgPSAoalEyMjQodGhpcykuYXR0cignZGF0YS1wbGFjZWhvbGRlcicpIHx8IGpRMjI0KHRoaXMpLmF0dHIoXCJwbGFjZWhvbGRlclwiKSB8fCB0aGlzX25hbWUpO1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coXCJzdWJtaXNzaW9uXCIsIGpRMjI0KHRoaXMpLCBqUTIyNCh0aGlzKS5nZXQoMCkuY2hlY2tlZCwgdGhpc190eXBlLCB0aGlzX2lkLCB0aGlzX25hbWUsIHRoaXNfdmFsdWUsIHRoaXNfcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGpRMjI0LmluQXJyYXkodGhpc19uYW1lLCBmcmVlT3B0aW9ucykgPiAtMSB8fCAoIHRoaXNfbmFtZS5pbmRleE9mKCdGcmVlRmllbGQnKSA+IC0xICYmIHRoaXMuaWQuaW5kZXhPZigncG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRUZXh0JykgPT0gLTEgKSApe1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwb3B0aW5NdWx0aVNlbGVjdFZhbHVlcywgdGhpc192YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc011bHRpU2VsZWN0ID0gdGhpc190eXBlID09PSBcImNoZWNrYm94XCIgfHwgKHRoaXNfbmFtZSA9PSBcInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkTWVzc2FnZVwiICYmICh0aGlzX3R5cGUgPT09IFwic2VsZWN0LW11bHRpcGxlXCIgfHwgdGhpc190eXBlID09PSBcInNlbGVjdC1vbmVcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZihpc011bHRpU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcG9wdGluTXVsdGlTZWxlY3RWYWx1ZXNbdGhpc19uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbk11bHRpU2VsZWN0VmFsdWVzW3RoaXNfbmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpc190eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCB0aGlzX3R5cGUgPT09IFwic2VsZWN0LW11bHRpcGxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvblZhbHVlID0galEyMjQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFwb3B0aW5NdWx0aVNlbGVjdFZhbHVlc1t0aGlzX25hbWVdLmluY2x1ZGVzKG9wdGlvblZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluTXVsdGlTZWxlY3RWYWx1ZXNbdGhpc19uYW1lXS5wdXNoKG9wdGlvblZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXNfdHlwZSA9PT0gXCJjaGVja2JveFwiICYmIGpRMjI0KHRoaXMpLmdldCgwKS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXBvcHRpbk11bHRpU2VsZWN0VmFsdWVzW3RoaXNfbmFtZV0uaW5jbHVkZXModGhpc192YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluTXVsdGlTZWxlY3RWYWx1ZXNbdGhpc19uYW1lXS5wdXNoKHRoaXNfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfdmFsdWUgPSBwb3B0aW5NdWx0aVNlbGVjdFZhbHVlc1t0aGlzX25hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpc190eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmdldCgwKS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc192YWx1ZSA9IHRoaXNfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodGhpc19uYW1lID09IFwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRQaG9uZVwiICYmIHVuZGVmaW5lZCAhPT0galEyMjQodGhpcykuYXR0cihcImRhdGEtaW50LXBob25lXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfdmFsdWUgPSBqUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1pbnQtcGhvbmVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIXNraXApe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluX3BhcmFtc1t0aGlzX25hbWVdID0gdGhpc192YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9maWVsZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6dGhpc190eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOnRoaXNfbmFtZS5zcGxpdCgncG9wdGluRGVzaWduSW5wdXQnKVsxXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjp0aGlzX3BsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjp0aGlzX3ZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidmFsdWVcIiwgdGhpc192YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXNfdHlwZSA9PSBcInJhZGlvXCIgfHwgdGhpc190eXBlID09IFwiY2hlY2tib3hcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wbGFjZWhvbGRlciA9IGpRMjI0KHRoaXMpLnBhcmVudHNVbnRpbCgnLmNoaWxkLWZpZWxkLXdyYXBwZXInKS5wYXJlbnQoKS5zaWJsaW5ncygnbGFiZWwuY2hpbGQtZmllbGQtcXVlc3Rpb24nKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3ZhbHVlID0galEyMjQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQodGhpcykuaXMoJ3NlbGVjdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3BsYWNlaG9sZGVyID0galEyMjQodGhpcykuYXR0cignZGF0YS1wbGFjZWhvbGRlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0galEyMjQodGhpcykuZmluZCgnOnNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZWxlY3RlZE9wdGlvbi5sZW5ndGggJiYgc2VsZWN0ZWRPcHRpb24uYXR0cihcImlkXCIpICYmIHNlbGVjdGVkT3B0aW9uLmF0dHIoXCJpZFwiKS5zdWJzdHIoLTE0KSAhPSBcIi1jaGlsZC1kZWZhdWx0XCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfdmFsdWUgPSBqUTIyNCh0aGlzKS5maW5kKCc6c2VsZWN0ZWQnKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1tdWx0aXBsZVwiKSA9PSBcInRydWVcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuYXR0cihcIm11bHRpcGxlXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRJbnB1dFBhcmVudCA9IGpRMjI0KHRoaXMpLnBhcmVudHMoXCIuZmllbGQtbXVsdGktc2VsZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZElucHV0ID0gc2VsZWN0ZWRJbnB1dFBhcmVudC5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbnB1dCA9IHNlbGVjdGVkSW5wdXQuaW5jbHVkZXMoXCJwb3B0aW5EZXNpZ25JbnB1dEN1c3RvbUZpZWxkLVwiKSA/IHNlbGVjdGVkSW5wdXQuc3BsaXQoXCJwb3B0aW5EZXNpZ25JbnB1dEN1c3RvbUZpZWxkLVwiKVsxXSA6IHNlbGVjdGVkSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc192YWx1ZSA9IHBvcHRpbk11bHRpU2VsZWN0VmFsdWVzW3NlbGVjdGVkSW5wdXRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coXCJ0aGlzX3ZhbHVlXCIsIHRoaXNfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSAhdGhpc192YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInRoaXNfdmFsdWVcIiwgdGhpc192YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInRoaXNfdmFsdWVcIiwgdGhpc192YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNraXAgPT0gZmFsc2UgJiYgalEyMjQodGhpcykucGFyZW50cyhcIi5mb3JtLWlucHV0LWNsYXNzXCIpLmhhc0NsYXNzKCdwcm9wLWJvb2xlYW4nKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3ZhbHVlID0gdGhpc192YWx1ZSA9PSBcIjFcIiA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKFwidGhpc192YWx1ZVwiLCB0aGlzX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInNraXBcIiwgc2tpcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLWlucHV0LXR5cGVcIikgPT0gXCJkYXRlXCIgJiYgdGhpc192YWx1ZSA9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKCFza2lwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXNfdHlwZSA9PSBcImNoZWNrYm94XCIgfHwgdGhpc190eXBlID09IFwicmFkaW9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfaWQgPSB0aGlzX25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggbmV3X2V4dHJhX2ZpZWxkc1t0aGlzX25hbWVdID09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3ZhbHVlID0gKHRoaXNfbmFtZT09J3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3gnKSA/IGNoZWNrYm94X2NoZWNrZWQgOiB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHNbdGhpc19uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOnRoaXNfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOnRoaXNfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6dGhpc19uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6dGhpc19wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOnRoaXNfdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19uYW1lLnN1YnN0cmluZygwLDQwKSA9PSBcInBvcHRpbkRlc2lnbklucHV0Q3VzdG9tRmllbGQtQ1VTVE9NX1VUTV9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAhalEyMjQodGhpcykuaGFzQ2xhc3MoXCJoYXMtdXBkYXRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfdmFsdWUgPSBnZXRRdWVyeVN0cmluZyh0aGlzX25hbWUuc3Vic3RyaW5nKDM2KSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXNfdmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2V4dHJhX2ZpZWxkc1t0aGlzX25hbWVdW1widmFsdWVcIl0gPSB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzX3R5cGUgPT0gXCJjaGVja2JveFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0udmFsdWUgPSBbbmV3X2V4dHJhX2ZpZWxkc1t0aGlzX25hbWVdLnZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0udmFsdWUucHVzaCh0aGlzX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0ucGxhY2Vob2xkZXIgPSBuZXdfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0ucGxhY2Vob2xkZXIgKyAnLCAnICsgdGhpc19wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpc19uYW1lIGluIGFsbF9leHRyYV9maWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxfZXh0cmFfZmllbGRzW3RoaXNfbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOnRoaXNfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6dGhpc190eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOnRoaXNfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6dGhpc19wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6XCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX2ZpZWxkcy5wdXNoKG5ld19leHRyYV9maWVsZHNbdGhpc19uYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBzaG93TG9nKFwicG9wdGluX2ZpZWxkc1wiLCBKU09OLnN0cmluZ2lmeShwb3B0aW5fZmllbGRzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBtZXJnZSB0YWdzIGJhc2VkIG9uIGZvcm0gZGF0YVxuICAgICAgICAgICAgalEyMjQocG9wdGluX2ZpZWxkcykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZV9pbnB1dCA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIHRhZ19pbnB1dCA9IHRoaXMubmFtZS5yZXBsYWNlKC90ZXh0ZmllbGQvZywgJycpO1xuICAgICAgICAgICAgICAgIHRhZ19pbnB1dCA9ICd7e18nK3RhZ19pbnB1dCsnfX0nO1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2codGhpcywgdGFnX2lucHV0LCB2YWx1ZV9pbnB1dCk7XG4gICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuZmluZCgnLmZyb2FsYS1lZGl0b3ItdGV4dCwgLmZyb2FsYS1lZGl0b3ItdGlja2VyJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHRSZWdFeHAgPSBuZXcgUmVnRXhwKHRhZ19pbnB1dCwnZ20nKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZCgnLmZyLW1hcmtlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5odG1sKGpRMjI0KHRoaXMpLmh0bWwoKS5yZXBsYWNlKGR0UmVnRXhwLCB2YWx1ZV9pbnB1dCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJwb3B0aW5fZmllbGRzXCIsIEpTT04uc3RyaW5naWZ5KHBvcHRpbl9maWVsZHMpKTtcbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJwb3B0aW5NdWx0aVNlbGVjdFZhbHVlc1wiLCBKU09OLnN0cmluZ2lmeShwb3B0aW5NdWx0aVNlbGVjdFZhbHVlcykpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZyhcImFsbF9leHRyYV9maWVsZHNcIiwgSlNPTi5zdHJpbmdpZnkoYWxsX2V4dHJhX2ZpZWxkcykpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZyhcIm5ld19leHRyYV9maWVsZHNcIiwgSlNPTi5zdHJpbmdpZnkobmV3X2V4dHJhX2ZpZWxkcykpO1xuXG4gICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzID0gbmV3X2V4dHJhX2ZpZWxkcyB8fCB7fTtcbiAgICAgICAgICAgIGZvciAobGV0IGZpZWxkIGluIGFsbF9leHRyYV9maWVsZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShmaWVsZCBpbiBuZXdfZXh0cmFfZmllbGRzKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW2ZpZWxkXSA9IGFsbF9leHRyYV9maWVsZHNbZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJuZXdfZXh0cmFfZmllbGRzXCIsIEpTT04uc3RyaW5naWZ5KG5ld19leHRyYV9maWVsZHMpKTtcbiAgICBcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzID0gT2JqZWN0LnZhbHVlcyhuZXdfZXh0cmFfZmllbGRzKTtcbiAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgIHZhciBuZXdfZXh0cmFfZmllbGRzX3ZhbHVlcyA9IE9iamVjdC5rZXlzKG5ld19leHRyYV9maWVsZHMpLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfZXh0cmFfZmllbGRzW2VdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHMgPSBuZXdfZXh0cmFfZmllbGRzX3ZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNob3dMb2cobmV3X2V4dHJhX2ZpZWxkcyk7XG5cbiAgICAgICAgICAgIHZhciBiYXNlX2ZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICB0ZXh0IDogMCxcbiAgICAgICAgICAgICAgICBudW1iZXIgOiAwLFxuICAgICAgICAgICAgICAgIHRleHRhcmVhIDogMCxcbiAgICAgICAgICAgICAgICBkYXRlIDogMCxcbiAgICAgICAgICAgICAgICB1cmwgOiAwLFxuICAgICAgICAgICAgICAgIHJhZGlvIDogMCxcbiAgICAgICAgICAgICAgICBjaGVja2JveCA6IDAsXG4gICAgICAgICAgICAgICAgaGlkZGVuIDogMCxcbiAgICAgICAgICAgICAgICB0ZWwgOiAwLFxuICAgICAgICAgICAgICAgIHNlbGVjdCA6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNob3dMb2coJ0xvZ2dlciBMb2dnZXInLCBuZXdfZXh0cmFfZmllbGRzKTtcblxuICAgICAgICAgICAgLy8gVHJhY2sgcHJvY2Vzc2VkIHJhZGlvIGdyb3VwcyB0byBhdm9pZCBkdXBsaWNhdGVzXG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2VkUmFkaW9Hcm91cHMgPSB7fTtcblxuICAgICAgICAgICAgLy8gVHJhY2sgcHJvY2Vzc2VkIGNoZWNrYm94IGdyb3Vwc1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NlZENoZWNrYm94R3JvdXBzID0ge307XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBzcGxpdCBuYW1lXG4gICAgICAgICAgICB2YXIgc3BsaXRfbmFtZV9maWVsZCA9IHt9XG5cbiAgICAgICAgICAgIGpRMjI0KG5ld19leHRyYV9maWVsZHMpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3R5cGUgPSBuZXdfZXh0cmFfZmllbGRzW2ldLnR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfbmFtZSA9IG5ld19leHRyYV9maWVsZHNbaV0ubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc19pZCA9IG5ld19leHRyYV9maWVsZHNbaV0uaWQ7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNfdmFsdWUgPSBuZXdfZXh0cmFfZmllbGRzW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3BsYWNlaG9sZGVyID0gbmV3X2V4dHJhX2ZpZWxkc1tpXS5wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGBQcm9jZXNzaW5nIGZpZWxkICR7aX06YCwgeyB0eXBlOiB0aGlzX3R5cGUsIG5hbWU6IHRoaXNfbmFtZSwgaWQ6IHRoaXNfaWQsIHZhbHVlOiB0aGlzX3ZhbHVlLCBwbGFjZWhvbGRlcjogdGhpc19wbGFjZWhvbGRlciB9KTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIElEIC0gcmVtb3ZlIGNoaWxkIHN1ZmZpeFxuICAgICAgICAgICAgICAgIGlmKHRoaXNfaWQuaW5jbHVkZXMoJy1jaGlsZC0nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2lkID0gdGhpc19pZC5zcGxpdCgnLWNoaWxkLScpWzBdO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGBDbGVhbmVkIHVwIElEIHRvOiAke3RoaXNfaWR9YCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHJhZGlvIGJ1dHRvbnNcbiAgICAgICAgICAgICAgICBpZih0aGlzX3R5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGlvR3JvdXBOYW1lID0gdGhpc19uYW1lLmluY2x1ZGVzKCctY2hpbGQtJykgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfbmFtZS5zcGxpdCgnLWNoaWxkLScpWzBdIDogXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX25hbWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coYFByb2Nlc3NpbmcgcmFkaW8gYnV0dG9uIGluIGdyb3VwOiAke3JhZGlvR3JvdXBOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBwcm9jZXNzZWQgdGhpcyBncm91cCB5ZXQsIGluaXRpYWxpemUgaXRcbiAgICAgICAgICAgICAgICAgICAgaWYocHJvY2Vzc2VkUmFkaW9Hcm91cHNbcmFkaW9Hcm91cE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coYEluaXRpYWxpemluZyBuZXcgcmFkaW8gZ3JvdXA6ICR7cmFkaW9Hcm91cE5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRSYWRpb0dyb3Vwc1tyYWRpb0dyb3VwTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXNfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByYWRpb0dyb3VwTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpc19wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycgLy8gRGVmYXVsdCBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBib29sZWFuIGZpZWxkIGJ5IGZpZWxkIGlkIEFORCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaW9FbGVtZW50ID0galEyMjQoJyMnICsgbmV3X2V4dHJhX2ZpZWxkc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYWRpb1BhcmVudCA9IHJhZGlvRWxlbWVudC5jbG9zZXN0KCcuZm9ybS1pbnB1dC1jbGFzcycpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNCb29sZWFuRmllbGQgPSByYWRpb1BhcmVudC5sZW5ndGggJiYgcmFkaW9QYXJlbnQuaGFzQ2xhc3MoJ3Byb3AtYm9vbGVhbicpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHNlbGVjdGVkIHZhbHVlIGJ5IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGlvR3JvdXAgPSBqUTIyNChgaW5wdXRbbmFtZT1cIiR7cmFkaW9Hcm91cE5hbWV9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFJhZGlvID0gcmFkaW9Hcm91cC5maWx0ZXIoJzpjaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NoZWNrZWQgPSBzZWxlY3RlZFJhZGlvLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlID0gaXNDaGVja2VkID8gc2VsZWN0ZWRSYWRpby52YWwoKSA6ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coYFByb2Nlc3NpbmcgcmFkaW8gJHtyYWRpb0dyb3VwTmFtZX06YCwgeyBpc0Jvb2xlYW5GaWVsZCwgaXNDaGVja2VkLCBzZWxlY3RlZFZhbHVlLCBwYXJlbnQ6IHJhZGlvUGFyZW50Lmxlbmd0aCA/ICdGb3VuZCcgOiAnTm90IEZvdW5kJywgaGFzQ2xhc3M6IHJhZGlvUGFyZW50Lmxlbmd0aCA/IHJhZGlvUGFyZW50Lmhhc0NsYXNzKCdwcm9wLWJvb2xlYW4nKSA6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc0Jvb2xlYW5GaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBib29sZWFuIGZpZWxkcywgZW5zdXJlIHZhbHVlIGlzIHRydWUvZmFsc2UsIG5vdCBcIjBcIi9cIjFcIi9cInRydWVcIi9cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRSYWRpb0dyb3Vwc1tyYWRpb0dyb3VwTmFtZV0udmFsdWUgPSBzZWxlY3RlZFZhbHVlID09PSBcIjFcIiB8fCBzZWxlY3RlZFZhbHVlID09PSBcInRydWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKGBTZXQgYm9vbGVhbiB2YWx1ZSBmb3IgJHtyYWRpb0dyb3VwTmFtZX06YCwgcHJvY2Vzc2VkUmFkaW9Hcm91cHNbcmFkaW9Hcm91cE5hbWVdLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIG5vbi1ib29sZWFuIGZpZWxkcywgdXNlIHRoZSB2YWx1ZSBhcyBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZFJhZGlvR3JvdXBzW3JhZGlvR3JvdXBOYW1lXS52YWx1ZSA9IHNlbGVjdGVkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgU2V0IHN0cmluZyB2YWx1ZSBmb3IgJHtyYWRpb0dyb3VwTmFtZX06YCwgcHJvY2Vzc2VkUmFkaW9Hcm91cHNbcmFkaW9Hcm91cE5hbWVdLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vdGhpbmcgc2VsZWN0ZWQsIHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZFJhZGlvR3JvdXBzW3JhZGlvR3JvdXBOYW1lXS52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgTm8gc2VsZWN0aW9uIGZvciAke3JhZGlvR3JvdXBOYW1lfSwgc2V0IGVtcHR5IHZhbHVlYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpbmRpdmlkdWFsIHJhZGlvIGJ1dHRvbiBlbnRyeSBhcyB3ZSdsbCBhZGQgdGhlIGdyb3VwIHN1bW1hcnkgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5ld19leHRyYV9maWVsZHNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjaGVja2JveGVzXG4gICAgICAgICAgICAgICAgaWYodGhpc190eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveEdyb3VwTmFtZSA9IHRoaXNfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgUHJvY2Vzc2luZyBjaGVja2JveCBpbiBncm91cDogJHtjaGVja2JveEdyb3VwTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZ3JvdXAgaWYgbm90IGFscmVhZHkgZG9uZVxuICAgICAgICAgICAgICAgICAgICBpZihwcm9jZXNzZWRDaGVja2JveEdyb3Vwc1tjaGVja2JveEdyb3VwTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgSW5pdGlhbGl6aW5nIG5ldyBjaGVja2JveCBncm91cDogJHtjaGVja2JveEdyb3VwTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZENoZWNrYm94R3JvdXBzW2NoZWNrYm94R3JvdXBOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpc19pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGNoZWNrYm94R3JvdXBOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0aGlzX3BsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdIC8vIEluaXRpYWxpemUgYXMgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIHZhbHVlIGlzIGFscmVhZHkgYW4gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh0aGlzX3ZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgRm91bmQgZXhpc3RpbmcgY2hlY2tib3ggdmFsdWVzIGFycmF5OmAsIHRoaXNfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkQ2hlY2tib3hHcm91cHNbY2hlY2tib3hHcm91cE5hbWVdLnZhbHVlcyA9IHRoaXNfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzX3ZhbHVlKSB7IC8vIEFkZCB2YWx1ZSBpZiBpdCBleGlzdHMsIHJlZ2FyZGxlc3Mgb2YgY2hlY2tlZCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhgQWRkaW5nIHZhbHVlIHRvIGdyb3VwICR7Y2hlY2tib3hHcm91cE5hbWV9OmAsIHRoaXNfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkQ2hlY2tib3hHcm91cHNbY2hlY2tib3hHcm91cE5hbWVdLnZhbHVlcy5wdXNoKHRoaXNfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaW5kaXZpZHVhbCBjaGVja2JveCBlbnRyeSBhcyB3ZSdsbCBhZGQgdGhlIGdyb3VwIHN1bW1hcnkgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5ld19leHRyYV9maWVsZHNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXNfdHlwZS5pbmRleE9mKCdzZWxlY3QnKSA+IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc190eXBlID0gJ3NlbGVjdCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGpRMjI0KG5ld19leHRyYV9maWVsZHNbaV0pLmF0dHIoJ2RhdGEtaW5wdXQtdHlwZScpID09ICd1cmwnIHx8IHRoaXNfbmFtZS5pbmRleE9mKCdwb3B0aW5EZXNpZ25XZWJzaXRlRmllbGQnKSA+IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc190eXBlID0gJ3VybCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGpRMjI0KG5ld19leHRyYV9maWVsZHNbaV0pLmF0dHIoJ2RhdGEtaW5wdXQtdHlwZScpID09ICdkYXRlJyB8fCB0aGlzX25hbWUuaW5kZXhPZigncG9wdGluRGVzaWduRGF0ZUZpZWxkJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfdHlwZSA9ICdkYXRlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFzZV9maWVsZHNbdGhpc190eXBlXSA9IGJhc2VfZmllbGRzW3RoaXNfdHlwZV0gKyAxO1xuXG4gICAgICAgICAgICAgICAgaWYodGhpc19pZCA9PSBcInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3hcIil7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfbmFtZSA9IFwiY29uc2VudFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzX2lkID09IFwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRGaXJzdE5hbWVcIil7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfbmFtZSA9IFwiZmlyc3RfbmFtZVwiO1xuICAgICAgICAgICAgICAgICAgICBzcGxpdF9uYW1lX2ZpZWxkW3RoaXNfbmFtZV0gPSB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzX2lkID09IFwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRMYXN0TmFtZVwiKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19uYW1lID0gXCJsYXN0X25hbWVcIjsgXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0X25hbWVfZmllbGRbdGhpc19uYW1lXSA9IHRoaXNfdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19uYW1lID0gdGhpc190eXBlK1wiX1wiK2Jhc2VfZmllbGRzW3RoaXNfdHlwZV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYobmV3X2V4dHJhX2ZpZWxkc1tpXSAmJiB0aGlzX3R5cGUgIT09ICdyYWRpbycgJiYgdGhpc190eXBlICE9PSAnY2hlY2tib3gnKSB7IC8vIE9ubHkgdXBkYXRlIGlmIGZpZWxkIHdhc24ndCBkZWxldGVkIGFuZCBpc24ndCByYWRpby9jaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdMb2dnZXIgYmVmb3JlIGZhbGxiYWNrJywgSlNPTi5zdHJpbmdpZnkobmV3X2V4dHJhX2ZpZWxkcykpO1xuICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW2ldLmlkID0gdGhpc19pZDtcbiAgICAgICAgICAgICAgICAgICAgbmV3X2V4dHJhX2ZpZWxkc1tpXS5uYW1lID0gdGhpc19uYW1lO1xuICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW2ldLnR5cGUgPSB0aGlzX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHNbaV0udmFsdWUgPSB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdMb2dnZXIgYmVmb3JlIGZhbGxiYWNrJywgSlNPTi5zdHJpbmdpZnkobmV3X2V4dHJhX2ZpZWxkcykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEZvciBHYW1maWVkIFByaXplIENvZGUgJiBMYWJlbCBIaWRkZW4gRmllbGRzXG4gICAgICAgICAgICAgICAgaWYodGhpc190eXBlID09IFwiaGlkZGVuXCIgJiYgdGhpc192YWx1ZSAmJiB0aGlzX3ZhbHVlLmluZGV4T2YoJ3t7cHJpemVfY29kZX19JykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHNbaV0ubmFtZSA9IFwicHJpemVfY29kZVwiO1xuICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW2ldLnZhbHVlID0gcG9wdGluLmdhbWlmaWVkX3ByaXplID8gcG9wdGluLmdhbWlmaWVkX3ByaXplLmNvZGU6XCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodGhpc190eXBlID09IFwiaGlkZGVuXCIgJiYgdGhpc192YWx1ZSAmJiB0aGlzX3ZhbHVlLmluZGV4T2YoJ3t7cHJpemVfbGFiZWx9fScpID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzW2ldLm5hbWUgPSBcInByaXplX2xhYmVsXCI7XG4gICAgICAgICAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHNbaV0udmFsdWUgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUgPyBwb3B0aW4uZ2FtaWZpZWRfcHJpemUubGFiZWw6XCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYodGhpc19pZCA9PSBcInBvcHRpbkRlc2lnblByZWZlcmVuY2VGaWVsZFwiICYmIHRoaXNfdmFsdWUgPT0gXCJcIil7XG4gICAgICAgICAgICAgICAgLy8gICAgIG5ld19leHRyYV9maWVsZHNbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnTG9nZ2VyIGFmdGVyIGxvb3AnLCBKU09OLnN0cmluZ2lmeShuZXdfZXh0cmFfZmllbGRzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBhcnJheSBieSByZW1vdmluZyBkZWxldGVkIGVudHJpZXNcbiAgICAgICAgICAgIG5ld19leHRyYV9maWVsZHMgPSBuZXdfZXh0cmFfZmllbGRzLmZpbHRlcihmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBzaG93TG9nKCdMb2dnZXIgYWZ0ZXIgY2xlYW51cCcsIEpTT04uc3RyaW5naWZ5KG5ld19leHRyYV9maWVsZHMpKTtcblxuICAgICAgICAgICAgLy8gQWRkIHByb2Nlc3NlZCByYWRpbyBncm91cHMgdG8gbmV3X2V4dHJhX2ZpZWxkc1xuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhwcm9jZXNzZWRSYWRpb0dyb3VwcykuZm9yRWFjaChmdW5jdGlvbihncm91cCkge1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coYEFkZGluZyByYWRpbyBncm91cCBiYWNrOmAsIGdyb3VwKTtcbiAgICAgICAgICAgICAgICBuZXdfZXh0cmFfZmllbGRzLnB1c2goZ3JvdXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBzaG93TG9nKCdMb2dnZXIgYWZ0ZXIgcHJvY2Vzc2VkUmFkaW9Hcm91cHMnLCBKU09OLnN0cmluZ2lmeShuZXdfZXh0cmFfZmllbGRzKSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBwcm9jZXNzZWQgY2hlY2tib3ggZ3JvdXBzIHRvIG5ld19leHRyYV9maWVsZHNcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMocHJvY2Vzc2VkQ2hlY2tib3hHcm91cHMpLmZvckVhY2goZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIHRoZSB2YWx1ZXMgYXJyYXkgaW5zdGVhZCBvZiBqb2luaW5nXG4gICAgICAgICAgICAgICAgZ3JvdXAudmFsdWUgPSBncm91cC52YWx1ZXMubGVuZ3RoID4gMCA/IGdyb3VwLnZhbHVlcyA6IFtdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBncm91cC52YWx1ZXM7IC8vIENsZWFuIHVwIHRlbXBvcmFyeSBhcnJheVxuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coYEFkZGluZyBjaGVja2JveCBncm91cDpgLCBncm91cCk7XG4gICAgICAgICAgICAgICAgbmV3X2V4dHJhX2ZpZWxkcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnTG9nZ2VyIGFmdGVyIHByb2Nlc3NlZENoZWNrYm94R3JvdXBzJywgSlNPTi5zdHJpbmdpZnkobmV3X2V4dHJhX2ZpZWxkcykpO1xuXG4gICAgICAgICAgICAvLyBGaWVsZHMgZnJvbSBzaG9waWZ5IHByb2R1Y3RzXG4gICAgICAgICAgICBpZiggcG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdICYmIHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcInByb2R1Y3RfbmFtZVwiXSApe1xuICAgICAgICAgICAgICAgIHZhciBvYmpQcm9kID0geyBpZDogXCJwb3B0aW5TaG9waWZ5UmVjb21Qcm9kdWN0TmFtZVwiLCBuYW1lOiBcInByb2R1Y3RfbmFtZVwiLCBwbGFjZWhvbGRlcjogXCJQcm9kdWN0IG5hbWVcIiwgdHlwZTogXCJoaWRkZW5cIiwgdmFsdWU6IHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcInByb2R1Y3RfbmFtZVwiXSB9XG4gICAgICAgICAgICAgICAgbmV3X2V4dHJhX2ZpZWxkcy5wdXNoKG9ialByb2QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihzcGxpdF9uYW1lX2ZpZWxkLmZpcnN0X25hbWUgJiYgc3BsaXRfbmFtZV9maWVsZC5sYXN0X25hbWUpe1xuICAgICAgICAgICAgICAgIHBvcHRpbl9wYXJhbXNbJ3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkTmFtZSddID0gc3BsaXRfbmFtZV9maWVsZC5maXJzdF9uYW1lICsgXCIgXCIgKyBzcGxpdF9uYW1lX2ZpZWxkLmxhc3RfbmFtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9wdGluX3BhcmFtc1snbmV3RXh0cmFGaWVsZHMnXSA9IEpTT04uc3RyaW5naWZ5KG5ld19leHRyYV9maWVsZHMpO1xuICAgICAgICAgICAgcG9wdGluX3BhcmFtc1snbGVhZGVyX3JlcXVlc3RfY29va2llJ10gPSBnZXRMZWFkZXJDb29raWUoKTtcbiAgICAgICAgICAgIHBvcHRpbl9wYXJhbXNbJ2V4dHJhX2J1dHRvbiddID0gY291bnRfY29udmVyc2lvbjtcblxuICAgICAgICAgICAgcG9wdGluU3VibWl0dGVkW3BvcHRpbi5wb3B0aW5faWRdID0ge1xuICAgICAgICAgICAgICAgIHBvcHRpbl9pZDogcG9wdGluX3BhcmFtc1sncG9wdGluX2lkJ10sXG4gICAgICAgICAgICAgICAgY2xpZW50X2lkOiBwb3B0aW5fcGFyYW1zWydjbGllbnRfaWQnXSAhPT0gdW5kZWZpbmVkID8gcG9wdGluX3BhcmFtc1snY2xpZW50X2lkJ10gOiAnJyxcbiAgICAgICAgICAgICAgICByZWZlcnJlcjogcG9wdGluX3BhcmFtc1sncmVmZXJyZXInXSxcbiAgICAgICAgICAgICAgICBwcmV2aW91c191cmw6IHBvcHRpbl9wYXJhbXNbJ3ByZXZpb3VzX3VybCddLFxuICAgICAgICAgICAgICAgIHBhZ2VfdGl0bGU6IHBvcHRpbl9wYXJhbXNbJ3RpdGxlJ10sXG4gICAgICAgICAgICAgICAgcGFnZV91cmw6IHBvcHRpbl9wYXJhbXNbJ3VybCddLFxuICAgICAgICAgICAgICAgIGNvbnNlbnQ6IHBvcHRpbl9wYXJhbXNbJ2NoZWNrYm94X2NoZWNrZWQnXSxcbiAgICAgICAgICAgICAgICBwcmV2aW91c192aXNpdGVkX3BhZ2VzOiBwb3B0aW5fcGFyYW1zWydwcmV2aW91c192aXNpdGVkX3BhZ2VzJ10sXG4gICAgICAgICAgICAgICAgcHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX2N1cnJlbnRfcGFnZTogcG9wdGluX3BhcmFtc1sncHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX2N1cnJlbnRfcGFnZSddLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzX3Zpc2l0ZWRfcGFnZXNfd2l0aF90aW1lX3N0YW1wOiBwb3B0aW5fcGFyYW1zWydwcmV2aW91c192aXNpdGVkX3BhZ2VzX3dpdGhfdGltZV9zdGFtcCddLFxuICAgICAgICAgICAgICAgIGFsbF92aXNpdGVkX3BhZ2VzOiBwb3B0aW5fcGFyYW1zWydhbGxfdmlzaXRlZF9wYWdlcyddLFxuICAgICAgICAgICAgICAgIGZpZWxkczogcG9wdGluX2ZpZWxkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZihjb3VudF9jb252ZXJzaW9uID09ICdjb3Vwb24nKXtcbiAgICAgICAgICAgIHBvcHRpbl9wYXJhbXNbJ2NvdXBvbiddID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmNvdXBvbjtcbiAgICAgICAgICAgIHBvcHRpbl9wYXJhbXNbJ2V4dHJhX2J1dHRvbiddID0gJ2NvdXBvbic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdGluVmlld2RBcnJbcG9wdGluLnBvcHRpbl9pZF0gJiYgcG9wdGluVmlld2RBcnJbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3ZpZXdfaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9wdGluX3BhcmFtc1sncG9wdGluX3ZpZXdfaWQnXSA9IHBvcHRpblZpZXdkQXJyW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl92aWV3X2lkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvd0xvZyhcInBvcHRpblN1Ym1pdHRlZFwiLHBvcHRpblN1Ym1pdHRlZCk7XG4gICAgICAgIC8vIHJldHVybiBmYWxzZTtcblxuICAgICAgICB1cmxfY29udmVyc2lvbl9xdWVyeSA9IGdldFBvcHRpbkNvbnZlcnNpb25GaWVsZHMocG9wdGluKTtcbiAgICAgICAgLy8gR2V0IGFkZGl0aW9uYWwgdXNlciBkYXRhXG4gICAgICAgIC8vIHBvcHRpbl9wYXJhbXMgKz0gJyZ1cmw9Jyt3aW5kb3cubG9jYXRpb24uaHJlZisnJnBfdGFyZ2V0PScrcG9wdGluLnBvcHRpbl90YXJnZXQrJyZyZWZlcnJlcj0nK2dldFJlZmVycmVyKCkrJyZ0cmlnZ2VyPScrdHJpZ2dlcisnJnBvcHRpbl9pZD0nK3BvcHRpbi5wb3B0aW5faWQrJyZ0aXRsZT0nK2RvY3VtZW50LnRpdGxlO1xuICAgICAgICAvLyBBamF4IGNhbGxcblxuICAgICAgICBzaG93TG9nKHBvcHRpbl9wYXJhbXMpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBwcmV2aWV3IHBvcHRpbiBJRFxuICAgICAgICBpZiAocHJldmlld1BvcHRpbklkID09PSBwb3B0aW4ucG9wdGluX2lkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGE6IHBvcHRpbl9wYXJhbXMsXG4gICAgICAgICAgICB1cmw6IGFwaV9saW5rK1wiL2FwaS9kaXNwbGF5L2NvbnZlcnNpb24vXCIrcG9wdGluLnZpZXdlcl9pZCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgc2hvd0xvZygncG9wdGluQ29udmVyc2lvbigpLT5zdWNjZXNzKCknKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VbJ3N1Y2Nlc3MnXSl7XG4gICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNvbnZlcnNpb25TdWNjZXNzKHBvcHRpbixyZXNwb25zZSwgY291bnRfY29udmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBvcHRpbl9wYXJhbXMucG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRFbWFpbCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BvcHRpbl9jb252ZXJ0ZWRfZW1haWwnLCBwb3B0aW5fcGFyYW1zLnBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkRW1haWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvc2VkQ29va2llc0FycmF5ID0gZ2V0Q2xvc2VDb29raWVzQXJyYXkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2xvc2VkQ29va2llc0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xvc2VkX2Nvb2tlcnMnLCBjbG9zZWRDb29raWVzQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0LmVhY2goY2xvc2VkQ29va2llc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY2xvc2VkQ29va2llKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdlYWNoX2Nvb2tpZV9pczogJywgY2xvc2VkQ29va2llKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29udmVyc2lvbkFjdGl2aXRpZXMoJ2Nsb3NlZCcsIGNsb3NlZENvb2tpZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyp2YXIgY2xvc2VkQ29va2llc0FycmF5ID0gZ2V0Q2xvc2VDb29raWVzQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY2xvc2VkQ29va2llc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWx1ZSBpczogJywgY2xvc2VkQ29va2llc0FycmF5W2ldLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25pdG9yRXJyb3IoJ3BvcHRpbkNvbnZlcnNpb24oKS0+aGFuZGxlQ29udmVyc2lvblN1Y2Nlc3MnLGVyciwnT0snLHJlc3BvbnNlLHBvcHRpbixwb3B0aW5fcGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oWE1MSHR0cFJlcXVlc3QsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgbW9uaXRvckVycm9yKCdwb3B0aW5Db252ZXJzaW9uKCktPmVycm9yKCknLGVycm9yVGhyb3duLHRleHRTdGF0dXMsWE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0LHBvcHRpbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYoY291bnRfY29udmVyc2lvbiAhPSAnY291cG9uJyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpbkNvbnZlcnNpb24oKT5jb21wbGV0ZSgpJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmF0dHIoJ2RhdGEtcmVkaXJlY3QtcG9wdGluJykgPT0gXCJzaG9waWZ5XCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIFNob3BpZnkgdGhlbiBjaGVjayBmb3IgYWRkIHRvIGNhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgU2hvcGlmeSAhPSBcInVuZGVmaW5lZFwiICYmICEoIHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXSAmJiBwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJwcm9kdWN0X3VybFwiXSkgJiYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbiAhPSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKFwiaGFuZGVTaG9waWZ5QWRkVG9DYXJ0KClcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRlU2hvcGlmeUFkZFRvQ2FydChwb3B0aW4sdHJ1ZSwnJyxjb3VudF9jb252ZXJzaW9uLCBlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0eXBlb2YgU2hvcGlmeSAhPSBcInVuZGVmaW5lZFwiICYmIHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXSAmJiBwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJwcm9kdWN0X3VybFwiXSAmJiBwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJidXR0b25zX2FjdGlvblwiXSAhPSBcIm5vX2J1dHRvbnNcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKFwicmVkaXJlY3RTaG9waWZ5UHJvZHVjdHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGVsU2hvcGlmeVByb2RSZWRpcmVjdHMocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVkaXJlY3QgdXNlciB0byBwb3B0aW4gcmVkaXJlY3QgcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY291bnRfY29udmVyc2lvbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmKGNvdW50X2NvbnZlcnNpb24gPT09IFwiY2xvc2VfYnRuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKHR5cGVvZiBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9yZWRpcmVjdCAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHJlZGlyZWN0VG9Qb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBidXR0b25SZWRpcmVjdEFmdGVyQ2xpY2soZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25SZWRpcmVjdEFmdGVyQ2xpY2socG9wdGluLGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0QWZ0ZXJDb252ZXJzaW9uKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXCJKU09OXCIpO1xuICAgICAgICAvLyBEYXRhUG9pbnQgZXZlbnRcbiAgICAgICAgLy9wb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLmRhdGFfcG9pbnQub25Db252ZXJzaW9uKCk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKCksIGluaXRpYWxpemVDbG9jaygpLCBhZnRlclBvcHRpblN1Ym1pdCgpLCBvblRleHRDbGlja0Nsb3NlKCksY2xvc2VQb3B0aW5PblhjbGljaygpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbl9pZDpzdHJpbmdcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogaGFuZGxlIGNsb3NlIHBvcHRpbiBhbmQgcmVtb3ZlIHBvcHRpbiBmcm9tIERPTVxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgY2xvc2VQb3B0aW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2luZG93LmNsb3NlUG9wdGluID0gZnVuY3Rpb24gKHBvcHRpbl9pZCx4X2Nsb3NlLGJnX2NsaWNrPWZhbHNlKSB7XG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpLmZpbmQoJ2F1ZGlvLCB2aWRlbycpLnJlbW92ZSgpO1xuXHRcdFx0XG5cdFx0XHRpZihqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpLmxlbmd0aCA9PSAwKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG4gICAgICAgICAgICB2YXIgeF9jbG9zZSA9IHhfY2xvc2UgPyB4X2Nsb3NlIDogZmFsc2U7XG4gICAgICAgICAgICBzaG93TG9nKCdjbG9zZVBvcHRpbjogJytwb3B0aW5faWQpO1xuXG4gICAgICAgICAgICAvL3BvcHRpbnNbcG9wdGluX2lkXS5kYXRhX3BvaW50Lm9uQ2xvc2UocG9wdGluX2lkKTtcbiAgICAgICAgICAgIC8vaGlkZUVmZmVjdChhbGxfcG9wdGluc1twb3B0aW5faWRdKTtcbiAgICAgICAgICAgIC8valEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl0sIC5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIC8valEyMjQoJ2JvZHknKS5jc3MoXCJvdmVyZmxvd1wiLFwiYXV0b1wiKTtcbiAgICAgICAgICAgIHZhciBuZWVkc0h0bWxQYWRkaW5nRml4ID0gKFxuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdW2RhdGEtcG9wdGluLWxvY2F0aW9uPSdjZW50ZXItdG9wJ11bZGF0YS1wb3B0aW4tdHlwZT0nYmFyJ11cIikubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpLmF0dHIoJ2RhdGEtd2VsbGNvbWUtc2NyZWVuJykgPT0gJzEnXG4gICAgICAgICAgICApID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYobmVlZHNIdG1sUGFkZGluZ0ZpeCl7IGZpeEh0bWxQYWRkaW5nKCk7IH1cbiAgICAgICAgICAgIC8vY2FuY2VsU29jaWFsUHJvb2ZJbnRlcnZhbChwb3B0aW5faWQpO1xuICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWVtYmVkZGVkW2RhdGEtaWQ9J1wiK3BvcHRpbl9pZCtcIiddXCIpLnNsaWRlVXAoKTtcbiAgICAgICAgICAgIHRyeXtjbGVhckludGVydmFsKHN1Ym1pdEJ0bkFuaW1hdGlvbkludGVydmFsKTt9Y2F0Y2goZXJyKXt9XG4gICAgICAgICAgICB0cnl7Y2xlYXJJbnRlcnZhbChjbG9zZUJ0bkFuaW1hdGlvbkludGVydmFsKTt9Y2F0Y2goZXJyKXt9XG4gICAgICAgICAgICB0cnl7Y2xlYXJJbnRlcnZhbChnaWZ0Ym94QW5pbWF0aW9uSW50ZXJ2YWwpO31jYXRjaChlcnIpe31cblxuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgIHZhciBwb3B0aW5saW5rQnV0dG9uID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItbGlua1wiKTtcbiAgICAgICAgICAgICAgICBpZihwb3B0aW5saW5rQnV0dG9uLmxlbmd0aCAmJiB0eXBlb2YgcG9wdGlubGlua0J1dHRvbi5hdHRyKFwiZGF0YS1wb3B0aW4tYW5pbWF0ZVwiKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwb3B0aW5saW5rQnV0dG9uLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluX2lkK1wiXSAuZnJvYWxhLWVkaXRvci1saW5rXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rYnRuX2lkPSBqUTIyNCh0aGlzKS5wYXJlbnQoKS5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGxpbmtfaW50ZXJ2YWxfYXJyYXlbcG9wdGluX2lkK1wiX1wiK2xpbmtidG5faWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl0sIC5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgLy8gfSwzMDApO1xuXG4gICAgICAgICAgICBpZihsYW5kaW5nX3BhZ2VfdGVhc2VyX29uPT0xKXtcbiAgICAgICAgICAgICAgICBpZihqUTIyNCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJbZGF0YS1sb2FkLXBvcHRpbj1cIicrIHBvcHRpbi5wb3B0aW5faWQgKydcIl0nKS5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIiArIHBvcHRpbl9pZCArIFwiXVwiKS5hdHRyKFwiZGF0YS10YWJzaG93XCIpIT0nYmVmb3JlX3Nob3cnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUZWFzZXJFZmZlY3QocG9wdGluLCAnZW50cnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVUYWIocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBleHRyYWN0VGVhc2VyKHBvcHRpbiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW5faWQgKyBcIl1cIikuYXR0cihcImRhdGEtaGFzdGFiXCIpICE9IFwidW5kZWZpbmVkXCIgJiYgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiICsgcG9wdGluX2lkICsgXCJdXCIpLmF0dHIoXCJkYXRhLWhhc3RhYlwiKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbiA9IGFsbF9wb3B0aW5zW3BvcHRpbl9pZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW5faWQgKyBcIl1cIikuYXR0cihcImRhdGEtdGFic2hvd1wiKSA9PSBcImFmdGVyX2Nsb3NlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykubGVuZ3RoPjAgJiYgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykuaGFzQ2xhc3MoXCJwb3B1cC1sb2FkZWRcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykucmVtb3ZlQ2xhc3MoXCJwb3B1cC1sb2FkZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocG9wdGluLmRfZl9yPT0nYWxsQGRpc3BsYXlfZXZlcnl0aW1lX2V2ZXJ5cGFnZV81Jyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi54X2Nsb3NlX2J1dHRvbiE9MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93VGVhc2VyRWZmZWN0KHBvcHRpbiwgJ2VudHJ5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlVGFiKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUZWFzZXJFZmZlY3QocG9wdGluLCAnZW50cnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVUYWIocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFRlYXNlcihwb3B0aW4sIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmIChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW5faWQgKyBcIl1cIikuYXR0cihcImRhdGEtdGFic2hvd1wiKSA9PSBcImFsd2F5c1wiKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykubGVuZ3RoPjAgJiYgalEyMjQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiW2RhdGEtbG9hZC1wb3B0aW49XCInKyBwb3B0aW4ucG9wdGluX2lkICsnXCJdJykuaGFzQ2xhc3MoXCJwb3B1cC1sb2FkZWRcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYltkYXRhLWxvYWQtcG9wdGluPVwiJysgcG9wdGluLnBvcHRpbl9pZCArJ1wiXScpLnJlbW92ZUNsYXNzKFwicG9wdXAtbG9hZGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi5kX2Zfcj09J2FsbEBkaXNwbGF5X2V2ZXJ5dGltZV9ldmVyeXBhZ2VfNScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW4ueF9jbG9zZV9idXR0b24hPTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1RlYXNlckVmZmVjdChwb3B0aW4sICdlbnRyeScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVRhYihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUZWFzZXJFZmZlY3QocG9wdGluLCAnZW50cnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVRhYihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFRlYXNlcihwb3B0aW4sIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3B0aW4gPSBhbGxfcG9wdGluc1twb3B0aW5faWRdO1xuICAgICAgICAgICAgdmFyIGV4aXRUaW1lT3V0ID0gMDtcbiAgICAgICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSAmJiBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJlbWJlZGRlZFwiICYmIHBvcHRpbi5wb3B0aW5fdHlwZSAhPSBcImZ1bGxwYWdlXCIpe1xuICAgICAgICAgICAgICAgIGlmKCAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2V4aXRfZWZmZWN0ICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2V4aXRfZWZmZWN0ID09IFwiZXhpdF9lZmZlY3Qtbm9uZVwiKSB8fCAhcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fZXhpdF9lZmZlY3QgKXtcbiAgICAgICAgICAgICAgICAgICAgZXhpdFRpbWVPdXQgPSAwO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBzaG93RWZmZWN0KHBvcHRpbixcImV4aXRcIik7XG4gICAgICAgICAgICAgICAgICAgIGV4aXRUaW1lT3V0ID0gODAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgIFxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoeF9jbG9zZSl7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVBvcHRpbkh0bWwocG9wdGluX2lkKVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW4uaXNfdGVhc2Vyc19vbil7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVBvcHRpbkh0bWwocG9wdGluX2lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwxNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluX2lkK1wiXSwgLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbl9pZCtcIl1cIikuZmFkZU91dCgnZmFzdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVQb3B0aW5IdG1sKHBvcHRpbl9pZClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sYmdfY2xpY2sgPyAyMDAgOiA1MDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqUTIyNChcIiNiZ2VmZmVjdF9jYW52YXNfXCIrcG9wdGluX2lkKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0sIGV4aXRUaW1lT3V0KTtcblxuICAgICAgICAgICAgUFEuZmlyZVBvcHRpbihwb3B0aW5faWQpO1xuXHRcdFx0XG5cdFx0XHQvLyBEb24ndCBmaXJlIGNsb3NlIGV2ZW50IGlmIGZvcm0gd2FzIHN1Ym1pdHRlZFxuXHRcdFx0bGV0IHRoaXNfcG9wID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiICsgcG9wdGluX2lkICsgXCJdXCIpO1xuXHRcdFx0aWYoXG5cdFx0XHRcdCEoXG5cdFx0XHRcdFx0dGhpc19wb3AuaGFzQ2xhc3MoXCJwb3B0aW4tc3VibWl0dGVkXCIpIHx8XG5cdFx0XHRcdFx0dGhpc19wb3AuaGFzQ2xhc3MoXCJwb3B0aW4tcmVkaXJlY3RlZFwiKVxuXHRcdFx0XHQpXG5cdFx0XHQpe1xuXHRcdFx0XHRjb25zdCBvblBvcHRpbkNsb3NlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwb3B0aW5DbG9zZVwiLCB7YnViYmxlczogdHJ1ZSwgZGV0YWlsOiBwb3B0aW5FdmVudERldGFpbHMocG9wdGluLCB7XCJldmVudF9uYW1lXCIgOiBcInBvcHRpbkNsb3NlXCJ9KX0pO1xuXHRcdFx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG9uUG9wdGluQ2xvc2VFdmVudCk7XG5cdFx0XHRcdG9ucG9wdGluQ2xvc2UocG9wdGluX2lkKTtcblx0XHRcdH0gZWxzZSBpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiKSB7XG5cdFx0XHRcdGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIiArIHBvcHRpbl9pZCArIFwiXVwiKS5yZW1vdmVDbGFzcyhcInBvcHRpbi1zdWJtaXR0ZWQgcG9wdGluLXJlZGlyZWN0ZWRcIik7XG5cdFx0XHR9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fcmVkaXJlY3QgIT0gXCJ1bmRlZmluZWRcIiAmJiBwb3B0aW5zW3BvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY29udmVydD09dHJ1ZSl7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUb1BvcHRpbihwb3B0aW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlUG9wdGluSHRtbChwb3B0aW5faWQpe1xuICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW5faWQrXCJdLCAucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluX2lkK1wiXVwiKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc3VibWl0UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBBZGQgdG8gY2FydC9SZWRpcmVjdCBmb3Igc2hvcGlmeSBwcm9kdWN0XG4gICAgICovXG4gICAgIGZ1bmN0aW9uIGhhbmRlbFNob3BpZnlQcm9kUmVkaXJlY3RzKHBvcHRpbil7XG5cbiAgICAgICAgIGlmKCBwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJidXR0b25zX2FjdGlvblwiXSA9PSBcImFkZF90b19jYXJ0XCIgfHwgcG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdW1wiYnV0dG9uc19hY3Rpb25cIl0gPT0gXCJhZGRfdG9fY2FydF9yZWRpcmVjdFwiICl7XG4gICAgICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2FydC9hZGQuanMnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcInZhcmlhbnRfaWRcIl1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdW1wiYnV0dG9uc19hY3Rpb25cIl0gPT0gXCJhZGRfdG9fY2FydF9yZWRpcmVjdFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIFwiL2NhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYocG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdW1wiYnV0dG9uc19hY3Rpb25cIl0gPT0gXCJhZGRfdG9fY2FydFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfWVsc2UgaWYoIHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcImJ1dHRvbnNfYWN0aW9uXCJdID09IFwicmVkaXJlY3RcIiB8fCBwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJidXR0b25zX2FjdGlvblwiXSA9PSBcInJlZGlyZWN0X2JsYW5rXCIgKXtcbiAgICAgICAgICAgIGlmKHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcImJ1dHRvbnNfYWN0aW9uXCJdID09IFwicmVkaXJlY3RfYmxhbmtcIil7XG4gICAgICAgICAgICAgICAgdmFyIHRhZ1JlZklkID0gXCJwb3B0aW5fc3ByX1wiK3BvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcInByb2R1Y3RfaWRcIl0rXCJfXCIrcG9wdGluW1wic2hvcGlmeV9wcm9kdWN0X3NldHRpbmdzXCJdW1widmFyaWFudF9pZFwiXTtcbiAgICAgICAgICAgICAgICB2YXIgdGFnVG9BcHBlbmQgPSAnPGEgaWQ9XCInK3RhZ1JlZklkKydcIiBocmVmPVwiJytwb3B0aW5bXCJzaG9waWZ5X3Byb2R1Y3Rfc2V0dGluZ3NcIl1bXCJwcm9kdWN0X3VybFwiXSsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PC9hPic7XG4gICAgICAgICAgICAgICAgalEyMjQoIFwiYm9keVwiICkuYXBwZW5kKCB0YWdUb0FwcGVuZCApO1xuICAgICAgICAgICAgICAgIGpRMjI0KCBcIiNcIit0YWdSZWZJZCApWzBdLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgalEyMjQoIFwiI1wiK3RhZ1JlZklkIClbMF0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBvcHRpbltcInNob3BpZnlfcHJvZHVjdF9zZXR0aW5nc1wiXVtcInByb2R1Y3RfdXJsXCJdO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgY2xvc2VQb3B0aW4ocG9wdGluLnBvcHRpbl9pZCk7XG5cbiAgICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHN1Ym1pdFBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogQWRkIHByb2R1Y3QgdG8gY2FydCBpZiBzaG9waWZ5IGFkZCB0byBjYXJ0IGlzIHRoZXJlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGVTaG9waWZ5QWRkVG9DYXJ0KHBvcHRpbiwgYWRkVG9DYXJ0LCBidG5faWQgPSAnJyxjb3VudF9jb252ZXJzaW9uPScnLGVsID0gbnVsbCl7XG4gICAgICAgIHNob3dMb2coJ2hhbmRlU2hvcGlmeUFkZFRvQ2FydDogJytwb3B0aW4ucG9wdGluX2lkKTtcblxuICAgICAgICBpZihhZGRUb0NhcnQpIHtcbiAgICAgICAgICAgIHZhciBhZGRfdG9fY2FydCA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5hZGRfdG9fY2FydCAhPSBudWxsID8gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmFkZF90b19jYXJ0LnNwbGl0KCdAJykgOiAnJztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZihidG5faWQgPT09IFwicG9wdGluRm9ybTJuZGxpbmtidG5UZXh0XCIpXG4gICAgICAgICAgICAgICAgdmFyIGFkZF90b19jYXJ0ID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnNob3BpZnlfYWRkX3RvX2NhcnRfMiAhPSBudWxsID8gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnNob3BpZnlfYWRkX3RvX2NhcnRfMi5zcGxpdCgnQCcpIDogJyc7XG4gICAgICAgICAgICBlbHNlIGlmKGJ0bl9pZCA9PT0gXCJwb3B0aW5Gb3JtM25kbGlua2J0blRleHRcIilcbiAgICAgICAgICAgICAgICB2YXIgYWRkX3RvX2NhcnQgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuc2hvcGlmeV9hZGRfdG9fY2FydF8zICE9IG51bGwgPyBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuc2hvcGlmeV9hZGRfdG9fY2FydF8zLnNwbGl0KCdAJykgOiAnJztcbiAgICAgICAgICAgIGVsc2UgaWYoYnRuX2lkID09PSBcInBvcHRpbkZvcm00dGhsaW5rYnRuVGV4dFwiKVxuICAgICAgICAgICAgICAgIHZhciBhZGRfdG9fY2FydCA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5zaG9waWZ5X2FkZF90b19jYXJ0XzQgIT0gbnVsbCA/IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5zaG9waWZ5X2FkZF90b19jYXJ0XzQuc3BsaXQoJ0AnKSA6ICcnO1xuICAgICAgICAgICAgZWxzZSBpZihidG5faWQgPT09IFwicG9wdGluRm9ybTV0aGxpbmtidG5UZXh0XCIpXG4gICAgICAgICAgICAgICAgdmFyIGFkZF90b19jYXJ0ID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnNob3BpZnlfYWRkX3RvX2NhcnRfNSAhPSBudWxsID8gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnNob3BpZnlfYWRkX3RvX2NhcnRfNS5zcGxpdCgnQCcpIDogJyc7XG4gICAgICAgICAgICBlbHNlIGlmKGJ0bl9pZCA9PT0gXCJwb3B0aW5Gb3JtNnRobGlua2J0blRleHRcIilcbiAgICAgICAgICAgICAgICB2YXIgYWRkX3RvX2NhcnQgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuc2hvcGlmeV9hZGRfdG9fY2FydF82ICE9IG51bGwgPyBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuc2hvcGlmeV9hZGRfdG9fY2FydF82LnNwbGl0KCdAJykgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGFkZF90b19jYXJ0ICYmIEFycmF5LmlzQXJyYXkoYWRkX3RvX2NhcnQpKXtcbiAgICAgICAgICAgIHZhciBwcm9kdWN0X2lkID0gYWRkX3RvX2NhcnRbMF0gfHwgMDtcbiAgICAgICAgICAgIHZhciBwcm9kdWN0X3F0eSA9IGFkZF90b19jYXJ0WzFdIHx8IDA7XG4gICAgICAgICAgICB2YXIgcmVsb2FkX3R5cGUgPSBwYXJzZUludChhZGRfdG9fY2FydFsyXSkgfHwgMDtcbiAgICAgICAgICAgIHZhciByZWxvYWRfcGFnZSA9IGFkZF90b19jYXJ0WzNdIHx8ICcnO1xuXG4gICAgICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2FydC9hZGQuanMnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHByb2R1Y3RfcXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9kdWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgNDIyOiBmdW5jdGlvbihyZXNwb25zZU9iamVjdCwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiNDIyIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICBpZihyZWxvYWRfdHlwZSA9PT0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlbG9hZF9wYWdlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciB1cl9yZWdleF9jaGVjayA9IC9eKGh0dHBzPzpcXC9cXC8pPyhbYS16MC05Li1dKylcXC4oW2Etel17Mix9KSg6WzAtOV17MSw1fSk/KFxcLy4qKT8kL2k7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgaWYodXJfcmVnZXhfY2hlY2sudGVzdChyZWxvYWRfcGFnZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gKHJlbG9hZF9wYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgc3RvcmVfbGFuZ3VhZ2Vfcm91dGUgPSBzaG9waWZ5bGFuZ3VhZ2VSb3V0ZSgpID09ICcvJyA/ICcnIDogc2hvcGlmeWxhbmd1YWdlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgY2FydF9yZWRpcmVjdGlvbl91cmwgPSAgd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgU2hvcGlmeS5zaG9wICsgc3RvcmVfbGFuZ3VhZ2Vfcm91dGUgKyByZWxvYWRfcGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihjYXJ0X3JlZGlyZWN0aW9uX3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmVfbGFuZ3VhZ2Vfcm91dGUgPSBzaG9waWZ5bGFuZ3VhZ2VSb3V0ZSgpID09ICcvJyA/ICcnIDogc2hvcGlmeWxhbmd1YWdlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJ0X3JlZGlyZWN0aW9uX3VybCA9ICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBTaG9waWZ5LnNob3AgKyBzdG9yZV9sYW5ndWFnZV9yb3V0ZSArICcvY2FydCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKGNhcnRfcmVkaXJlY3Rpb25fdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVkaXJlY3QgdXNlciB0byBwb3B0aW4gcmVkaXJlY3QgcGFnZVxuICAgICAgICAgICAgaWYoY291bnRfY29udmVyc2lvbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGJ1dHRvblJlZGlyZWN0QWZ0ZXJDbGljayhwb3B0aW4sIGVsKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0QWZ0ZXJDb252ZXJzaW9uKHBvcHRpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzdWJtaXRQb3B0aW4oKSwgcG9wdGluQ29udmVyc2lvbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmVkaXJlY3QgdmlzaXRvciB0byBwb3B0aW4gcmVkaXJlY3QgcGFnZSBhZnRlciBwb3B0aW4gc3VibWl0XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkaXJlY3RBZnRlckNvbnZlcnNpb24ocG9wdGluKXtcbiAgICAgICAgc2hvd0xvZygncmVkaXJlY3RBZnRlckNvbnZlcnNpb246ICcrcG9wdGluLnBvcHRpbl9pZCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJyk7XG5cbiAgICAgICAgaWYgKHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfZmxhZyE9IHVuZGVmaW5lZCAmJiAhcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnICl7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpO1xuXG4gICAgICAgICAgICBpZiAoKF90aGlzLmF0dHIoJ2RhdGEtcmVkaXJlY3QtcG9wdGluJykgIT0gXCJ0cnVlXCIgJiYgX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4nKSAhPSBcInNob3BpZnlcIikgfHwgX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4taWQnKS5sZW5ndGggIT0gMTMpe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X3VybCAhPT0gdW5kZWZpbmVkICYmIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfZmxhZyE9dW5kZWZpbmVkICYmICFwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X2ZsYWcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4nKSA9PSBcInRydWVcIiAmJiBfdGhpcy5hdHRyKCdkYXRhLXJlZGlyZWN0LXBvcHRpbi1pZCcpLmxlbmd0aCA9PSAxMyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sJ2RpcmVjdCcsZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4nKSAhPSBcInRydWVcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sJ2RpcmVjdCcsZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSw1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIil7XG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8xXCIgfHxcbiAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF82XCIgfHxcbiAgICAgICAgICAgICAgICBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8xMVwiIHx8XG4gICAgICAgICAgICAgICAgKChfdGhpcy5hdHRyKCdkYXRhLXJlZGlyZWN0LXBvcHRpbicpICE9IFwidHJ1ZVwiICYmIF90aGlzLmF0dHIoJ2RhdGEtcmVkaXJlY3QtcG9wdGluJykgIT0gXCJzaG9waWZ5XCIpICYmIHR5cGVvZiBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9yZWRpcmVjdCAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpblJlZGlyZWN0VG9VcmwocG9wdGluLCdkaXJlY3QnLGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LDUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcmVkaXJlY3RBZnRlckNvbnZlcnNpb24oKSwgaWZMaW5rQ29udmVyc2lvbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCB0eXBlOiBzdHJpbmcgfCBjbGlja190eXBlOnN0cmluZ1xuICAgICAqIERlc2MgICAgICAgICAgICAgOiBIYW5kbGUgcmVkaXJlY3QgdG8gdXJsIGFmdGVyIHBvcHRpbiBjb252ZXJzaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sdHlwZSxjbGlja190eXBlKXtcbiAgICAgICAgc2hvd0xvZygncG9wdGluUmVkaXJlY3RUb1VybCcpO1xuICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fcmVkaXJlY3Rfc2VuZF9mb3JtX2RhdGEpe1xuICAgICAgICAgICAgc2hvd0xvZygncG9wdGluUmVkaXJlY3RUb1VybDEnKTtcbiAgICAgICAgICAgIGlmICh0eXBlPT0nY2xpY2snKXtcblx0XHRcdFx0c2hvd0xvZygncG9wdGluUmVkaXJlY3RUb1VybDEuMScpO1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoY2xpY2tfdHlwZSkuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgIHVybF9jb252ZXJzaW9uX3F1ZXJ5ID0gdXJsX2NvbnZlcnNpb25fcXVlcnkgPT0gJycgPyBnZXRQb3B0aW5Db252ZXJzaW9uRmllbGRzKHBvcHRpbikgOiB1cmxfY29udmVyc2lvbl9xdWVyeTtcbiAgICAgICAgICAgICAgICB1cmwgPSBvbmx5T25lUXVlc3Rpb25NYXJrKHVybCx1cmxfY29udmVyc2lvbl9xdWVyeSk7XG4gICAgICAgICAgICAgICAgdmFyIHVybF9hcnJheSA9IHVybC5zcGxpdCgnPycpO1xuICAgICAgICAgICAgICAgIHZhciB1cmxfZG9tYWluID0gdXJsX2FycmF5WzBdO1xuICAgICAgICAgICAgICAgIHVybF9hcnJheS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHVybCA9IHVybF9kb21haW4rJz8nKyh1cmxfYXJyYXkuam9pbignJicpKTtcblx0XHRcdFx0bGV0IG5ld0xvY2F0aW9uID0gdXJsO1xuICAgICAgICAgICAgICAgIHZhciBjbG9zZV90aGFua19zY3JlZW5fc2VjID0gMDtcblxuXHRcdFx0XHRpZihpZk1vYmlsZVBvcHRpbil7XG5cdFx0XHRcdFx0c2hvd0xvZygncG9wdGluUmVkaXJlY3RUb1VybDEuMSBpZk1vYmlsZVBvcHRpbicpO1xuXHRcdFx0XHRcdGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuYXBwZW5kKCc8YSBpZD1cInBvcHRpbi1tb2ItcmVkaXJlY3Rpb24tJytwb3B0aW4ucG9wdGluX2lkKydcIiBocmVmPVwiJytuZXdMb2NhdGlvbisnXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48L2E+Jyk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHRpbi1tb2ItcmVkaXJlY3Rpb24tJytwb3B0aW4ucG9wdGluX2lkKS5jbGljaygpO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbiAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuX2F1dG9fY2xvc2UgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlX3NlYyAhPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9IHBhcnNlSW50KHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlX3NlYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuZmluZChjbGlja190eXBlKS5hdHRyKCdocmVmJyx1cmwpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoY2xpY2tfdHlwZSlbMF0uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnPXRydWU7XG4gICAgICAgICAgICAgICAgfSwgY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyAqIDEwMDAgKTtcblxuICAgICAgICAgICAgfWVsc2V7XG5cdFx0XHRcdHNob3dMb2coJ3BvcHRpblJlZGlyZWN0VG9VcmwxLjInKTtcblx0XHRcdFx0dmFyIG5ld0xvY2F0aW9uID0gcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF91cmwrdXJsX2NvbnZlcnNpb25fcXVlcnk7XG5cdFx0XHRcdGlmKGlmTW9iaWxlUG9wdGluKXtcblx0XHRcdFx0XHRqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmFwcGVuZCgnPGEgaWQ9XCJwb3B0aW4tbW9iLXJlZGlyZWN0aW9uLScrcG9wdGluLnBvcHRpbl9pZCsnXCIgaHJlZj1cIicrbmV3TG9jYXRpb24rJ1wiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+PC9hPicpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3B0aW4tbW9iLXJlZGlyZWN0aW9uLScrcG9wdGluLnBvcHRpbl9pZCkuY2xpY2soKTtcblx0XHRcdFx0fVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdMb2NhdGlvbjsgfSwyMDApO1xuICAgICAgICAgICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3TG9jYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0X2Nhc2VfYW5jaG9yVGFnID0galEyMjQoJ1tkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5maW5kKFwiLnJlZGlyZWN0LXVybC1ibGFua1wiKTtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdF9jYXNlX2FuY2hvclRhZ1RhcmdldFByb3AgPSBkaXJlY3RfY2FzZV9hbmNob3JUYWcucHJvcChcInRhcmdldFwiKTtcbiAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpblJlZGlyZWN0VG9VcmwyJyk7XG4gICAgICAgICAgICBpZiAodHlwZT09PSdjbGljaycpe1xuICAgICAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpblJlZGlyZWN0VG9VcmwyLjEnKTtcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X2ZsYWc9dHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9IDA7XG4gICAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbiAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuX2F1dG9fY2xvc2UgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlX3NlYyAhPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9IHBhcnNlSW50KHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlX3NlYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2hvd0xvZygncG9wdGluUmVkaXJlY3RUb1VybDIuMSB0aW1lb3V0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnZVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnZQYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0xvY2F0aW9uID0gcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF91cmw7XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvclRhZyA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuZmluZChjbGlja190eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yVGFnVGFyZ2V0UHJvcCA9IGFuY2hvclRhZy5wcm9wKFwidGFyZ2V0XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmQXR0ciA9IGFuY2hvclRhZy5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvclRhZ1RhcmdldFByb3AgPT0gXCJfQkxBTktcIiAmJiBuZXdMb2NhdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMb2NhdGlvbiA9IG5ld0xvY2F0aW9uLnJlcGxhY2UoXCJ7Y29udmVyc2lvbl91cmx9XCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uID0gbmV3TG9jYXRpb24ucmVwbGFjZShcIiU3QmNvbnZlcnNpb25fdXJsJTdEXCIsJ2NvbnZlcnNpb25fdXJsPScrZW5jb2RlVVJJKGNvbnZVcmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uID0gbmV3TG9jYXRpb24ucmVwbGFjZShcIntwYXRoX3VybH1cIiwncGF0aF91cmw9JytlbmNvZGVVUkkoY29udlBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uID0gbmV3TG9jYXRpb24ucmVwbGFjZShcIiU3QnBhdGhfdXJsJTdEXCIsJ3BhdGhfdXJsPScrZW5jb2RlVVJJKGNvbnZQYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKG5ld0xvY2F0aW9uLCBcIl9ibGFua1wiKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuY2hvclRhZ1RhcmdldFByb3AgPT0gXCJfQkxBTktcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaHJlZkF0dHIsIFwiX2JsYW5rXCIpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWZBdHRyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0XHRpZihpZk1vYmlsZVBvcHRpbiAmJiBuZXdMb2NhdGlvbil7XG5cdFx0XHRcdFx0XHRzaG93TG9nKCdwb3B0aW5SZWRpcmVjdFRvVXJsMi4xIHRpbWVvdXQgaWZNb2JpbGVQb3B0aW4nKTtcblx0XHRcdFx0XHRcdGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuYXBwZW5kKCc8YSBpZD1cInBvcHRpbi1tb2ItcmVkaXJlY3Rpb24tJytwb3B0aW4ucG9wdGluX2lkKydcIiBocmVmPVwiJytuZXdMb2NhdGlvbisnXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48L2E+Jyk7XG5cdFx0XHRcdFx0XHQvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdGluLW1vYi1yZWRpcmVjdGlvbi0nK3BvcHRpbi5wb3B0aW5faWQpLmNsaWNrKCk7XG5cdFx0XHRcdFx0fVxuICAgICAgICAgICAgICAgICAgICAvL3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3TG9jYXRpb247XG4gICAgICAgICAgICAgICAgfSwgY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyAqIDEwMDAgKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGlmKGNsaWNrX3R5cGUgPT09IFwiZ2FtaWZpZWRcIil7XG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpblJlZGlyZWN0VG9VcmwyLjInKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlX3NjcmVlbl9zZWMgPSBwb3B0aW4ud2hlZWxfaGFzX2NvdXBvbiA/IGRlZmF1bHRfY2xvc2VfZGVsYXkgKiAzIDogZGVmYXVsdF9jbG9zZV9kZWxheTtcbiAgICAgICAgICAgICAgICAgICAgaWYoXG5cdFx0XHRcdFx0XHRwb3B0aW4uZ2FtaWZpZWRfcHJpemUgJiYgXG5cdFx0XHRcdFx0XHRwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG8gPT0gdHJ1ZSAmJiBcblx0XHRcdFx0XHRcdHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90b19vcHRpb25zLnJlZGlyZWN0X2Nsb3NlID09IHRydWUgJiYgXG5cdFx0XHRcdFx0XHRwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF9jbG9zZV9kZWxheSAhPSB1bmRlZmluZWRcblx0XHRcdFx0XHQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2Vfc2NyZWVuX3NlYyA9IHBhcnNlSW50KHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90b19vcHRpb25zLnJlZGlyZWN0X2Nsb3NlX2RlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF90b191cmw7XG4gICAgICAgICAgICAgICAgICAgIH0sIGNsb3NlX3NjcmVlbl9zZWMgKiAxMDAwICk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ3BvcHRpblJlZGlyZWN0VG9VcmwyLjMnKTtcblx0XHRcdFx0XHRsZXQgbmV3TG9jYXRpb24gPSBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnJlZGlyZWN0X3VybDtcblx0XHRcdFx0XHRpZihpZk1vYmlsZVBvcHRpbil7XG5cdFx0XHRcdFx0XHRzaG93TG9nKCdwb3B0aW5SZWRpcmVjdFRvVXJsMi4yIGlmTW9iaWxlUG9wdGluJyk7XG5cdFx0XHRcdFx0XHRqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmFwcGVuZCgnPGEgaWQ9XCJwb3B0aW4tbW9iLXJlZGlyZWN0aW9uLScrcG9wdGluLnBvcHRpbl9pZCsnXCIgaHJlZj1cIicrbmV3TG9jYXRpb24rJ1wiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+PC9hPicpO1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHRpbi1tb2ItcmVkaXJlY3Rpb24tJytwb3B0aW4ucG9wdGluX2lkKS5jbGljaygpO1xuXHRcdFx0XHRcdH1cbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdF9jYXNlX2FuY2hvclRhZ1RhcmdldFByb3AgJiYgZGlyZWN0X2Nhc2VfYW5jaG9yVGFnVGFyZ2V0UHJvcC50b0xvd2VyQ2FzZSgpID09PSAnX2JsYW5rJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihuZXdMb2NhdGlvbiwgXCJfYmxhbmtcIilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdMb2NhdGlvbjsgfSwyMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHBvcHRpblJlZGlyZWN0VG9VcmwoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiB1cmw6c3RyaW5nIHwgdXJsX2NvbnZlcnNpb25fcXVlcnk6IHN0cmluZ1xuICAgICAqIERlc2MgICAgICAgICAgICAgOiByZXR1cm4gbGluayB3aXRoIG9ubHkgb25lIFF1ZXN0aW9uIE1hcmtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmx5T25lUXVlc3Rpb25NYXJrKHVybCx1cmxfY29udmVyc2lvbl9xdWVyeSl7XG4gICAgICAgIG5ld19jb252ZXJzaW9uX3F1ZXJ5ID0gdXJsX2NvbnZlcnNpb25fcXVlcnk7XG4gICAgICAgIHNob3dMb2coXCJ1cmwuaW5kZXhPZignPycpXCIsIHVybC5pbmRleE9mKCc/JykpO1xuICAgICAgICBpZiAodXJsLmluZGV4T2YoJz8nKSAhPT0tMSl7XG4gICAgICAgICAgICBuZXdfY29udmVyc2lvbl9xdWVyeSA9ICh1cmxfY29udmVyc2lvbl9xdWVyeVswXT09Jz8nID8gJyYnK3VybF9jb252ZXJzaW9uX3F1ZXJ5LnNsaWNlKDEpIDogdXJsX2NvbnZlcnNpb25fcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwgKyBuZXdfY29udmVyc2lvbl9xdWVyeVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5Db252ZXJzaW9uKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBnZXQgY29udmVyc2lvbiBmaWVsZCBkYXRhIGFuZCBjb252ZXJ0IGl0IHRvIHVybCBxdWVyeVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBvcHRpbkNvbnZlcnNpb25GaWVsZHMocG9wdGluKXtcbiAgICAgICAgdmFyIHBvcHRpbl9maWVsZHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdmFyIHBvcHRpbl9maWVsZHNfdGVtcCA9IG5ldyBBcnJheSgpO1xuICAgICAgICB2YXIgZmllbGRfdHlwZV9hcnIgPSB7fTtcbiAgICAgICAgdmFyIGZpZWxkX3ZhbHVlID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGpRMjI0KCBcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluRm9ybVN1Ym1pdFwiK3BvcHRpbi5wb3B0aW5faWQrXCIgLnBvcHRpbi1kZXNpZ24tZmllbGRzLWZvcm1cIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIGZpZWxkX2tleSA9ICcnO1xuICAgICAgICAgICAgdmFyIHRoaXNfY291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIHRoaXNfdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgICAgIHZhciB0aGlzX2lkID0gdGhpcy5pZDtcbiAgICAgICAgICAgIHZhciB0aGlzX25hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgICAgICB2YXIgdGhpc19zaG9ydF9uYW1lID0gXCJcIjtcbiAgICAgICAgICAgIHZhciB0aGlzX3BsYWNlaG9sZGVyID0galEyMjQodGhpcykuYXR0cihcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgdmFyIHRoaXNfdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgaWYodHlwZW9mIGZpZWxkX3ZhbHVlW3RoaXNfbmFtZV0gPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICAgICAgZmllbGRfdmFsdWVbdGhpc19uYW1lXSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzaG93TG9nKHRoaXNfbmFtZSwgdGhpc190eXBlLCB0aGlzX3ZhbHVlLCB0aGlzX2lkLCB0aGlzLnRhZ05hbWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpc19uYW1lLmluZGV4T2YoJ3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkJykgPj0wKXtcbiAgICAgICAgICAgICAgICBmaWVsZF9rZXkgPSB0aGlzX25hbWUuc3BsaXQoJ3BvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkJylbMV07XG4gICAgICAgICAgICAgICAgaWYodGhpc19pZCA9PSBcInBvcHRpbkRlc2lnbklucHV0VGV4dEZpZWxkQ2hlY2tib3hcIil7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkX2tleSA9IFwiY29uc2VudFwiO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZF92YWx1ZVt0aGlzX25hbWVdID0gdGhpcy5jaGVja2VkID8gXCJ5ZXNcIiA6IFwibm9cIjtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRfa2V5ID0gZmllbGRfa2V5O1xuICAgICAgICAgICAgICAgICAgICBmaWVsZF92YWx1ZVt0aGlzX25hbWVdID0gdGhpc192YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc19jb3VudCA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXNfbmFtZS5pbmRleE9mKCdwb3B0aW5EZXNpZ25JbnB1dEZyZWVGaWVsZCcpID49MCl7XG4gICAgICAgICAgICAgICAgZmllbGRfa2V5ID0gdGhpc19uYW1lLnNwbGl0KCdwb3B0aW5EZXNpZ25JbnB1dCcpWzFdO1xuICAgICAgICAgICAgICAgIGZpZWxkX3ZhbHVlW3RoaXNfbmFtZV0gPSB0aGlzX3ZhbHVlLmluZGV4T2YoJz0mPWI6JykgPiAtMSA/IHRoaXNfdmFsdWUuc3BsaXQoJz0mPWI6JylbMV0gOiB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXNfY291bnQgPSBmaWVsZF90eXBlX2FycltmaWVsZF9rZXldID0gKGZpZWxkX3R5cGVfYXJyW2ZpZWxkX2tleV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzX25hbWUuaW5kZXhPZigncG9wdGluRGVzaWduUmFkaW9GaWVsZCcpID49MCB8fCB0aGlzX25hbWUuaW5kZXhPZigncG9wdGluRGVzaWduQ2hlY2tib3hGaWVsZCcpID49MCl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jaGVja2VkKXtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRfa2V5ID0gdGhpc19uYW1lO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZF92YWx1ZVt0aGlzX25hbWVdID0gdGhpc192YWx1ZS5pbmRleE9mKCc9Jj1iOicpID4gLTEgPyB0aGlzX3ZhbHVlLnNwbGl0KCc9Jj1iOicpWzFdIDogdGhpc192YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19jb3VudCA9IGZpZWxkX3R5cGVfYXJyW2ZpZWxkX2tleV0gPSAoZmllbGRfdHlwZV9hcnJbZmllbGRfa2V5XSB8fCAwKSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMudGFnTmFtZSA9PSBcIlNFTEVDVFwiKSB7O1xuICAgICAgICAgICAgICAgIGZpZWxkX2tleSA9IHRoaXNfcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgZmllbGRfdmFsdWVbdGhpc19uYW1lXSA9IHRoaXNfdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coXCJ0aGlzX2lkXCIsIHRoaXNfaWQpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXNfaWQuaW5jbHVkZXMoXCJwb3B0aW5EZXNpZ25JbnB1dEN1c3RvbUZpZWxkLUNVU1RPTV9cIikpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3Nob3J0X25hbWUgPSB0aGlzX2lkLnNwbGl0KFwicG9wdGluRGVzaWduSW5wdXRDdXN0b21GaWVsZC1DVVNUT01fXCIpWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzX2lkLmluY2x1ZGVzKFwicG9wdGluRGVzaWduUHJlZmVyZW5jZUZpZWxkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfbmFtZSA9IFwicG9wdGluRGVzaWduUHJlZmVyZW5jZUZpZWxkXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfc2hvcnRfbmFtZSA9IFwiUHJlZmVyZW5jZVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfc2hvcnRfbmFtZSA9IHRoaXNfcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpZWxkX2tleSA9IHRoaXNfbmFtZSA9PSB1bmRlZmluZWQgPyB0aGlzLnRhZ05hbWUgOiB0aGlzX25hbWU7XG4gICAgICAgICAgICAgICAgaWYodGhpc190eXBlID09IFwiY2hlY2tib3hcIil7XG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBmaWVsZF92YWx1ZVt0aGlzX25hbWVdID09IFwic3RyaW5nXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfdmFsdWVbdGhpc19uYW1lXSA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY2hlY2tlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF92YWx1ZVt0aGlzX25hbWVdLnB1c2godGhpc192YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpc190eXBlID09IFwicmFkaW9cIil7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY2hlY2tlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF92YWx1ZVt0aGlzX25hbWVdID0gdGhpc192YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkX3ZhbHVlW3RoaXNfbmFtZV0gPSB0aGlzX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzX2NvdW50ID0gZmllbGRfdHlwZV9hcnJbdGhpcy50eXBlXSA9IChmaWVsZF90eXBlX2Fyclt0aGlzLnR5cGVdIHx8IDApICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGpRMjI0KHRoaXMpLmF0dHIoXCJkYXRhLW11bHRpcGxlXCIpID09IFwidHJ1ZVwiKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRJbnB1dFBhcmVudCA9IGpRMjI0KHRoaXMpLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzTXVsdGlTZWxlY3RUZXh0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzTXVsdGlTZWxlY3RWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZElucHV0UGFyZW50LmZpbmQoJy5wb3B0aW4tbXVsdGktc2VsZWN0IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc011bHRpU2VsZWN0VGV4dHMucHVzaChqUTIyNCh0aGlzKS5wYXJlbnQoKS50ZXh0KCkudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc011bHRpU2VsZWN0VmFsdWVzLnB1c2goalEyMjQodGhpcykudmFsKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2codGhpc011bHRpU2VsZWN0VGV4dHMsIHRoaXNNdWx0aVNlbGVjdFZhbHVlcyk7XG4gICAgICAgICAgICAgICAgZmllbGRfdmFsdWVbdGhpc19uYW1lXSA9IHRoaXNNdWx0aVNlbGVjdFZhbHVlcy5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJmaWVsZF9rZXlcIiwgZmllbGRfa2V5LCBKU09OLnN0cmluZ2lmeShmaWVsZF92YWx1ZVt0aGlzX25hbWVdKSk7XG4gICAgICAgICAgICBmaWVsZF9rZXkgPSBmaWVsZF9rZXkgPyBmaWVsZF9rZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJ18nKS5yZXBsYWNlKC9fKy9nLCAnXycpLnJlcGxhY2UoL15fK3xfKyQvZywgJycpIDogXCJcIjtcbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJmaWVsZF9rZXlcIiwgZmllbGRfa2V5LCBKU09OLnN0cmluZ2lmeShmaWVsZF92YWx1ZVt0aGlzX25hbWVdKSk7XG4gICAgICAgICAgICBpZiAoZmllbGRfa2V5ICE9PSAnJyAmJiBmaWVsZF92YWx1ZVt0aGlzX25hbWVdICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgZmllbGRfdmFsdWVbdGhpc19uYW1lXSA9IGZpZWxkX3ZhbHVlW3RoaXNfbmFtZV0gPT09ICcnID8gZmllbGRfdmFsdWVbdGhpc19uYW1lXSA6IGZpZWxkX3ZhbHVlW3RoaXNfbmFtZV07XG4gICAgICAgICAgICAgICAgcG9wdGluX2ZpZWxkc190ZW1wW2ZpZWxkX2tleV0gPSBwb3B0aW5fZmllbGRzX3RlbXBbZmllbGRfa2V5XSA/IHBvcHRpbl9maWVsZHNfdGVtcFtmaWVsZF9rZXldIDogbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgICAgaWYodGhpc19uYW1lLmluZGV4T2YoJ3BvcHRpbkRlc2lnblNlbGVjdEZpZWxkJykgPiAtMSl7IHRoaXNfdHlwZSA9ICdzZWxlY3QnOyB9XG4gICAgICAgICAgICAgICAgaWYodGhpc19uYW1lLmluZGV4T2YoJ3BvcHRpbkRlc2lnbldlYnNpdGVGaWVsZCcpID4gLTEpeyB0aGlzX3R5cGUgPSAndXJsJzsgfVxuICAgICAgICAgICAgICAgIHBvcHRpbl9maWVsZHNfdGVtcFtmaWVsZF9rZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAnY291bnQnOnRoaXNfY291bnQsXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzp0aGlzX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6dGhpc19pZCxcbiAgICAgICAgICAgICAgICAgICAgXCJmaWVsZF9rZXlcIjpmaWVsZF9rZXksXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOnRoaXNfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6dGhpc19uYW1lLFxuICAgICAgICAgICAgICAgICAgICBcInNob3J0X25hbWVcIjp0aGlzX3Nob3J0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjp0aGlzX3BsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6ZmllbGRfdmFsdWVbdGhpc19uYW1lXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gc2hvd0xvZyhcInBvcHRpbl9maWVsZHNfdGVtcFwiLCBKU09OLnN0cmluZ2lmeShwb3B0aW5fZmllbGRzX3RlbXApKTtcblxuICAgICAgICBmb3IgKHZhciBmaWVsZF9rZXkgaW4gcG9wdGluX2ZpZWxkc190ZW1wKSB7XG4gICAgICAgICAgICBpZiAoIXBvcHRpbl9maWVsZHNfdGVtcC5oYXNPd25Qcm9wZXJ0eShmaWVsZF9rZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZV9vYmogPSBwb3B0aW5fZmllbGRzX3RlbXBbZmllbGRfa2V5XTtcbiAgICAgICAgICAgIC8vIHNob3dMb2coZmllbGRfa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZV9vYmopKTtcbiAgICAgICAgICAgIGlmKGZpZWxkX2tleS5pbmRleE9mKCdwb3B0aW5kZXNpZ24nKSA+IC0xKXtcbiAgICAgICAgICAgICAgICBpZih2YWx1ZV9vYmouc2hvcnRfbmFtZSAmJiB2YWx1ZV9vYmouc2hvcnRfbmFtZSAhPSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRfa2V5ID0gdmFsdWVfb2JqLnNob3J0X25hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZF9rZXkgPSB2YWx1ZV9vYmoudHlwZSsnXycrdmFsdWVfb2JqLmNvdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcHRpbl9maWVsZHMucHVzaChlbmNvZGVVUkkoZmllbGRfa2V5KSsnPScrZW5jb2RlVVJJKHZhbHVlX29iai52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNob3dMb2coXCJwb3B0aW5fZmllbGRzXCIsIEpTT04uc3RyaW5naWZ5KHBvcHRpbl9maWVsZHMpKTtcblxuICAgICAgICBxdWVyeV9maWVsZHMgPSBwb3B0aW5fZmllbGRzLmxlbmd0aCA+IDAgPyAnPycgKyBwb3B0aW5fZmllbGRzLmpvaW4oJyYnKSA6ICcnO1xuICAgICAgICAvLyBzaG93TG9nKHF1ZXJ5X2ZpZWxkcyk7XG5cbiAgICAgICAgcmV0dXJuIHF1ZXJ5X2ZpZWxkcztcbiAgICB9XG5cbiAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzdWJtaXRQb3B0aW4oKSwgcG9wdGluQ29udmVyc2lvbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSGFuZGxlIHBvcHRpbiBhZnRlciBzdWJtaXQgZXZlbnRcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmVkaXJlY3QsIFRoYW5rIHNjcmVlbiwgQXV0byBjbG9zZSBldGMuLi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlclBvcHRpblN1Ym1pdChwb3B0aW4sY2xpY2spe1xuXG5cdFx0dmFyIGNsb3NlVGhhbmtTY3JlZW5TZWMgPSAwO1xuXG4gICAgICAgIHNob3dMb2coJ2FmdGVyUG9wdGluU3VibWl0OiAnK3BvcHRpbi5wb3B0aW5faWQpO1xuXG5cdFx0alEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIikuZmluZCgnYXVkaW8sIHZpZGVvJykucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYoalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYXR0cihcImRhdGEtcmVkaXJlY3QtcG9wdGluXCIpICE9ICdzaG9waWZ5Jyl7XG4gICAgICAgICAgICAvLyBJZiByZWRpcmVjdCB2aXNpdG9yIGlzICdvbidcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fcmVkaXJlY3QgIT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgIC8vIGlmIHZpc2l0b3IgaXMgbW9iaWxlXG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcIm1vYmlsZVwiICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3JlZGlyZWN0X3VybC5tYXRjaCgvXlswLTkqKy1dKyQvKSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RfcGhvbmUgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9yZWRpcmVjdF91cmw7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfdXJsID0gKHJlZGlyZWN0X3Bob25lLm1hdGNoKFwiXnRlbDpcIikgPyByZWRpcmVjdF9waG9uZSA6ICd0ZWw6JytyZWRpcmVjdF9waG9uZSk7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgIT0gXCJzb2NpYWxfZm9ybWF0XzJcIiAmJiBwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ICE9IFwic29jaWFsX2Zvcm1hdF82XCIgJiYgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSBcInNzaWRlX2Zvcm1hdF8xOVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJsID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fcmVkaXJlY3RfdXJsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3RfdXJsLm1hdGNoKFwiXnRlbDpcIikgfHwgcmVkaXJlY3RfdXJsLm1hdGNoKFwiXnNtczpcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF91cmwgPSByZWRpcmVjdF91cmw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfdXJsID0gKCghL15odHRwcz86XFwvXFwvL2kudGVzdChyZWRpcmVjdF91cmwpKSA/ICdodHRwOi8vJytyZWRpcmVjdF91cmwgOiByZWRpcmVjdF91cmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucmVkaXJlY3RfZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3JlZGlyZWN0VG9Qb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSWYgVGhhbmsgc2NyZWVuIGlzICdvbidcblx0XHRpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBJZiBhdXRvIGNsb3NlIHRoYW5rIHNjcmVlbiBpcyBkZWZpbmVkXG4gICAgICAgICAgICBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuX2F1dG9fY2xvc2UgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9ICggcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuX2F1dG9fY2xvc2Vfc2VjICE9ICB1bmRlZmluZWQgPyBwYXJzZUludChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl90aGFua19zY3JlZW5fYXV0b19jbG9zZV9zZWMpIDogNSk7XG5cdFx0XHRcdH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlVGhhbmtTY3JlZW5TZWMgPSAoIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlX3NlYyAhPSAgdW5kZWZpbmVkID8gcGFyc2VJbnQocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuX2F1dG9fY2xvc2Vfc2VjKSA6IDUpO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9IDYwO1xuXHRcdFx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVRoYW5rU2NyZWVuU2VjID0gNjAwO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBwb3B0aW4gdGhhbmsgc2NyZWVuIHZpZXdcbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJmdWxscGFnZVwiKXtcbiAgICAgICAgICAgICAgICB2YXIgb2xkX2J0bl9sZWZ0ID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gPiAjY2xvc2VYQnV0dG9uXCIpLmNzcyhcImxlZnRcIik7XG4gICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gPiAjY2xvc2VYQnV0dG9uXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHZhciB0aGFua195b3VfYnV0dG9uX2Nsb3NlX2J0biA9IGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fdGhhbmtfeW91X3NjcmVlbiAjY2xvc2VYQnV0dG9uXCIpLmdldCgwKS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuICNjbG9zZVhCdXR0b25cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikucHJlcGVuZCh0aGFua195b3VfYnV0dG9uX2Nsb3NlX2J0bik7XG5cbiAgICAgICAgICAgICAgICBqUTIyNCgnI2Nsb3NlWEJ1dHRvbiwgI2Nsb3NlU2tpcEJ1dHRvbicpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JpZ2h0JzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IG9sZF9idG5fbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgJ21hcmdpbic6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIC8vU2V0IHRoYW5reW91IHNjcmVlbiBidXR0b24gXG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKS5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLmZpbmQoJy5kcmFnZ2FibGUuaW1hZ2UtY2hhbmdlLXZpZGVvJykucmVtb3ZlKCk7XG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKVwiKS5yZW1vdmVDbGFzcygncG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdib3gtc2hhZG93JywnJyk7XG4gICAgICAgICAgICAvL2pRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fdGhhbmtfeW91X3NjcmVlblwiKS5jc3MoXCJmb250LWZhbWlseVwiLFwiT3BlbiBTYW5zIEhlYnJld1wiKS5mYWRlSW4oJ2Zhc3QnKTtcbiAgICAgICAgICAgIC8valEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuXCIpLmZhZGVJbignZmFzdCcpO1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuXCIpLmFkZENsYXNzKFwicG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW4gYW5pbWF0ZV9fZmFzdGVyXCIpO1xuICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmNsb3NlLXgtYnV0dG9uXCIpLnNob3coMTAwKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fdGhhbmtfeW91X3NjcmVlblwiKS5yZW1vdmVDbGFzcygncG9wdGluX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW4gYW5pbWF0ZV9fZmFzdGVyJyk7XG4gICAgICAgICAgICB9LDgwMCk7XG4gICAgICAgICAgICBpZiggcG9wdGluLnBvcHRpbl90eXBlIGluIGZyX3RlbXBsYXRlcyAmJiBmcl90ZW1wbGF0ZXNbcG9wdGluLnBvcHRpbl90eXBlXSA+PSBwYXJzZUludChwb3B0aW4ucG9wdGluX2Zvcm1hdC5zcGxpdCgnXycpWzFdKSApe1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHRpbk9uWGNsaWNrKGpRMjI0KHRoaXMpLmdldCgwKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cblxuXHRcdFx0YXV0b3BsYXlBdHRyU3dpdGNoKFwiZGF0YS1hdXRvcGxheVwiLCBcImF1dG9wbGF5XCIsIFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdICNwb3B0aW5UaGFua1lvdVNjcmVlblwiKTtcblxuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImZ1bGxwYWdlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChpZlNjcm9sbFZpc2libGUoKSl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSAuY2xvc2UteC1idXR0b25cIikuY3NzKHsncGFkZGluZy1yaWdodCc6JzI1cHgnfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgbW91c2VlbnRlciAvIG1vdXNlbGVhdmUgZXZlbnRzXG4gICAgICAgICAgICBpZiAocGFyc2VJbnQocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb25fc2NyZWVuX2NsaWNrKSl7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLm9uKFwibW91c2VlbnRlclwiLGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGljayA9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIpe3BvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXI9e319XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLnBvcHRpbl9hcmVhX2ZsYWdfc3VibWl0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fYXJlYV9mbGFnX3N1Ym1pdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5vbihcIm1vdXNlbGVhdmVcIixmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyKXtwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyPXt9fVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5wb3B0aW5fYXJlYV9mbGFnX3N1Ym1pdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl9hcmVhX2ZsYWdfc3VibWl0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgZXZlbnQgZm9yIGxpZ2h0Ym94IHBvcHRpblxuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiKXtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFqUTIyNChlLnRhcmdldCkuY2xvc2VzdChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoY2xpY2sgPT0gdW5kZWZpbmVkID8gIXBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIucG9wdGluX2FyZWFfZmxhZ19zdWJtaXQgOiAhcG9wdGluX2FyZWFfZmxhZ19zdWJtaXQgKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZygnY2xvc2UgcG9wdGluJytwb3B0aW4ucG9wdGluX2lkKycgcG9wdGluX2Rlc2lnbl9jbG9zZV9vbl9zY3JlZW5fY2xpY2szJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLmNsb3NlX3RyaWdnZXIgPSBcImJnX2NsaWNrXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHRpbihwb3B0aW4ucG9wdGluX2lkLGZhbHNlLHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiggcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuID09IHVuZGVmaW5lZCAmJiBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiICl7XG5cdFx0XHRpZihcblx0XHRcdFx0KChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8xXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfM1wiKSAmJiBwb3B0aW4uZ2FtaWZpZWRfcHJpemUpIHx8XG5cdFx0XHRcdChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIgJiYgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbilcblx0XHRcdCl7XG4gICAgICAgICAgICAgICAgLy8gQXV0byBDbG9zZVxuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4uZ2FtaWZpZWRfcHJpemUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvICYmIHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90byA9PSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2Vfc2NyZWVuX3NlYyA9ICggcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfY2xvc2VfZGVsYXkgIT0gIHVuZGVmaW5lZCA/IHBhcnNlSW50KHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90b19vcHRpb25zLnJlZGlyZWN0X2Nsb3NlX2RlbGF5KSA6IDEpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVNjcmVlblNlYyA9ICggcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfY2xvc2VfZGVsYXkgIT0gIHVuZGVmaW5lZCA/IHBhcnNlSW50KHBvcHRpbi5nYW1pZmllZF9wcml6ZS5yZWRpcmVjdF90b19vcHRpb25zLnJlZGlyZWN0X2Nsb3NlX2RlbGF5KSA6IDEpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV9zY3JlZW5fc2VjID0gNjA7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlU2NyZWVuU2VjID0gNjAwO1xuICAgICAgICAgICAgICAgIH1cblxuXHRcdFx0XHR2YXIgdGltZW91dCA9IDA7XG5cdFx0XHRcdGlmKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5kaXNhYmxlX3Bvc3RfcGxheV9zY3JlZW4pe1xuXHRcdFx0XHRcdHRpbWVvdXQgPSA4MDAwO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuXHQgICAgICAgICAgICAgICAgLy8gaGlkZSBwb3N0IHBsYXkgc2NyZWVuIHZpZXdcblx0ICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fcGxheV9zY3JlZW5cIikuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKTtcblx0ICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fcGxheV9zY3JlZW5cIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcblx0ICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmNzcygnYm94LXNoYWRvdycsJycpO1xuXG5cdCAgICAgICAgICAgICAgICBpZihwb3B0aW4uZ2FtaWZpZWRfcHJpemUuaXNfd2lubmVyID09IHRydWUpeyAgXG5cdCAgICAgICAgICAgICAgICAgICAgc2hvd193aW5uaW5nX3NjcmVlbihwb3B0aW4pO1xuXHQgICAgICAgICAgICAgICAgfWVsc2V7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBsb3Npbmcgc2NyZWVuXG5cdCAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9sb3Npbmdfc2NyZWVuXCIpLmFkZENsYXNzKFwicG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW4gYW5pbWF0ZV9fZmFzdGVyXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9sb3Npbmdfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXInKTtcblx0ICAgICAgICAgICAgICAgICAgICB9LDgwMCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFx0XHRcdH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG5cdFx0XHQvLyBoaWRlIHBvc3QgcGxheSBzY3JlZW4gdmlld1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzJcIikge1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fcGxheV9zY3JlZW5cIikuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW4tdmlzaWJsZSBwb3B0aW5fX2FuaW1hdGVkJyk7XG4gICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl93aW5uaW5nX3NjcmVlblwiKS5hZGRDbGFzcyhcInBvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzZXRBY2Nlc3NpYmlsaXR5VGhhbmtBZnRlclN1Ym1pdChwb3B0aW4pO1xuICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA9IGlmVXNlcmxhbmdJc0hlKCkgJiYgcG9wdGluLnBvcHRpbl90YXJnZXQgIT0nY2xpY2snID8gMiA6IDAuMTtcblx0XHRcdH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvc2VUaGFua1NjcmVlblNlYyA9IGlmVXNlcmxhbmdJc0hlKCkgJiYgcG9wdGluLnBvcHRpbl90YXJnZXQgIT0nY2xpY2snID8gMiA6IDE7XG5cdFx0XHR9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgY2xvc2UgcG9wdGluIHRpbWVyXG4gICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQgIT0gXCJmb3JtYXRfMlwiICYmIHBvcHRpbi5nYW1pZmllZF9wcml6ZSl7XG5cdFx0XHR2YXIgY2xvc2Vfc2NyZWVuX3NlYyA9IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2Vfc2NyZWVuX3NlYztcblx0XHRcdGNsb3NlX3NjcmVlbl9zZWMgPSBjbGljayA9PSB1bmRlZmluZWQgJiYgY2xvc2Vfc2NyZWVuX3NlYyAhPSB1bmRlZmluZWQgPyBjbG9zZV9zY3JlZW5fc2VjIDogY2xvc2VTY3JlZW5TZWM7XG5cdFx0XHRjbG9zZV9zY3JlZW5fc2VjID0gY2xvc2Vfc2NyZWVuX3NlYyA/IGNsb3NlX3NjcmVlbl9zZWMgOiAocG9wdGluLndoZWVsX2hhc19jb3Vwb24gPyBkZWZhdWx0X2Nsb3NlX2RlbGF5ICogMyA6IGRlZmF1bHRfY2xvc2VfZGVsYXkpO1xuXHRcdFx0aWYoICEocG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvID09IHRydWUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfdG9fdXJsICE9IHVuZGVmaW5lZCkgKXtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLmNsb3NlX3RyaWdnZXIgPSBcInN1Ym1pdFwiO1xuXHRcdFx0XHRcdGNsb3NlUG9wdGluKHBvcHRpbi5wb3B0aW5faWQpO1xuXHRcdFx0XHR9LCBjbG9zZV9zY3JlZW5fc2VjICogMTAwMCk7XG5cdFx0XHR9XG4gICAgICAgIH1lbHNlIGlmIChcblx0XHRcdChwb3B0aW4ucG9wdGluX3R5cGUgIT09IFwiZ2FtaWZpZWRcIiB8fCAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIiAmJiBwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPT0gXCJmb3JtYXRfMlwiKSlcblx0XHRcdC8vIEV2ZXJ5dGhpbmcgd29ya3MgZmluZSB3aXRob3V0IHRoaXMgYXMgd2VsbFxuXHRcdFx0Ly8gJiYgKCFwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuICYmIHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09IFwiZm9ybWF0XzNcIilcblx0XHQpIHtcbiAgICAgICAgICAgIGlmKHBvcHRpbj8uZGVzaWduX3Byb3BlcnRpZXM/LnBvcHRpbl9kZXNpZ25fdGhhbmtfc2NyZWVuICYmICFwb3B0aW4/LmRlc2lnbl9wcm9wZXJ0aWVzPy5wb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlKXtcbiAgICAgICAgICAgICAgICAvL0RvIE5vdGhpbmdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci5jbG9zZV90cmlnZ2VyID0gXCJzdWJtaXRcIjtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW4ocG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgICAgICAgICAgfSwgKGNsaWNrID09IHVuZGVmaW5lZCA/IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY2xvc2VfdGhhbmtfc2NyZWVuX3NlYyA6IGNsb3NlVGhhbmtTY3JlZW5TZWMgKSoxMDAwKTtcbiAgICAgICAgICAgIH1cdFx0XHRcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzaG93X3dpbm5pbmdfc2NyZWVuKHBvcHRpbil7XG4gICAgICAgIC8vUmVwbGFjZSBQcml6ZSBMYWJlbHMgJiBDb2Rlc1xuICAgICAgICB2YXIgd2lubmVyU2NyZWVuQ29udGFpbmVyID0galEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl93aW5uaW5nX3NjcmVlbiBwXCIpO1xuICAgICAgICB3aW5uZXJTY3JlZW5Db250YWluZXIuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0galEyMjQodGhpcykuaHRtbCgpO1xuICAgICAgICAgICAgaWYodGV4dC5pbmRleE9mKFwie3twcml6ZV9sYWJlbH19XCIpICE9IC0xICYmIHBvcHRpbi5nYW1pZmllZF9wcml6ZS5sYWJlbCl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykuaHRtbCh0ZXh0LnJlcGxhY2UoXCJ7e3ByaXplX2xhYmVsfX1cIiwgcG9wdGluLmdhbWlmaWVkX3ByaXplLmxhYmVsICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRleHQgPSBqUTIyNCh0aGlzKS5odG1sKCk7XG4gICAgICAgICAgICBpZih0ZXh0LmluZGV4T2YoXCJ7e3ByaXplX2NvZGV9fVwiKSAhPSAtMSAmJiBwb3B0aW4uZ2FtaWZpZWRfcHJpemUuY29kZSl7XG4gICAgICAgICAgICAgICAgalEyMjQodGhpcykuaHRtbCh0ZXh0LnJlcGxhY2UoXCJ7e3ByaXplX2NvZGV9fVwiLCBwb3B0aW4uZ2FtaWZpZWRfcHJpemUuY29kZSApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2hvdyB3aW5uaW5nIHNjcmVlblxuICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3dpbm5pbmdfc2NyZWVuXCIpLmFkZENsYXNzKFwicG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW4gYW5pbWF0ZV9fZmFzdGVyXCIpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3dpbm5pbmdfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXInKTtcbiAgICAgICAgfSw4MDApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGFmdGVyUG9wdGluU3VibWl0KClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBUcmlnZ2VyIG5ldyBwb3B1cFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZGlyZWN0VG9Qb3B0aW4ocG9wdGluKXtcblxuICAgICAgICBzaG93TG9nKCdyZWRpcmVjdFRvUG9wdGluJyk7XG4gICAgICAgIC8vIFNldCBnbG9iYWwgcG9wdGluIGNvbnRhaW5lclxuICAgICAgICBpZihwb3B0aW4ucmVkaXJlY3RGcm9tQnRucyl7XG4gICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5fZnJvbV0ucmVkaXJlY3RfZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAkaHJlZiA9IGFwaV9saW5rKycvYXBpL2Rpc3BsYXkvY2xpY2svJytwb3B0aW4ucG9wdGluX3RvO1xuICAgICAgICAgICAgaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCRocmVmLGZhbHNlLHRydWUpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdmFyIF90aGlzID0galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJyk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4nKSA9PSBcInRydWVcIiAmJiBfdGhpcy5hdHRyKCdkYXRhLXJlZGlyZWN0LXBvcHRpbi1pZCcpLmxlbmd0aCA9PSAxMyl7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdyZWRpcmVjdFRvUG9wdGluMicpXG4gICAgICAgICAgICAgICAgJGhyZWYgPSBhcGlfbGluaysnL2FwaS9kaXNwbGF5L2NsaWNrLycrX3RoaXMuYXR0cignZGF0YS1yZWRpcmVjdC1wb3B0aW4taWQnKVxuICAgICAgICAgICAgICAgIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljaygkaHJlZixmYWxzZSx0cnVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluQ29udmVyc2lvbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSGFuZGxlIHByb2Nlc3NlcyBhZnRlciBwb3B0aW4gY29udmVyc2lvblxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBzZXQgY29udmVyc2lvbiBjb29raWVcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogaW5qZWN0IGNvbnZlcnNpb24gY29kZSBzY3JpcHQgbGlrZSBnb29nbGUgLyBmYWNlYm9va1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNvbnZlcnNpb25TdWNjZXNzKHBvcHRpbiwgcmVzcG9uc2UsIGNvdW50X2NvbnZlcnNpb24gPSBmYWxzZSl7XG5cbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgIT0gJ3NvY2lhbF9mb3JtYXRfMicgJiYgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSBcInNvY2lhbF9mb3JtYXRfNlwiICYmIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgIT0gXCJzc2lkZV9mb3JtYXRfMTlcIil7XG4gICAgICAgICAgICAvL1NldCBDb29raWVzXG4gICAgICAgICAgICBjb252ZXJzaW9uX2lkID0gcmVzcG9uc2UuY29udmVyc2lvbl9pZDtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX2NvbnZlcnNpb25fJytwb3B0aW4ucG9wdGluX2lkLCBjb252ZXJzaW9uX2lkLCAzNjUpO1xuICAgICAgICB9XG4gICAgICAgIC8vQXBwZW5kIGNvbnZlcnNpb24gQ29kZSBUbyBIZWFkXG4gICAgICAgIGlmIChyZXNwb25zZS5pbnRlZ3JhdGlvbi5jb252ZXJzaW9uX2NvZGUgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBqUTIyNChyZXNwb25zZS5pbnRlZ3JhdGlvbi5jb252ZXJzaW9uX2NvZGUpLmVhY2goZnVuY3Rpb24oJGluZGV4LHZhbHVlKXtcbiAgICAgICAgICAgICAgICBqUTIyNCgnaGVhZCcpLmFwcGVuZCh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdiaXUuYWMuaWwnKSA+IC0xICYmIHBvcHRpbi5wb3B0aW5fdGFyZ2V0PT1cImxlYWRcIil7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFwcF9saW5rK1wiL2ludGVncmF0aW9ucy9iYXJpbGFuL1wiK3Jlc3BvbnNlLmNvbnZlcnNpb25faWQrXCIvXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWRpcmVjdFRvQmxhbmtQYWdlXG4gICAgICAgIGlmKCFjb3VudF9jb252ZXJzaW9uKSB7XG4gICAgICAgICAgICBpZiAoIHBvcHRpbi5wb3B0aW5fdHlwZSsnXycrcG9wdGluLnBvcHRpbl9mb3JtYXQgIT0gJ2dhbWlmaWVkX2Zvcm1hdF8zJyApIHtcbiAgICAgICAgICAgICAgICBpZkxpbmtDb252ZXJzaW9uKHBvcHRpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2hvd1BvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogQWpheCBjYWxsIHdpdGggdmlzaXRvciBkYXRhXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFBvcHRpbiBpcyB2aWV3ZWQgaW4gdGhpcyBzdGFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBvcHRpblZpZXdlZChwb3B0aW4pe1xuICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9pZCA9PT0gcHJldmlld1BvcHRpbklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW5WaWV3ZWQ6ICcrcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgIC8vIFNldCBjb29raWVzXG4gICAgICAgIHNldE9uY2VBRGF5Q29va2llKHBvcHRpbik7XG4gICAgICAgIHNldFBvcHRpblZpZXdlZFNlc3Npb24ocG9wdGluKTtcbiAgICAgICAgc2V0UG9wdGluVmlld2VkVXJsKHBvcHRpbik7XG4gICAgICAgIHNldE9uY2VBVmlzaXQocG9wdGluKTtcbiAgICAgICAgc2V0QUJUZXN0U2Vzc2lvbihwb3B0aW4pO1xuXG4gICAgICAgIFxuXG5cbiAgICAgICAgLy8gZ2V0IEF1dG8gcGlsb3QgdHJpZ2dlciBpZiBzZXRcbiAgICAgICAgdHJpZ2dlciA9IHBvcHRpbi5hdXRvX3BpbG90X3RyaWdnZXIgPT0gdW5kZWZpbmVkID8gJ2ZhbHNlJyA6IHBvcHRpbi5hdXRvX3BpbG90X3RyaWdnZXI7XG4gICAgICAgIHR5cGUgICAgPSBpZk1vYmlsZVBvcHRpbiA/ICdtb2JpbGUnIDogJ2Rlc2t0b3AnO1xuICAgICAgICBsYW5kaW5nX3BhZ2UgID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgICB2aWV3ZXJfaWQ6IHBvcHRpbi52aWV3ZXJfaWQsXG4gICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgY2xpZW50X2lkOiBnZXRDbGllbnRJZCgpLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHVybDogbGFuZGluZ19wYWdlLFxuICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb246IHN0b3JlX2ludGVncmF0aW9uLFxuICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQ6IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkLFxuICAgICAgICAgICAgY29udmVydGVkX2VtYWlsOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX2NvbnZlcnRlZF9lbWFpbCcpXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBBamF4IGNhbGxcbiAgICAgICAgalEyMjQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IGAke2FwaV9saW5rfS9hcGkvZGlzcGxheS92aWV3ZWQvJHtwb3B0aW4ucG9wdGluX2lkfT8ke3VybFBhcmFtcy50b1N0cmluZygpfWAsXG4gICAgICAgICAgICBhc3luYzp0cnVlLFxuICAgICAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgdHlwZTonZ2V0JyxcbiAgICAgICAgfSwgXCJqc29uXCIpXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIC8vc2V0dGluZyBwb3B0aSB2aWV3IGlkXG4gICAgICAgICAgICBwb3B0aW5WaWV3ZEFycltwb3B0aW4ucG9wdGluX2lkXSA9IHsncG9wdGluX3ZpZXdfaWQnIDogZGF0YS5wb3B0aW5fdmlld19pZH1cblxuICAgICAgICAgICAgc2hvd0xvZyhkYXRhKTtcblx0XHRcdGNvbnN0IG9uUG9wdGluVmlzaWJsZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwicG9wdGluVmlld1wiLCB7YnViYmxlczogdHJ1ZSwgZGV0YWlsOiBwb3B0aW5FdmVudERldGFpbHMocG9wdGluLCB7XCJldmVudF9uYW1lXCIgOiBcInBvcHRpblZpZXdcIn0pfSk7XG5cdFx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG9uUG9wdGluVmlzaWJsZUV2ZW50KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICAvL21vbml0b3JFcnJvcigncG9wdGluVmlld2VkKCktPmVycm9yKCknLGVycm9yLHN0YXR1cyx4aHIucmVzcG9uc2VUZXh0LHBvcHRpbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGdldFBvcHRpblBvc2l0aW9uKCksIGFwcGVuZFBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogR2V0IHdpZHRoIGFuZCBoZWlnaHQgb2YgcG9wdGluIGZyb20gSFRNTCBiYXNlZCBvbiB0aGUgZGF0YSBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RGF0YVdpZHRoSGVpZ2h0KHBvcHRpbil7XG4gICAgICAgIHBvcHRpbiA9IHR5cGVvZiBwb3B0aW4gPT0gXCJzdHJpbmdcIiA/IHBvcHRpbiA6IHBvcHRpbi5wb3B0aW47XG4gICAgICAgIHBvcHRpbiA9IHBvcHRpbi50cmltKCk7XG4gICAgICAgIHZhciB0aGlzX3BvcHRpbl93aWR0aCwgdGhpc19wb3B0aW5faGVpZ2h0O1xuICAgIFxuICAgICAgICB2YXIgZGF0YV93aWR0aCA9IHBhcnNlSW50KGpRMjI0KHBvcHRpbikuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5hdHRyKCdkYXRhLXdpZHRoJykpO1xuICAgICAgICB2YXIgZGF0YV9oZWlnaHQgPSBwYXJzZUludChqUTIyNChwb3B0aW4pLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpJykuYXR0cignZGF0YS1oZWlnaHQnKSk7XG4gICAgICAgIC8vIHNob3dMb2coJ3NldFBvcHRpblNpemUnLCBkYXRhX3dpZHRoLCBkYXRhX2hlaWdodCk7XG5cbiAgICAgICAgaWYoIWlzTmFOKGRhdGFfd2lkdGgpICYmIGRhdGFfd2lkdGggIT0gdW5kZWZpbmVkICYmIGRhdGFfd2lkdGggIT0gJycgJiYgZGF0YV93aWR0aCAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gZGF0YV93aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZighaXNOYU4oZGF0YV9oZWlnaHQpICYmIGRhdGFfaGVpZ2h0ICE9IHVuZGVmaW5lZCAmJiBkYXRhX2hlaWdodCAhPSAnJyAmJiBkYXRhX2hlaWdodCAhPSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IGRhdGFfaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7ICd3aWR0aCcgOiB0aGlzX3BvcHRpbl93aWR0aCwgJ2hlaWdodCcgOiB0aGlzX3BvcHRpbl9oZWlnaHQgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSGFuZGxlIHBvcHRpbiBjZW50ZXIgcG9zdGlvbiBpbiB0aGUgc2NyZWVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UG9wdGluUG9zaXRpb24ocG9wdGluLCBjbGljayl7XG5cbiAgICAgICAgLy8gc2hvd0xvZygnZ2V0UG9wdGluU2l6ZTIgcG9wdGluaWQ6ICcrcG9wdGluLnBvcHRpbl9pZCk7XG4gICAgICAgIC8vIHNob3dMb2coJ3BvcHRpbiBkYXRhJywgcG9wdGluKTtcblxuICAgICAgICB2YXIgcG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0ID0gZ2V0RGF0YVdpZHRoSGVpZ2h0KHBvcHRpbi5wb3B0aW4pO1xuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW4gZGF0YSBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHQnLCBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHQpO1xuXG4gICAgICAgIHZhciB0aGlzX3BvcHRpbl93aWR0aCA9IHBvcHRpbl9kYXRhX3dpZHRoX2hlaWdodFsnd2lkdGgnXTtcbiAgICAgICAgdmFyIHRoaXNfcG9wdGluX2hlaWdodCA9IHBvcHRpbl9kYXRhX3dpZHRoX2hlaWdodFsnaGVpZ2h0J107XG5cbiAgICAgICAgaWYoICF0aGlzX3BvcHRpbl93aWR0aCB8fCAhdGhpc19wb3B0aW5faGVpZ2h0IHx8IGlzTmFOKHRoaXNfcG9wdGluX3dpZHRoKSB8fCBpc05hTih0aGlzX3BvcHRpbl9oZWlnaHQpICl7XG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibGlnaHRib3hcIil7XG4gICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBsaXRnaHRib3hfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIil7XG4gICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBiYXJfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IGJhcl9wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF8yJyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzMnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNycgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF84Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgYmFyX3BvcHRpbl9oZWlnaHRfMjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF85Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgYmFyX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNScgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF8xMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IGJhcl9wb3B0aW5faGVpZ2h0XzU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcInNzaWRlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xJyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF81Jyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgc3NpZGVfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgc3NpZGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOCcpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IHNzaWRlX3BvcHRpbl93aWR0aF80O1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgc3NpZGVfcG9wdGluX2hlaWdodF80O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xOScpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IHNzaWRlX3BvcHRpbl93aWR0aF8xOTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IHNzaWRlX3BvcHRpbl9oZWlnaHRfMTk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgc3NpZGVfcG9wdGluX3dpZHRoXzI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBzc2lkZV9wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJic2lkZVwiKXtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IGJzaWRlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgYnNpZGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJicm93c2luZ1wiKXtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IGJyb3dzaW5nX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgYnJvd3NpbmdfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJmdWxscGFnZVwiKXtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IFwiMTAwJVwiOyAvL2Z1bGxwYWdlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgXCIxMDAlXCI7IC8vZnVsbHBhZ2VfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOCcpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IGZ1bGxwYWdlX3BvcHRpbl93aWR0aF8yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgZnVsbHBhZ2VfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzb2NpYWxcIil7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBzb2NpYWxfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgc29jaWFsX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzInIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzYnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBzb2NpYWxfcG9wdGluX3dpZHRoXzI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBzb2NpYWxfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF84Jyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgc29jaWFsX3BvcHRpbl93aWR0aF80O1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgc29jaWFsX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIpe1xuICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgbW9iaWxlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgbW9iaWxlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzMnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzgnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBtb2JpbGVfcG9wdGluX3dpZHRoXzI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBtb2JpbGVfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF80JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF85Jyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBtb2JpbGVfcG9wdGluX2hlaWdodF80O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF81JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xMCcpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgbW9iaWxlX3BvcHRpbl9oZWlnaHRfNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZW1iZWRkZWRcIil7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzEnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfMTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMicpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IGVtYmVkZGVkX3BvcHRpbl93aWR0aF8yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgZW1iZWRkZWRfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8zJyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgZW1iZWRkZWRfcG9wdGluX3dpZHRoXzM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzM7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzQnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNDtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNScpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IGVtYmVkZGVkX3BvcHRpbl93aWR0aF81O1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgfHwgZW1iZWRkZWRfcG9wdGluX2hlaWdodF81O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF82Jyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggfHwgZW1iZWRkZWRfcG9wdGluX3dpZHRoXzY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzY7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzcnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNztcbiAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0IHx8IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIil7XG4gICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCB8fCBsaXRnaHRib3hfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3dMb2coJ2dldFBvcHRpblBvc2l0aW9uICcrdGhpc19wb3B0aW5fd2lkdGgrJyAnK3RoaXNfcG9wdGluX2hlaWdodCk7XG5cbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIpe1xuICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS5oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS53aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIiB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF85XCIpe1xuICAgICAgICAgICAgICAgIGxpdGdodGJveF9wb3B0aW5fd2lkdGggPSBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNob3dMb2coJ2dldFBvcHRpblBvc2l0aW9uICcrbGl0Z2h0Ym94X3BvcHRpbl93aWR0aCsnICcrbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHQpO1xuICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3NpdGlvbl9jZW50ZXIgPSB7bGVmdDooc2NyZWVuX3dpZHRoIC0gbGl0Z2h0Ym94X3BvcHRpbl93aWR0aCkvMix1cDooc2NyZWVuX2hlaWdodCAtIGxpdGdodGJveF9wb3B0aW5faGVpZ2h0KS8yfTtcbiAgICAgICAgICAgIHBvcHRpbl9wb3NpdGlvbiA9IHtsZWZ0OihzY3JlZW5fd2lkdGggLSBsaXRnaHRib3hfcG9wdGluX3dpZHRoKS8yLHVwOihzY3JlZW5faGVpZ2h0IC0gbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHQpLzJ9O1xuICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiYmFyXCIpe1xuICAgICAgICAgICAgaWYgKGNsaWNrPT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3NpdGlvbl9jZW50ZXIgPSB7bGVmdDooc2NyZWVuX3dpZHRoIC0gMTkyMCkvMix1cDooc2NyZWVuX2hlaWdodCAtIDEwMCkvMn07XG4gICAgICAgICAgICBwb3B0aW5fcG9zaXRpb24gPSB7bGVmdDooc2NyZWVuX3dpZHRoIC0gMTkyMCkvMix1cDooc2NyZWVuX2hlaWdodCAtIDEwMCkvMn1cbiAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcIm1vYmlsZVwiICYmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF8zXCIgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfOFwiKSApe1xuICAgICAgICAgICAgc2NyZWVuX3dpZHRoID0gTWF0aC5taW4oc2NyZWVuX3dpZHRoLCBqUTIyNCgnYm9keScpLm91dGVyV2lkdGgoKSk7XG4gICAgICAgICAgICBpZiAoY2xpY2s9PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvc2l0aW9uX2NlbnRlciA9IHtsZWZ0OihzY3JlZW5fd2lkdGggLSAzOTApLzIsdXA6KHNjcmVlbl9oZWlnaHQgLSAyNDIpLzJ9O1xuICAgICAgICAgICAgcG9wdGluX3Bvc2l0aW9uID0ge2xlZnQ6KHNjcmVlbl93aWR0aCAtIDM5MCkvMix1cDooc2NyZWVuX2hlaWdodCAtIDI0MikvMn1cbiAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuICAgICAgICAgICAgaWYgKGNsaWNrID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS5oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS53aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2hvd0xvZygnZ2V0UG9wdGluUG9zaXRpb24gJytsaXRnaHRib3hfcG9wdGluX3dpZHRoKycgJytsaXRnaHRib3hfcG9wdGluX2hlaWdodCk7XG4gICAgICAgICAgICBpZiAoY2xpY2s9PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvc2l0aW9uX2NlbnRlciA9IHtsZWZ0OihzY3JlZW5fd2lkdGggLSBsaXRnaHRib3hfcG9wdGluX3dpZHRoKS8yLHVwOihzY3JlZW5faGVpZ2h0IC0gbGl0Z2h0Ym94X3BvcHRpbl9oZWlnaHQpLzJ9O1xuICAgICAgICAgICAgcG9wdGluX3Bvc2l0aW9uID0ge2xlZnQ6KHNjcmVlbl93aWR0aCAtIGxpdGdodGJveF9wb3B0aW5fd2lkdGgpLzIsdXA6KHNjcmVlbl9oZWlnaHQgLSBsaXRnaHRib3hfcG9wdGluX2hlaWdodCkvMn07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKCksIGlmQW5kcm9pZFBvcHRpbktleWJvcmFkKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdCB8IGNsaWNrOkJvb2xlYW4gKGlmIHBvcHRpbiBjbGljayB0cmlnZ2VyKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgd2luZG93IHJlc2l6ZSBldmVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdpbmRvd1Jlc2l6ZShwb3B0aW4sY2xpY2spe1xuXG4gICAgICAgIC8vIHNob3dMb2coJ3NldDogd2luZG93UmVzaXplKCknKTtcbiAgICAgICAgLy8gdHJ5e1xuICAgICAgICAvLyAgLy8gc2hvd0xvZygnd2luZG93UmVzaXplKCktb2ZmKCknKTtcbiAgICAgICAgLy8gIGpRMjI0KHdpbmRvdykub2ZmKFwicmVzaXplXCIpO1xuICAgICAgICAvLyB9Y2F0Y2goZXJyKXtcbiAgICAgICAgLy8gIHNob3dMb2coZXJyKVxuICAgICAgICAvLyB9XG4gICAgICAgIGpRMjI0KHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBSZXNpemUgcG9wdGluIHRvIGZpdCB3aW5kb3cgc2NyZWVuIHNpemVcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoIHBvcHRpbi5wb3B0aW5fdHlwZSAhPSBcImZ1bGxwYWdlXCIgJiYgcG9wdGluLnBvcHRpbl90eXBlICE9IFwiYnJvd3NpbmdcIiApIHx8XG4gICAgICAgICAgICAgICAgISggcG9wdGluLnBvcHRpbl90eXBlID09IFwiZnVsbHBhZ2VcIiAmJiBqUTIyNC5pbkFycmF5KHBvcHRpbi5wb3B0aW5fZm9ybWF0LCBmcl90ZW1wbGF0ZXNbXCJmdWxscGFnZVwiXSkgIT09IC0xIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkb1Jlc2l6ZVBvcHRpbihwb3B0aW4sY2xpY2spO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY2hlY2tFbGVtZW50Q3Jvc3NpbmdEaXJlY3Rpb25fdGIoZWxlbSwgY29udCkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRbMF0gIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZWxlbVswXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGNvbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgZWwgPSBlbGVtWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICB2YXIgZWxlbV9kaXIgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIGVsZW1fZGlmZiA9IDA7XG5cbiAgICAgICAgICAgIGlmIChlbC50b3AgPCBwLnRvcCkge1xuICAgICAgICAgICAgICAgIGVsZW1fZGlyID0gXCJ0b3BcIjtcbiAgICAgICAgICAgICAgICBlbGVtX2RpZmYgPSBwLnRvcCAtIGVsLnRvcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuYm90dG9tID4gcC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICBlbGVtX2RpciA9IFwiYm90dG9tXCI7XG4gICAgICAgICAgICAgICAgZWxlbV9kaWZmID0gcC5ib3R0b20gLSBlbC5ib3R0b207XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlbGVtX29iamVjdF8gPSB7XCJkaXJlY3Rpb25cIjplbGVtX2RpcixcImVsZW1fZGlmZlwiOmVsZW1fZGlmZn07XG4gICAgICAgICAgICByZXR1cm4gZWxlbV9vYmplY3RfO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tFbGVtZW50Q3Jvc3NpbmdEaXJlY3Rpb25fbHIoZWxlbSwgY29udCkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRbMF0gIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZWxlbVswXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGNvbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgZWwgPSBlbGVtWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICB2YXIgZWxlbV9kaXIgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIGVsZW1fZGlmZiA9MDtcbiAgICAgICAgICAgIGlmIChlbC5sZWZ0IDwgcC5sZWZ0KSB7XG4gICAgICAgICAgICAgICAgZWxlbV9kaXIgPSBcImxlZnRcIjtcbiAgICAgICAgICAgICAgICBlbGVtX2RpZmYgPSBwLmxlZnQgLSBlbC5sZWZ0O1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsLnJpZ2h0ID4gcC5yaWdodCkge1xuICAgICAgICAgICAgICAgIGVsZW1fZGlyID0gXCJyaWdodFwiO1xuICAgICAgICAgICAgICAgIGVsZW1fZGlmZiA9IGVsLnJpZ2h0IC0gcC5yaWdodDtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVsZW1fb2JqZWN0XyA9IHtcImRpcmVjdGlvblwiOmVsZW1fZGlyLFwiZWxlbV9kaWZmXCI6ZWxlbV9kaWZmfTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtX29iamVjdF87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcmVDYWN1bGF0ZVdpZHRoZm9ybW9iaWxlKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBDYWxjdWxhdGUgbmV3IHdpZHRoIGZvciBtb2JpbGUgdmlldyBzY2FsaW5nIGlmIHRoZXJlIGFueSBlbGVtZW50IGNyb3NzIHRoZSBwb3B0aW5jb250YWluZXJcbiAgICAgKi9cblxuXG5cblxuXG4gICAgZnVuY3Rpb24gcmVDYWN1bGF0ZVdpZHRoZm9ybW9iaWxlKHBvcHRpbil7XG4gICAgICAgIHZhciBfdGhpcyA9IGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpO1xuICAgICAgICB2YXIgZWxfbGVmdF9jYWwgPSAwO1xuICAgICAgICB2YXIgZWxfbGVmdF9hZGQgPSAwO1xuICAgICAgICB2YXIgZWxtYXhfdyA9MDtcbiAgICAgICAgdmFyIG91dHNpZGVfYXJyID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHZhciBtYXhfZWxfbGVmdF9hZGQgPSAwO1xuICAgICAgICB2YXIgY29udGFpbmVyX3cgPSBfdGhpcy5jc3MoXCJ3aWR0aFwiKTtcbiAgICAgICAgdmFyIG5ld193aWR0aCA9IF90aGlzLmNzcyhcIndpZHRoXCIpO1xuXG4gICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIiArIHBvcHRpbi5wb3B0aW5faWQgKyBcIl0gLmVsZW1lbnQtbm90aW5zaWRlOm5vdCguaGlkZGVuU25hcHBpbmdFbGVtKTp2aXNpYmxlXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBjaGVja19lbGVtX2xyID0gY2hlY2tFbGVtZW50Q3Jvc3NpbmdEaXJlY3Rpb25fbHIoalEyMjQodGhpcyksX3RoaXMuZmluZChcIi5wb3B0aW4tdmlzaWJsZVwiKSk7XG4gICAgICAgICAgICBlbG1heF93ID0gcGFyc2VJbnQoalEyMjQodGhpcykuY3NzKFwid2lkdGhcIikpO1xuXG4gICAgICAgICAgICBpZighalEyMjQuaXNFbXB0eU9iamVjdChjaGVja19lbGVtX2xyKSl7XG4gICAgICAgICAgICAgICAgaWYoY2hlY2tfZWxlbV9sci5kaXJlY3Rpb249PSdsZWZ0Jyl7XG4gICAgICAgICAgICAgICAgICAgIGVsX2xlZnRfY2FsID0gY2hlY2tfZWxlbV9sci5lbGVtX2RpZmY7XG4gICAgICAgICAgICAgICAgICAgIGVsX2xlZnRfY2FsID0gZWxfbGVmdF9jYWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoY2hlY2tfZWxlbV9sci5kaXJlY3Rpb249PSdyaWdodCcpe1xuICAgICAgICAgICAgICAgICAgICBlbF9sZWZ0X2NhbCA9IGNoZWNrX2VsZW1fbHIuZWxlbV9kaWZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbF9sZWZ0X2FkZCA9IGVsX2xlZnRfY2FsO1xuICAgICAgICAgICAgICAgIG91dHNpZGVfYXJyLnB1c2goZWxfbGVmdF9hZGQpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYob3V0c2lkZV9hcnIubGVuZ3RoPjApe1xuICAgICAgICAgICAgbWF4X2VsX2xlZnRfYWRkID0gTWF0aC5tYXgoLi4ub3V0c2lkZV9hcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3X3dpZHRoID0gcGFyc2VJbnQoY29udGFpbmVyX3cpICsgKG1heF9lbF9sZWZ0X2FkZCAqIDIpO1xuICAgICAgICByZXR1cm4ge25ld193aWR0aCwgbWF4X2VsX2xlZnRfYWRkfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlQ2FjdWxhdGVoZWlnaHRmb3Jtb2JpbGUocG9wdGluKXtcbiAgICAgICAgdmFyIF90aGlzID0galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJyk7XG4gICAgICAgIHZhciBlbF90b3BfY2FsID0gMDtcbiAgICAgICAgdmFyIGVsX3RvcF9hZGQgPSAwO1xuICAgICAgICB2YXIgZWxtYXhfaCA9MDtcbiAgICAgICAgdmFyIG91dHNpZGVfYXJyID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHZhciBtYXhfZWxfdG9wX2FkZCA9IDA7XG4gICAgICAgIHZhciBjb250YWluZXJfaCA9IF90aGlzLmNzcyhcImhlaWdodFwiKTtcbiAgICAgICAgdmFyIG5ld19oZWlnaHQgPSBfdGhpcy5jc3MoXCJoZWlnaHRcIik7XG5cblxuICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCJdIC5lbGVtZW50LW5vdGluc2lkZTpub3QoLmhpZGRlblNuYXBwaW5nRWxlbSk6dmlzaWJsZVwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgY2hlY2tfZWxlbV90YiA9IGNoZWNrRWxlbWVudENyb3NzaW5nRGlyZWN0aW9uX3RiKGpRMjI0KHRoaXMpLF90aGlzLmZpbmQoXCIucG9wdGluLXZpc2libGVcIikpO1xuICAgICAgICAgICAgZWxtYXhfaD0gcGFyc2VJbnQoalEyMjQodGhpcykuY3NzKFwiaGVpZ2h0XCIpKTtcblxuICAgICAgICAgICAgaWYoIWpRMjI0LmlzRW1wdHlPYmplY3QoY2hlY2tfZWxlbV90Yikpe1xuICAgICAgICAgICAgICAgIGlmKGNoZWNrX2VsZW1fdGIuZGlyZWN0aW9uPT0ndG9wJyl7XG4gICAgICAgICAgICAgICAgICAgIGVsX3RvcF9jYWwgPSBjaGVja19lbGVtX3RiLmVsZW1fZGlmZjtcbiAgICAgICAgICAgICAgICAgICAgZWxfdG9wX2NhbCA9IGVsX3RvcF9jYWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoY2hlY2tfZWxlbV90Yi5kaXJlY3Rpb249PSdib3R0b20nKXtcbiAgICAgICAgICAgICAgICAgICAgZWxfdG9wX2NhbCA9IGNoZWNrX2VsZW1fdGIuZWxlbV9kaWZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbF90b3BfYWRkID0gZWxfdG9wX2NhbDtcblxuICAgICAgICAgICAgICAgIC8vc2hvd0xvZyhcImltYWdlX2VsZW1udF93aWR0aDpcIitlbG1heF9oKTtcbiAgICAgICAgICAgICAgICAvL3Nob3dMb2coXCJpbWFnZV9lbGVtbnRfaGVpZ2h0X291dHNpZGU6XCIrZWxfdG9wX2NhbCk7XG5cbiAgICAgICAgICAgICAgICBvdXRzaWRlX2Fyci5wdXNoKGVsX3RvcF9hZGQpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmKG91dHNpZGVfYXJyLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIG1heF9lbF90b3BfYWRkID0gTWF0aC5tYXgoLi4ub3V0c2lkZV9hcnIpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19oZWlnaHQ9cGFyc2VJbnQoY29udGFpbmVyX2gpICsgKG1heF9lbF90b3BfYWRkICogMik7XG4gICAgICAgIHJldHVybiBuZXdfaGVpZ2h0O1xuXG4gICAgfVxuXG5cblxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2V0UG9wdGluKCksIHdpbmRvd1Jlc2l6ZSgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3QgfCBjbGljazpCb29sZWFuIChpZiBwb3B0aW4gY2xpY2sgdHJpZ2dlcilcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogSGFuZGxlIHBvcHRpbiBzdHlsZSwgdmlldywgcG9zdGlvbiBhbmQgc2l6ZSB0byBmaXQgdG8gYWxsIHdpbmRvdyBzY3JlZW4gc2l6ZSh3aWR0aCpoZWlnaHQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9SZXNpemVQb3B0aW4ocG9wdGluLGNsaWNrKSB7XG5cbiAgICAgICAgdmFyIGlzRW1iZWRkZWRQb3B0aW4gPSBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJlbWJlZGRlZFwiO1xuICAgICAgICB2YXIgcG9wdGluX2NvbnRhaW5lciA9ICFpc0VtYmVkZGVkUG9wdGluID8galEyMjQod2luZG93KSA6IGpRMjI0KFwiLnBvcHRpbi1lbWJlZGRlZFtkYXRhLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ11cIik7XG5cbiAgICAgICAgaWZfcmVzcG9uc2ljZV9mbGFnID0gZmFsc2U7XG4gICAgICAgIC8vIHNob3dMb2coXCJkb1Jlc2l6ZVBvcHRpblwiLCBwb3B0aW4pO1xuXG4gICAgICAgIC8vIFNldCBnbG9iYWwgcG9wdGluIGNvbnRhaW5lclxuICAgICAgICB2YXIgX3RoaXMgPSBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKTtcblxuICAgICAgICAvLyBJcyBuZXcgb3Igb2xkIHBvcHRpblxuICAgICAgICBwb3B0aW4uaXNfbmV3ID0gX3RoaXMuaGFzQ2xhc3MoJ25ldy1wb3B1cCcpID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIC8vIEdpdmUgZGVmYXVsdCB3aWR0aCBhbmQgaGVpZ2h0IGRhdGEgYXR0cmlidXRlcyB0byBsaWdodGJveGVzXG5cdFx0aWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIgfHwgcG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIil7XG4gICAgICAgICAgICBpZiggaXNOYU4ocGFyc2VJbnQoX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5hdHRyKCdkYXRhLXdpZHRoJykpKSApe1xuICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpJykuYXR0cignZGF0YS13aWR0aCcsIDgwMCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5hdHRyKCdkYXRhLWhlaWdodCcsIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgbG9jYWwgcG9wdGluIHNpemVcbiAgICAgICAgdmFyIHBvcHRpbl9zaXplX3dpZHRoID0gcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2l6ZS53aWR0aDtcbiAgICAgICAgdmFyIHBvcHRpbl9zaXplX2hlaWdodCA9IHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NpemUuaGVpZ2h0O1xuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW5fc2l6ZScsIHBvcHRpbl9zaXplX3dpZHRoLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuXG4gICAgICAgIHZhciBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHQgPSBnZXREYXRhV2lkdGhIZWlnaHQocG9wdGluLnBvcHRpbik7XG5cbiAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBwb3B0aW5fZGF0YV93aWR0aF9oZWlnaHRbJ3dpZHRoJ10gfHwgcG9wdGluX3NpemVfd2lkdGg7XG4gICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IHBvcHRpbl9kYXRhX3dpZHRoX2hlaWdodFsnaGVpZ2h0J10gfHwgcG9wdGluX3NpemVfaGVpZ2h0O1xuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW5fc2l6ZScsIHBvcHRpbl9zaXplX3dpZHRoLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuXG4gICAgICAgIGlmKCBpc05hTihwb3B0aW5fc2l6ZV93aWR0aCkgfHwgaXNOYU4ocG9wdGluX3NpemVfaGVpZ2h0KSApe1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIpe1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gbGl0Z2h0Ym94X3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJiYXJcIil7XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBiYXJfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNicpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzInIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfMycgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF83JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IGJhcl9wb3B0aW5faGVpZ2h0XzI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSAnZm9ybWF0XzQnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfOScpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09ICdmb3JtYXRfNScgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gJ2Zvcm1hdF8xMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gYmFyX3BvcHRpbl9oZWlnaHRfNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwic3NpZGVcIil7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBzc2lkZV9wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IHNzaWRlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzQnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzgnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBzc2lkZV9wb3B0aW5fd2lkdGhfNDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gc3NpZGVfcG9wdGluX2hlaWdodF80O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xOScpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IHNzaWRlX3BvcHRpbl93aWR0aF8xOTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gc3NpZGVfcG9wdGluX2hlaWdodF8xOTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBzc2lkZV9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gc3NpZGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiYnNpZGVcIil7XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBic2lkZV9wb3B0aW5fd2lkdGg7XG4gICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gYnNpZGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJicm93c2luZ1wiKXtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IGJyb3dzaW5nX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBicm93c2luZ19wb3B0aW5faGVpZ2h0O1xuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImZ1bGxwYWdlXCIpe1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gXCIxMDAlXCI7IC8vZnVsbHBhZ2VfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IFwiMTAwJVwiOyAvL2Z1bGxwYWdlX3BvcHRpbl9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzQnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzgnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBmdWxscGFnZV9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gZnVsbHBhZ2VfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzb2NpYWxcIil7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzEnIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBzb2NpYWxfcG9wdGluX3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBzb2NpYWxfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMicgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNicpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IHNvY2lhbF9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gc29jaWFsX3BvcHRpbl9oZWlnaHRfMjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOCcpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IHNvY2lhbF9wb3B0aW5fd2lkdGhfNDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gc29jaWFsX3BvcHRpbl9oZWlnaHRfNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIpe1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gbW9iaWxlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBtb2JpbGVfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMycgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOCcpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IG1vYmlsZV9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gbW9iaWxlX3BvcHRpbl9oZWlnaHRfMjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcgfHwgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfOScpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBtb2JpbGVfcG9wdGluX2hlaWdodF80O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF81JyB8fCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8xMCcpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBtb2JpbGVfcG9wdGluX2hlaWdodF81O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJlbWJlZGRlZFwiKXtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfMScpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF8xO1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzE7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzInKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMjtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gZW1iZWRkZWRfcG9wdGluX2hlaWdodF8yO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF8zJyl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gZW1iZWRkZWRfcG9wdGluX3dpZHRoXzM7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfMztcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNCcpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF80O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09PSAnZm9ybWF0XzUnKXtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSBlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gZW1iZWRkZWRfcG9wdGluX2hlaWdodF81O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PT0gJ2Zvcm1hdF82Jyl7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gZW1iZWRkZWRfcG9wdGluX3dpZHRoXzY7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX2hlaWdodCA9IGVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl9mb3JtYXQgPT09ICdmb3JtYXRfNycpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV93aWR0aCA9IGVtYmVkZGVkX3BvcHRpbl93aWR0aF83O1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBlbWJlZGRlZF9wb3B0aW5faGVpZ2h0Xzc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gbGl0Z2h0Ym94X3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSBsaXRnaHRib3hfcG9wdGluX2hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW5fc2l6ZScsIHBvcHRpbl9zaXplX3dpZHRoLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuICAgIFxuICAgICAgICBfdGhpcy5maW5kKCcuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKScpLmF0dHIoJ2RhdGEtd2lkdGgnLCBwb3B0aW5fc2l6ZV93aWR0aCk7XG4gICAgICAgIF90aGlzLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpJykuYXR0cignZGF0YS1oZWlnaHQnLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuICAgIFxuICAgICAgICAvLyBzaG93TG9nKCdjb21wYXJpc29uJywgcG9wdGluX2NvbnRhaW5lci53aWR0aCgpLCBwb3B0aW5fc2l6ZV93aWR0aCwgcG9wdGluX2NvbnRhaW5lci5oZWlnaHQoKSwgcG9wdGluX3NpemVfaGVpZ2h0KVxuXG4gICAgICAgIC8vIFNldCBuZXcgcG9wdGluIHNpemVcbiAgICAgICAgdmFyIGJlc3Rfd2luZG93X3dpZHRoID0galEyMjQoJ2JvZHknKS5vdXRlcldpZHRoKCkgKyAyMCA8IGpRMjI0KHdpbmRvdykub3V0ZXJXaWR0aCgpID8gTWF0aC5taW4oalEyMjQod2luZG93KS5vdXRlcldpZHRoKCksIGpRMjI0KCdib2R5Jykub3V0ZXJXaWR0aCgpKSA6IGpRMjI0KHdpbmRvdykub3V0ZXJXaWR0aCgpO1xuICAgICAgICB0aGlzX2NvbXBhcmFibGVfd2lkdGggPSBpc0VtYmVkZGVkUG9wdGluID8gcG9wdGluX2NvbnRhaW5lci53aWR0aCgpIDogYmVzdF93aW5kb3dfd2lkdGg7XG4gICAgICAgIHRoaXNfY29tcGFyYWJsZV9oZWlnaHQgPSBpc0VtYmVkZGVkUG9wdGluID8gKHBvcHRpbl9jb250YWluZXIuaGVpZ2h0KCkgIT0gMCA/IHBvcHRpbl9jb250YWluZXIuaGVpZ2h0KCkgOiBwb3B0aW5fc2l6ZV9oZWlnaHQpIDogd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAvLyBzaG93TG9nKCd0aGlzX2NvbXBhcmFibGUnLCB0aGlzX2NvbXBhcmFibGVfd2lkdGgsIHRoaXNfY29tcGFyYWJsZV9oZWlnaHQpO1xuICAgICAgICAvLyBzaG93TG9nKCdwb3B0aW5fc2l6ZScsIHBvcHRpbl9zaXplX3dpZHRoLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuXG4gICAgICAgIHdpbmRvd193aWR0aCA9IHBvcHRpbl9jb250YWluZXIud2lkdGgoKTsgLy8galEyMjQoJ2JvZHknKS53aWR0aCgpXG4gICAgICAgIHdpbmRvd19oZWlnaHQgPSBpc0VtYmVkZGVkUG9wdGluID8gcG9wdGluX2NvbnRhaW5lci5oZWlnaHQoKSA6IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgICAvLyBJRiBwb3B0aW4gZG1pbiBpcyBiaWdnZXIgdGhhbiB3aW5kb3cgJiYgcG9wdGluX3R5cGUgaXMgbm90ICdmdWxscGFnZScgb3IgaXMgbGlndGhib3hcbiAgICAgICAgaWYgKCBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJmdWxscGFnZVwiICkge1xuXG4gICAgICAgICAgICAvLyAgKFxuICAgICAgICAgICAgLy8gICAgICAoIHBvcHRpbl9jb250YWluZXIud2lkdGgoKSA8IHBvcHRpbl9zaXplX3dpZHRoIHx8IHBvcHRpbl9jb250YWluZXIuaGVpZ2h0KCkgPCBwb3B0aW5fc2l6ZV9oZWlnaHQgKVxuICAgICAgICAgICAgLy8gICAgICAmJiBwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJmdWxscGFnZVwiXG4gICAgICAgICAgICAvLyAgKSB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiXG4gICAgICAgICAgICAvLyApe1xuXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgICAgICAgLy8gaWYgYW55IGVsZW1lbnQgY3Jvc3NpbmcgdGVtcGxhdGUgYm91bmRyeSBjYWxjdWxhdGUgc2NhbGVcbiAgICAgICAgICAgIGpRMjI0KFwiLmVuYWJsZS1zbmFwcGluZ1wiKS5hZGRDbGFzcyhcImVsZW1lbnQtbm90aW5zaWRlXCIpO1xuICAgICAgICAgICAgalEyMjQoXCIuZWxlbS1vdXRvZmJvdW5kcnlcIikuYWRkQ2xhc3MoXCJlbGVtZW50LW5vdGluc2lkZVwiKTtcbiAgICAgICAgICAgIGlmIChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIgKyBwb3B0aW4ucG9wdGluX2lkICsgXCJdIC5lbGVtZW50LW5vdGluc2lkZTpub3QoLmhpZGRlblNuYXBwaW5nRWxlbSk6dmlzaWJsZVwiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2FsdyA9IHJlQ2FjdWxhdGVXaWR0aGZvcm1vYmlsZShwb3B0aW4pO1xuICAgICAgICAgICAgICAgIHZhciByZWNhbGggPSByZUNhY3VsYXRlaGVpZ2h0Zm9ybW9iaWxlKHBvcHRpbik7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVfd2lkdGggPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgKHRoaXNfY29tcGFyYWJsZV93aWR0aCAtIHJlY2Fsdy5tYXhfZWxfbGVmdF9hZGQpIC8gcmVjYWx3Lm5ld193aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlX2hlaWdodCA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICB0aGlzX2NvbXBhcmFibGVfaGVpZ2h0IC8gcmVjYWxoLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInJlY2FsX3RoaXNfY29tcGFyYWJsZV93aWR0aFwiK3RoaXNfY29tcGFyYWJsZV93aWR0aCk7XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInJlY2FsX3c6XCIrcmVjYWx3KTtcblxuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coXCJyZWNhbF90aGlzX2NvbXBhcmFibGVfaGVpZ2h0XCIrdGhpc19jb21wYXJhYmxlX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInJlY2FsX2g6XCIrcmVjYWxoKTtcblxuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coXCJyZWNhbF93aWR0aFwiK3NjYWxlX3dpZHRoKTtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKFwicmVjYWxfaGVpZ2h0XCIrc2NhbGVfaGVpZ2h0KTtcblxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlX3dpZHRoID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfY29tcGFyYWJsZV93aWR0aCAgLyBwb3B0aW5fc2l6ZV93aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZV9oZWlnaHQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgdGhpc19jb21wYXJhYmxlX2hlaWdodCAgLyBwb3B0aW5fc2l6ZV9oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIgfHwgcG9wdGluLnBvcHRpbl90eXBlID09IFwiYnNpZGVcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzc2lkZVwiIHx8IHBvcHRpbi5pc19uZXcgfHwgcG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIil7IFxuICAgICAgICAgICAgICAgIHNjYWxlX3dpZHRoID0gTWF0aC5taW4oc2NhbGVfd2lkdGgsIHNjYWxlX2hlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNob3dMb2coJ3NjYWxlX2RpbScsIHNjYWxlX3dpZHRoLCBzY2FsZV9oZWlnaHQsIHNjYWxlX3dpZHRoKTtcblxuICAgICAgICAgICAgLy8gU2V0IGNzcyBzY2FsZSBwdG9wZXJ0aWVzXG4gICAgICAgICAgICB2YXIgbmV3X3Bvc19zY2FsZSA9IHtcbiAgICAgICAgICAgICAgICBcIndpZHRoXCI6IHBvcHRpbl9zaXplX3dpZHRoKydweCcsXG4gICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogcG9wdGluX3NpemVfaGVpZ2h0KydweCcsXG4gICAgICAgICAgICAgICAgXCJtYXgtd2lkdGhcIjogcG9wdGluX3NpemVfd2lkdGgrJ3B4JyxcbiAgICAgICAgICAgICAgICBcIm1heC1oZWlnaHRcIjogcG9wdGluX3NpemVfaGVpZ2h0KydweCdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIERvbnQgY2hhbmdlIHNjYWxlIG9mIGJyb3dzaW5nIEFjdHVhbCBTY2FsZSB2YWx1ZVxuICAgICAgICAgICAgaWYocG9wdGluLnBvcHRpbl90eXBlICE9IFwiYnJvd3NpbmdcIil7XG4gICAgICAgICAgICAgICAgbmV3X3Bvc19zY2FsZVtcInRyYW5zZm9ybVwiXSA9IFwic2NhbGUoXCIrc2NhbGVfd2lkdGgrXCIpXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERvbnQgY2hhbmdlIHNjYWxlIG9mIGJyb3dzaW5nXG4gICAgICAgICAgICBpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJlbWJlZGRlZFwiKXtcbiAgICAgICAgICAgICAgICBuZXdfcG9zX3NjYWxlW1widHJhbnNmb3JtLW9yaWdpblwiXSA9IFwiY2VudGVyIGNlbnRlciAwcHhcIjtcbiAgICAgICAgICAgICAgICBpZihzY2FsZV93aWR0aD09MCl7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlX3dpZHRoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc19zY2FsZVtcInRyYW5zZm9ybVwiXSA9IFwic2NhbGUoXCIrc2NhbGVfd2lkdGgrXCIpXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3Nob3dMb2coXCJuZXdfcG9zX3NjYWxlXCIrSlNPTi5zdHJpbmdpZnkobmV3X3Bvc19zY2FsZSkpO1xuXG4gICAgICAgICAgICBfdGhpcy5jc3MobmV3X3Bvc19zY2FsZSk7XG4gICAgICAgICAgICBfdGhpcy5hdHRyKCdkYXRhLXNjYWxlJywgc2NhbGVfd2lkdGgpO1xuXG5cdFx0XHRpZihzY2FsZV93aWR0aCA9PSAxKXsgX3RoaXMuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTsgfVxuXG4gICAgICAgICAgICBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwiYnNpZGVcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzc2lkZVwiKXtcbiAgICAgICAgICAgICAgICBpZihwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2xvY2F0aW9uLmluZGV4T2YoXCJsZWZ0XCIpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzonYXV0bycsJ3JpZ2h0JzogKCh0aGlzX2NvbXBhcmFibGVfd2lkdGggLShzY2FsZV9oZWlnaHQqcG9wdGluX3NpemVfd2lkdGgpICkvMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsncmlnaHQnOidhdXRvJywnbGVmdCc6ICgodGhpc19jb21wYXJhYmxlX3dpZHRoIC0oc2NhbGVfaGVpZ2h0KnBvcHRpbl9zaXplX3dpZHRoKSApLzIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdic2lkZSBzaXplJywgdGhpc19jb21wYXJhYmxlX2hlaWdodCwgc2NhbGVfaGVpZ2h0LCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J3RvcCc6ICgodGhpc19jb21wYXJhYmxlX2hlaWdodCAtKHNjYWxlX2hlaWdodCpwb3B0aW5fc2l6ZV9oZWlnaHQpICkvMikrXCJweFwifSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJzc2lkZVwiICYmIF90aGlzLmdldCgwKSAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtLW9yaWdpbicsICcnKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzX2NvbXBhcmFibGVfaGVpZ2h0IDwgcG9wdGluX3NpemVfaGVpZ2h0KXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHRpbl9sb2NhdGlvbiA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbl9sb2NhdGlvbi5pbmRleE9mKFwibWlkbGxlXCIpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgndG9wJywgJzBweCcsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnYm90dG9tJywgJ2F1dG8nLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zZm9ybS1vcmlnaW4nLCAocG9wdGluX2xvY2F0aW9uLnNwbGl0KCctJylbMF0pKycgdG9wIDAnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYocG9wdGluX2xvY2F0aW9uLmluZGV4T2YoXCJjZW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6J2F1dG8nLCdyaWdodCc6ICgodGhpc19jb21wYXJhYmxlX3dpZHRoIC0gcG9wdGluX3NpemVfd2lkdGgpLzIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGFuZ2UgcmVsZXZhbnQgcG9wdGluIGNzcyBhdHRyaWJ1dGUgdG8gZml0IHRvIG5ldyAnc2NhbGUnIHNpemVcbiAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhwb3B0aW5fc2l6ZV93aWR0aCwgcG9wdGluX3NpemVfaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAvLyBwb3B0aW5fc2l6ZV93aWR0aCA9IHRoaXNfcG9wdGluX3dpZHRoIHx8IHBvcHRpbl9zaXplX3dpZHRoO1xuICAgICAgICAgICAgICAgIC8vIHBvcHRpbl9zaXplX2hlaWdodCA9IHRoaXNfcG9wdGluX2hlaWdodCB8fCBwb3B0aW5fc2l6ZV9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhwb3B0aW5fc2l6ZV93aWR0aCwgcG9wdGluX3NpemVfaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIC8vIGlmKHRoaXNfY29tcGFyYWJsZV93aWR0aCA8IHBvcHRpbl9zaXplX3dpZHRoKXtcbiAgICAgICAgICAgICAgICAvLyAgdGhpc19jb21wYXJhYmxlX3dpZHRoID0gdGhpc19jb21wYXJhYmxlX3dpZHRoICogMC45XG4gICAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgICAgdGhpc19jc3MgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiggcG9wdGluX3NpemVfd2lkdGggPiB0aGlzX2NvbXBhcmFibGVfd2lkdGggKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19jc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAoKHBvcHRpbl9zaXplX3dpZHRoIC0gdGhpc19jb21wYXJhYmxlX3dpZHRoICkvLTIpK1wicHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2NzcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IFwiMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogXCIwcHhcIlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5jc3ModGhpc19jc3MpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGUoeyB0b3A6ICgocG9wdGluX3NpemVfaGVpZ2h0IC0gdGhpc19jb21wYXJhYmxlX2hlaWdodCApLy0yKStcInB4XCJ9LCBwb3B0aW5fYW5pbWF0aW9uX3NwZWVkKTtcbiAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCd0aGlzX2NzcycsIHRoaXNfY3NzKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jc3ModGhpc19jc3MpO1xuICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJhclwiKXtcbiAgICAgICAgICAgICAgICBfdGhpcy5jc3Moe2xlZnQ6ICgocG9wdGluX3NpemVfd2lkdGggLSBqUTIyNCh3aW5kb3cpLndpZHRoKCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb249PVwiY2VudGVyLXRvcFwiKXtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHt0b3A6ICgocG9wdGluX3NpemVfaGVpZ2h0LShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV9oZWlnaHQpKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJhckh0bWxQYWRkaW5nKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb249PVwiY2VudGVyLWJvdHRvbVwiKXtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHt0b3A6IFwiYXV0b1wifSk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7dG9wOiAod2luZG93LmlubmVySGVpZ2h0IC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0ICsgKCgxLXNjYWxlX3dpZHRoKSpwb3B0aW5fc2l6ZV9oZWlnaHQpLzIpKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuY3NzKFwicmlnaHRcIixcIlwiKTtcbiAgICAgICAgICAgICAgICAvLyB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwic3NpZGVcIil7XG4gICAgICAgICAgICAgICAgLy8galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuY3NzKHtsZWZ0OiAoKHBvcHRpbl9zaXplX3dpZHRoIC0gd2luZG93LmlubmVyV2lkdGggKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8galEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuY3NzKHtib3R0b206ICgocG9wdGluX3NpemVfaGVpZ2h0IC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgIH1lbHNlIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJic2lkZVwiKXtcbiAgICAgICAgICAgICAgICAvLyBpZiAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9sb2NhdGlvbiE9PSBcImxlZnRcIil7XG4gICAgICAgICAgICAgICAgLy8gIF90aGlzLmNzcyh7J3JpZ2h0JzogKChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyB9ZWxzZXsgXG4gICAgICAgICAgICAgICAgLy8gIF90aGlzLmNzcyh7J2xlZnQnOiAoKHBvcHRpbl9zaXplX3dpZHRoIC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfd2lkdGgpICkvLTIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAvLyBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5jc3Moeyd0b3AnOiAoKHBvcHRpbl9zaXplX2hlaWdodCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gfWVsc2UgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJyb3dzaW5nXCIpe1xuICAgICAgICAgICAgICAgIC8vIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmNzcyh7J3JpZ2h0JzogKChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5jc3Moeyd0b3AnOiAoKHBvcHRpbl9zaXplX2hlaWdodCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIpe1xuICAgICAgICAgICAgICAgIGlmIChqUTIyNChcImh0bWxcIikuY3NzKFwibWluLXdpZHRoXCIpIT09XCIxMDAlXCIpXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOiAoKHBvcHRpbl9zaXplX3dpZHRoIC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfd2lkdGgpICkvLTIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIF90aGlzLmNzcyhcInJpZ2h0XCIsXCJcIik7XG4gICAgICAgICAgICB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlID09IFwic29jaWFsXCIpe1xuICAgICAgICAgICAgICAgIC8vIGlmIChwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ICE9IFwic29jaWFsX2Zvcm1hdF8yXCIgJiYgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCAhPSBcInNvY2lhbF9mb3JtYXRfNlwiKXtcbiAgICAgICAgICAgICAgICAvLyAgc3dpdGNoKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcImxlZnQtdG9wXCI6XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moe3RvcDogKChwb3B0aW5fc2l6ZV9oZWlnaHQtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCkpLy0yKStcInB4XCJ9KTsgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJsZWZ0LW1pZGxsZVwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOigocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgLy9qUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKHsndG9wJzood2luZG93LmlubmVySGVpZ2h0IC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KS8yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJsZWZ0LWJvdHRvbVwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOigocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuYW5pbWF0ZSh7XCJ0b3BcIjogKHdpbmRvdy5pbm5lckhlaWdodC1wb3B0aW5faGVpZ2h0KStcInB4XCJ9LCBwb3B0aW5fYW5pbWF0aW9uX3NwZWVkKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJjZW50ZXItdG9wXCI6XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6ICgocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwiLCdyaWdodCc6JycsJ21hcmdpbic6JzBweCd9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moe3RvcDogKChwb3B0aW5fc2l6ZV9oZWlnaHQtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCkpLy0yKStcInB4XCJ9KTsgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJjZW50ZXItbWlkbGxlXCI6XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6ICgocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwiLCdyaWdodCc6JycsJ21hcmdpbic6JzBweCd9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAvL2pRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV9oZWlnaHQpLzIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcImNlbnRlci1ib3R0b21cIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzogKChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCIsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4J30pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J3RvcCc6KHdpbmRvdy5pbm5lckhlaWdodCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCArICgoMS1zY2FsZV93aWR0aCkqcG9wdGluX3NpemVfaGVpZ2h0KS8yKSkrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcInJpZ2h0LXRvcFwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J3JpZ2h0JzooKHBvcHRpbl9zaXplX3dpZHRoIC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfd2lkdGgpICkvLTIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7dG9wOiAoKHBvcHRpbl9zaXplX2hlaWdodC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KSkvLTIpK1wicHhcIn0pOyAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJyaWdodC1taWRsbGVcIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydyaWdodCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAvL2pRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV9oZWlnaHQpLzIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJyaWdodC1ib3R0b21cIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydyaWdodCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV9oZWlnaHQgKyAoKDEtc2NhbGVfd2lkdGgpKnBvcHRpbl9zaXplX2hlaWdodCkvMikpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gIH1cbiAgICAgICAgICAgICAgICAvLyB9ZWxzZSBpZiAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdD09IFwic29jaWFsX2Zvcm1hdF8yXCIgfHwgcG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcInNvY2lhbF9mb3JtYXRfNlwiKXtcbiAgICAgICAgICAgICAgICAvLyAgc3dpdGNoKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fbG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcImxlZnQtdG9wXCI6XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moe3RvcDogKChwb3B0aW5fc2l6ZV9oZWlnaHQtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCkpLy0yKStcInB4XCJ9KTsgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJsZWZ0LW1pZGxsZVwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOigocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgLy9qUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKHsndG9wJzood2luZG93LmlubmVySGVpZ2h0IC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KS8yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJsZWZ0LWJvdHRvbVwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J2xlZnQnOigocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHtcInRvcFwiOiAod2luZG93LmlubmVySGVpZ2h0LXBvcHRpbl9oZWlnaHQtNDApK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcImNlbnRlci10b3BcIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzogKChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCIsJ3JpZ2h0JzonJywnbWFyZ2luJzonMHB4J30pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7dG9wOiAoKHBvcHRpbl9zaXplX2hlaWdodC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KSkvLTIpK1wicHhcIn0pOyAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcImNlbnRlci1taWRsbGVcIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydsZWZ0JzooKHBvcHRpbl9zaXplX3dpZHRoIC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfd2lkdGgpICkvLTIpK1wicHhcIiwncmlnaHQnOicnLCdtYXJnaW4nOicwcHgnfSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgLy9qUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKHsndG9wJzood2luZG93LmlubmVySGVpZ2h0IC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KS8yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJjZW50ZXItYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgX3RoaXMuY3NzKHsnbGVmdCc6ICgocG9wdGluX3NpemVfd2lkdGggLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV93aWR0aCkgKS8tMikrXCJweFwiLCdyaWdodCc6JycsJ21hcmdpbic6JzBweCd9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLSA0MCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCArICgoMS1zY2FsZV93aWR0aCkqcG9wdGluX3NpemVfaGVpZ2h0KS8yKSkrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgY2FzZSBcInJpZ2h0LXRvcFwiOlxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7J3JpZ2h0JzooKHBvcHRpbl9zaXplX3dpZHRoIC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfd2lkdGgpICkvLTIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIF90aGlzLmNzcyh7dG9wOiAoKHBvcHRpbl9zaXplX2hlaWdodC0oc2NhbGVfd2lkdGgqcG9wdGluX3NpemVfaGVpZ2h0KSkvLTIpK1wicHhcIn0pOyAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJyaWdodC1taWRsbGVcIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydyaWdodCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAvL2pRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLShzY2FsZV93aWR0aCpwb3B0aW5fc2l6ZV9oZWlnaHQpLzIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgICAgIGNhc2UgXCJyaWdodC1ib3R0b21cIjpcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3MoeydyaWdodCc6KChwb3B0aW5fc2l6ZV93aWR0aCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX3dpZHRoKSApLy0yKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICBfdGhpcy5jc3Moeyd0b3AnOih3aW5kb3cuaW5uZXJIZWlnaHQgLSA0MCAtKHNjYWxlX3dpZHRoKnBvcHRpbl9zaXplX2hlaWdodCArICgoMS1zY2FsZV93aWR0aCkqcG9wdGluX3NpemVfaGVpZ2h0KS8yKSkrXCJweFwifSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHBvcHRpbl90eXBlIGlzICdsaWdodGJveCdcbiAgICAgICAgaWYgKCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIgKXtcblxuICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lkdGggPSBwYXJzZUludChfdGhpcy5maW5kKCcuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKScpLmF0dHIoJ2RhdGEtd2lkdGgnKSk7XG4gICAgICAgICAgICB0aGlzX3BvcHRpbl9oZWlnaHQgPSBwYXJzZUludChfdGhpcy5maW5kKCcuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKScpLmF0dHIoJ2RhdGEtaGVpZ2h0JykpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZyh0aGlzX3BvcHRpbl93aWR0aCwgdGhpc19wb3B0aW5faGVpZ2h0KTtcblxuICAgICAgICAgICAgcG9wdGluX3NpemVfd2lkdGggPSB0aGlzX3BvcHRpbl93aWR0aCA/IHRoaXNfcG9wdGluX3dpZHRoIDogcG9wdGluX3NpemVfd2lkdGg7XG4gICAgICAgICAgICBwb3B0aW5fc2l6ZV9oZWlnaHQgPSB0aGlzX3BvcHRpbl9oZWlnaHQgPyB0aGlzX3BvcHRpbl9oZWlnaHQgOiBwb3B0aW5fc2l6ZV9oZWlnaHQ7XG4gICAgICAgICAgICAvLyBzaG93TG9nKHBvcHRpbl9zaXplX3dpZHRoLCBwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuXG4gICAgICAgICAgICAvLyBTZXQgbmV3IHBvcHRpbiBzaXplXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xuXG4gICAgICAgICAgICAvLyBpZihqUTIyNCgnaHRtbCcpLmhlaWdodCgpID4gMzAwKXtcbiAgICAgICAgICAgIC8vICB0aGlzX2NvbXBhcmFibGVfaGVpZ2h0ID0gTWF0aC5taW4od2luZG93LmlubmVySGVpZ2h0LCBqUTIyNCgnaHRtbCcpLmhlaWdodCgpKTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgaWYodGhpc19jb21wYXJhYmxlX3dpZHRoIDwgcG9wdGluX3NpemVfd2lkdGgpe1xuICAgICAgICAgICAgICAgIHRoaXNfY29tcGFyYWJsZV93aWR0aCA9IHRoaXNfY29tcGFyYWJsZV93aWR0aCAqIDAuOVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2NhbGVfd2lkdGggPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICB0aGlzX2NvbXBhcmFibGVfd2lkdGggIC8gcG9wdGluX3NpemVfd2lkdGgsXG4gICAgICAgICAgICAgICAgc2NhbGVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHZhciBzY2FsZV9oZWlnaHQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICB0aGlzX2NvbXBhcmFibGVfaGVpZ2h0ICAvIHBvcHRpbl9zaXplX2hlaWdodCxcbiAgICAgICAgICAgICAgICBzY2FsZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIHNob3dMb2coXCJzY2FsZV93aWR0aDpcIitzY2FsZV93aWR0aCk7XG4gICAgICAgICAgICAvLyBzaG93TG9nKFwic2NhbGVfaGVpZ2h0OlwiK3NjYWxlX2hlaWdodCk7XG4gICAgICAgICAgICBuZXdfc2NhbGUgPSBNYXRoLm1pbihzY2FsZV93aWR0aCwgc2NhbGVfaGVpZ2h0KTtcblxuICAgICAgICAgICAgLy9zaG93TG9nKCdyZWNhbHcgbmV3X3NjYWxlOicrbmV3X3NjYWxlKTtcblxuICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2NhbGUgPSBuZXdfc2NhbGU7XG4gICAgICAgICAgICAvLyBzaG93TG9nKCduZXdfc2NhbGUgJytuZXdfc2NhbGUpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnd2lkdGggJyt3aW5kb3cuaW5uZXJXaWR0aCsnICcrcG9wdGluX3NpemVfd2lkdGgpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnaGVpZ2h0ICcrd2luZG93LmlubmVySGVpZ2h0KycgJytwb3B0aW5fc2l6ZV9oZWlnaHQpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnc2NhbGUgJytzY2FsZV93aWR0aCsnICcrc2NhbGVfaGVpZ2h0KTtcbiAgICAgICAgICAgIC8vIF90aGlzLmNzcyh7XCJ0cmFuc2Zvcm1cIjogXCJzY2FsZShcIiArIG5ld19zY2FsZSArXCIpXCJ9KTtcbiAgICAgICAgICAgIF90aGlzLmF0dHIoJ2RhdGEtc2NhbGUnLCBuZXdfc2NhbGUpO1xuICAgICAgICAgICAgLy8gX3RoaXMuY3NzKHsnd2lkdGgnOiBwb3B0aW5fc2l6ZV93aWR0aCwnaGVpZ2h0JzogcG9wdGluX3NpemVfaGVpZ2h0fSk7XG4gICAgICAgICAgICBpZiggdHlwZW9mIF90aGlzLmdldCgwKSAhPSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5nZXQoMCkuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgcG9wdGluX3NpemVfd2lkdGgrJ3B4JywgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnbWF4LXdpZHRoJywgcG9wdGluX3NpemVfd2lkdGgrJ3B4JywgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgcG9wdGluX3NpemVfaGVpZ2h0KydweCcsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImVtYmVkZGVkXCIpe1xuICAgICAgICAgICAgdmFyIGVtYmVkZGVkX2xlZnQgPSAoX3RoaXMucGFyZW50KCkud2lkdGgoKSAtIHBvcHRpbl9zaXplX3dpZHRoICkvMjtcbiAgICAgICAgICAgIHZhciBlbWJlZGRlZF90b3AgPSAoX3RoaXMucGFyZW50KCkuaGVpZ2h0KCkgLSBwb3B0aW5fc2l6ZV9oZWlnaHQgKS8yO1xuICAgICAgICAgICAgZW1iZWRkZWRfbGVmdCA9IGVtYmVkZGVkX2xlZnQgPj0gMCA/IDAgOiBlbWJlZGRlZF9sZWZ0O1xuICAgICAgICAgICAgaWYoZW1iZWRkZWRfbGVmdCA8IDApe1xuICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd0b3AnOiBlbWJlZGRlZF90b3ArXCJweFwiLFxuICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IGVtYmVkZGVkX2xlZnQrXCJweFwiLFxuICAgICAgICAgICAgICAgICAgICAncmlnaHQnOiAnYXV0bydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IGVtYmVkZGVkX3RvcCtcInB4XCIsXG4gICAgICAgICAgICAgICAgICAgICdsZWZ0JzogJzBweCcsXG4gICAgICAgICAgICAgICAgICAgICdyaWdodCc6ICcwcHgnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYoX3RoaXMuYXR0cignZGF0YS1mb3JtLWFsaWduJykgPT0gJ3JpZ2h0Jyl7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyaWdodCc6ICcwcHgnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihfdGhpcy5hdHRyKCdkYXRhLWZvcm0tYWxpZ24nKSA9PSAnbGVmdCcpe1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAnMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyaWdodCc6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBwb3B0aW5fdHlwZSBpcyAnbGlnaHRib3gnXG4gICAgICAgIGlmICggcG9wdGluLnBvcHRpbl90eXBlID09IFwibW9iaWxlXCIgKXtcbiAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpZHRoID0gcGFyc2VJbnQoX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5hdHRyKCdkYXRhLXdpZHRoJykpO1xuICAgICAgICAgICAgdGhpc19wb3B0aW5faGVpZ2h0ID0gcGFyc2VJbnQoX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5hdHRyKCdkYXRhLWhlaWdodCcpKTtcbiAgICAgICAgICAgIC8vIHNob3dMb2codGhpc19wb3B0aW5fd2lkdGgsIHRoaXNfcG9wdGluX2hlaWdodCk7XG5cbiAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gdGhpc19wb3B0aW5fd2lkdGggPyB0aGlzX3BvcHRpbl93aWR0aCA6IHBvcHRpbl9zaXplX3dpZHRoO1xuICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gdGhpc19wb3B0aW5faGVpZ2h0ID8gdGhpc19wb3B0aW5faGVpZ2h0IDogcG9wdGluX3NpemVfaGVpZ2h0O1xuICAgICAgICAgICAgLy8gc2hvd0xvZyhwb3B0aW5fc2l6ZV93aWR0aCwgcG9wdGluX3NpemVfaGVpZ2h0KTtcblxuICAgICAgICAgICAgLy8gU2V0IG5ldyBwb3B0aW4gc2l6ZVxuICAgICAgICAgICAgdmFyIHNjYWxlID0gMTtcblxuICAgICAgICAgICAgLy8gaWYoalEyMjQoJ2h0bWwnKS5oZWlnaHQoKSA+IDMwMCl7XG4gICAgICAgICAgICAvLyAgdGhpc19jb21wYXJhYmxlX2hlaWdodCA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCwgalEyMjQoJ2h0bWwnKS5oZWlnaHQoKSk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIHZhciBzY2FsZV93aWR0aCA9IDE7XG5cbiAgICAgICAgICAgIGlmKHRoaXNfY29tcGFyYWJsZV93aWR0aCA+IHBvcHRpbl9zaXplX3dpZHRoKXtcbiAgICAgICAgICAgICAgICBzY2FsZV93aWR0aCA9IHRoaXNfY29tcGFyYWJsZV93aWR0aCAgLyBwb3B0aW5fc2l6ZV93aWR0aDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNjYWxlX3dpZHRoID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfY29tcGFyYWJsZV93aWR0aCAgLyBwb3B0aW5fc2l6ZV93aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdfc2NhbGUgPSBzY2FsZV93aWR0aDtcbiAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluX3NjYWxlID0gbmV3X3NjYWxlO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnbmV3X3NjYWxlICcrbmV3X3NjYWxlKTtcbiAgICAgICAgICAgIC8vIHNob3dMb2coJ3dpZHRoICcrd2luZG93LmlubmVyV2lkdGgrJyAnK3BvcHRpbl9zaXplX3dpZHRoKycgJyt0aGlzX2NvbXBhcmFibGVfd2lkdGgpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnaGVpZ2h0ICcrd2luZG93LmlubmVySGVpZ2h0KycgJytwb3B0aW5fc2l6ZV9oZWlnaHQrJyAnK3RoaXNfY29tcGFyYWJsZV9oZWlnaHQpO1xuICAgICAgICAgICAgLy8gc2hvd0xvZygnc2NhbGUgJytzY2FsZV93aWR0aCsnICcrc2NhbGVfaGVpZ2h0KTtcbiAgICAgICAgICAgIC8vcmVzZXQgdG8gMSBpZiBzY2FsZSBpcyBtb3JlIHRoYW4gYWN0dWFsIHNpemVcbiAgICAgICAgICAgIGlmKG5ld19zY2FsZT49MSl7bmV3X3NjYWxlID0gMX1cbiAgICAgICAgICAgIF90aGlzLmNzcyh7XG4gICAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIjogXCJzY2FsZShcIiArIG5ld19zY2FsZSArIFwiKVwiLFxuICAgICAgICAgICAgICAgIC8vXCJ0cmFuc2Zvcm1cIjogXCJzY2FsZShcIiArIFwiMVwiICsgXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJsZWZ0XCI6ICh0aGlzX2NvbXBhcmFibGVfd2lkdGgtcG9wdGluX3NpemVfd2lkdGgpLzJcbiAgICAgICAgICAgIH0pO1xuXG5cdFx0XHRpZihuZXdfc2NhbGUgPT0gMSl7IF90aGlzLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7IH1cblxuICAgICAgICAgICAgX3RoaXMuYXR0cignZGF0YS1zY2FsZScsIG5ld19zY2FsZSk7XG4gICAgICAgICAgICAvLyBfdGhpcy5jc3Moeyd3aWR0aCc6IHBvcHRpbl9zaXplX3dpZHRoLCdoZWlnaHQnOiBwb3B0aW5fc2l6ZV9oZWlnaHR9KTtcbiAgICAgICAgICAgIGlmKCB0eXBlb2YgX3RoaXMuZ2V0KDApICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICAgIF90aGlzLmdldCgwKS5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lkdGgnLCBwb3B0aW5fc2l6ZV93aWR0aCsncHgnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdtYXgtd2lkdGgnLCBwb3B0aW5fc2l6ZV93aWR0aCsncHgnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0KDApLnN0eWxlLnNldFByb3BlcnR5KCdoZWlnaHQnLCBwb3B0aW5fc2l6ZV9oZWlnaHQrJ3B4JywgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiAod2luZG93LmlubmVyV2lkdGggPiBwb3B0aW5fc2l6ZV93aWR0aCAmJiBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJtb2JpbGVcIil7XG4gICAgICAgIC8vICAvLyBTZXQgbmV3IHBvcHRpbiBzaXplXG4gICAgICAgIC8vICBpZiAoalEyMjQuaW5BcnJheShwb3B0aW4ucG9wdGluX2Zvcm1hdCxbXCJmb3JtYXRfMVwiLFwiZm9ybWF0XzJcIixcImZvcm1hdF80XCIsXCJmb3JtYXRfNlwiLFwiZm9ybWF0XzdcIixcImZvcm1hdF85XCJdKSA+LTEpIHtcbiAgICAgICAgLy8gICAgICBfdGhpcy5jc3Moeyd3aWR0aCc6IGpRMjI0KHdpbmRvdykud2lkdGgoKStcInB4XCIsJ21heC13aWR0aCc6IGpRMjI0KHdpbmRvdykud2lkdGgoKStcInB4XCJ9KTtcbiAgICAgICAgLy8gIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGhhbmRsZSBvbmx5IHBvcHRpbl90eXBlICdmdWxscGFnZSdcbiAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImZ1bGxwYWdlXCIpe1xuXG4gICAgICAgICAgICAvLyBTZXQgbmV3IHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgICAgIGllVmVyc2lvbiA9IEdldElFVmVyc2lvbigpO1xuICAgICAgICAgICAgX3RoaXMuYWRkQ2xhc3MoJ2llJytpZVZlcnNpb24pO1xuICAgIFxuICAgICAgICAgICAgcG9wX3dyYXBwZXJzX2NvbnRhaW5lciA9IF90aGlzLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpID4gZm9ybSwgLnBvcHRpbl90aGFua195b3Vfc2NyZWVuJyk7XG4gICAgICAgICAgICBwb3Bfd3JhcHBlcnNfY29udGFpbmVyLmNzcygnb3BhY2l0eScsICcwJyk7XG5cbiAgICAgICAgICAgIHRyeSB7IGNsZWFyVGltZW91dChuZXdTY2FsZVRpbWVvdXRbcG9wdGluLnBvcHRpbl9pZF0pOyB9IGNhdGNoIChlcnJvcikge31cblxuICAgICAgICAgICAgdmFyIHRoaXNfZm9ybWF0ID0gcGFyc2VJbnQoX3RoaXMuYXR0cignZGF0YS1wb3B0aW4tZm9ybWF0Jykuc3BsaXQoJ18nKVsxXSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXNfZm9ybWF0ICYmIHRoaXNfZm9ybWF0IDwgOSkge1xuXG4gICAgICAgICAgICAgICAgbmV3U2NhbGVUaW1lb3V0W3BvcHRpbi5wb3B0aW5faWRdID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbl9zaXplX3dpZHRoID0gMTkyMDtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3NpemVfaGVpZ2h0ID0gMTA4MDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbmV3IHBvcHRpbiBzaXplXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodGhpc19jb21wYXJhYmxlX3dpZHRoIDwgcG9wdGluX3NpemVfd2lkdGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19jb21wYXJhYmxlX3dpZHRoID0gdGhpc19jb21wYXJhYmxlX3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlX3dpZHRoID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2NvbXBhcmFibGVfd2lkdGggIC8gcG9wdGluX3NpemVfd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZV9oZWlnaHQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfY29tcGFyYWJsZV9oZWlnaHQgIC8gcG9wdGluX3NpemVfaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBuZXdfc2NhbGUgPSBNYXRoLm1pbihzY2FsZV93aWR0aCwgc2NhbGVfaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fc2NhbGUgPSBuZXdfc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmF0dHIoJ2RhdGEtc2NhbGUnLCBuZXdfc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3Moeyd3aWR0aCc6JycsJ2hlaWdodCc6JycsJ21heC13aWR0aCc6JycsJ21heC1oZWlnaHQnOicnfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGljX2JnX2NvbG9yID0gX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lciknKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RhdGljX2JnX2NvbG9yICE9IFwicmdiYSgwLCAwLCAwLCAwKVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2JhY2tncm91bmQtY29sb3InIDogc3RhdGljX2JnX2NvbG9yfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpLCAucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4nKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzpwb3B0aW5fc2l6ZV93aWR0aCsncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6cG9wdGluX3NpemVfd2lkdGgrJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOnBvcHRpbl9zaXplX2hlaWdodCsncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOnBvcHRpbl9zaXplX2hlaWdodCsncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCI6IE1hdGguZmxvb3IoKHRoaXNfY29tcGFyYWJsZV93aWR0aC1wb3B0aW5fc2l6ZV93aWR0aCkvMikrXCJweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjogTWF0aC5mbG9vcigodGhpc19jb21wYXJhYmxlX2hlaWdodC1wb3B0aW5fc2l6ZV9oZWlnaHQpLzIpK1wicHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZSh7IG9wYWNpdHkgOiAxIH0sIDI1MCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5kcmFnZ2FibGUtY29udGFpbmVyOm5vdCgucG9wdGluLXRhYi1jb250YWluZXIpLCAucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4nKS5jc3Moe1widHJhbnNmb3JtXCI6IFwic2NhbGUoXCIgKyBuZXdfc2NhbGUgK1wiKVwifSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5maW5kKCcuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKSwgLnBvcHRpbl90aGFua195b3Vfc2NyZWVuJykuYXR0cignZGF0YS1zY2FsZScsIG5ld19zY2FsZSk7XG5cblx0XHRcdFx0XHRcdGlmKG5ld19zY2FsZSA9PSAxKXsgX3RoaXMuY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybV94X2Nsb3NlID0gX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgI2Nsb3NlWEJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoYW5rX3hfY2xvc2UgPSBfdGhpcy5maW5kKCcucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4gI2Nsb3NlWEJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEodGhhbmtfeF9jbG9zZS5sZW5ndGgpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5wb3B0aW5fdGhhbmtfeW91X3NjcmVlbicpLnByZXBlbmQoZm9ybV94X2Nsb3NlLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoJyNjbG9zZVhCdXR0b24sICNjbG9zZVNraXBCdXR0b24nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNfb3JpZ2luYWxfcG9zID0gcGFyc2VJbnQoalEyMjQodGhpcykuYXR0cignZGF0YS1vcmlnaW5hbC1wb3MnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXNfb3JpZ2luYWxfcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfb3JpZ2luYWxfcG9zID0galEyMjQodGhpcykucG9zaXRpb24oKS5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5hdHRyKCdkYXRhLW9yaWdpbmFsLXBvcycsIHRoaXNfb3JpZ2luYWxfcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICh0aGlzX29yaWdpbmFsX3BvcyArIGpRMjI0KHRoaXMpLndpZHRoKCkgKyA1MCkgPiBwb3B0aW5fc2l6ZV93aWR0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdfbGVmdCA9ICh0aGlzX2NvbXBhcmFibGVfd2lkdGggLSAocG9wdGluX3NpemVfd2lkdGgqbmV3X3NjYWxlKSkgLyAyIC8gbmV3X3NjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyaWdodCc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogKHRoaXNfb3JpZ2luYWxfcG9zK25ld19sZWZ0KSsncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wX3dyYXBwZXJzX2NvbnRhaW5lci5hbmltYXRlKHsgb3BhY2l0eSA6IDEgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LCAyNTApO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgbmV3U2NhbGVUaW1lb3V0W3BvcHRpbi5wb3B0aW5faWRdID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChqUTIyNCh3aW5kb3cpLndpZHRoKCkgPCBwb3B0aW5fc2l6ZV93aWR0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfdGhpcy5jc3Moeyd3aWR0aCc6IGpRMjI0KHdpbmRvdykud2lkdGgoKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J3dpZHRoJzogJzEwMCUnfSk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IHBvcHRpbl9zaXplX3dpZHRoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF90aGlzLmNzcyh7J3dpZHRoJzogalEyMjQod2luZG93KS53aWR0aCgpK1wicHhcIiwnbWF4LXdpZHRoJzogalEyMjQod2luZG93KS53aWR0aCgpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3NzKHsnd2lkdGgnOiAnMTAwJScsJ21heC13aWR0aCc6ICcxMDAlJ30pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCA+IHBvcHRpbl9zaXplX2hlaWdodCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfdGhpcy5jc3MoeydoZWlnaHQnOndpbmRvdy5pbm5lckhlaWdodCtcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF90aGlzLmZpbmQoJyNwb3B0aW5EcmFnZ2FibGVDb250YWluZXInKS5maXJzdCgpLmNzcyh7J2hlaWdodCc6d2luZG93LmlubmVySGVpZ2h0K1wicHhcIiwnbWF4LWhlaWdodCc6IGpRMjI0KHdpbmRvdykud2lkdGgoKStcInB4XCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2hlaWdodCc6JzEwMCUnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5maW5kKCcuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKScpLmZpcnN0KCkuY3NzKHsnaGVpZ2h0JzonMTAwJScsJ21heC1oZWlnaHQnOiAnMTAwJSd9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0ICE9PVwiZm9ybWF0XzRcIlxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgcG9wdGluX3NpemVfaGVpZ2h0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNzcyh7J2hlaWdodCc6d2luZG93LmlubmVySGVpZ2h0K1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2VudGVyIHBvcHRpbiBlbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluX2VsX2xlZnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4X2VsX3JpZ2h0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbl9lbF90b3AgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4X2VsX2JvdHRvbSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHRpbl93cmFwcGVycyA9IGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddICNwb3B0aW5Gb3JtU3VibWl0Jytwb3B0aW4ucG9wdGluX2lkKycsIFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuLCBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIC5wb3B0aW5fcGxheV9zY3JlZW4sIFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnBvcHRpbl93aW5uaW5nX3NjcmVlbiwgW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAucG9wdGluX2xvc2luZ19zY3JlZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX3dyYXBwZXJzLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwYXJlbnQgPSBqUTIyNCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHBhcmVudC5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oaSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdtaW5fbWF4JywgbWluX2VsX2xlZnQsIG1heF9lbF9yaWdodCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighalEyMjQodGhpcykuaXMoJy5kcmFnZ2FibGUsIC5pbnB1dHMtY29udGFpbmVyLCAucmVkaXJlY3QtdXJsLWJsYW5rLCAjY2xvc2VTa2lwQnV0dG9uJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFqUTIyNCh0aGlzKS5pcygnOnZpc2libGUnKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2xlZnQgPSBqUTIyNCh0aGlzKS5wb3NpdGlvbigpLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc190b3AgPSBqUTIyNCh0aGlzKS5wb3NpdGlvbigpLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3JpZ2h0ID0gdGhpc19sZWZ0ICsgalEyMjQodGhpcykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2JvdHRvbSA9IHRoaXNfdG9wICsgalEyMjQodGhpcykuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtaW5fZWxfbGVmdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluX2VsX2xlZnQgPSBNYXRoLm1pbihtaW5fZWxfbGVmdCwgdGhpc19sZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5fZWxfbGVmdCA9IHRoaXNfbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtaW5fZWxfdG9wICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5fZWxfdG9wID0gTWF0aC5taW4obWluX2VsX3RvcCwgdGhpc190b3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9lbF90b3AgPSB0aGlzX3RvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXhfZWxfcmlnaHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heF9lbF9yaWdodCA9IE1hdGgubWF4KG1heF9lbF9yaWdodCwgdGhpc19yaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4X2VsX3JpZ2h0ID0gdGhpc19yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXhfZWxfYm90dG9tICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfZWxfYm90dG9tID0gTWF0aC5tYXgobWF4X2VsX2JvdHRvbSwgdGhpc19ib3R0b20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heF9lbF9ib3R0b20gPSB0aGlzX2JvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdtaW5fbWF4JywgbWluX2VsX2xlZnQsIG1heF9lbF9yaWdodCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpZk1vYmlsZVBvcHRpbil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluX2VsX2xlZnQgPSBtaW5fZWxfbGVmdCAtIChqUTIyNCh3aW5kb3cpLndpZHRoKCkvMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heF9lbF9yaWdodCA9IG1heF9lbF9yaWdodCArIChqUTIyNCh3aW5kb3cpLndpZHRoKCkvMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgd2lkdGggcmVzaXplIGFmdGVyIG9uZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09XCJmb3JtYXRfM1wiIHx8IHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09XCJmb3JtYXRfNFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVfZnVsbHBhZ2Vfd2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVfZnVsbHBhZ2VfaGVpZ2h0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCB3aWR0aCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uc3Rfd2lkdGgsIGNvbnN0X2hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09XCJmb3JtYXRfMVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0X3dpZHRoID0gNjAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RfaGVpZ2h0ID0gOTUwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYocG9wdGluLnBvcHRpbl9mb3JtYXQgPT1cImZvcm1hdF8yXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Rfd2lkdGggPSA5MDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdF9oZWlnaHQgPSA5NTA7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09XCJmb3JtYXRfM1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0X3dpZHRoID0gMTEzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0X2hlaWdodCA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09XCJmb3JtYXRfNFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0X3dpZHRoID0gMTEzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0X2hlaWdodCA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdF93aWR0aCA9IDE5MjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdF9oZWlnaHQgPSAxMDgwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy92YXIgY29uc3RfaGVpZ2h0ID0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGVfd2lkdGggPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGVfaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRMjI0KHdpbmRvdykud2lkdGgoKSA8IGNvbnN0X3dpZHRoICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZV93aWR0aCA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHdpbmRvdykud2lkdGgoKSAvIGNvbnN0X3dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgPCBjb25zdF9oZWlnaHQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlX2hlaWdodCA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAvIGNvbnN0X2hlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5ld19zY2FsZSA9IE1hdGgubWluKCBzY2FsZV93aWR0aCxzY2FsZV9oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ25ld19zY2FsZScsIG5ld19zY2FsZSwgc2NhbGVfd2lkdGgsIHNjYWxlX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddJykuY3NzKHtcInRyYW5zZm9ybVwiOiBcInNjYWxlKFwiK25ld19zY2FsZStcIilcIn0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBqUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSBmb3JtJykuY3NzKHtcInRyYW5zZm9ybVwiOiBcInNjYWxlKFwiK25ld19zY2FsZStcIilcIn0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHRoaXNfcG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyh0aGlzX3BvcHRpbi5maW5kKCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc19wb3B0aW5fY29udGFpbmVyID0gX3RoaXMuZmluZCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc19wb3B0aW5fdGhhbmtfeW91ID0gX3RoaXMuZmluZCgnI3BvcHRpblRoYW5rWW91U2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX3BvcHRpbl9wbGF5X3NjcmVlbiA9IF90aGlzLmZpbmQoJyNwb3B0aW5QbGF5U2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX3BvcHRpbl93aW5uaW5nX3NjcmVlbiA9IF90aGlzLmZpbmQoJyNwb3B0aW5XaW5uaW5nU2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX3BvcHRpbl9sb3Npbmdfc2NyZWVuID0gX3RoaXMuZmluZCgnI3BvcHRpbkxvc2luZ1NjcmVlbicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHRoaXNfcG9wdGluX2NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ2JhY2tncm91bmQtY29sb3IgOiAnICsgdGhpc19wb3B0aW5fY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicpKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJfd2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJfbWFyZ2luID0gJ2F1dG8nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZnVsbHBhZ2VfcG9wdGluX3dpZHRoIDwgKHNjcmVlbl93aWR0aCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGllVmVyc2lvbiA9PSAxMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcl93aWR0aCA9IGZ1bGxwYWdlX3BvcHRpbl93aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udGFpbmVyX21hcmdpbiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZENsYXNzKCd3aXRoLW1hcmdpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGRDbGFzcygnZnVsbC13aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIV90aGlzLmhhc0NsYXNzKCdiZy1tb3ZlZCcpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jc3MoeyAnYmFja2dyb3VuZCcgOiB0aGlzX3BvcHRpbl9jb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kJyksICdiYWNrZ3JvdW5kLWNvbG9yJyA6IHRoaXNfcG9wdGluX2NvbnRhaW5lci5jc3MoJ2JhY2tncm91bmQtY29sb3InKSwgJ2JhY2tncm91bmQtaW1hZ2UnIDogdGhpc19wb3B0aW5fY29udGFpbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScpLCAnbWF4LXdpZHRoJyA6ICdpbml0aWFsJywgJ2hlaWdodCcgOiAnMTAwJScgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkQ2xhc3MoJ2JnLW1vdmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJfY3NzID0geyAnd2lkdGgnIDogY29udGFpbmVyX3dpZHRoLCAnYmFja2dyb3VuZCc6ICdub25lJywgJ2JhY2tncm91bmQtY29sb3InOiAnbm9uZScsICdiYWNrZ3JvdW5kLWltYWdlJzogJ25vbmUnLCAndHJhbnNmb3JtJyA6ICdzY2FsZSgnK25ld19zY2FsZSsnKScsICdtYXJnaW4nIDogY29udGFpbmVyX21hcmdpbiB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9jb250YWluZXIuY3NzKGNvbnRhaW5lcl9jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fY29udGFpbmVyLmF0dHIoJ2RhdGEtc2NhbGUnLCBuZXdfc2NhbGUpO1xuXG5cdFx0XHRcdFx0XHRpZihuZXdfc2NhbGUgPT0gMSl7IHRoaXNfcG9wdGluX2NvbnRhaW5lci5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIpOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3RoYW5rX3lvdS5jc3MoY29udGFpbmVyX2Nzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl90aGFua195b3UuYXR0cignZGF0YS1zY2FsZScsIG5ld19zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3BsYXlfc2NyZWVuLmNzcyhjb250YWluZXJfY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3BsYXlfc2NyZWVuLmF0dHIoJ2RhdGEtc2NhbGUnLCBuZXdfc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lubmluZ19zY3JlZW4uY3NzKGNvbnRhaW5lcl9jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fd2lubmluZ19zY3JlZW4uYXR0cignZGF0YS1zY2FsZScsIG5ld19zY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9sb3Npbmdfc2NyZWVuLmNzcyhjb250YWluZXJfY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2xvc2luZ19zY3JlZW4uYXR0cignZGF0YS1zY2FsZScsIG5ld19zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ21pbl9tYXgnLCBtaW5fZWxfbGVmdCwgbWF4X2VsX3JpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsX3dpZHRoID0gbWF4X2VsX3JpZ2h0IC0gbWluX2VsX2xlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnX2NvbnRfd2lkdGggPSBfdGhpcy5maW5kKCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmKHdpbl93aWR0aCA+IGVsX3dpZHRoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAvLyBzaG93TG9nKCdoZXJlIDEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBlbF9sZWZ0ID0gZWxfd2lkdGgvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgLy8gc2hvd0xvZygnaGVyZSAyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHdpbl93aWR0aCwgKGVsX3dpZHRoICogc2NhbGVfaGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKHdpbl93aWR0aC9lbF93aWR0aCwgc2NhbGVfaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsX2xlZnQgPSAoZHJhZ19jb250X3dpZHRoIC0gZWxfd2lkdGgpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbF9sZWZ0ID0gZWxfbGVmdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxfbGVmdCA9IChlbF93aWR0aCAtIGpRMjI0KHdpbmRvdykud2lkdGgoKSkvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsX2xlZnQgPSAnLScrKChlbF93aWR0aCAqICgxLXNjYWxlX2hlaWdodCkpLzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxfbGVmdCA9ICctJysoKGVsX3dpZHRoLzIpKnNjYWxlX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKCdlbCcsIGVsX3dpZHRoLCBlbF9sZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddICNwb3B0aW5Gb3JtU3VibWl0Jytwb3B0aW4ucG9wdGluX2lkKS5jc3Moeyd3aWR0aCc6ZWxfd2lkdGgrJ3B4JywncG9zaXRpb24nOidhYnNvbHV0ZScsJ2xlZnQnOmVsX2xlZnQrJ3B4J30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvc2VfYnV0dG9uID0gX3RoaXMuZmluZCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lciAjY2xvc2VYQnV0dG9uJykuY3NzKHsncG9zaXRpb24nOidhYnNvbHV0ZSAhaW1wb3J0YW50JywndG9wJzonNDBweCAhaW1wb3J0YW50JywncmlnaHQnOic0MHB4ICFpbXBvcnRhbnQnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmluZCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lciAjY2xvc2VYQnV0dG9uJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlcGVuZChjbG9zZV9idXR0b24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHRpbl9jcmVkaXQgPSBfdGhpcy5maW5kKCcucG9wdGluLWNyZWRpdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpbmQoJy5wb3B0aW4tY3JlZGl0JykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlcGVuZChwb3B0aW5fY3JlZGl0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmKCBwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImZvcm1hdF80XCIgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgX3RoaXMuY3NzKHtcInRvcFwiOiAoKHNjcmVlbi5oZWlnaHQtKHNjcmVlbi5oZWlnaHQqc2NhbGVfaGVpZ2h0KSkvLTIpK1wicHhcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2codGhpc19wb3B0aW5fY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhcInRoaXNfcG9wdGluX2NvbnRhaW5lciBjc3MgOiAtXCIrKCh3aW5kb3cuaW5uZXJIZWlnaHQtKHdpbmRvdy5pbm5lckhlaWdodCpzY2FsZV9oZWlnaHQpKS8yKStcInB4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2NvbnRhaW5lcl9jc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJveC1zaGFkb3dcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG9wJzogKCh3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY29uc3RfaGVpZ2h0KSkvMikrJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogKCh3aW5kb3cuaW5uZXJXaWR0aCAtIChjb25zdF93aWR0aCkpLzIpKydweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOicnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX2NvbnRhaW5lci5jc3ModGhpc19jb250YWluZXJfY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fY29udGFpbmVyLmZpbmQoJ2Zvcm0nKS5jc3Moeyd3aWR0aCc6JycsJ2xlZnQnOicnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3RoYW5rX3lvdS5jc3ModGhpc19jb250YWluZXJfY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19wb3B0aW5fcGxheV9zY3JlZW4uY3NzKHRoaXNfY29udGFpbmVyX2Nzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcG9wdGluX3dpbm5pbmdfc2NyZWVuLmNzcyh0aGlzX2NvbnRhaW5lcl9jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3BvcHRpbl9sb3Npbmdfc2NyZWVuLmNzcyh0aGlzX2NvbnRhaW5lcl9jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKCdkYXRhLXdlbGxjb21lLXNjcmVlbicpID09ICcxJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZSh7IG9wYWNpdHkgOiAxIH0sIDI1MCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gX3RoaXMuZmluZCgnI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lciwgLnBvcHRpbl90aGFua195b3Vfc2NyZWVuJykuY3NzKHtcInRyYW5zZm9ybVwiOiBcInNjYWxlKFwiICsgbmV3X3NjYWxlICtcIilcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybV94X2Nsb3NlID0gX3RoaXMuZmluZCgnLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcikgI2Nsb3NlWEJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhhbmtfeF9jbG9zZSA9IF90aGlzLmZpbmQoJy5wb3B0aW5fdGhhbmtfeW91X3NjcmVlbiAjY2xvc2VYQnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoYW5rX3hfY2xvc2UucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbGF5X3hfY2xvc2UgPSBfdGhpcy5maW5kKCcucG9wdGluX3BsYXlfc2NyZWVuICNjbG9zZVhCdXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheV94X2Nsb3NlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2luX3hfY2xvc2UgPSBfdGhpcy5maW5kKCcucG9wdGluX3dpbm5pbmdfc2NyZWVuICNjbG9zZVhCdXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luX3hfY2xvc2UucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb3NpbmdfeF9jbG9zZSA9IF90aGlzLmZpbmQoJy5wb3B0aW5fbG9zaW5nX3NjcmVlbiAjY2xvc2VYQnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc2luZ194X2Nsb3NlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiggISh0aGFua194X2Nsb3NlLmxlbmd0aCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBfdGhpcy5maW5kKCcucG9wdGluX3RoYW5rX3lvdV9zY3JlZW4nKS5wcmVwZW5kKGZvcm1feF9jbG9zZS5jbG9uZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnI2Nsb3NlWEJ1dHRvbicpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX29yaWdpbmFsX3BvcyA9IGpRMjI0KHRoaXMpLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKHRoaXNfb3JpZ2luYWxfcG9zICsgalEyMjQodGhpcykud2lkdGgoKSArIDUwKSA+IHdpbmRvdy5pbm5lcldpZHRoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2xlZnQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGpRMjI0KHRoaXMpLndpZHRoKCkgLSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmlnaHQnOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogbmV3X2xlZnQrJ3B4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCgnI2Nsb3NlU2tpcEJ1dHRvbicpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzX29yaWdpbmFsX3BvcyA9IGpRMjI0KHRoaXMpLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKHRoaXNfb3JpZ2luYWxfcG9zICsgalEyMjQodGhpcykud2lkdGgoKSArIDUwKSA+IHdpbmRvdy5pbm5lcldpZHRoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2xlZnQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGpRMjI0KHRoaXMpLndpZHRoKCkgLSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmlnaHQnOiAnMTBweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3AnOiAnNXB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3Bfd3JhcHBlcnNfY29udGFpbmVyLmFuaW1hdGUoeyBvcGFjaXR5IDogMSB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhzY3JlZW4uaGVpZ2h0LHBvcHRpbl9zaXplX2hlaWdodCxzY2FsZV9oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzaG93TG9nKFwiLVwiKyhzY3JlZW4uaGVpZ2h0LShwb3B0aW5fc2l6ZV9oZWlnaHQqc2NhbGVfaGVpZ2h0KSkrXCJweFwiKTtcblxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogZG9SZXNpemVQb3B0aW4oKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IEhhbmRsZSBwb3B0aW4gJ2JhcicgdHlwZSAtIHBhZGRpbmcgdG9wIGRvY3VtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFySHRtbFBhZGRpbmcocG9wdGluKXtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2hvd0xvZygnYmFySHRtbFBhZGRpbmcoKScpO1xuICAgICAgICAgICAgcGFkZGluZ190b3AgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuaGVpZ2h0KCkgKiBwYXJzZUZsb2F0KGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKCdkYXRhLXNjYWxlJykpO1xuICAgICAgICAgICAgalEyMjQoXCJodG1sXCIpLmFuaW1hdGUoe1wicGFkZGluZy10b3BcIjogTWF0aC5mbG9vcihwYWRkaW5nX3RvcCkrXCJweFwifSwgMzAwKTtcbiAgICAgICAgICAgIC8vIGpRMjI0KFwiaHRtbFwiKS5hbmltYXRlKHtcInBhZGRpbmctdG9wXCI6IChwYXJzZUludChqUTIyNChcImh0bWxcIikuY3NzKCdwYWRkaW5nLXRvcCcpKS0oalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmhlaWdodCgpIC0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCApKStcInB4XCJ9LCAzMDApO1xuICAgICAgICB9LDMwMCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCksIGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KCksIHBvcHRpbkNvbnZlcnNpb24oKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiByZXR1cm4gdmlzaXRvciByZWZlcnJlciB2YWx1ZSBmcm9tIFwicG9wdGluX3JlZmVycmVyXCIgY29va2llXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmVmZXJyZXIoKXtcbiAgICAgICAgLy9TZXQgcHJvdG9jb2wgY29va2llIGZvciBleGlzdGluZyBjb29raWVzIGFuZCByZW1vdmUgcHJvdG9jb2wgZnJvbSB1cmxzXG4gICAgICAgIHZhciBwcm90b2NvbFJlZ3ggPSAvXmh0dHBzPzpcXC9cXC8vO1xuICAgICAgICB2YXIgcG9wdGluX3JlZmVycmVyID0gcG9wdGluR2V0Q29va2llKFwicG9wdGluX3JlZmVycmVyXCIpO1xuICAgICAgICBpZiAoIHBvcHRpbl9yZWZlcnJlciAmJiBwcm90b2NvbFJlZ3gudGVzdChwb3B0aW5fcmVmZXJyZXIpICkge1xuICAgICAgICAgICAgdmFyIHNldF91cmxfcHJvdG9jb2wgPSBwb3B0aW5fcmVmZXJyZXIuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpID8gXCJzZWN1cmVcIiA6IFwidW5zZWN1cmVcIjtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3JlZmVycmVyX3Byb3RvY29sJywgc2V0X3VybF9wcm90b2NvbCwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICBwb3B0aW5fcmVmZXJyZXIgPSBwb3B0aW5fcmVmZXJyZXIucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJylcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX3JlZmVycmVyJywgcG9wdGluX3JlZmVycmVyLCAwLjAwMTM4ODg4ODg4ODg4ODg5KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVybF9wcm90b2NvbCA9IChwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fcmVmZXJyZXJfcHJvdG9jb2xcIikgJiYgcG9wdGluR2V0Q29va2llKFwicG9wdGluX3JlZmVycmVyX3Byb3RvY29sXCIpID09IFwic2VjdXJlXCIpID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCI7XG4gICAgICAgIHJldHVybiAocG9wdGluR2V0Q29va2llKFwicG9wdGluX3JlZmVycmVyXCIpID8gKCBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fcmVmZXJyZXJcIikuaW5kZXhPZih3aW5kb3cubG9jYXRpb24uaG9zdCkgIT09IC0xID8gJycgOiB1cmxfcHJvdG9jb2wrcG9wdGluR2V0Q29va2llKFwicG9wdGluX3JlZmVycmVyXCIpKSA6ICcnICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJldmlvdXNVcmwoKSB7XG4gICAgICAgIC8vU2V0IHByb3RvY29sIGNvb2tpZSBmb3IgZXhpc3RpbmcgY29va2llcyBhbmQgcmVtb3ZlIGh0dHAvaHR0cHMgZnJvbSB1cmxzXG4gICAgICAgIHZhciBwcm90b2NvbFJlZ3ggPSAvXmh0dHBzPzpcXC9cXC8vO1xuICAgICAgICB2YXIgcG9wdGluX3ByZXZpb3VzX3VybCA9IHBvcHRpbkdldENvb2tpZShcInBvcHRpbl9wcmV2aW91c191cmxcIik7XG4gICAgICAgIGlmICggcG9wdGluX3ByZXZpb3VzX3VybCAmJiBwcm90b2NvbFJlZ3gudGVzdChwb3B0aW5fcHJldmlvdXNfdXJsKSApIHtcbiAgICAgICAgICAgIHZhciBzZXRfdXJsX3Byb3RvY29sID0gcG9wdGluX3ByZXZpb3VzX3VybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikgPyBcInNlY3VyZVwiIDogXCJ1bnNlY3VyZVwiO1xuICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fcHJldmlvdXNfdXJsX3Byb3RvY29sJywgc2V0X3VybF9wcm90b2NvbCwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICBwb3B0aW5fcHJldmlvdXNfdXJsID0gcG9wdGluX3ByZXZpb3VzX3VybC5yZXBsYWNlKC9eaHR0cHM/OlxcL1xcLy8sICcnKVxuICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fcHJldmlvdXNfdXJsJywgcG9wdGluX3ByZXZpb3VzX3VybCwgMC4wMDEzODg4ODg4ODg4ODg4OSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1cmxfcHJvdG9jb2wgPSAocG9wdGluR2V0Q29va2llKFwicG9wdGluX3ByZXZpb3VzX3VybF9wcm90b2NvbFwiKSAmJiBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fcHJldmlvdXNfdXJsX3Byb3RvY29sXCIpID09IFwic2VjdXJlXCIpID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCI7XG4gICAgICAgIHJldHVybiAocG9wdGluR2V0Q29va2llKFwicG9wdGluX3ByZXZpb3VzX3VybFwiKSA/ICggcG9wdGluR2V0Q29va2llKFwicG9wdGluX3ByZXZpb3VzX3VybFwiKS5pbmRleE9mKHdpbmRvdy5sb2NhdGlvbi5ob3N0KSAhPT0gLTEgPyB1cmxfcHJvdG9jb2wrcG9wdGluR2V0Q29va2llKFwicG9wdGluX3ByZXZpb3VzX3VybFwiKSA6ICcnICkgOiAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljaygpLGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmV0dXJuIGFsbCBjb29raWVzIHdpdGggcG9wdGluIGluZGV4IGFzIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJlbGV2ZW50Q29va2llKCl7XG4gICAgICAgIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgICAgICAgcmVsZXZlbnRfY29va2llPVwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZiAoY29va2llc1tpXS5zcGxpdCgnPScpWzBdLmluZGV4T2YoJ3BvcHRpbicpICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgLy8gc2hvd0xvZyhjb29raWVzW2ldKTtcbiAgICAgICAgICAgICAgICByZWxldmVudF9jb29raWUgKz0gY29va2llc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVsZXZlbnRfY29va2llO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSxpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJldHVybiBhbGwgY29va2llcyB3aXRoIHBvcHRpbiBpbmRleCBhcyBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRMZWFkZXJDb29raWUoKXtcbiAgICAgICAgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICByZWxldmVudF9jb29raWU9XCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGlmIChjb29raWVzW2ldLnNwbGl0KCc9JylbMF0uc3RhcnRzV2l0aChcIiBjY19cIikpe1xuICAgICAgICAgICAgICAgIC8vIHNob3dMb2coY29va2llc1tpXSk7XG4gICAgICAgICAgICAgICAgcmVsZXZlbnRfY29va2llICs9IGNvb2tpZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGV2ZW50X2Nvb2tpZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluQ29va2llc0ZpbHRlcigpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJldHVybiBhcnJheSB3aXRoIGFsbCB3ZWJzaXRlIGNvb2tpZXNcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGdldEFsbENvb2tpZXMoKXtcbiAgICAgICAgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICBhcnJheSA9IFtdXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYWlyID0gY29va2llc1tpXS5zcGxpdCgnPScpXG4gICAgICAgICAgICAka2V5ID0gcGFpclswXSA9PSB1bmRlZmluZWQgPyAnJyA6IHBhaXJbMF0udHJpbSgpO1xuICAgICAgICAgICAgJHZhbHVlID0gcGFpclsxXSA9PSB1bmRlZmluZWQgPyAnJyA6IHBhaXJbMV0udHJpbSgpO1xuICAgICAgICAgICAgaWYgKCRrZXkgIT0gJycpXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh7a2V5OiRrZXksdmFsdWU6JHZhbHVlfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSxpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJldHVybiBhbGwgd2Vic2l0ZSBjb29raWVzIHdpdGhvdXQgUG9wdGluIG9uZWxpbmUgY29va2llXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V2Vic2l0ZUNvb2tpZSgpe1xuICAgICAgICB3X2MgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgICAgICAgcl93X2M9XCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3X2MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYgKHdfY1tpXS5zcGxpdCgnPScpWzBdLmluZGV4T2YoJ3BvcHRpbicpID09IC0xKXtcbiAgICAgICAgICAgICAgICByX3dfYyArPSB3X2NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJfd19jO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdE9uQ2xpY2soKSxpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFJldHVybiBBdXRvUGlsb3QgdHJpZ2dlciBhcyBzdHJpbmcgZnJvbSBicm93c2VyIHNlc3Npb24gc3RvcmFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEF1dG9QaWxvdHMoKXtcblxuICAgICAgICBhcF90cmlnZ2VycyA9Jyc7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBqUTIyNC5lYWNoKHdpbmRvdy5zZXNzaW9uU3RvcmFnZSxmdW5jdGlvbihrZXksaW5kZXgpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ2FwdF8nKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBfdHJpZ2dlcnMgKz0ga2V5Kyc6JytpbmRleCsnfCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvd0xvZygnU29ycnkhIE5vIFdlYiBTdG9yYWdlIHN1cHBvcnQuLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIHNob3dMb2coZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBfdHJpZ2dlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljaygpLGluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0KClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmV0dXJuIHVzZXIgb3JpZ2luIGxhbmRpbmcgcGFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE9yaWdpbkxhbmRpbmdQYWdlKCl7XG5cbiAgICAgICAgLy8gU2V0IGRlZnVsdCBsYW5kaW5nIHBhZ2VcbiAgICAgICB2YXIgcGxwID0gJyc7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGlmKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX29yaWdpbl9sYW5kaW5nX3BhZ2VcIikgIT0gbnVsbCAmJiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9vcmlnaW5fbGFuZGluZ19wYWdlXCIpICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIHBscCA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX29yaWdpbl9sYW5kaW5nX3BhZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93TG9nKCdTb3JyeSEgTm8gV2ViIFN0b3JhZ2Ugc3VwcG9ydC4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgc2hvd0xvZyhlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBscDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3RPbkNsaWNrKCksaW5pdGlhdGVQdWxsUG9wdGluc1JlcXVlc3QoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBSZXR1cm4gcG9wdGluIHZpZXdlZCB1cmxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQb3B0aW5WaWV3ZWRVcmwocG9wdGluKXtcblxuICAgICAgICAvLyBTZXQgZGVmdWx0IGxhbmRpbmcgcGFnZVxuICAgICAgICB2YXIgcGxwID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwb3B0aW4pIHtcbiAgICAgICAgICAgICAgICBpZih3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl92aWV3ZWRfdXJsX1wiK3BvcHRpbi5wb3B0aW5faWQpICE9IG51bGwgJiYgd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fdmlld2VkX3VybF9cIitwb3B0aW4ucG9wdGluX2lkKSAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICBwbHAgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl92aWV3ZWRfdXJsX1wiK3BvcHRpbi5wb3B0aW5faWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvd0xvZygnU29ycnkhIE5vIFdlYiBTdG9yYWdlIHN1cHBvcnQgb3IgcG9wdGluLi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBzaG93TG9nKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBpbml0aWF0ZVB1bGxQb3B0aW5zUmVxdWVzdCgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCBwb3B0aW4gZGVmYXVsdCBjb29raWVzIGxpa2U6XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IHBvcHRpbl9kX3Jfdl8gLT4gcG9wdGluIGRpc2FwbHkgcmV0dXJuaW5nIHZpc2l0b3JzIC0gMzY1IGRheXNcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogcG9wdGluX2RfYV94X3ZfIC0+IHBvcHRpbiBkaXNhcGx5IGFmdGVyICd4JyB2aXNpdGluZyAgLSAzNjUgZGF5c1xuICAgICAqIERlc2MgICAgICAgICAgICAgOiBwb3B0aW5fc2Vzc2lvbiAtPiBmb3IgMzAgbWludXRlc1xuICAgICAqIERlc2MgICAgICAgICAgICAgOiBFdGMuLi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0Q29va2llKCl7XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBwb3B0aW5zXG4gICAgICAgIGlmIChhbGxfcG9wdGlucyBpbnN0YW5jZW9mIE9iamVjdCB8fCBhbGxfcG9wdGlucyBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgIC8vIEZvciBlYWNoIHBvcHRpblxuICAgICAgICAgICAgalEyMjQuZWFjaChhbGxfcG9wdGlucyxmdW5jdGlvbihrZXksaW5kZXgpe1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZF9mX2EhPSB1bmRlZmluZWQgJiYgdGhpcy5kX2ZfYSAmJiB0aGlzLmRfZl9yLmluZGV4T2YoJ2Rpc3BsYXlfb25jZV9ldmVyeV9mZXdfdmlzaXRpbmdfNCcpID4gLTEgKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgJ3BvcHRpbiBkaXNhcGx5IHJldHVybmluZyB2aXNpdG9ycycgY29va2llcyBpcyBzZXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fZF9yX3ZfJyt0aGlzLnBvcHRpbl9pZCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm90IGZpcnN0IHZpc2l0b3IgdmlzaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0+IGluY3JlYWNlIGJ5IG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImZpcnN0X3Zpc2l0X1wiK3RoaXMucG9wdGluX2lkKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChwb3B0aW5HZXRDb29raWUoJ3BvcHRpbl9kX3Jfdl8nK3RoaXMucG9wdGluX2lkKSkgKyAxIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9kX3Jfdl8nK3RoaXMucG9wdGluX2lkLCB2YWx1ZSwgMzY1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZmlyc3QgdmlzaXQgc2Vzc2lvbiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImZpcnN0X3Zpc2l0X1wiK3RoaXMucG9wdGluX2lkLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgJ3BvcHRpbiBkaXNhcGx5IHJldHVybmluZyB2aXNpdG9ycycgY29va2llcyBpcyBub3Qgc2V0XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGNvb2tpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX2Rfcl92XycrdGhpcy5wb3B0aW5faWQsIDAsIDM2NSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgc2VlaW9uIGZpcnN0X3Zpc2l0XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImZpcnN0X3Zpc2l0X1wiK3RoaXMucG9wdGluX2lkLDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZF9mX2EhPSB1bmRlZmluZWQgJiYgdGhpcy5kX2ZfYSAmJiB0aGlzLmRfZl9yLmluZGV4T2YoJ2Rpc3BsYXlfb25jZV9ldmVyeV9mZXdfZGF5c18zJykgPiAtMSApe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmICdwb3B0aW4gZGlzYXBseSBhZnRlciAneCcgdmlzaXRpbmcnIGNvb2tpZXMgaXMgbm90IHNldFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fZF9hX3hfdl8nK3RoaXMucG9wdGluX2lkKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgPSBnZXRDdXJyZW50RGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YWx1ZSAgPSBcIjIwMTctMDMtMjZcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCAgY29va2llc1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fZF9hX3hfdl8nK3RoaXMucG9wdGluX2lkLCB2YWx1ZSwgMzY1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmICdwb3B0aW5fcGFnZXZpZXdzXycgc2Vzc2lvbiBpcyBub3Qgc2V0XG4gICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9wYWdldmlld3NfXCIrdGhpcy5wb3B0aW5faWQpKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHBvcHRpbl9wYWdldmlld3NfIGNvdW50ZXJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwb3B0aW5fcGFnZXZpZXdzX1wiK3RoaXMucG9wdGluX2lkLDApO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFjZSBieSBvbmUgcG9wdGluX3BhZ2V2aWV3c18gY291bnRlclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInBvcHRpbl9wYWdldmlld3NfXCIrdGhpcy5wb3B0aW5faWQscGFyc2VJbnQod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fcGFnZXZpZXdzX1wiK3RoaXMucG9wdGluX2lkKSkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fb192XycrdGhpcy5wb3B0aW5faWQpKXtcbiAgICAgICAgICAgICAgICAgICAgc2V0T2xkVmlzaXRvckNvb2tpZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBBcyBsb25nIHBhZ2Ugbm90IGNsb3NlZCwgcmVmcmVzaCBjb29raWVzIHRpbmUgZXZlcnkgNjAgc2Vjb25kXG4gICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2V0T2xkVmlzaXRvckNvb2tpZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9LDYwMDAwKTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3Nlc3Npb25fYWNjb3VudF8nK3RoaXMuYWNjb3VudF9pZCkpe1xuICAgICAgICAgICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9zZXNzaW9uX2FjY291bnRfJyt0aGlzLmFjY291bnRfaWQsIHRydWUsIDMwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb3B0aW5fbmV3X3Nlc3Npb24pe1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXN0b21OZXdWaXNpdFNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBwb3B0aW4gc2Vzc2lvbiBmb3IgcG9wdGluIGRpc3BsYXkgc2V0dGluZ3NcbiAgICAgICAgaWYgKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3Nlc3Npb24nKSl7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9zZXNzaW9uJywgdHJ1ZSwgMC4wMjA4MzMzMzMzMzMzMzMzMyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgcG9wdGluIHZpc2l0b3IgcGVyIGNsaWVudFxuICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fY192aXNpdG9yJykpe1xuICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fY192aXNpdG9yJywgdHJ1ZSwgMzApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHBvcHRpbiB2aXNpdG9yIHBlciBjbGllbnQgLSBmb3IgbmV3IGNsaWVudHMgMjkvMTAvMjAyMFxuICAgICAgICAvLyBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fY19uZXdfdmlzaXRvcicpKXtcbiAgICAgICAgLy8gICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX2NfbmV3X3Zpc2l0b3InLCB0cnVlLCAzMCk7XG4gICAgICAgIC8vIH0gICBcblxuICAgICAgICAvLyBTZXQgc2Vzc2lvbiBmb3IgdmlzaXRvclxuICAgICAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fZXZlcnlfdmlzaXRfc2Vzc2lvblwiKSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInBvcHRpbl9ldmVyeV92aXNpdF9zZXNzaW9uXCIsRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBpbmNyZWFzZVRvdGFsV2Vic2l0ZVNlc3Npb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyAvLyBTZXQgcG9wdGluIGltcGxlbWVudCBjb29raWUgZm9yIHBvcHRpbiBjb2RlIGltcGxlbWV0IHNldHRpbmdzXG4gICAgICAgIC8vIGlmICghcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9pbXBsZW1lbnQnKSl7XG4gICAgICAgIC8vICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9pbXBsZW1lbnQnLCB0cnVlLCAwLjAyMDgzMzMzMzMzMzMzMzMzKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIEFzIGxvbmcgcGFnZSBub3QgY2xvc2VkLCByZWZyZXNoIGNvb2tpZXMgdGluZSBldmVyeSA2MCBzZWNvbmRcbiAgICAgICAgLy8gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gIHBvcHRpblNldENvb2tpZSgncG9wdGluX3Nlc3Npb24nLCB0cnVlLCAwLjAyMDgzMzMzMzMzMzMzMzMzKTtcbiAgICAgICAgLy8gIC8vcG9wdGluU2V0Q29va2llKCdwb3B0aW5faW1wbGVtZW50JywgdHJ1ZSwgMC4wMjA4MzMzMzMzMzMzMzMzMyk7XG4gICAgICAgIC8vIH0sNjAwMDApO1xuXG4gICAgICAgIC8vUEMuZGVsZXRlKCdwb3B0aW5fbmV3X3VzZXInKTtcblxuICAgICAgICAvLyBTZXQgb2xkKG5ldykgdmlzaXRvciBjdXN0b20gY29va2llLlxuICAgICAgICAvLyBDaGVjayBpZiByZXR1cm5pbmcgdmlzdG9ycyBvciBub3RcbiAgICAgICAgLy8gLSBmb3IgbmV3IGNsaWVudHMgb3IgcG9wdXMgMTIvMDcvMjAyM1xuICAgICAgICBcbiAgICAgICAgc2V0TmV3UG9wdGluVmlzaXRvclNlc3Npb24oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmNyZWFzZVRvdGFsV2Vic2l0ZVNlc3Npb24oKSB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX2NvbnZlcnRlZF9lbWFpbCcpICE9IG51bGwgfHwgc2hvcGlmeV9jdXN0b21lcl9pZCAhPSAwIHx8IHdpeF9jdXN0b21lcl9pZCAhPSAwKSB7XG4gICAgICAgICAgICB2YXIgY2xpZW50RW1haWwgPSBlbmNvZGVVUklDb21wb25lbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl9jb252ZXJ0ZWRfZW1haWwnKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgICAgIGVtYWlsOiBjbGllbnRFbWFpbCxcbiAgICAgICAgICAgICAgICB1cmw6IGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgICAgICAgICAgICAgIHN0b3JlX2ludGVncmF0aW9uOiBzdG9yZV9pbnRlZ3JhdGlvbixcbiAgICAgICAgICAgICAgICBzdG9yZV9pbnRlZ3JhdGlvbl9jdXN0b21lcl9pZDogc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogYCR7YXBpX2xpbmt9L2FwaS9kaXNwbGF5L3RvdGFsLXdlYnNpdGUtc2Vzc2lvbi8ke2dldENsaWVudElkKCl9PyR7dXJsUGFyYW1zLnRvU3RyaW5nKCl9YCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgIH0sIFwianNvblwiKVxuICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdUb3RhbCB3ZWJzaXRlIHNlc3Npb24gcmVjb3JkZWQnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ29udmVyc2lvbkFjdGl2aXRpZXMoYWN0aXZpdHksIHBvcHRpbikge1xuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BvcHRpbl9jb252ZXJ0ZWRfZW1haWwnKSAhPSBudWxsIHx8IHNob3BpZnlfY3VzdG9tZXJfaWQgIT0gMCB8fCB3aXhfY3VzdG9tZXJfaWQgIT0gMCkge1xuICAgICAgICAgICAgdmFyIHZpc2l0b3JFbWFpbCA9IGVuY29kZVVSSUNvbXBvbmVudChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX2NvbnZlcnRlZF9lbWFpbCcpKTtcblxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgICAgICAgZW1haWw6IHZpc2l0b3JFbWFpbCxcbiAgICAgICAgICAgICAgICBwb3B0aW5faWQ6IHBvcHRpbixcbiAgICAgICAgICAgICAgICBhY3Rpdml0eTogYWN0aXZpdHksXG4gICAgICAgICAgICAgICAgdXJsOiBkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICBzdG9yZV9pbnRlZ3JhdGlvbjogc3RvcmVfaW50ZWdyYXRpb24sXG4gICAgICAgICAgICAgICAgc3RvcmVfaW50ZWdyYXRpb25fY3VzdG9tZXJfaWQ6IHN0b3JlX2ludGVncmF0aW9uX2N1c3RvbWVyX2lkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IGAke2FwaV9saW5rfS9hcGkvZGlzcGxheS9jb252ZXJzaW9uLWFjdGl2aXRpZXMvJHtnZXRDbGllbnRJZCgpfT8ke3VybFBhcmFtcy50b1N0cmluZygpfWAsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2dldCcsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICB9LCBcImpzb25cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogZGVmYXVsdENvb2tpZSgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0ICdvbmNlIGEgc2Vzc2lvbicgY29va2llIG9ubHkgaWYgcG9wdGluIGhhdmUgYmVlbiB2aWV3ZWQuIGF2aWFsYmxlIGZvciAzMCBtaW51dGVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0T2xkVmlzaXRvckNvb2tpZShwb3B0aW4pe1xuICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fb192XycrcG9wdGluLnBvcHRpbl9pZCkgJiYgcG9wdGluICE9PSB1bmRlZmluZWQgJiYgcG9wdGluLmRpc3BsYXkpe1xuICAgICAgICAgICAgdmFyIHZhbHVlICA9IHBvcHRpbi52aWV3ZXJfaWQ7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9vX3ZfJytwb3B0aW4ucG9wdGluX2lkLCB2YWx1ZSwgMC4wMjA4MzMzMzMzMzMzMzMzMyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFdmVyeVZpc2l0U2Vzc2lvbigpe1xuICAgICAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9ldmVyeV92aXNpdF9zZXNzaW9uXCIpID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcInBvcHRpbl9ldmVyeV92aXNpdF9zZXNzaW9uPXRydWVcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBcInBvcHRpbl9ldmVyeV92aXNpdF9zZXNzaW9uPWZhbHNlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBcInBvcHRpbl9ldmVyeV92aXNpdF9zZXNzaW9uPXRydWVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEN1c3RvbU5ld1Zpc2l0U2Vzc2lvbigpe1xuICAgICAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9jdXN0b21fbmV3X3Zpc2l0b3Jfc2Vzc2lvblwiKSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBcInBvcHRpbl9jdXN0b21fbmV3X3Zpc2l0b3Jfc2Vzc2lvbj10cnVlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q3VzdG9tTmV3VmlzaXRTZXNzaW9uKCl7XG4gLy8gU2V0IHNlc3Npb24gZm9yIHZpc2l0b3JcbiAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX2N1c3RvbV9uZXdfdmlzaXRvcl9zZXNzaW9uXCIpID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicG9wdGluX2N1c3RvbV9uZXdfdmlzaXRvcl9zZXNzaW9uXCIsRGF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvcHRpblZpZXdlZFNlc3Npb24oKXtcblxuICAgICAgICBwb3B0aW5fdmlld2VkX3Nlc3Npb24gPSAnJztcbiAgICAgICAgcG9wdGluX29uY2UgPSAxO1xuICAgICAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBqUTIyNC5lYWNoKHNlc3Npb25TdG9yYWdlLCBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ3BvcHRpbl92aWV3ZWRfc2Vzc2lvbicpPj0wKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHRpbl9vbmNlPT0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpbl92aWV3ZWRfc2Vzc2lvbis9a2V5Kyc9Jyt2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluX29uY2U9MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5fdmlld2VkX3Nlc3Npb24rPScgJytrZXkrJz0nK3ZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcG9wdGluX3ZpZXdlZF9zZXNzaW9uPT0nJyA/ICBcInBvcHRpbl92aWV3ZWRfc2Vzc2lvbj1mYWxzZVwiIDogcG9wdGluX3ZpZXdlZF9zZXNzaW9uO1xuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICByZXR1cm4gXCJwb3B0aW5fdmlld2VkX3Nlc3Npb249ZmFsc2VcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvcHRpbk5ld1VzZXIoKXtcbiAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX25ld191c2VyXCIpID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicG9wdGluX25ld191c2VyPXRydWVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFBvcHRpblNlc3Npb24oKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgdW5pcWUgaWQgZm9yIGV2ZXJ5IHZpc2l0b3JcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogR29vZCBmb3IgQklcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRVc2VySWQoKXtcbiAgICAgICAgaWYgKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3VzZXJfaWQnKSl7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl91c2VyX2lkJywgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoLTE2KSwgMzY1KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBEYXRhUG9pbnQoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBOb3QgcmVsZXZhbnQgZm9yIHRoaXMgdGltZSEhIVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFVzZXJJZCgpe1xuICAgICAgICByZXR1cm4gKHBvcHRpbkNoZWNrQ29va2llKFwicG9wdGluX3VzZXJfaWRcIikgPyBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fdXNlcl9pZFwiKSA6ICcnICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IERhdGFQb2ludCgpXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IE5vdCByZWxldmFudCBmb3IgdGhpcyB0aW1lISEhXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VXNlckNvdW50cnlDb2RlKCl7XG4gICAgICAgIHJldHVybiAocG9wdGluQ2hlY2tDb29raWUoXCJwb3B0aW5fdXNlcl9jb3VudHJ5X2NvZGVcIikgPyBwb3B0aW5HZXRDb29raWUoXCJwb3B0aW5fdXNlcl9jb3VudHJ5X2NvZGVcIikgOiBmYWxzZSApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBEYXRhUG9pbnQoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBOb3QgcmVsZXZhbnQgZm9yIHRoaXMgdGltZSEhIVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBvcHRpblBhZ2V2aWV3cyhwb3B0aW5faWQpe1xuICAgICAgICByZXR1cm4gKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX3BhZ2V2aWV3c19cIitwb3B0aW5faWQpPT1udWxsID8gJ2Vycm9yJyA6IHBhcnNlSW50KHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX3BhZ2V2aWV3c19cIitwb3B0aW5faWQpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHBvcHRpbkluaXQoKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgU2Vzc2lvbnMgcGVyIHZpc2l0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRQb3B0aW5TZXNzaW9uKCl7XG4gICAgICAgIC8vIHJldHVybiB1c2VyXG4gICAgICAgIC8vIElmIG5vdCBuZXcgdXNlclxuICAgICAgICBpZihwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX3VzZXJfaWQnKSl7XG4gICAgICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fb2xkX3VzZXInKSl7XG4gICAgICAgICAgICAgICAgc2V0TmV3VXNlclNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBzZXRPbGRVc2VyU2Vzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0T25jZUFWaXNpdENvb2tpZXMoKTtcbiAgICAgICAgICAgIC8vIGlmIG5vdCBzZXQgcG9wdGluX29sZF91c2VyIGNvb2tpZVxuICAgICAgICB9ZWxzZSBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fb2xkX3VzZXInKSl7XG4gICAgICAgICAgICBzZXROZXdVc2VyU2Vzc2lvbigpO1xuICAgICAgICAgICAgc2V0T2xkVXNlclNlc3Npb24oKTtcbiAgICAgICAgICAgIHNldFVzZXJJZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwb3B0aW5DaGVja0Nvb2tpZSgncG9wdGluX2xhc3RfdmlzaXQnKSl7XG4gICAgICAgICAgICBzZXRDdXN0b21OZXdWaXNpdFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW5TZXNzaW9uKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IHBvcHRpbiByZXR1cm5pbmcgdXNlciBjb29raWUuIGF2aWFsYmxlIGZvciBkYXlzIG9ubHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXROZXdQb3B0aW5WaXNpdG9yU2Vzc2lvbigpe1xuICAgICAgICBjdXJyZW50X2RhdGUgPSBuZXcgRGF0ZSgpLnRvSlNPTigpLnNsaWNlKDAsMTApLnJlcGxhY2UoLy0vZywnLScpO1xuICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9sYXN0X3Zpc2l0JywgY3VycmVudF9kYXRlLCAzNjUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW5TZXNzaW9uKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IHBvcHRpbiByZXR1cm5pbmcgdXNlciBjb29raWUuIGF2aWFsYmxlIGZvciBkYXlzIG9ubHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRPbGRVc2VyU2Vzc2lvbigpe1xuICAgICAgICBpZighcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9vbGRfdXNlcicpKXtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX29sZF91c2VyJywgdHJ1ZSwgMik7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX29sZF91c2VyJywgdHJ1ZSwyKTtcbiAgICAgICAgICAgIH0sNjAwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFBvcHRpblNlc3Npb24oKVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgcG9wdGluIG5lciB1c2VyIGNvb2tpZS4gYXZpYWxibGUgZm9yIDMwIG1pbnV0ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXROZXdVc2VyU2Vzc2lvbigpe1xuICAgICAgICAvLyBpZighcG9wdGluQ2hlY2tDb29raWUoJ3BvcHRpbl9uZXdfdXNlcicpKXtcbiAgICAgICAgLy8gIHBvcHRpblNldENvb2tpZSgncG9wdGluX25ld191c2VyJywgdHJ1ZSwgMC4wMjA4MzMzMzMzMzMzMzMzMyk7XG4gICAgICAgIC8vICBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX25ld191c2VyJywgdHJ1ZSwgMC4wMjA4MzMzMzMzMzMzMzMzMyk7XG4gICAgICAgIC8vICB9LDYwMDAwKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIFNldCBzZXNzaW9uIGZvciB2aXNpdG9yXG4gICAgICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBvcHRpbl9uZXdfdXNlclwiKSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInBvcHRpbl9uZXdfdXNlclwiLERhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluVmlld2VkKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgJ29uY2UgYSBkYXknIGNvb2tpZSBvbmx5IGlmIHBvcHRpbiBoYXZlIGJlZW4gdmlld2VkLiBhdmlhbGJsZSBmb3IgMSBkYXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRPbmNlQURheUNvb2tpZShwb3B0aW4pe1xuICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fb19hX2RfJytwb3B0aW4ucG9wdGluX2lkKSAmJiBwb3B0aW4gIT09IHVuZGVmaW5lZCAmJiBwb3B0aW4uZGlzcGxheSAmJiBwb3B0aW4uY29va2llIT1cInBvcHRpbl9vX2FfZF9cIitwb3B0aW4ucG9wdGluX2lkKXtcbiAgICAgICAgICAgIHZhciB2YWx1ZSAgPSBwb3B0aW4udmlld2VyX2lkO1xuICAgICAgICAgICAgcG9wdGluU2V0Q29va2llKCdwb3B0aW5fb19hX2RfJytwb3B0aW4ucG9wdGluX2lkLCB2YWx1ZSwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb252ZXJzaW9uQWN0aXZpdGllcygndmlld2VkJywgcG9wdGluLnBvcHRpbl9pZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5WaWV3ZWQoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCAnUG9wdGluIFZpZXdlZCcgc2Vzc2lvbiBvbmx5IGlmIHBvcHRpbiBoYXZlIGJlZW4gdmlld2VkLiBhdmlhbGJsZSBmb3Igc2Vzc2lvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFBvcHRpblZpZXdlZFNlc3Npb24ocG9wdGluKXtcbiAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicG9wdGluX3ZpZXdlZF9zZXNzaW9uX1wiK3BvcHRpbi5wb3B0aW5faWQpID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicG9wdGluX3ZpZXdlZF9zZXNzaW9uX1wiK3BvcHRpbi5wb3B0aW5faWQsdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogcG9wdGluVmlld2VkKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgJ1BvcHRpbiBWaWV3ZWQnIHNlc3Npb24gb25seSBpZiBwb3B0aW4gaGF2ZSBiZWVuIHZpZXdlZC4gYXZpYWxibGUgZm9yIHNlc3Npb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBQlRlc3RTZXNzaW9uKHBvcHRpbil7XG4gICAgICAgIGFiX3Rlc3RfcGFyZW50X2lkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaWYgKHBvcHRpbi5hYl90ZXN0ID09IGZhbHNlICYmIHBvcHRpbi5hYl90ZXN0X3BhcmVudF9pZCE9bnVsbCl7XG4gICAgICAgICAgICAgICAgYWJfdGVzdF9wYXJlbnRfaWQgPSBwb3B0aW4uYWJfdGVzdF9wYXJlbnRfaWQ7XG4gICAgICAgICAgICB9ZWxzZSBpZihwb3B0aW4uYWJfdGVzdCA9PSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgYWJfdGVzdF9wYXJlbnRfaWQgPSBwb3B0aW4ucG9wdGluX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFiX3Rlc3RfcGFyZW50X2lkKXtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJwb3B0aW5fYWJ0ZXN0X3Nlc3Npb25fXCIrYWJfdGVzdF9wYXJlbnRfaWQpID09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInBvcHRpbl9hYnRlc3Rfc2Vzc2lvbl9cIithYl90ZXN0X3BhcmVudF9pZCxwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogY2xvc2VQb3B0aW5PblhDb29raWUoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCBjb29raWUgd2hlbiB1c2VyIGNsaWNrZWQgJ1gnIGJ1dHRvbi4gYXZpYWxibGUgZm9yIDEgZGF5XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IHBvcHRpbl9jX3Bfb194X2NfID0gY2xvc2UgcG9wdGluIG9uIHggY2xpY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDbG9zZVBvcHRpbk9uWENvb2tpZShwb3B0aW5faWQpe1xuICAgICAgICBpZiAoIXBvcHRpbkNoZWNrQ29va2llKCdwb3B0aW5fY19wX29feF9jXycrcG9wdGluX2lkKSAmJiBwb3B0aW5faWQgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9jX3Bfb194X2NfJytwb3B0aW5faWQsIHBvcHRpbl9pZCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb252ZXJzaW9uQWN0aXZpdGllcygnY2xvc2VkJywgcG9wdGluX2lkKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBnZXRDbG9zZUNvb2tpZXNBcnJheSgpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBpdCByZXR1cm5zIGFsbCB0aGUgY2xvc2UgY29va2llcyBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXIgdGFiXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBnZXRDbG9zZUNvb2tpZXNBcnJheSgpIHtcbiAgICAgICAgLy8gR2V0IGFsbCBjb29raWVzXG4gICAgICAgIGNvbnN0IGFsbENvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJyk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9ICdwb3B0aW5fY19wX29feF9jXyc7XG4gICAgICBcbiAgICAgICAgLy8gRmlsdGVyIGNvb2tpZXMgd2l0aCB0aGUgc3BlY2lmaWVkIHByZWZpeFxuICAgICAgICBjb25zdCBmaWx0ZXJlZENvb2tpZXMgPSBhbGxDb29raWVzLmZpbHRlcihjb29raWUgPT4gY29va2llLnN0YXJ0c1dpdGgocHJlZml4KSk7XG4gICAgICBcbiAgICAgICAgLy8gRXh0cmFjdCBjb29raWUgdmFsdWVzIGFuZCBzdG9yZSB0aGVtIGluIGFuIGFycmF5XG4gICAgICAgIGNvbnN0IGNvb2tpZXNBcnJheSA9IGZpbHRlcmVkQ29va2llcy5tYXAoY29va2llID0+IHtcbiAgICAgICAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gY29va2llLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgIH0pO1xuICAgICAgXG4gICAgICAgIHJldHVybiBjb29raWVzQXJyYXk7XG4gICAgICB9XG4gICAgICBcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBnZXRPbmNlQVZpc2l0Q29va2llcygpLCBwb3B0aW5WaWV3ZWQoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNldCAnb25jZSBhIHZpc2l0JyBjb29raWUuIGF2aWFsYmxlIGZvciAzMCBtaW51dGVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0T25jZUFWaXNpdChwb3B0aW4pe1xuICAgICAgICBpZiAocG9wdGluICE9PSB1bmRlZmluZWQgJiYgcG9wdGluLmRfZl9hIT0gdW5kZWZpbmVkICYmIHBvcHRpbi5kX2ZfYSAmJiBwb3B0aW4uZF9mX3IuaW5kZXhPZignZGlzcGxheV9vbmNlX2FfdmlzaXRvcl8yJykgPiAtMSApe1xuICAgICAgICAgICAgdmFyIHZhbHVlICA9IHBvcHRpbi52aWV3ZXJfaWQ7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoJ3BvcHRpbl9vX2Ffdl8nK3BvcHRpbi5wb3B0aW5faWQsIHZhbHVlLCAwLjAyMDgzMzMzMyk7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHBvcHRpblNldENvb2tpZSgncG9wdGluX29fYV92XycrcG9wdGluLnBvcHRpbl9pZCwgdmFsdWUsICAwLjAyMDgzMzMzMyk7XG4gICAgICAgICAgICB9LDYwMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzZXRQb3B0aW5TZXNzaW9uKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogU2V0IGRlZmF1bHQgJ29uY2UgYSB2aXNpdCcgY29va2llXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0T25jZUFWaXNpdENvb2tpZXMoKXtcbiAgICAgICAgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICB2YXIgcG9wID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZiAoY29va2llc1tpXS5zcGxpdCgnPScpWzBdLmluZGV4T2YoJ3BvcHRpbl9vX2Ffdl8nKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgIHBvcC5wb3B0aW5faWQ9Y29va2llc1tpXS5zcGxpdCgncG9wdGluX29fYV92XycpWzFdLnNwbGl0KCc9JylbMF07XG4gICAgICAgICAgICAgICAgcG9wLnZpZXdlcl9pZD1jb29raWVzW2ldLnNwbGl0KCc9JylbMV07XG4gICAgICAgICAgICAgICAgc2V0T25jZUFWaXNpdChwb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6XG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IGNuYW1lOnN0cmluZyAtPiBjb29raWUgbmFtZSB8IGN2YWx1ZTpzdHJpbmcgLT4gY29va2llIHZhbHVlIHwgZXhkYXlzOmZsb2F0IC0+IGV4cGlyZWQgdGltZVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBTZXQgY29va2llIGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluU2V0Q29va2llKGNuYW1lLCBjdmFsdWUsIGV4ZGF5cykge1xuICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArIChleGRheXMqMjQqNjAqNjAqMTAwMCkpO1xuICAgICAgICB2YXIgZXhwaXJlcyA9IFwiZXhwaXJlcz1cIitkLnRvVVRDU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgXCI9XCIgKyBjdmFsdWUgKyBcIjsgXCIgKyBleHBpcmVzICsgXCI7IHBhdGg9LzsgU2FtZVNpdGU9TGF4XCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6XG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IGNuYW1lOnN0cmluZyAtPiBjb29raWUgbmFtZVxuICAgICAqIERlc2MgICAgICAgICAgICAgOiByZXR1cm4gY29va2llIHZhbHVlIGJ5IG5hbWVcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogcmV0dXJuICcnIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBvcHRpbkdldENvb2tpZShjbmFtZSkge1xuICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgXCI9XCI7XG4gICAgICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjID0gY2FbaV07XG4gICAgICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBmdW5jdGlvbnM6IHNldFBvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmVzZXQgcmVsZXZhbnQgY29va2llcyB2YWx1ZSB3aGVuIHBvcHRpbiBpcyBkaXNwbGF5XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzZXRSZWxldmVudENvb2tpZShwb3B0aW4pe1xuICAgICAgICBpZiAocG9wdGluLmNvb2tpZSA9PSBcInBvcHRpbl9kX3Jfdl9cIitwb3B0aW4ucG9wdGluX2lkKXtcbiAgICAgICAgICAgIHBvcHRpblNldENvb2tpZShcInBvcHRpbl9kX3Jfdl9cIitwb3B0aW4ucG9wdGluX2lkLDAsIDM2NSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdGluLmNvb2tpZSA9PSBcInBvcHRpbl9kX2FfeF92X1wiK3BvcHRpbi5wb3B0aW5faWQpe1xuICAgICAgICAgICAgdmFsdWUgID0gZ2V0Q3VycmVudERhdGUoKTtcbiAgICAgICAgICAgIC8vdmFsdWUgID0gXCIyMDE2LTA3LTI5XCI7XG4gICAgICAgICAgICBwb3B0aW5TZXRDb29raWUoXCJwb3B0aW5fZF9hX3hfdl9cIitwb3B0aW4ucG9wdGluX2lkLCB2YWx1ZSwgMzY1KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOlxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBjbmFtZTpzdHJpbmcgLT4gY29va2llIG5hbWVcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogcmV0dXJuIGJvb2xlYW4gaWYgY29va2llIGV4aXN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9wdGluQ2hlY2tDb29raWUoY25hbWUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IHBvcHRpbkdldENvb2tpZShjbmFtZSk7XG4gICAgICAgIGlmIChjb29raWUgIT0gXCJcIiAmJiBjb29raWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczpcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogY25hbWU6c3RyaW5nIC0+IGNvb2tpZSBuYW1lXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IGRlbGV0ZSBjb29raWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwb3B0aW5EZWxldGVDb29raWUoY25hbWUpe1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjbmFtZSArICc9O2V4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMSBHTVQ7JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogZGVmYXVsdENvb2tpZSgpLCByZXNldFJlbGV2ZW50Q29va2llKClcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogUmV0dXJuIGN1cnJlbnQgZGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnREYXRlKCl7XG4gICAgICAgIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgZGQgPSB0b2RheS5nZXREYXRlKCk7XG4gICAgICAgIG1tID0gdG9kYXkuZ2V0TW9udGgoKSsxOyAvL0phbnVhcnkgaXMgMCFcblxuICAgICAgICB5eXl5ID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgaWYoZGQ8MTApe1xuICAgICAgICAgICAgZGQ9JzAnK2RkXG4gICAgICAgIH1cbiAgICAgICAgaWYobW08MTApe1xuICAgICAgICAgICAgbW09JzAnK21tXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geXl5eSsnLScrbW0rJy0nK2RkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBwb3B0aW5Db252ZXJzaW9uKCksIGRpc3BsYXlQb3B0aW5PbkNsaWNrKCksIHBvcHRpbkZvcm1DbGlja1N1Ym1pdCgpLCBwb3B0aW5TdWJtaXQoKVxuICAgICAqIHBhcmFtZXRlcnMgICAgICAgOiBlcnJvcl9zdGVwOnN0cmluZyAoJ3doZW4gaXQgaGFwcGVuZCcpIHwgZXJyb3JfbWVzc2FnZTpzdHJpbmcgfCBjX3N0YXR1czpzdHJpbmcgLT4gYWpheCBzdGF0dXMgfCByZXNwb25zZTpzdHJpbmcgfCBwb3B0aW46b2JqZWN0XG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFNlbmQgZXJyb3IgbWVzc2FnZSB0byBzZXJ2ZXJcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogRm9yIG1vbml0b3JpbiBwdXJwb3NlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbW9uaXRvckVycm9yKGVycm9yX3N0ZXAsZXJyb3JfbWVzc2FnZSxjX3N0YXR1cyxyZXNwb25zZSxwb3B0aW4sZXh0cmFfZGF0YSA9IG51bGwpe1xuICAgICAgICBzaG93TG9nKCdtb25pdG9yRXJyb3I6JyxlcnJvcl9zdGVwLGVycm9yX21lc3NhZ2UsY19zdGF0dXMscmVzcG9uc2UscG9wdGluKTtcbiAgICAgICAgXG4gICAgICAgIC8vIERlY3JlYXNlIHNlcnZlciBsb2FkLlxuICAgICAgICAvLyBXZSBhcmUgbm90IG1vbml0b3JpbmcgdGhpcyBhbnl3YXlcbiAgICAgICAgLy90cnl7XG4gICAgICAgIC8vICAgIGpRMjI0LmdldChhcGlfbGluaytcIi9hcGkvZGlzcGxheS9lcnJvci9cIitnZXRDbGllbnRJZCgpLHtwb3B0aW5fdXNlcl9pZDpwb3B0aW5HZXRDb29raWUoJ3BvcHRpbl91c2VyX2lkJyksZXJyb3Jfc3RlcDplcnJvcl9zdGVwLGVycm9yX21lc3NhZ2U6ZXJyb3JfbWVzc2FnZSxjYWxsX3N0YXR1czpjX3N0YXR1cyxyZXN1bHQ6cmVzcG9uc2UscG9wdGluOihwb3B0aW4hPT1mYWxzZSA/IHBvcHRpbi5wb3B0aW5faWQgOiBwb3B0aW4pLGV4dHJhX2RhdGE6ZXh0cmFfZGF0YX0pO1xuICAgICAgICAvL31jYXRjaChlcnIpe1xuICAgICAgICAvLyAgICBzaG93TG9nKGVycik7XG4gICAgICAgIC8vfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZnVuY3Rpb25zOiBzaG93UG9wdGluKClcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogcG9wdGluOm9iamVjdFxuICAgICAqIERlc2MgICAgICAgICAgICAgOiBIYW5kbGUgcG9wdGluIGRpc3BsYXkgd2l0aCBhbmltYXRpb24gZWZmZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvd0VmZmVjdChwb3B0aW4sIGV0eXBlKXtcbiAgICAgICAgdmFyIHRoaXNfZWZmZWN0X3BvcHRpbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKTtcbiAgICAgICAgdmFyIGZpbmFsX3NjYWxlID0gdGhpc19lZmZlY3RfcG9wdGluLmF0dHIoJ2RhdGEtc2NhbGUnKTtcbiAgICAgICAgaWYodGhpc19lZmZlY3RfcG9wdGluLmxlbmd0aCl7XG4gICAgICAgICAgICB2YXIgdGhpc19lZmZlY3RfcG9wdGluX2NvbnRhaW5lciA9IHRoaXNfZWZmZWN0X3BvcHRpbi5maW5kKFwiLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIik7XG5cbiAgICAgICAgICAgIGlmKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImVtYmVkZGVkXCIpe1xuICAgICAgICAgICAgICAgIHZhciBpbml0X3NjYWxlID0gXCJzY2FsZShcIitmaW5hbF9zY2FsZStcIiwgMClcIjtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnlFZmZlY3QgPSBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9lbnRyeV9lZmZlY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRWZmZWN0ID0gZW50cnlFZmZlY3QgPyBlbnRyeUVmZmVjdC5zcGxpdCgnLScpWzFdIDogXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBvcHRpbl9sYW5kaW5nX3BhZ2UgIT0gXCJ1bmRlZmluZWRcIiB8fCBzZWxlY3RlZEVmZmVjdCA9PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICBpbml0X3NjYWxlID0gXCJzY2FsZShcIitmaW5hbF9zY2FsZStcIilcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc19lZmZlY3RfcG9wdGluLmNzcyh7XCJkaXNwbGF5XCI6IFwiYmxvY2tcIixcInRyYW5zZm9ybVwiOmluaXRfc2NhbGV9KTtcbiAgICAgICAgICAgICAgICB0aGlzX2VmZmVjdF9wb3B0aW4uYXR0cihcImRhdGEtc2NhbGVcIiwgZmluYWxfc2NhbGUpO1xuXHRcdFx0XHRpZihpbml0X3NjYWxlID09IDEpeyB0aGlzX2VmZmVjdF9wb3B0aW4uY3NzKFwidHJhbnNmb3JtXCIsIFwibm9uZVwiKTsgfVxuICAgICAgICAgICAgICAgIHRoaXNfZWZmZWN0X3BvcHRpbi5maW5kKCcjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyJykuY3NzKHtcImRpc3BsYXlcIjogXCJibG9ja1wifSk7XG4gICAgICAgICAgICAgICAgalEyMjQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpc19lZmZlY3RfcG9wdGluLmxlbmd0aCAmJiB0aGlzX2VmZmVjdF9wb3B0aW4ucGFyZW50KCkubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSAod2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQpID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIChzY3JvbGxUb3AgPj0gdGhpc19lZmZlY3RfcG9wdGluLnBhcmVudCgpLm9mZnNldCgpLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodC8xLjUpICYmICF0aGlzX2VmZmVjdF9wb3B0aW4uaGFzQ2xhc3MoJ3Njcm9sbGVkJykgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2VmZmVjdF9wb3B0aW4uYWRkQ2xhc3MoJ3Njcm9sbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRFZmZlY3QgJiYgc2VsZWN0ZWRFZmZlY3QgIT0gXCJub25lXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2VmZmVjdF9wb3B0aW4uYWRkQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19lZmZlY3RfcG9wdGluLmFkZENsYXNzKCdhbmltYXRlX196b29tSW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19lZmZlY3RfcG9wdGluLmFkZENsYXNzKCdwb3B0aW4tdmlzaWJsZSBwb3B0aW5fX2FuaW1hdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfZWZmZWN0X3BvcHRpbi5jc3MoJ3RyYW5zZm9ybScsIGZpbmFsX3NjYWxlICE9IHVuZGVmaW5lZCA/ICdzY2FsZSgnK2ZpbmFsX3NjYWxlKycpJyA6ICdub25lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblx0XHRcdFx0aWYoaW5pdF9zY2FsZSA9PSAxKXsgdGhpc19lZmZlY3RfcG9wdGluLmNzcyhcInRyYW5zZm9ybVwiLCBcIm5vbmVcIik7IH1cbiAgICAgICAgICAgICAgICBwb3B0aW5JbnB1dFZhbGlkYXRpb25zKHBvcHRpbik7XG5cdFx0XHRcdHBvcHRpbkZvcm1WYWxpZGF0aW9ucyhwb3B0aW4pOyAvLyBGb3JtIHZhbGlkYXRpb25zXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUrXCJfXCIrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJzb2NpYWxfZm9ybWF0XzNcIiB8fCBwb3B0aW4ucG9wdGluX3R5cGUrXCJfXCIrcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJzb2NpYWxfZm9ybWF0XzdcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1wiZWZmZWN0XCI6IGVmZmVjdHMgZnJvbSBhbmltYXRlLmNzc1xuICAgICAgICAgICAgICAgIC8vXCJzcGVlZFwiOiBhbmltYXRpb24gc3BlZWQoZGVmYXVsdCA9IDFzOyBzbG93ID0gMnM7IHNsb3dlciA9IDNzOyBmYXN0ID0gODAwIG1zOyBmYXN0ZXIgPSA1MDAgbXMpIFxuICAgICAgICAgICAgICAgIC8vXCJkZWxheVwiOiBhbmltYXRpb24gZGVsYXkoZGVmYXVsdCA9IDAgc2Vjb25kczsgMXMgPSAxIHNlY29uZHM7IDJzID0gMiBzZWNvbmRzOyAzcyA9IDMgc2Vjb25kczsgNHMgPSA0IHNlY29uZHM7IDVzID0gNSBzZWNvbmRzKSAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRlQ2xhc3MgPSB7XCJlZmZlY3RcIjpudWxsLCBcInNwZWVkXCI6XCJfZGVmYXVsdFwiLCBcImRlbGF5XCI6XCItZGVmYXVsdFwifTtcblxuICAgICAgICAgICAgICAgIGlmKGV0eXBlID09IFwiZXhpdFwiICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2V4aXRfZWZmZWN0KXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRWZmZWN0ID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fZXhpdF9lZmZlY3Quc3BsaXQoJy0nKVsxXTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiggcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fZW50cnlfZWZmZWN0ICl7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXIgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5vdXRlcldpZHRoICsxMDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBob3IgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5vdXRlckhlaWdodCsxMDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZEVmZmVjdCA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2VudHJ5X2VmZmVjdC5zcGxpdCgnLScpWzFdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaChzZWxlY3RlZEVmZmVjdCl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX25vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXBcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfc2xpZGVJbkRvd25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZG93blwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9zbGlkZUluVXBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9zbGlkZUluTGVmdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9zbGlkZUluUmlnaHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmxpbmRcIiA6IC8vUmVtb3ZlZCBGb2xkIEVudHJ5RWZmZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfZmxpcEluWFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3VuY2VcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfYm91bmNlSW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2xpcFwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl96b29tSW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXhwbG9kZVwiIDogLy9SZW1vdmVkIFB1enpsZSBFbnRyeUVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX2ZhZGVJblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmYWRlXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX2ZhZGVJblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb2xkXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX2ZsaXBJblhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaGlnaGxpZ2h0XCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3RhZGFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicHVmZlwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9wdWxzZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwdWxzYXRlXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX2ZsYXNoXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNjYWxlXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX2hlYXJ0QmVhdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzaGFrZVwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBcIl9zaGFrZVhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2l6ZVwiIDogLy9SZW1vdmVkIFJlc2l6ZSBFbnRyeUVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzLmVmZmVjdCA9IFwiX3pvb21JblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsZS1vdXRcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlQ2xhc3MuZWZmZWN0ID0gXCJfem9vbUluXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZHJhZ19jb250ID0gXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ10gLmRyYWdnYWJsZS1jb250YWluZXI6bm90KC5wb3B0aW4tdGFiLWNvbnRhaW5lcilcIjtcblxuICAgICAgICAgICAgICAgIGlmKCBldHlwZSA9PSBcImV4aXRcIiApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhpdE91dCA9IGFuaW1hdGVDbGFzcy5lZmZlY3Q7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDbGFzcy5lZmZlY3QgPSBleGl0T3V0LnJlcGxhY2UoXCJJblwiLFwiT3V0XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRyYWdfY29udCA9IGRyYWdfY29udCArIFwiLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ10gLnBvcHRpbl90aGFua195b3Vfc2NyZWVuLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ10gLnBvcHRpbl9wbGF5X3NjcmVlbiwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nXCIrcG9wdGluLnBvcHRpbl9pZCtcIiddIC5wb3B0aW5fd2lubmluZ19zY3JlZW4sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9J1wiK3BvcHRpbi5wb3B0aW5faWQrXCInXSAucG9wdGluX2xvc2luZ19zY3JlZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoZHJhZ19jb250KS5hZGRDbGFzcygncG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiggYW5pbWF0ZUNsYXNzLmVmZmVjdC5pbmRleE9mKCdzbGlkZScpICE9PSAtMSAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkuYWRkQ2xhc3MoJ2FuaW1hdGVfX2Zhc3RlcicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkuYWRkQ2xhc3MoJ2FuaW1hdGVfJythbmltYXRlQ2xhc3MuZWZmZWN0KTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJzdHlsZVwiKSA9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hZGRDbGFzcyhcIm5vLWJhY2tkcm9wLWJnXCIpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLnJlbW92ZUNsYXNzKFwibm8tYmFja2Ryb3AtYmdcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJnYW1pZmllZFwiICYmIGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrX2JhY2tkcm9wX3N0eWxlID0galEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYXR0cihcInN0eWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrX2JhY2tkcm9wX3N0YXR1cyA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJkYXRhLW92ZXJsYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgY2hlY2tfYmFja2Ryb3Bfc3R5bGUhPT0ndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2hlY2tfYmFja2Ryb3Bfc3R5bGUuaW5kZXhPZihcImJhY2tncm91bmQtY29sb3JcIik9PSAtMSAmJiB0eXBlb2YgY2hlY2tfYmFja2Ryb3Bfc3RhdHVzID09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikucmVtb3ZlQ2xhc3MoXCJuby1iYWNrZHJvcC1iZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5yZW1vdmVDbGFzcyhcIm5vLWJhY2tkcm9wLWJnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGpRMjI0KFwiLnBvcHRpbi1saXZlW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJkYXRhLWJnLWFuaW1hdGlvblwiKSE9J3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoalEyMjQoXCIucG9wdGluLWxpdmVbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYXR0cihcImRhdGEtYmctYW5pbWF0aW9uXCIpPT0nd2hlZWwnIHx8IGpRMjI0KFwiLnBvcHRpbi1saXZlW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJkYXRhLWJnLWFuaW1hdGlvblwiKT09J3JhaW4nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5yZW1vdmVDbGFzcyhcIm5vLWJhY2tkcm9wLWJnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYocG9wdGluLnBvcHRpbl90eXBlID09IFwiZ2FtaWZpZWRcIiAmJiBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja19iYWNrZHJvcF9zdHlsZSA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJzdHlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja19iYWNrZHJvcF9zdGF0dXMgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwiZGF0YS1vdmVybGF5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGNoZWNrX2JhY2tkcm9wX3N0eWxlIT09J3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrX2JhY2tkcm9wX3N0eWxlLmluZGV4T2YoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpPT0gLTEgJiYgdHlwZW9mIGNoZWNrX2JhY2tkcm9wX3N0YXR1cyA9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLnJlbW92ZUNsYXNzKFwibm8tYmFja2Ryb3AtYmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikucmVtb3ZlQ2xhc3MoXCJuby1iYWNrZHJvcC1iZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZWZmZWN0X3BvcHRpbl9jb250YWluZXIuY3NzKHtcImRpc3BsYXlcIjogXCJub25lXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19lZmZlY3RfcG9wdGluLmNzcyh7XCJkaXNwbGF5XCI6IFwiYmxvY2tcIn0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coJ0VudHJ5IEFuaW1hdGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoZHJhZ19jb250KS5hZGRDbGFzcygncG9wdGluLXZpc2libGUgcG9wdGluX19hbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGFuaW1hdGVDbGFzcy5lZmZlY3QuaW5kZXhPZignc2xpZGUnKSAhPT0gLTEgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoZHJhZ19jb250KS5hZGRDbGFzcygnYW5pbWF0ZV9fZmFzdGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChkcmFnX2NvbnQpLmFkZENsYXNzKCdhbmltYXRlXycrYW5pbWF0ZUNsYXNzLmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2pRMjI0KGRyYWdfY29udCkuYWRkQ2xhc3MoJ2FuaW1hdGVfJythbmltYXRlQ2xhc3MuZWZmZWN0KycgYW5pbWF0ZV8nK2FuaW1hdGVDbGFzcy5zcGVlZCsnIGFuaW1hdGVfX2RlbGF5JythbmltYXRlQ2xhc3MuZGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9SZXNpemVQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHRpblZpc2libGUocG9wdGluLnBvcHRpbl9pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKCdFbnRyeSBBbmltYXRlIGVycjMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkuYWRkQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhbmltYXRlQ2xhc3MuZWZmZWN0LmluZGV4T2YoJ3NsaWRlJykgIT09IC0xICApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkuYWRkQ2xhc3MoJ2FuaW1hdGVfX2Zhc3RlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZG9SZXNpemVQb3B0aW4ocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkuc2hvdyg1MDAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluVmlzaWJsZShwb3B0aW4ucG9wdGluX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcjpub3QoLnBvcHRpbi10YWItY29udGFpbmVyKScpLmFuaW1hdGUoeyd0b3AnOicwcHgnLCdsZWZ0JzonMHB4J30sMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3Moe1wiYm94LXNoYWRvd1wiOiAoIChwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwic29jaWFsX2Zvcm1hdF8yXCIpIHx8KHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImJyb3dzaW5nXCIpIHx8IChwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiICYmIHBvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwiZm9ybWF0XzNcIikgfHwgKHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImxpZ2h0Ym94XCIgJiYgcG9wdGluLnBvcHRpbl9mb3JtYXQgPT0gXCJmb3JtYXRfOVwiKSB8fCAocG9wdGluLnBvcHRpbl90eXBlID09IFwiYmFyXCIgJiYgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9sb2NhdGlvbiA9PSBcImNlbnRlci10b3BcIil8fCAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcIm1vYmlsZV9mb3JtYXRfM1wiKSB8fCAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcIm1vYmlsZV9mb3JtYXRfN1wiKSB8fCAocG9wdGluLnBvcHRpbl90eXBlKydfJytwb3B0aW4ucG9wdGluX2Zvcm1hdCA9PSBcImxpZ2h0Ym94X2Zvcm1hdF80XCIpIHx8IChwb3B0aW4ucG9wdGluX3R5cGUrJ18nK3BvcHRpbi5wb3B0aW5fZm9ybWF0ID09IFwibGlnaHRib3hfZm9ybWF0XzEwXCIpID8gXCJcIiA6XCIwIDNweCA5cHggcmdiYSgwLDAsMCwuNSlcIiApIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JtIHZhbGlkYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5JbnB1dFZhbGlkYXRpb25zKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5Gb3JtVmFsaWRhdGlvbnMocG9wdGluKTtcbiAgICAgICAgICAgICAgICAgICAgfSw2MDApO1xuICAgICAgICAgICAgICAgICAgICAvL2pRMjI0KGlkKS5zaG93KCBzZWxlY3RlZEVmZmVjdCwgb3B0aW9ucywgNTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihldHlwZSAhPSBcImV4aXRcIil7XG4gICAgICAgICAgICAgICAgaGlkZVRlYXNlck9uUG9wdXBTaG93KHBvcHRpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgYW5pbWF0aW9uIGNsYXNzZXMgYWZ0ZXIgMXNlY1xuICAgICAgICAgICAgY29uc3QgeyBkZXNpZ25fcHJvcGVydGllcywgaXNfdGVhc2Vyc19vbiB9ID0gcG9wdGluO1xuICAgICAgICAgICAgaWYgKCEoaXNfdGVhc2Vyc19vbiAmJiAoZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9hdXRvX2Nsb3NlIHx8IGRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY2xvc2Vfb25fc2NyZWVuX2NsaWNrKSkpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KGRyYWdfY29udCkucmVtb3ZlQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoZHJhZ19jb250KS5yZW1vdmVDbGFzcyAoZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY2xhc3NOYW1lLm1hdGNoICgvXFxiYW5pbWF0ZV9cXFMrL2cpIHx8IFtdKS5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKiBTdXBwb3J0IHBhZ2UgcmVsb2RlICoqKioqKioqKioqKioqKioqKi9cbiAgICBmdW5jdGlvbiBpZlBhZ2VSZWZyZXNoZWQoKXtcbiAgICAgICAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmluZm8oXCJ3aW5kb3cucGVyZm9ybWFuY2Ugd29ya3MgZmluZSBvbiB0aGlzIGJyb3dzZXJcIik7XG4gICAgICAgICAgICBpZiAocGVyZm9ybWFuY2UubmF2aWdhdGlvbi50eXBlID09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKiogU1RBUlQgcG9wdGluc19xdWV1ZSAqKioqKioqKioqKioqKioqKiovXG5cbiAgICBQb3B0aW5RdWV1ZSA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgdGhpcy5hY3RpdmUgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMucG9wdGlucyAgICA9IFtdO1xuXG4gICAgICAgIHRoaXMuaWZBY3RpdmUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRBY3RpdmUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlID0gZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZlJlbGV2ZW50ID0gZnVuY3Rpb24ocG9wdGluKXtcbiAgICAgICAgICAgIHJldHVybiBwb3B0aW4ucG9wdGluX3R5cGUgPT0gXCJsaWdodGJveFwiIHx8IHBvcHRpbi5wb3B0aW5fdHlwZSA9PSBcImdhbWlmaWVkXCIgfHwgcG9wdGluLnBvcHRpbl90eXBlID09IFwiZnVsbHBhZ2VcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hlY2tRdWV1ZSA9IGZ1bmN0aW9uKHBvcHRpbixjbGljayl7XG4gICAgICAgICAgICB2YXIgcG9wdGluX2NvbnRhaW5lciA9IChwb3B0aW4ucG9wdGluX3R5cGUgIT0gXCJlbWJlZGRlZFwiKSA/IGpRMjI0KFwiYm9keVwiKSA6IGpRMjI0KFwiLnBvcHRpbi1lbWJlZGRlZFtkYXRhLWlkPSdcIitwb3B0aW4ucG9wdGluX2lkK1wiJ11cIik7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRBY3RpdmUoKSl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaWZSZWxldmVudChwb3B0aW4pKXtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLmFkZFBvcHRpbih7cG9wdGluOnBvcHRpbixjbGljazpjbGlja30pXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3dMb2coJ2NoZWNrUXVldWUgYWN0aXZlIHJlbGV2YW50JylcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXScpLmxlbmd0aCA+MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluX2NvbnRhaW5lci5hcHBlbmQocG9wdGluLnBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5zW3BvcHRpbi5wb3B0aW5faWRdLnBvcHRpbiA9IHBvcHRpbi5wb3B0aW47XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQb3B0aW4ocG9wdGluLCBjbGljayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZlJlbGV2ZW50KHBvcHRpbikpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGpRMjI0KCdbZGF0YS1wb3B0aW4taWQ9XCInK3BvcHRpbi5wb3B0aW5faWQrJ1wiXScpLmxlbmd0aCA+MCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3B0aW4ucG9wdGluLmluY2x1ZGVzKCdkYXRhLXBvcHRpbi1pZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcG9wdGluX2NvbnRhaW5lci5hcHBlbmQocG9wdGluLnBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbnNbcG9wdGluLnBvcHRpbl9pZF0ucG9wdGluID0gcG9wdGluLnBvcHRpbjtcbiAgICAgICAgICAgICAgICAgICAgc2V0UG9wdGluKHBvcHRpbiwgY2xpY2spXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlUG9wdGluID0gZnVuY3Rpb24ocG9wdGluX2lkKXtcbiAgICAgICAgICAgIHBvcHRpbiA9IGFsbF9wb3B0aW5zW3BvcHRpbl9pZF07XG4gICAgICAgICAgICBpZiAodGhpcy5pZkFjdGl2ZSgpICYmIHRoaXMuaWZSZWxldmVudChwb3B0aW4pKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5hZGRQb3B0aW4gPSBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgLy8gIHRoaXMucG9wdGluc1tkYXRhLnBvcHRpbi5wb3B0aW5faWRdID0gZGF0YVxuICAgICAgICAvLyB9ICAgIFxuXG4gICAgICAgIC8vIHRoaXMuaWZFbXB0eSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wb3B0aW5zKS5sZW5ndGggPT0gMDtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIHRoaXMucmVtb3ZlUG9wdGluID0gZnVuY3Rpb24ocG9wdGluX2lkKXtcbiAgICAgICAgLy8gIHNob3dMb2cocG9wdGluX2lkKTtcbiAgICAgICAgLy8gIGlmICh0aGlzLnBvcHRpbnNbcG9wdGluX2lkXSAhPSB1bmRlZmluZWQpXG4gICAgICAgIC8vICAgICAgZGVsZXRlIHRoaXMucG9wdGluc1twb3B0aW5faWRdO1xuXG4gICAgICAgIC8vICBpZiAodGhpcy5pZkVtcHR5KCkpe1xuICAgICAgICAvLyAgICAgIHRoaXMuc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgICAgLy8gIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIHRoaXMuZmlyc3QgPSBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgcmV0dXJuIHRoaXMucG9wdGluc1tPYmplY3Qua2V5cyh0aGlzLnBvcHRpbnMpWzBdXTtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICB2YXIgUFEgPSBuZXcgUG9wdGluUXVldWUoKTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqIEVORCBwb3B0aW5zX3F1ZXVlICoqKioqKioqKioqKioqKioqKi9cblxuXG5cbiAgICBmdW5jdGlvbiBwb3B0aW5GYWNlYm9va01lc3NhbmdlckNvbnZlcnNpb24ocG9wdGluX2lkKXtcbiAgICAgICAgc2hvd0xvZygncG9wdGluRmFjZWJvb2tNZXNzYW5nZXJDb252ZXJzaW9uJylcblxuICAgICAgICBwb3B0aW5zW3BvcHRpbl9pZF0ucG9wdGluX3RyaWdnZXIuY29udmVydCA9IHRydWU7XG4gICAgICAgIHBvcHRpbiA9IGFsbF9wb3B0aW5zW3BvcHRpbl9pZF07XG5cbiAgICAgICAgLy8gU2V0IGFjdGlvbnMgYWZ0ZXIgcG9wdGluIHN1Ym1pdCBzdWNjZXNzZnVsbHRcbiAgICAgICAgYWZ0ZXJQb3B0aW5TdWJtaXQocG9wdGluLHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgLy8gSW5pdGlhdGUgcG9wdGluIGNvbnZlcnRpb24gYWpheCBjYWxsXG4gICAgICAgICAgICBwb3B0aW5Db252ZXJzaW9uKHBvcHRpbix1bmRlZmluZWQpO1xuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIC8vIG1vbml0b3IgZXJyb3JcbiAgICAgICAgICAgIG1vbml0b3JFcnJvcignc3VibWl0UG9wdGluKCktPnBvcHRpbkNvbnZlcnNpb24oKScsZXJyLCcnLCcnLHBvcHRpbik7XG4gICAgICAgICAgICAvLyByZWRpcmVjdCB1c2VyIHRvIHBvcHRpbiByZWRpcmVjdCBwYWdlXG4gICAgICAgICAgICByZWRpcmVjdEFmdGVyQ29udmVyc2lvbihwb3B0aW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9qUTIyNCgnW2RhdGEtcG9wdGluLWlkPVwiJytwb3B0aW5faWQrJ1wiXSAuZmFjZWJvb2stcGx1Z2luLXJlZGlyZWN0JylbMF0uY2xpY2soKTtcblxuICAgICAgICAvL2pRMjI0KCcucG9wdGluLXBvcHVwIC5mYWNlYm9vay1wbHVnaW4tcmVkaXJlY3QnKVswXS5jbGljaygpO1xuICAgIH1cblxuXG4gICAvKioqKioqKioqKioqKioqKioqKiBTdXBwb3J0IFNQQSBXZWJzaXRlICoqKioqKioqKioqKioqKioqKi9cblxuXG4gICB2YXIgcG9wdGluX2N1cnJlbnRfdXJsID0gbG9jYXRpb24uaHJlZjtcbiAgIGlmICh0eXBlb2YgcG9wdGluX3NpbmdsZV9wYWdlX2FwcCAhPSAndW5kZWZpbmVkJyAmJiBwb3B0aW5fc2luZ2xlX3BhZ2VfYXBwKVxuICAge1xuICAgICAgIHBvcHRpbl9zaW5nbGVfcGFnZV9hcHAgPSBwb3B0aW5DaGVja0Nvb2tpZShcInBvcHRpbl9zaW5nbGVfcGFnZV9hcHBfZGVidWdcIikgPyBwb3B0aW5DaGVja0Nvb2tpZShcInBvcHRpbl9zaW5nbGVfcGFnZV9hcHBfZGVidWdcIikgOiBwb3B0aW5fc2luZ2xlX3BhZ2VfYXBwO1xuICAgfVxuXG4gICBpZiAodHlwZW9mIHBvcHRpbl9zaW5nbGVfcGFnZV9hcHAgIT0gJ3VuZGVmaW5lZCcgJiYgcG9wdGluX3NpbmdsZV9wYWdlX2FwcCl7XG5cbiAgICAgICAgZnVuY3Rpb24gZGV0ZWN0X3VybF9jaGFuZ2UoYSxiKXtcbiAgICAgICAgICAgIGlmKHBvcHRpbkNoZWNrQ29va2llKFwicG9wdGluX3NpbmdsZV9wYWdlX2FwcF9kZWJ1Z1wiKSl7XG4gICAgICAgICAgICAgICAgc2hvd0xvZyhcImRldGVjdF91cmxfY2hhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluRHJhZ2dhYmxlQ29udGFpbmVyLXRhYlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGpRMjI0KFwiI21vZGVsQmFja2RyaXBcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICBwb3B0aW5TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICBqUTIyNChkb2N1bWVudCkudW5iaW5kKCk7XG4gICAgICAgICAgICBqUTIyNCh3aW5kb3cpLm9mZignc2Nyb2xsLnBvcHRpblRyaWdnZXJTY3JvbGxFdmVudCcpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHBvcHRpblRpbWVEZWxheVRyaWdnZXIpO1xuICAgICAgICAgICAgcG9wdGluVGltZURlbGF5VHJpZ2dlciA9IG51bGw7XG4gICAgICAgICAgICBydW5Qb3B0aW5Ob3coKTtcbiAgICAgICAgICAgIFBRID0gbmV3IFBvcHRpblF1ZXVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHVzaFN0YXRlID0gaGlzdG9yeS5wdXNoU3RhdGU7XG4gICAgICAgIGhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHB2cF9wYXRoID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQYWdlc19zcGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9wdGluX3ByZXZpb3VzX3Zpc2l0ZWRfcGFnZXMnKTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1BhZ2VzX3NwYSAmJiBwcmV2aW91c1BhZ2VzX3NwYS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUGFnZXNBcnJheV9zcGEgPSBwcmV2aW91c1BhZ2VzX3NwYS5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgICAgIGlmICghcHJldmlvdXNQYWdlc0FycmF5X3NwYS5pbmNsdWRlcyhwdnBfcGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNQYWdlc0FycmF5X3NwYS5wdXNoKHB2cF9wYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BvcHRpbl9wcmV2aW91c192aXNpdGVkX3BhZ2VzJywgcHJldmlvdXNQYWdlc0FycmF5X3NwYS5qb2luKCd8JykpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BvcHRpbl9wcmV2aW91c192aXNpdGVkX3BhZ2VzJywgcHZwX3BhdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmV2aW91c191cmxfc3BhID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wrJy8vJytkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZStkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZStkb2N1bWVudC5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAgICAgc2V0UHJldmlvdXNVcmwoKTtcbiAgICAgICAgICAgIHB1c2hTdGF0ZS5hcHBseShoaXN0b3J5LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgZGV0ZWN0X3VybF9jaGFuZ2UoJ3B1c2hTdGF0ZScsIGFyZ3VtZW50cyk7ICAvLyBTb21lIGV2ZW50LWhhbmRsaW5nIGZ1bmN0aW9uXG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgIC8qaWYgKGRvY3VtZW50LmJvZHkhPW51bGwpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrX2NsaWVudF91cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgICAgICB2YXIgZmxhZ19jbGlja19ib2R5PWZhbHNlO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSk9PntcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUudGFyZ2V0LnRhZ05hbWUhPSdzdmcnICYmIGUudGFyZ2V0LnRhZ05hbWUhPSdsaW5lJyAmJiBlLnRhcmdldC50YWdOYW1lIT0nQlVUVE9OJyAmJiBlLnRhcmdldC50YWdOYW1lIT0nQk9EWScpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjaGVja19jbGllbnRfdXJsICE9PSB3aW5kb3cubG9jYXRpb24uaHJlZil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhcIm9sZCBsb2NhdGlvbiBjYXNlMTogXCIgKyBjaGVja19jbGllbnRfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9nKFwidXJsIGNoYW5nZWQgdG86XCIrd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI21vZGVsQmFja2RyaXBcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS51bmJpbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5Qb3B0aW5Ob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2NsaWVudF91cmwgPSBsb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluX2N1cnJlbnRfdXJsID0gY2hlY2tfY2xpZW50X3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrX2NsaWVudF91cmwgIT09IGxvY2F0aW9uLmhyZWYpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2coXCJuZXcgbG9jYXRpb24gY2FzZTE6IFwiICsgcG9wdGluX2N1cnJlbnRfdXJsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBQUSA9IG5ldyBQb3B0aW5RdWV1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93TG9nKFwiQ2xpY2tlZCB0YWdOYW1lIFwiICsgZS50YXJnZXQudGFnTmFtZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9lLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICB9ZWxzZXtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNob3dMb2coXCJvbGQgbG9jYXRpb24gY2FzZTI6IFwiICsgcG9wdGluX2N1cnJlbnRfdXJsKTtcbiAgICAgICAgICAgICAgICBpZiAocG9wdGluX2N1cnJlbnRfdXJsIT09bG9jYXRpb24uaHJlZil7XG4gICAgICAgICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5EcmFnZ2FibGVDb250YWluZXItdGFiXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgalEyMjQoXCIjbW9kZWxCYWNrZHJpcFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgIHBvcHRpblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIGpRMjI0KGRvY3VtZW50KS51bmJpbmQoKTtcbiAgICAgICAgICAgICAgICAgIHJ1blBvcHRpbk5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3B0aW5fY3VycmVudF91cmwgPSBsb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICAgIHNob3dMb2coXCJuZXcgbG9jYXRpb24gY2FzZTI6IFwiICsgcG9wdGluX2N1cnJlbnRfdXJsICk7XG4gICAgICAgICAgICAgICAgUFEgPSBuZXcgUG9wdGluUXVldWUoKTtcblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgfSovXG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzaG93TG9nKFwib2xkIGxvY2F0aW9uOiBcIiArIHBvcHRpbl9jdXJyZW50X3VybCk7XG4gICAgICAgIC8vaWYgKHBvcHRpbl9jdXJyZW50X3VybCE9PWRvY3VtZW50LmxvY2F0aW9uKXtcbiAgICAgICAgIGpRMjI0KFwiI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lci10YWJcIikucmVtb3ZlKCk7XG4gICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBcIikucmVtb3ZlKCk7XG4gICAgICAgICBqUTIyNChcIiNtb2RlbEJhY2tkcmlwXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgcG9wdGluU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLnVuYmluZCgpO1xuICAgICAgICAgICAgcnVuUG9wdGluTm93KCk7XG4gICAgICAgIC8vfVxuICAgICAgICBwb3B0aW5fY3VycmVudF91cmwgPSBkb2N1bWVudC5sb2NhdGlvbjtcbiAgICAgICAgc2hvd0xvZyhcIm5ldyBsb2NhdGlvbjogXCIgKyBwb3B0aW5fY3VycmVudF91cmwgKTtcbiAgICAgICAgUFEgPSBuZXcgUG9wdGluUXVldWUoKTtcblxuICAgIH0pO1xuICAgIFxuICAgfVxuXG4gIFxuXG4gICAgLyoqKioqKioqKioqKioqKioqKiogQW5pbWF0ZWQgQnV0dG9uICoqKioqKioqKioqKioqKioqKi9cbiAgICB2YXIgc3VibWl0QnRuQW5pbWF0aW9uSW50ZXJ2YWwsXG4gICAgICAgIGNsb3NlQnRuQW5pbWF0aW9uSW50ZXJ2YWwsXG4gICAgICAgIGxpbmtfaW50ZXJ2YWxfYXJyYXk9W107XG4gICAgZnVuY3Rpb24gYW5pbWF0ZUJ1dHRvbihwb3B0aW4pe1xuICAgICAgICAvL1JlbW92ZSBvbGQgYW5pbWF0ZS5jc3MgXG4gICAgICAgIGpRMjI0KFwic3R5bGUuYW5pbWF0ZWJ0bkNzc1wiKS5yZW1vdmUoKTtcbiAgICAgICAgdmFyIHBvcHRpbkJ1dHRvbiA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAjcG9wdGluRm9ybVN1Ym1pdFRleHQgLmZyb2FsYS1lZGl0b3ItYnV0dG9uXCIpO1xuICAgICAgICBpZihwb3B0aW5CdXR0b24ubGVuZ3RoICYmIHR5cGVvZiBwb3B0aW5CdXR0b24uYXR0cihcImRhdGEtcG9wdGluLWFuaW1hdGVcIikgIT09IFwidW5kZWZpbmVkXCIgJiYgcG9wdGluQnV0dG9uLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBidG5BbmltYXRlID0gcG9wdGluQnV0dG9uLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpO1xuICAgICAgICAgICAgc3VibWl0QnRuQW5pbWF0aW9uSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHBvcHRpbkJ1dHRvbi50b2dnbGVDbGFzcygncG9wdGluX19hbmltYXRlZCBhbmltYXRlX18nK2J0bkFuaW1hdGUpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9wdGluQ2xvc2VCdXR0b24gPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkZvcm1DbG9zZVRleHQgLmZyb2FsYS1lZGl0b3ItYnV0dG9uXCIpO1xuICAgICAgICBpZihwb3B0aW5DbG9zZUJ1dHRvbi5sZW5ndGggJiYgdHlwZW9mIHBvcHRpbkNsb3NlQnV0dG9uLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpICE9PSBcInVuZGVmaW5lZFwiICYmIHBvcHRpbkNsb3NlQnV0dG9uLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBidG5DbG9zZUFuaW1hdGUgPSBwb3B0aW5DbG9zZUJ1dHRvbi5hdHRyKFwiZGF0YS1wb3B0aW4tYW5pbWF0ZVwiKTtcbiAgICAgICAgICAgIGNsb3NlQnRuQW5pbWF0aW9uSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHBvcHRpbkNsb3NlQnV0dG9uLnRvZ2dsZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfXycrYnRuQ2xvc2VBbmltYXRlKTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvcHRpbmxpbmtCdXR0b24gPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItbGlua1wiKTtcbiAgICAgICAgaWYocG9wdGlubGlua0J1dHRvbi5sZW5ndGggJiYgdHlwZW9mIHBvcHRpbmxpbmtCdXR0b24uYXR0cihcImRhdGEtcG9wdGluLWFuaW1hdGVcIikgIT09IFwidW5kZWZpbmVkXCIgJiYgcG9wdGlubGlua0J1dHRvbi5hdHRyKFwiZGF0YS1wb3B0aW4tYW5pbWF0ZVwiKSAhPSBudWxsKXtcbiAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWVkaXRvci1saW5rXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgbGlua2J0bkFuaW1hdGUgPSBqUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1wb3B0aW4tYW5pbWF0ZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbGlua2J0bl9pZD0galEyMjQodGhpcykucGFyZW50KCkuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgICAgIGxpbmtfaW50ZXJ2YWxfYXJyYXlbcG9wdGluLnBvcHRpbl9pZCtcIl9cIitsaW5rYnRuX2lkXSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI1wiK2xpbmtidG5faWQpLmZpbmQoXCIuZnJvYWxhLWVkaXRvci1saW5rXCIpLnRvZ2dsZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfXycrbGlua2J0bkFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKiBBbmltYXRlZCBHaWZ0Qm94ICoqKioqKioqKioqKioqKioqKi9cbiAgICB2YXIgZ2lmdGJveEFuaW1hdGlvbkludGVydmFsO1xuICAgIGZ1bmN0aW9uIGFuaW1hdGVHaWZ0Ym94KHBvcHRpbil7XG4gICAgICAgIHZhciBwb3B0aW5HaWZ0Ym94ID0galEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5mcm9hbGEtZ2lmdGJveC13cmFwcGVyIC5mci1naWZ0Ym94LWltYWdlcyAuZ2lmdGJveC1pbWdcIik7XG4gICAgICAgIHZhciBnaWZ0Ym94QW5pbWF0ZSA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWdpZnRib3gtd3JhcHBlciAuZnItZ2lmdGJveC1pbWFnZXNcIikuYXR0cihcImRhdGEtcG9wdGluLWFuaW1hdGVcIik7XG4gICAgICAgIHZhciBnaWZ0Ym94Q250ID0gcG9wdGluR2lmdGJveC5sZW5ndGggPyBwb3B0aW5HaWZ0Ym94Lmxlbmd0aCA6IDEgO1xuICAgICAgICBpZihwb3B0aW5HaWZ0Ym94Lmxlbmd0aCA+IDAgJiYgZ2lmdGJveEFuaW1hdGUpIHtcbiAgICAgICAgICAgIGdpZnRib3hBbmltYXRpb25JbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvcHRpbkdpZnRib3gudG9nZ2xlQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fJytnaWZ0Ym94QW5pbWF0ZSk7XG4gICAgICAgICAgICB9LGdpZnRib3hDbnQgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBwb3B0aW5CYXNlNjRUb0J5dGVzKGJhc2U2NCkge1xuICAgICAgICBjb25zdCBiaW5TdHJpbmcgPSBhdG9iKGJhc2U2NCk7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYmluU3RyaW5nLCAobSkgPT4gbS5jb2RlUG9pbnRBdCgwKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvcHRpbkJ5dGVzVG9CYXNlNjQoYnl0ZXMpIHtcbiAgICAgICAgY29uc3QgYmluU3RyaW5nID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uYnl0ZXMpO1xuICAgICAgICByZXR1cm4gYnRvYShiaW5TdHJpbmcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3B0aW5FbmMoc3RyKXtcbiAgICAgICAgcmV0dXJuIHBvcHRpbkJ5dGVzVG9CYXNlNjQobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3B0aW5EZWMoc3RyKXtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShwb3B0aW5CYXNlNjRUb0J5dGVzKHN0cikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdhbWlmaWVkR2lmdGJveChwb3B0aW4pe1xuICAgICAgICB2YXIgZ2lmdGJveEFuaW1hdGUgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1naWZ0Ym94LXdyYXBwZXIgLmZyLWdpZnRib3gtaW1hZ2VzXCIpLmF0dHIoXCJkYXRhLXBvcHRpbi1hbmltYXRlXCIpO1xuICAgICAgICB2YXIgcG9wdGluR2lmdGJveCA9IGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZnJvYWxhLWdpZnRib3gtd3JhcHBlciAuZnItZ2lmdGJveC1pbWFnZXMgLmdpZnRib3gtaW1nXCIpO1xuXG4gICAgICAgIHZhciB3ZWlnaHRKU09OID0ge307XG5cdFx0dmFyIHBvcHRpbkVuY1B6ZVZhbCA9IGpRMjI0KFwiI3BvcHRpbkVuY1B6ZVwiKS52YWwoKTtcblx0XHR2YXIgcG9wdGluRW5jUHplID0galEyMjQoXCIjZ2FtaWZpZWRQcml6ZUpTT05cIikubGVuZ3RoID4gMCA/IEpTT04ucGFyc2UoalEyMjQoXCIjZ2FtaWZpZWRQcml6ZUpTT05cIikudmFsKCkpIDogKHBvcHRpbkVuY1B6ZVZhbCA/IEpTT04ucGFyc2UocG9wdGluRGVjKHBvcHRpbkVuY1B6ZVZhbCkpIDogW10pO1xuXG4gICAgICAgIGpRMjI0LmVhY2gocG9wdGluRW5jUHplLnByaXplcywgZnVuY3Rpb24oa2V5LCB2YWwpe1xuICAgICAgICAgICAgd2VpZ2h0SlNPTltrZXldID0gdmFsLmNoYW5jZXMgPyBOdW1iZXIodmFsLmNoYW5jZXMpLzEwMCA6IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIC5mci1naWZ0Ym94LWltYWdlcyAuZnItZ2lmdGJveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHRyeXtjbGVhckludGVydmFsKGdpZnRib3hBbmltYXRpb25JbnRlcnZhbCk7fWNhdGNoKGVycil7fVxuICAgICAgICAgICAgdmFyIHByaXplU2VsZWN0ZWQgPSBqUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1wcml6ZVwiKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuZnItZ2lmdGJveC1pbWFnZXMgLmdpZnRib3gtaW1nJykucmVtb3ZlQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fJytnaWZ0Ym94QW5pbWF0ZSkuY3NzKHsnYW5pbWF0aW9uLWRlbGF5JzogJzBzJywnLXdlYmtpdC1hbmltYXRpb24tZGVsYXknOiAnMHMnLCctbW96LWFuaW1hdGlvbi1kZWxheSc6ICcwcycsJy1tcy1hbmltYXRpb24tZGVsYXknOiAnMHMnfSk7XG4gICAgICAgICAgICBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLmZyLWdpZnRib3gtaW1hZ2VzIC5naWZ0Ym94LWltZycpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGpRMjI0KGUudGFyZ2V0KS5hZGRDbGFzcygncG9wdGluX19hbmltYXRlZCBhbmltYXRlX190YWRhJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgalEyMjQoZS50YXJnZXQpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX3RhZGEnKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgdmFyIHByaXplV2lubmVyID0gd2VpZ2h0UmFuZG9tKHdlaWdodEpTT04pO1xuICAgICAgICAgICAgc2hvd0xvZyhcInByaXplV2lubmVyXCIscHJpemVXaW5uZXIpO1xuICAgICAgICAgICAgc2hvd0xvZyhcInByaXplSlNPTkdvdFNlbGVjdGVkXCIscG9wdGluRW5jUHplLnByaXplc1twcml6ZVdpbm5lcl0pO1xuXG4gICAgICAgICAgICBwb3B0aW5bXCJnYW1pZmllZF9wcml6ZVwiXSA9IHBvcHRpbkVuY1B6ZS5wcml6ZXNbcHJpemVXaW5uZXJdO1xuICAgICAgICAgICAgcG9wdGluW1wiZ2FtaWZpZWRfcHJpemVcIl1bXCJwcml6ZV9pZFwiXSA9IHByaXplV2lubmVyO1xuXG4gICAgICAgICAgICBpZiggcHJpemVXaW5uZXIgJiYgcG9wdGluRW5jUHplLnByaXplc1twcml6ZVdpbm5lcl0ubG9vc2luZ19vcHRpb24gPT0gZmFsc2UgKXtcbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgd2luIGlmIGxvb3Npbmdfb3B0aW9uIGlzIGZhbHNlXG4gICAgICAgICAgICAgICAgc2hvd0xvZyhcIldpblwiKTtcbiAgICAgICAgICAgICAgICBwb3B0aW5bXCJnYW1pZmllZF9wcml6ZVwiXVtcImlzX3dpbm5lclwiXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvL1JlcGxhY2UgUHJpemUgTGFiZWxzXG4gICAgICAgICAgICAgICAgdmFyIHBsYXlTY3JlZW5Db250YWluZXIgPSBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuIHBcIik7XG4gICAgICAgICAgICAgICAgcGxheVNjcmVlbkNvbnRhaW5lci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGpRMjI0KHRoaXMpLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGV4dC5pbmRleE9mKFwie3twcml6ZV9sYWJlbH19XCIpICE9IC0xICYmIHBvcHRpbkVuY1B6ZS5wcml6ZXNbcHJpemVXaW5uZXJdLmxhYmVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmh0bWwodGV4dC5yZXBsYWNlKFwie3twcml6ZV9sYWJlbH19XCIsIHBvcHRpbkVuY1B6ZS5wcml6ZXNbcHJpemVXaW5uZXJdLmxhYmVsICkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHRleHQuaW5kZXhPZihcInt7cHJpemVfY29kZX19XCIpICE9IC0xICYmIHBvcHRpbkVuY1B6ZS5wcml6ZXNbcHJpemVXaW5uZXJdLmNvZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuaHRtbCh0ZXh0LnJlcGxhY2UoXCJ7e3ByaXplX2NvZGV9fVwiLCBwb3B0aW5FbmNQemUucHJpemVzW3ByaXplV2lubmVyXS5jb2RlICkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5kcmFnZ2FibGUtY29udGFpbmVyXCIpLmNzcyhcImRpc3BsYXlcIixcIm5vbmVcIikuZmluZCgnLmRyYWdnYWJsZS5pbWFnZS1jaGFuZ2UtdmlkZW8nKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdib3gtc2hhZG93JywnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBwb3N0IHBsYXkgc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgIGlmKHBvcHRpblsnZGVzaWduX3Byb3BlcnRpZXMnXSAmJiBwb3B0aW5bJ2Rlc2lnbl9wcm9wZXJ0aWVzJ11bJ2Rpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiddICYmIHBvcHRpblsnZGVzaWduX3Byb3BlcnRpZXMnXVsnZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuJ10gPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93X3dpbm5pbmdfc2NyZWVuKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZkxpbmtDb252ZXJzaW9uKHBvcHRpbik7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9wbGF5X3NjcmVlblwiKS5hZGRDbGFzcyhcInBvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sODAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW5PblhjbGljayhqUTIyNCh0aGlzKS5nZXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmNsb3NlLXgtYnV0dG9uXCIpLnNob3coMTAwKTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc2hvd0xvZyhcImxvc2VcIik7XG4gICAgICAgICAgICAgICAgcG9wdGluW1wiZ2FtaWZpZWRfcHJpemVcIl1bXCJpc193aW5uZXJcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5kcmFnZ2FibGUtY29udGFpbmVyXCIpLmNzcyhcImRpc3BsYXlcIixcIm5vbmVcIikuZmluZCgnLmRyYWdnYWJsZS5pbWFnZS1jaGFuZ2UtdmlkZW8nKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKCdib3gtc2hhZG93JywnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBwb3N0IHBsYXkgc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fbG9zaW5nX3NjcmVlblwiKS5hZGRDbGFzcyhcInBvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9sb3Npbmdfc2NyZWVuXCIpLnJlbW92ZUNsYXNzKCdwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfSw4MDApO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQb3B0aW5PblhjbGljayhqUTIyNCh0aGlzKS5nZXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmNsb3NlLXgtYnV0dG9uXCIpLnNob3coMTAwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW4uZ2FtaWZpZWRfcHJpemUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvID09IHRydWUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfdG9fdXJsICE9IHVuZGVmaW5lZCl7XG5cdFx0XHRcdFx0XHRzaG93TG9nKCdpZkxpbmtDb252ZXJzaW9uMycpO1xuXHRcdFx0XHRcdFx0Ly9qUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoJyNyZWRpcmVjdEJsYW5rJylbMF0uY2xpY2soKTtcblx0XHRcdFx0XHRcdC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnPXRydWU7XG5cdFx0XHRcdFx0XHQvLyB2YXIgcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF9jbG9zZV9kZWxheTtcblx0XHRcdFx0XHRcdC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdC8vIFx0cG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sJ2RpcmVjdCcsJ2dhbWlmaWVkJyk7XG5cdFx0XHRcdFx0XHQvLyB9LCByZWRpcmVjdF9jbG9zZV9kZWxheSA/IChwYXJzZUludChyZWRpcmVjdF9jbG9zZV9kZWxheSkgKyAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiA/IDggOiAwKSkgKiAxMDAwIDogKHBvcHRpbi53aGVlbF9oYXNfY291cG9uID8gZGVmYXVsdF9jbG9zZV9kZWxheSAqIDMgOiBkZWZhdWx0X2Nsb3NlX2RlbGF5KSAqIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF9jbG9zZV9kZWxheTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbF9yZWRpcmVjdF9jbG9zZV9kZWxheSA9IHJlZGlyZWN0X2Nsb3NlX2RlbGF5ID8gMCA6IChwb3B0aW4ud2hlZWxfaGFzX2NvdXBvbiA/IGRlZmF1bHRfY2xvc2VfZGVsYXkgKiAzIDogZGVmYXVsdF9jbG9zZV9kZWxheSkgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdG90YWxfcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSByZWRpcmVjdF9jbG9zZV9kZWxheSA/IChwYXJzZUludChyZWRpcmVjdF9jbG9zZV9kZWxheSkgKyAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiA/IDggOiAwKSkgKiAxMDAwIDogKHBvcHRpbi53aGVlbF9oYXNfY291cG9uID8gZGVmYXVsdF9jbG9zZV9kZWxheSAqIDMgOiBkZWZhdWx0X2Nsb3NlX2RlbGF5KSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sJ2RpcmVjdCcsJ2dhbWlmaWVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0b3RhbF9yZWRpcmVjdF9jbG9zZV9kZWxheSApO1xuXHRcdFx0XHRcdH1cbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqKioqKiogR2FtaWZpZWQgcmFuZG9tIHByb2JhYmlsaXR5ICoqKioqKiovXG4gICAgZnVuY3Rpb24gd2VpZ2h0UmFuZG9tKHByb2IpIHtcbiAgICAgICAgdmFyIGksIHN1bT0wLCByPU1hdGgucmFuZG9tKCk7XG4gICAgICAgIGZvciAoaSBpbiBwcm9iKSB7XG4gICAgICAgICAgICBzdW0gKz0gcHJvYltpXTtcbiAgICAgICAgICAgIGlmIChyIDw9IHN1bSkgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG5cblx0ZnVuY3Rpb24gcG9wdGluU3BpbldoZWVsQ2FsbChwb3B0aW4sIHBhcmVudEVMLCBza2lwcywgcG9wV2hlZWwsIHdlaWdodEpTT04sIHBvcHRpbkVuY1B6ZSkge1xuXHRcdHZhciBwcml6ZVdpbm5lciA9IHdlaWdodFJhbmRvbSh3ZWlnaHRKU09OKTtcblx0XHR2YXIgcHJpemVTZWxlY3RlZElkeCA9IDA7XG5cdFx0Zm9yIChjb25zdCBwcml6ZVNlbGVjdGVkIGluIHdlaWdodEpTT04pIHtcblx0XHRcdGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh3ZWlnaHRKU09OLCBwcml6ZVNlbGVjdGVkKSkge1xuXHRcdFx0XHQvLyBzaG93TG9nKHByaXplU2VsZWN0ZWQsIHByaXplU2VsZWN0ZWRJZHgsIHByaXplV2lubmVyKTtcblx0XHRcdFx0aWYocHJpemVTZWxlY3RlZCA9PSBwcml6ZVdpbm5lcil7XG5cdFx0XHRcdFx0c2hvd0xvZyhwcml6ZVNlbGVjdGVkLCBwcml6ZVNlbGVjdGVkSWR4LCBwb3B0aW5FbmNQemUucHJpemVzW3ByaXplU2VsZWN0ZWRdLCBwcml6ZVdpbm5lcik7XG5cblx0XHRcdFx0XHQvLyBSb3RhdGUgd2hlZWxcblx0XHRcdFx0XHRza2lwcyA9IDI0ICsgcHJpemVTZWxlY3RlZElkeDtcblx0XHRcdFx0XHRqUTIyNCgnLnNwaW4td2hlZWwtYW5pbWF0aW9uLScrcG9wdGluLnBvcHRpbl9pZCkucmVtb3ZlKCk7XG5cdFx0XHRcdFx0alEyMjQocGFyZW50RUwpLmFwcGVuZChgPHN0eWxlIGNsYXNzPVwic3Bpbi13aGVlbC1hbmltYXRpb25cIiBpZD1cInNwaW4td2hlZWwtYW5pbWF0aW9uLWArcG9wdGluLnBvcHRpbl9pZCtgXCI+XG5cdFx0XHRcdFx0XHRAa2V5ZnJhbWVzIHNwaW5uaW5nIHtcblx0XHRcdFx0XHRcdFx0ZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDApOyB9XG5cdFx0XHRcdFx0XHRcdHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoLWArKHNraXBzKjMwKStgZGVnKTsgfVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdDwvc3R5bGU+YCk7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdoZWVsID0galEyMjQocGFyZW50RUwpLmZpbmQoJy5wb3Atd2hlZWwtd3JhcCcpO1xuXHRcdFx0XHRcdHBvcFdoZWVsLnRvZ2dsZUNsYXNzKFwicG9wLXNwaW5uaW5nXCIpO1xuXHRcdFx0XHRcdGpRMjI0KGRvY3VtZW50KS5vZmYoJ2NsaWNrJywgcGFyZW50RUwrJyAucG9wLXdoZWVsLW92ZXJsYXknKTtcblxuXHRcdCAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuXHRcdFx0XHRcdFx0aWYoIHByaXplV2lubmVyICYmIHBvcHRpbkVuY1B6ZS5wcml6ZXNbcHJpemVXaW5uZXJdLmxvb3Npbmdfb3B0aW9uID09IGZhbHNlICl7XG5cdFx0XHRcdFx0XHRcdC8vIEFsd2F5cyB3aW4gaWYgbG9vc2luZ19vcHRpb24gaXMgZmFsc2Vcblx0XHRcdFx0XHRcdFx0c2hvd0xvZyhcIldpblwiKTtcblx0XHRcdFx0XHRcdFx0cG9wdGluW1wiZ2FtaWZpZWRfcHJpemVcIl1bXCJpc193aW5uZXJcIl0gPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdC8vUmVwbGFjZSBQcml6ZSBMYWJlbHNcblx0XHRcdFx0XHRcdFx0dmFyIHBsYXlTY3JlZW5Db250YWluZXIgPSBqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX3BsYXlfc2NyZWVuIHBcIik7XG5cdFx0XHRcdFx0XHRcdHBsYXlTY3JlZW5Db250YWluZXIuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgdGV4dCA9IGpRMjI0KHRoaXMpLmh0bWwoKTtcblx0XHRcdFx0XHRcdFx0XHRpZih0ZXh0LmluZGV4T2YoXCJ7e3ByaXplX2xhYmVsfX1cIikgIT0gLTEgJiYgcG9wdGluRW5jUHplLnByaXplc1twcml6ZVNlbGVjdGVkXS5sYWJlbCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUTIyNCh0aGlzKS5odG1sKHRleHQucmVwbGFjZShcInt7cHJpemVfbGFiZWx9fVwiLCBwb3B0aW5FbmNQemUucHJpemVzW3ByaXplU2VsZWN0ZWRdLmxhYmVsICkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGV4dC5pbmRleE9mKFwie3twcml6ZV9jb2RlfX1cIikgIT0gLTEgJiYgcG9wdGluRW5jUHplLnByaXplc1twcml6ZVNlbGVjdGVkXS5jb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmh0bWwodGV4dC5yZXBsYWNlKFwie3twcml6ZV9jb2RlfX1cIiwgcG9wdGluRW5jUHplLnByaXplc1twcml6ZVNlbGVjdGVkXS5jb2RlICkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHRqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lclwiKS5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLmZpbmQoJy5kcmFnZ2FibGUuaW1hZ2UtY2hhbmdlLXZpZGVvJykucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRcdFx0alEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcblx0XHRcdFx0XHRcdFx0XHRqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ2JveC1zaGFkb3cnLCcnKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNob3cgcG9zdCBwbGF5IHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwb3B0aW5bJ2Rlc2lnbl9wcm9wZXJ0aWVzJ10gJiYgcG9wdGluWydkZXNpZ25fcHJvcGVydGllcyddWydkaXNhYmxlX3Bvc3RfcGxheV9zY3JlZW4nXSAmJiBwb3B0aW5bJ2Rlc2lnbl9wcm9wZXJ0aWVzJ11bJ2Rpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiddID09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd193aW5uaW5nX3NjcmVlbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZMaW5rQ29udmVyc2lvbihwb3B0aW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fcGxheV9zY3JlZW5cIikuYWRkQ2xhc3MoXCJwb3B0aW4tdmlzaWJsZSBwb3B0aW5fX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJbiBhbmltYXRlX19mYXN0ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbl9wbGF5X3NjcmVlblwiKS5yZW1vdmVDbGFzcygncG9wdGluX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW4gYW5pbWF0ZV9fZmFzdGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LDgwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHRcdFx0XHRcdFx0XHRqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VQb3B0aW5PblhjbGljayhqUTIyNCh0aGlzKS5nZXQoMCkpO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5jbG9zZS14LWJ1dHRvblwiKS5zaG93KDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0sIDEwMDApO1xuXG5cdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0c2hvd0xvZyhcImxvc2VcIik7XG5cdFx0XHRcdFx0XHRcdHBvcHRpbltcImdhbWlmaWVkX3ByaXplXCJdW1wiaXNfd2lubmVyXCJdID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHRqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lclwiKS5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLmZpbmQoJy5kcmFnZ2FibGUuaW1hZ2UtY2hhbmdlLXZpZGVvJykucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRcdFx0alEyMjQoXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQnKTtcblx0XHRcdFx0XHRcdFx0XHRqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoJ2JveC1zaGFkb3cnLCcnKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNob3cgcG9zdCBwbGF5IHNjcmVlblxuXHRcdFx0XHRcdFx0XHRcdGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5wb3B0aW5fbG9zaW5nX3NjcmVlblwiKS5hZGRDbGFzcyhcInBvcHRpbi12aXNpYmxlIHBvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlclwiKTtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUTIyNChcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluX2xvc2luZ19zY3JlZW5cIikucmVtb3ZlQ2xhc3MoJ3BvcHRpbl9fYW5pbWF0ZWQgYW5pbWF0ZV9fZmFkZUluIGFuaW1hdGVfX2Zhc3RlcicpO1xuXHRcdFx0XHRcdFx0XHRcdH0sODAwKTtcblx0XHRcdFx0XHRcdFx0XHRqUTIyNChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXBvcHRpbi1pZD1cIicrcG9wdGluLnBvcHRpbl9pZCsnXCJdICNjbG9zZVhCdXR0b24nLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VQb3B0aW5PblhjbGljayhqUTIyNCh0aGlzKS5nZXQoMCkpO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdGpRMjI0KFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5jbG9zZS14LWJ1dHRvblwiKS5zaG93KDEwMCk7XG5cblx0XHRcdFx0XHRcdFx0XHRpZihwb3B0aW4uZ2FtaWZpZWRfcHJpemUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvID09IHRydWUgJiYgcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfdG9fdXJsICE9IHVuZGVmaW5lZCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRzaG93TG9nKCdpZkxpbmtDb252ZXJzaW9uMycpO1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly9qUTIyNCgnW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXScpLmZpbmQoJyNyZWRpcmVjdEJsYW5rJylbMF0uY2xpY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdC8vcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5yZWRpcmVjdF9mbGFnPXRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyB2YXIgcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUucmVkaXJlY3RfdG9fb3B0aW9ucy5yZWRpcmVjdF9jbG9zZV9kZWxheTtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFx0cG9wdGluUmVkaXJlY3RUb1VybChwb3B0aW4sJ2RpcmVjdCcsJ2dhbWlmaWVkJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyB9LCByZWRpcmVjdF9jbG9zZV9kZWxheSA/IChwYXJzZUludChyZWRpcmVjdF9jbG9zZV9kZWxheSkgKyAocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiA/IDggOiAwKSkgKiAxMDAwIDogKHBvcHRpbi53aGVlbF9oYXNfY291cG9uID8gZGVmYXVsdF9jbG9zZV9kZWxheSAqIDMgOiBkZWZhdWx0X2Nsb3NlX2RlbGF5KSAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZGlyZWN0X2Nsb3NlX2RlbGF5ID0gcG9wdGluLmdhbWlmaWVkX3ByaXplLnJlZGlyZWN0X3RvX29wdGlvbnMucmVkaXJlY3RfY2xvc2VfZGVsYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWxfcmVkaXJlY3RfY2xvc2VfZGVsYXkgPSByZWRpcmVjdF9jbG9zZV9kZWxheSA/ICgocG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiA/IDggOiAwKSkgKiAxMDAwIDogKHBvcHRpbi53aGVlbF9oYXNfY291cG9uID8gZGVmYXVsdF9jbG9zZV9kZWxheSAqIDMgOiBkZWZhdWx0X2Nsb3NlX2RlbGF5KSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciB0b3RhbF9yZWRpcmVjdF9jbG9zZV9kZWxheSA9IHJlZGlyZWN0X2Nsb3NlX2RlbGF5ID8gKHBhcnNlSW50KHJlZGlyZWN0X2Nsb3NlX2RlbGF5KSArIChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuZGlzYWJsZV9wb3N0X3BsYXlfc2NyZWVuID8gOCA6IDApKSAqIDEwMDAgOiAocG9wdGluLndoZWVsX2hhc19jb3Vwb24gPyBkZWZhdWx0X2Nsb3NlX2RlbGF5ICogMyA6IGRlZmF1bHRfY2xvc2VfZGVsYXkpICogMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B0aW5SZWRpcmVjdFRvVXJsKHBvcHRpbiwnZGlyZWN0JywnZ2FtaWZpZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRvdGFsX3JlZGlyZWN0X2Nsb3NlX2RlbGF5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LCAxMDAwKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0sIDcwMDApO1xuXG5cdFx0ICAgICAgICAgICAgcG9wdGluW1wiZ2FtaWZpZWRfcHJpemVcIl0gPSBwb3B0aW5FbmNQemUucHJpemVzW3ByaXplU2VsZWN0ZWRdO1xuXHRcdCAgICAgICAgICAgIHBvcHRpbltcImdhbWlmaWVkX3ByaXplXCJdW1wicHJpemVfaWRcIl0gPSBwcml6ZVNlbGVjdGVkO1xuXHRcdCAgICAgICAgICAgIGlmKHByaXplU2VsZWN0ZWQgPT0gcHJpemVXaW5uZXIgfHwgcG9wdGluRW5jUHplLnByaXplc1twcml6ZVNlbGVjdGVkXS5sb29zaW5nX29wdGlvbiA9PSBmYWxzZSApe1xuXHRcdCAgICAgICAgICAgICAgICAvLyBBbHdheXMgd2luIGlmIGxvb3Npbmdfb3B0aW9uIGlzIGZhbHNlXG5cdFx0ICAgICAgICAgICAgICAgIHNob3dMb2coXCJXaW5cIik7XG5cdFx0ICAgICAgICAgICAgICAgIHBvcHRpbltcImdhbWlmaWVkX3ByaXplXCJdW1wiaXNfd2lubmVyXCJdID0gdHJ1ZTtcblx0XHQgICAgICAgICAgICB9ZWxzZXtcblx0XHQgICAgICAgICAgICAgICAgc2hvd0xvZyhcImxvc2VcIik7XG5cdFx0ICAgICAgICAgICAgICAgIHBvcHRpbltcImdhbWlmaWVkX3ByaXplXCJdW1wiaXNfd2lubmVyXCJdID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdHByaXplU2VsZWN0ZWRJZHggPSBwcml6ZVNlbGVjdGVkSWR4ICsgMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBwb3B0aW5TcGluV2hlZWxJbml0KHBvcHRpbiwgc3BpbkFmdGVyU3VibWl0ID0gZmFsc2Upe1xuXHRcdHZhciBwYXJlbnRFTCA9IFwiW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCI7XG5cdFx0dmFyIHBvcFdoZWVsID0galEyMjQocGFyZW50RUwpLmZpbmQoJy5wb3Atd2hlZWwtd3JhcCcpO1xuXHRcdHZhciBza2lwcyA9IDA7XG5cbiAgICAgICAgdmFyIHdlaWdodEpTT04gPSB7fTtcbiAgICAgICAgdmFyIHBvcHRpbkVuY1B6ZVZhbCA9IGpRMjI0KFwiI3BvcHRpbkVuY1B6ZVwiKS52YWwoKTtcbiAgICAgICAgdmFyIHBvcHRpbkVuY1B6ZSA9IGpRMjI0KFwiI2dhbWlmaWVkUHJpemVKU09OXCIpLmxlbmd0aCA+IDAgPyBKU09OLnBhcnNlKGpRMjI0KFwiI2dhbWlmaWVkUHJpemVKU09OXCIpLnZhbCgpKSA6IChwb3B0aW5FbmNQemVWYWwgPyBKU09OLnBhcnNlKHBvcHRpbkRlYyhwb3B0aW5FbmNQemVWYWwpKSA6IFtdKTtcblxuICAgICAgICBqUTIyNC5lYWNoKHBvcHRpbkVuY1B6ZS5wcml6ZXMsIGZ1bmN0aW9uKGtleSwgdmFsKXtcbiAgICAgICAgICAgIHdlaWdodEpTT05ba2V5XSA9IHZhbC5jaGFuY2VzID8gTnVtYmVyKHZhbC5jaGFuY2VzKS8xMDAgOiAwO1xuICAgICAgICB9KTtcblx0XHRpZighcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiB8fCBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gI3BvcHRpbkRyYWdnYWJsZUNvbnRhaW5lciAjcG9wdGluRm9ybVN1Ym1pdFRleHRcIikubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgalEyMjQocGFyZW50RUwpLm9uKCdjbGljaycsICcucG9wLXdoZWVsLW92ZXJsYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcG9wdGluU3BpbldoZWVsQ2FsbChwb3B0aW4sIHBhcmVudEVMLCBza2lwcywgcG9wV2hlZWwsIHdlaWdodEpTT04sIHBvcHRpbkVuY1B6ZSk7XG4gICAgICAgICAgICAgICAgalEyMjQoZG9jdW1lbnQpLm9mZignY2xpY2snLCBwYXJlbnRFTCsnIC5wb3Atd2hlZWwtb3ZlcmxheScpO1xuICAgICAgICAgICAgfSk7XG5cdFx0fSBlbHNlIGlmKHNwaW5BZnRlclN1Ym1pdCkge1xuXHRcdFx0cG9wdGluU3BpbldoZWVsQ2FsbChwb3B0aW4sIHBhcmVudEVMLCBza2lwcywgcG9wV2hlZWwsIHdlaWdodEpTT04sIHBvcHRpbkVuY1B6ZSk7XG5cdFx0fVxuXHR9XG5cbiAgICBmdW5jdGlvbiBsb2FkY291cG9uYnV0dG9uKHBvcHRpbil7XG4gICAgICAgIHZhciBjb3Vwb25fdGV4dD0nJztcbiAgICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5mcm9hbGEtZWRpdG9yLWNvdXBvblwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXNcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5jb3Vwb24pO1xuICAgICAgICAgICAgY291cG9uX3RleHQ9alEyMjQodGhpcykudGV4dCgpO1xuXG4gICAgICAgICAgICBpZihwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMuY291cG9uICYmIHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5jb3Vwb24gIT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHZhciBjb3Vwb25fdHlwZSA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5jb3Vwb24uY291cG9uX3R5cGU7XG4gICAgICAgICAgICAgICAgLy9pZihjb3Vwb25fdHlwZSA9PSAndW5pcXVlJyl7XG4gICAgICAgICAgICAgICAgICAgIGNvdXBvbl90ZXh0ID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLmNvdXBvbi5jb2RlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291cG9uX2VsZW1lbnRfdGV4dCA9ICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItY291cG9uIHBcIikudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItY291cG9uIHBcIikuaHRtbChqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmZyb2FsYS1lZGl0b3ItY291cG9uIHBcIikuaHRtbCgpLnJlcGxhY2UoY291cG9uX2VsZW1lbnRfdGV4dCxjb3Vwb25fdGV4dCkpO1xuICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1jY1wiLGNvdXBvbl90ZXh0KTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcyhcImN1cnNvclwiLFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgIGpRMjI0KHRoaXMpLmZpbmQoJ3AnKS5jc3MoXCJjdXJzb3JcIixcInBvaW50ZXJcIik7XG4gICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCdzcGFuJykuY3NzKFwiY3Vyc29yXCIsXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgaWYoY291cG9uX3RleHQgPT0gJycpe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAucG9wdGluLWNvdXBvbi1lbGVtZW50XCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIC5mcm9hbGEtZWRpdG9yLWNvdXBvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGpRMjI0KFwiI2hvbGRjb3Vwb250ZXh0XCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgalEyMjQoXCIucG9wdGluLWNvdXBvbi10b29sdGlwXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdmFyIGNvdXBvbl90ZXh0PWpRMjI0KHRoaXMpLnRleHQoKTtcblxuXHRcdFx0Ly8gU2VuZCBldmVudCB0byBkb2N1bWVudCBET01cblx0XHRcdHZhciBwb3B0aW5FdmVudEV4dHJhcyA9IHtcImV2ZW50X25hbWVcIiA6IFwiY291cG9uQ29weVwiLCBcImNvdXBvbl9jb2RlXCI6IGNvdXBvbl90ZXh0fTtcblx0XHRcdGlmKHBvcHRpbi5nYW1pZmllZF9wcml6ZSl7XG5cdFx0XHRcdHBvcHRpbkV2ZW50RXh0cmFzW1wicHJpemVfbGFiZWxcIl0gPSBwb3B0aW4uZ2FtaWZpZWRfcHJpemUubGFiZWw7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBvbmNvdXBvbkNvcHlFdmVudCA9IG5ldyBDdXN0b21FdmVudChcImNvdXBvbkNvcHlcIiwge2J1YmJsZXM6IHRydWUsIGRldGFpbDogcG9wdGluRXZlbnREZXRhaWxzKHBvcHRpbiwgcG9wdGluRXZlbnRFeHRyYXMpfSk7XG5cdFx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG9uY291cG9uQ29weUV2ZW50KTtcblxuICAgICAgICAgICAgdmFyIGh0bWxfY29weV9pbnB1dD0nPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJob2xkY291cG9udGV4dFwiIGFyaWEtbGFiZWw9XCJDb3Vwb25cIiAvPic7XG4gICAgICAgICAgICBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5hcHBlbmQoaHRtbF9jb3B5X2lucHV0KTtcbiAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAjaG9sZGNvdXBvbnRleHQnKS52YWwoY291cG9uX3RleHQpLnNlbGVjdCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJDb3B5XCIpO1xuICAgICAgICAgICAgdmFyIHRvb2x0aXBfZGl2PSc8c3BhbiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTtiYWNrZ3JvdW5kOiAjMDAwO3dpZHRoOiA3MHB4O2hlaWdodDogMjRweDtsaW5lLWhlaWdodDogMjVweDtjb2xvcjogI2ZmZjtmb250LXNpemU6IDEycHg7Ym9yZGVyLXJhZGl1czogNnB4O3RvcDogLTMwcHg7bGVmdDogY2FsYyg1MCUgLSAzNXB4KTtkaXNwbGF5Om5vbmU7XCIgY2xhc3M9XCJwb3B0aW4tY291cG9uLXRvb2x0aXBcIj4nKyh1c2VyX2xhbmc9PVwiZW5cIj9jb3BpZWRfZW46Y29waWVkX2hlKSsnPC9zcGFuPic7XG4gICAgICAgICAgICBqUTIyNCh0aGlzKS5wYXJlbnQoKS5hcHBlbmQodG9vbHRpcF9kaXYpO1xuICAgICAgICAgICAgalEyMjQodGhpcykucGFyZW50KCkuZmluZChcIi5wb3B0aW4tY291cG9uLXRvb2x0aXBcIikuZmFkZUluKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1jb3Vwb24tdG9vbHRpcFwiKS5mYWRlT3V0KDMwMCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgalEyMjQoXCIjaG9sZGNvdXBvbnRleHRcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB2YXIgY291cG9uX2NvdW50X2NvbnZlcnNpb24gPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLnBvcHRpbi1jb3Vwb24tZWxlbWVudFwiKS5hdHRyKFwiZGF0YS1jb3VudC1jb252ZXJzaW9uXCIpO1xuICAgICAgICAgICAgaWYodHlwZW9mIGNvdXBvbl9jb3VudF9jb252ZXJzaW9uICE9ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICBpZihjb3Vwb25fY291bnRfY29udmVyc2lvbiA9PSAndHJ1ZScpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2NvbnZfdHlwZSA9IFwiY291cG9uXCI7XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbkNvbnZlcnNpb24ocG9wdGluLCBudWxsLCBfY29udl90eXBlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKkBuZCB0aGlyZCBsaW5rIGJ1dHRvbnMgcmVhZHkqL1xuICAgIGZ1bmN0aW9uIHJlYWR5bGlua2J1dHRvbnMocG9wdGluKXtcbiAgICAgICAgaWYoalEyMjQoJy5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9Jytwb3B0aW4ucG9wdGluX2lkKyddIC5wb3B0aW4tZm9ybS1saW5rLWJ1dHRvbicpLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAucG9wdGluLWZvcm0tbGluay1idXR0b24nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGJ0bl9pZD1qUTIyNCh0aGlzKS5hdHRyKFwiaWRcIiksXG4gICAgICAgICAgICAgICAgICAgIGJ0bnVybD1qUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1idG51cmxcIiksXG4gICAgICAgICAgICAgICAgICAgIGJ0bnRhcmdldD1qUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1idG50YXJnZXRcIik7XG4gICAgICAgICAgICAgICAgaWYoalEyMjQodGhpcykuZmluZChcImFcIikubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgICAgICBidG51cmw9alEyMjQodGhpcykuZmluZChcImFcIikuYXR0cihcImhyZWZcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBqUTIyNCh0aGlzKS5maW5kKFwiYVwiKS5hdHRyKFwidGFyZ2V0XCIpIT1cInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bnRhcmdldD0nX2JsYW5rJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRMjI0KFwiI1wiK2J0bl9pZCkuYXR0cihcImRhdGEtYnRudGFyZ2V0XCIsXCJfYmxhbmtcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgalEyMjQoXCIjXCIrYnRuX2lkKS5hdHRyKFwiZGF0YS1idG51cmxcIixidG51cmwpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2FfYnRuX3RleHQ9IGpRMjI0KHRoaXMpLmZpbmQoXCJhXCIpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgalEyMjQodGhpcykuZmluZChcImFcIikucGFyZW50KCkuaHRtbChfYV9idG5fdGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGpRMjI0KHRoaXMpLmNzcyhcImN1cnNvclwiLFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgICAgICBqUTIyNCh0aGlzKS5maW5kKCdwLCBpbnB1dCwgYSwgc3BhbiwgZGl2LCBiciwgaW1nJykuY3NzKFwiY3Vyc29yXCIsXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnBvcHRpbi1mb3JtLWxpbmstYnV0dG9uJykub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtCdG5BdHRyID0galEyMjQodGhpcykuZGF0YSgpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRQb3B0aW5JZCA9IGpRMjI0KHRoaXMpLnBhcmVudHMoJy5wb3B0aW4tcG9wdXAnKS5hdHRyKCdkYXRhLXBvcHRpbi1pZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYobGlua0J0bkF0dHJbJ2NvdW50Q29udmVyc2lvbiddICYmIGxpbmtCdG5BdHRyWydjb3VudENvbnZlcnNpb24nXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnRuX2NvbnZfdHlwZSA9IGpRMjI0KHRoaXMpLmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYnRuX2NvbnZfdHlwZSA9PT0gXCJwb3B0aW5Gb3JtQ2xvc2VUZXh0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bl9jb252X3R5cGUgPSBcImNsb3NlX2J0blwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBvcHRpbkNvbnZlcnNpb24ocG9wdGluLCBudWxsLCBidG5fY29udl90eXBlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcblx0XHRcdFx0XHRqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10nKS5hZGRDbGFzcyhcInBvcHRpbi1yZWRpcmVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25SZWRpcmVjdEFmdGVyQ2xpY2socG9wdGluLHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHZhciBsaW5rX2J1dHRvbl91cmw9alEyMjQodGhpcykuYXR0cihcImRhdGEtYnRudXJsXCIpLFxuICAgICAgICAgICAgICAgIC8vIGxpbmtfYnV0dG9uX3RhcmdldD1qUTIyNCh0aGlzKS5hdHRyKFwiZGF0YS1idG50YXJnZXRcIik7XG4gICAgICAgICAgICAgICAgLy8gaWYoICEobGlua19idXR0b25fdXJsLmluZGV4T2YoXCJodHRwOi8vXCIpICE9IC0xIHx8IGxpbmtfYnV0dG9uX3VybC5pbmRleE9mKFwiaHR0cHM6Ly9cIikgIT0gLTEpICkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgbGlua19idXR0b25fdXJsID0gXCIvL1wiICsgbGlua19idXR0b25fdXJsO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAvLyBpZih0eXBlb2YgbGlua19idXR0b25fdXJsIT0ndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGlua19idXR0b25fdGFyZ2V0PT0ndW5kZWZpbmVkJyApe1xuICAgICAgICAgICAgICAgIC8vICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGxpbmtfYnV0dG9uX3VybDtcbiAgICAgICAgICAgICAgICAvLyB9ZWxzZXtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2luZG93Lm9wZW4obGlua19idXR0b25fdXJsLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfSk7XG5cdFx0XHRqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLnBvcHRpbi1mb3JtLWxpbmstYnV0dG9uJykub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IDMyIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcblx0XHRcdFx0XHRqUTIyNChlLnRhcmdldCkuY2xpY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1dHRvblJlZGlyZWN0QWZ0ZXJDbGljayhwb3B0aW4sIGVsKSB7XG4gICAgICAgIHZhciBsaW5rQnRuQXR0ciA9IGpRMjI0KGVsKS5kYXRhKCk7XG4gICAgICAgIHZhciBwYXJlbnRQb3B0aW5JZCA9IGpRMjI0KGVsKS5wYXJlbnRzKCcucG9wdGluLXBvcHVwJykuYXR0cignZGF0YS1wb3B0aW4taWQnKTtcblxuICAgICAgICBpZiggKGxpbmtCdG5BdHRyW1wiYnRudXJsXCJdICYmICFsaW5rQnRuQXR0cltcImxhdW5jaFBvcHRpblwiXSkgfHwgKGxpbmtCdG5BdHRyW1wibGlua1VybFwiXSAmJiBsaW5rQnRuQXR0cltcImxpbmtVcmxcIl0gPT0gdHJ1ZSkgKXtcbiAgICAgICAgICAgIGNsb3NlUG9wdGluKCBwYXJlbnRQb3B0aW5JZCwgdHJ1ZSApO1xuICAgICAgICAgICAgaWYobGlua0J0bkF0dHJbXCJidG51cmxcIl0pIHtcbiAgICAgICAgICAgICAgICBpZiggIShsaW5rQnRuQXR0cltcImJ0bnVybFwiXS5pbmRleE9mKFwiaHR0cDovL1wiKSAhPSAtMSB8fCBsaW5rQnRuQXR0cltcImJ0bnVybFwiXS5pbmRleE9mKFwiaHR0cHM6Ly9cIikgIT0gLTEgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtfcHN0cj1saW5rQnRuQXR0cltcImJ0bnVybFwiXTtcbiAgICAgICAgICAgICAgICAgICAgaWYobGlua19wc3RyLmluZGV4T2YoJ3RlbDonKSE9Jy0xJyB8fCBsaW5rX3BzdHIuaW5kZXhPZignc21zOicpIT0nLTEnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtCdG5BdHRyW1wiYnRudXJsXCJdID0gbGlua0J0bkF0dHJbXCJidG51cmxcIl07XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlua0J0bkF0dHJbXCJidG51cmxcIl0gPSBcIi8vXCIgKyBsaW5rQnRuQXR0cltcImJ0bnVybFwiXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCAhbGlua0J0bkF0dHJbXCJidG50YXJnZXRcIl0gKXtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBsaW5rQnRuQXR0cltcImJ0bnVybFwiXTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihsaW5rQnRuQXR0cltcImJ0bnVybFwiXSwgJ19ibGFuaycpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2UgaWYobGlua0J0bkF0dHJbXCJsYXVuY2hQb3B0aW5cIl0gJiYgbGlua0J0bkF0dHJbXCJsYXVuY2hQb3B0aW5cIl0gPT0gdHJ1ZSl7XG4gICAgICAgICAgICBjbG9zZVBvcHRpbiggcGFyZW50UG9wdGluSWQsIHRydWUpO1xuICAgICAgICAgICAgdmFyIHBvcHRpbl9yZWRpcmVjdCA9e307XG4gICAgICAgICAgICBwb3B0aW5fcmVkaXJlY3QucmVkaXJlY3RGcm9tQnRucyA9IHRydWU7XG4gICAgICAgICAgICBwb3B0aW5fcmVkaXJlY3QucG9wdGluX2Zyb20gPSBwYXJlbnRQb3B0aW5JZDtcbiAgICAgICAgICAgIHBvcHRpbl9yZWRpcmVjdC5wb3B0aW5fdG8gPSBsaW5rQnRuQXR0cltcImxhdW5jaFBvcHRpbklkXCJdO1xuICAgICAgICAgICAgaWYobGlua0J0bkF0dHJbXCJsYXVuY2hQb3B0aW5JZFwiXSl7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUb1BvcHRpbihwb3B0aW5fcmVkaXJlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZSBpZihsaW5rQnRuQXR0cltcInNob3BpZnlDYXJ0XCJdICYmIGxpbmtCdG5BdHRyW1wic2hvcGlmeUNhcnRcIl0gPT0gdHJ1ZSl7XG4gICAgICAgICAgICBzaG93TG9nKFwiQWRkIHRvIGNhcnRcIilcbiAgICAgICAgICAgIHNob3dMb2cocG9wdGluKVxuICAgICAgICAgICAgLy8gSWYgU2hvcGlmeSB0aGVuIGNoZWNrIGZvciBhZGQgdG8gY2FydFxuICAgICAgICAgICAgaWYodHlwZW9mIFNob3BpZnkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHNob3dMb2coXCJoYW5kZVNob3BpZnlBZGRUb0NhcnQoKVwiKTtcbiAgICAgICAgICAgICAgICBoYW5kZVNob3BpZnlBZGRUb0NhcnQocG9wdGluLGZhbHNlLCBqUTIyNChlbCkuYXR0cihcImlkXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjbG9zZVBvcHRpbiggcGFyZW50UG9wdGluSWQgKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLypiYWNrZ3JvdW5kIEFuaW1hdGlvbiovXG4gICAgZnVuY3Rpb24gbG9hZGJnQW5pbWF0aW9uT3ZlcmxheShwb3B0aW4pe1xuICAgICAgICB2YXIgcG9wdGluU2VsZWN0b3IgPSBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIik7XG4gICAgICAgIHZhciBoYW5kbGVzPVtdO1xuICAgICAgICB2YXIgYmdhbm12YWw9cG9wdGluU2VsZWN0b3IuYXR0cihcImRhdGEtYmctYW5pbWF0aW9uXCIpO1xuXG4gICAgICAgIGlmKCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2VtYmVkZGVkJyB8fCBwb3B0aW4ucG9wdGluX3R5cGUgPT0gJ2Z1bGxwYWdlJyApe1xuICAgICAgICAgICAgYmdhbm12YWwgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxlY3Rvcj1cIm1vZGVsQmFja2RyaXBcIjtcbiAgICAgICAgdmFyIGNhbnZhc19pZD1cImJnZWZmZWN0X2NhbnZhc19cIitwb3B0aW4ucG9wdGluX2lkO1xuXG4gICAgICAgIGlmKHR5cGVvZiBiZ2FubXZhbCE9PSd1bmRlZmluZWQnICYmIHR5cGVvZiBiZ2FubXZhbCE9PScnKXtcbiAgICAgICAgICAgIHN3aXRjaCAoYmdhbm12YWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3aGVlbCc6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXMucHVzaChuZXcgV2hlZWwoMi41ZS00ICogd2luZG93LmlubmVyV2lkdGggKiB3aW5kb3cuaW5uZXJIZWlnaHQsc2VsZWN0b3IsY2FudmFzX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJyeS1za3knOlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzLnB1c2gobmV3IFN0YXJyeVNreShzZWxlY3RvcixjYW52YXNfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFsbCc6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXMucHVzaChuZXcgQmFsbHMoc2VsZWN0b3IsY2FudmFzX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXNbaGFuZGxlcy5sZW5ndGggLSAxXS5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Nub3cnOlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzLnB1c2gobmV3IFNub3dzKHBhcnNlSW50KDVlLTQgKiB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5pbm5lckhlaWdodCksc2VsZWN0b3IsY2FudmFzX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXNbaGFuZGxlcy5sZW5ndGggLSAxXS5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyYWluJzpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcy5wdXNoKG5ldyBSYWluKCcwMScsc2VsZWN0b3IsY2FudmFzX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbmZldHRpJzpcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb25mZXR0aShzZWxlY3RvcixjYW52YXNfaWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGJnYW5tdmFsPT1cInN0YXJyeS1za3lcIil7XG4gICAgICAgICAgICAgICAgalEyMjQoXCIjXCIrc2VsZWN0b3IrXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKFwib3BhY2l0eVwiLDAuNyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGJnYW5tdmFsPT1cInJhaW5cIiB8fCBiZ2FubXZhbD09XCJ3aGVlbFwiKXtcbiAgICAgICAgICAgICAgICBqUTIyNChcIiNcIitzZWxlY3RvcitcIltkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5jc3MoXCJvcGFjaXR5XCIsMC41KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHZhciBiZ19lZmZlY3Rfb3BhY2l0eSA9IChwb3B0aW4ucG9wdGluX3R5cGUgIT0gJ2dhbWlmaWVkJykgPyAxIDogMC41O1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBqUTIyNChcIi5wb3B0aW4tcG9wdXAtYmFja2dyb3VuZFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXVwiKS5hdHRyKFwic3R5bGVcIikgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgICAgICBiZ19lZmZlY3Rfb3BhY2l0eSA9IDAuNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZih0eXBlb2YgalEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuYXR0cihcInN0eWxlXCIpICE9ICd1bmRlZmluZWQnICYmIGpRMjI0KFwiLnBvcHRpbi1wb3B1cC1iYWNrZ3JvdW5kW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdXCIpLmF0dHIoXCJzdHlsZVwiKS5pbmRleE9mKCdiYWNrZ3JvdW5kLWNvbG9yJykgPT0gLTFcbiAgICAgICAgICAgICAgICApe1xuICAgICAgICAgICAgICAgICAgICBiZ19lZmZlY3Rfb3BhY2l0eSA9IDAuNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgalEyMjQoXCIjXCIrc2VsZWN0b3IrXCJbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuY3NzKFwib3BhY2l0eVwiLGJnX2VmZmVjdF9vcGFjaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYoIWpRMjI0KFwiI2JnZWZmZWN0X2NhbnZhc19cIitwb3B0aW4ucG9wdGluX2lkKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBsb2FkYmdBbmltYXRpb25PdmVybGF5KHBvcHRpbik7fVxuICAgICAgICAgICAgfSwxMCk7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKiBDbGllbnQgTGltaXQgUG9wdXAgTG9ncyAqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczogc2hvd1BvcHRpbigpXG4gICAgICogcGFyYW1ldGVycyAgICAgICA6IHBvcHRpbjpvYmplY3RcbiAgICAgKiBEZXNjICAgICAgICAgICAgIDogQWpheCBjYWxsIHdpdGggdmlzaXRvciBkYXRhXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IFBvcHRpbiBpcyB2aWV3ZWQgaW4gdGhpcyBzdGFnZVxuICAgICAqL1xuXG4gICAgaWYodHlwZW9mIHBvcHRpbkNsaWVudExpbWl0TG9nU3RhdHVzICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LnBvcHRpbkNsaWVudExpbWl0TG9nU3RhdHVzID0gZnVuY3Rpb24gKGNsaWVudF9zZWxlY3Qpe1xuICAgICAgICAgICAgc2hvd0xvZygncG9wdGluQ2xpZW50TGltaXRMb2dTdGF0dXM6ICcrY2xpZW50X3NlbGVjdCk7XG4gICAgICAgICAgICAvLyBTZXQgY29va2llc1xuICAgICAgICAgICAgalEyMjQoXCIjcG9wdGluVXBncmFkZVBvcHRpblwiKS5oaWRlKCk7XG4gICAgICAgICAgICBqUTIyNChcIiNwb3B1cFJlbWluZE1lXCIpLmhpZGUoKTtcbiAgICBcbiAgICAgICAgICAgIHN0YXR1cyA9IGNsaWVudF9zZWxlY3Q7XG4gICAgICAgICAgICBsb2dfaWQgPSB1cGdyYWRlX3BvcHVwX3NldHRpbmcuaWQ7XG4gICAgICAgICAgICAvLyBBamF4IGNhbGxcbiAgICAgICAgICAgIGpRMjI0LmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogYXBpX2xpbmsrXCIvYXBpL2Rpc3BsYXkvbGltaXRMb2dzL1wiK2dldENsaWVudElkKCkrXCI/c3RhdHVzPVwiK3N0YXR1cytcIiZpZD1cIitsb2dfaWQsXG4gICAgICAgICAgICAgICAgYXN5bmM6dHJ1ZSxcbiAgICAgICAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHR5cGU6J2dldCcsXG4gICAgICAgICAgICB9LCBcImpzb25cIilcbiAgICAgICAgICAgICAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdHRpbmdcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvL21vbml0b3JFcnJvcigncG9wdGluVmlld2VkKCktPmVycm9yKCknLGVycm9yLHN0YXR1cyx4aHIucmVzcG9uc2VUZXh0LHBvcHRpbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93UG9wdGluTGltaXRQb3B1cChkYXRhKXtcbiAgICAgICAgalEyMjQoXCJib2R5XCIpLmFwcGVuZChkYXRhLmNsaWVudF9yZXN0cmljdGlvbl9zZXR0aW5nLnVwZ3JhZGVfcG9wdXApO1xuICAgIH1cblxuXG4gICAgaWYodHlwZW9mIGNsb3NlVXBncmFkZVBvcHVwICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LmNsb3NlVXBncmFkZVBvcHVwID0gZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICBqUTIyNChcIiNwb3B0aW5VcGdyYWRlUG9wdGluXCIpLmhpZGUoKVxuICAgICAgICAgICAgaWYgKHVwZ3JhZGVfcG9wdXBfc2V0dGluZy5tb3RlX3RoYW5fdHdvX2RheXMpe1xuICAgICAgICAgICAgICAgIGpRMjI0KFwiYm9keVwiKS5hcHBlbmQodXBncmFkZV9wb3B1cF9zZXR0aW5nLnJlbWluZG1lX3BvcHVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYodHlwZW9mIHBvcHRpblVwZ3JhZGVEb250UmVtaW5kTWUgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cucG9wdGluVXBncmFkZURvbnRSZW1pbmRNZSA9IGZ1bmN0aW9uIChjbGllbnRfc2VsZWN0KXtcbiAgICAgICAgICAgIHBvcHRpbkNsaWVudExpbWl0TG9nU3RhdHVzKGNsaWVudF9zZWxlY3QpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2YgcG9wdGluVXBncmFkZVJlbWluZE1lICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LnBvcHRpblVwZ3JhZGVSZW1pbmRNZSA9IGZ1bmN0aW9uIChjbGllbnRfc2VsZWN0KXtcbiAgICAgICAgICAgIHBvcHRpbkNsaWVudExpbWl0TG9nU3RhdHVzKGNsaWVudF9zZWxlY3QpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2YgY2xvc2VSZW1pbmRNZVBvcHVwICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgd2luZG93LmNsb3NlUmVtaW5kTWVQb3B1cCA9IGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgalEyMjQoXCIjcG9wdXBSZW1pbmRNZVwiKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2YgcG9wdGluVXBncmFkZVBvcHVwQ2xpY2sgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICB3aW5kb3cucG9wdGluVXBncmFkZVBvcHVwQ2xpY2sgPSBmdW5jdGlvbiAoY2xpZW50X3NlbGVjdCl7XG4gICAgICAgICAgICBwb3B0aW5DbGllbnRMaW1pdExvZ1N0YXR1cyhjbGllbnRfc2VsZWN0KVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKiBDb29raWUgKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBnZXRTZXNzaW9uU3RvcmFnZUJ5S2V5KCR0ZXJtKXtcbiAgICB2YXIgJHJlc3VsdCA9ICcgJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmtleShpKTtcbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygkdGVybSkpe1xuICAgICAgICAgICAgJHJlc3VsdCArPSBrZXkrXCI9XCIrd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KStcIiBcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJHJlc3VsdC5zbGljZSgwLCAtMSk7XG59XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGZ1bmN0aW9uczpcbiAgICAgKiBwYXJhbWV0ZXJzICAgICAgIDogY25hbWU6c3RyaW5nIC0+IGNvb2tpZSBuYW1lXG4gICAgICogRGVzYyAgICAgICAgICAgICA6IHJldHVybiBib29sZWFuIGlmIGNvb2tpZSBleGlzdFxuICAgICAqL1xuICAgIC8vIGZ1bmN0aW9uIHBvcHRpbkNoZWNrTWFzdGVyQ29va2llKGNuYW1lKSB7XG4gICAgLy8gICAgIHZhciBjb29raWUgPSBwb3B0aW5HZXRDb29raWUoY25hbWUpO1xuICAgIC8vICAgICBpZiAoY29va2llICE9IFwiXCIgJiYgY29va2llICE9PSBudWxsKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG5cbiAgICAvLyBmdW5jdGlvbiBQb3B0aW5Db29raWVzKCl7IFxuXG4gICAgLy8gIHRoaXMubmFtZSAgID0gXCJQb3B0aW5cIlxuICAgIC8vICB0aGlzLmV4ZGF5cyA9IDM2NVxuICAgIC8vICB0aGlzLmNvb2tpZXMgPSB7fVxuXG4gICAgLy8gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpe1xuICAgIC8vICAgICAgaWYgKCFwb3B0aW5DaGVja01hc3RlckNvb2tpZSh0aGlzLm5hbWUpKXtcbiAgICAvLyAgICAgICAgICB0aGlzLmluaXRpYWxpemVDb29raWUoKVxuICAgIC8vICAgICAgfWVsc2V7XG4gICAgLy8gICAgICAgICAgdGhpcy5jb29raWVzID0gIEpTT04ucGFyc2UocG9wdGluR2V0Q29va2llKHRoaXMubmFtZSkpIFxuICAgIC8vICAgICAgfVxuXG4gICAgLy8gICAgICB0aGlzLmNoZWNrRXhwaXJlKClcblxuICAgIC8vICAgICAgJHRoaXMgPSB0aGlzXG5cbiAgICAvLyAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICAgICAgJHRoaXMuY2hlY2tFeHBpcmUoKVxuICAgIC8vICAgICAgfSw2MDAwMClcbiAgICAvLyAgfVxuXG4gICAgLy8gIHRoaXMuaW5pdGlhbGl6ZUNvb2tpZSA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICB0aGlzLnVwZGF0ZUNvb2tpZXMoKVxuICAgIC8vICB9XG5cbiAgICAvLyAgdGhpcy5zZXRDb29raWUgPSBmdW5jdGlvbihjbmFtZSwgY3ZhbHVlLCBleGRheXMpXG4gICAgLy8gIHtcblxuICAgIC8vICAgICAgZCA9IG5ldyBEYXRlKCk7XG4gICAgLy8gICAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyAoZXhkYXlzKjI0KjYwKjYwKjEwMDApKTtcbiAgICAvLyAgICAgIGV4cGlyZXMgPSBkLnRvVVRDU3RyaW5nKCk7XG5cbiAgICAvLyAgICAgIGNvb2sgPSB7XG4gICAgLy8gICAgICAgICAga2V5OiBjbmFtZSwgLy8gbmV3X3VzZXJcbiAgICAvLyAgICAgICAgICB2YWx1ZTogY3ZhbHVlLFxuICAgIC8vICAgICAgICAgIGV4cGlyZTogZXhwaXJlcyxcbiAgICAvLyAgICAgIH07XG5cbiAgICAvLyAgICAgIHRoaXMuY29va2llc1tjbmFtZV0gPSBjb29rXG4gICAgLy8gICAgICAkdGhpcyA9IHRoaXNcbiAgICAvLyAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgICAgICAkdGhpcy51cGRhdGVDb29raWVzKClcbiAgICAvLyAgICAgIH0sMTApXG4gICAgLy8gIH1cblxuICAgIC8vICB0aGlzLmNoZWNrQ29va2llID0gZnVuY3Rpb24oY25hbWUpe1xuICAgIC8vICAgICAgcmV0dXJuICh0aGlzLmNvb2tpZXMuaGFzT3duUHJvcGVydHkoY25hbWUpICYmICF0aGlzLmV4cGlyZShjbmFtZSkpXG4gICAgLy8gIH1cblxuICAgIC8vICB0aGlzLmdldENvb2tpZSA9IGZ1bmN0aW9uKGNuYW1lKXtcbiAgICAvLyAgICAgIGlmICh0aGlzLmNvb2tpZXMuaGFzT3duUHJvcGVydHkoY25hbWUpICYmICF0aGlzLmV4cGlyZShjbmFtZSkpXG4gICAgLy8gICAgICAgICAgcmV0dXJuIHRoaXMuY29va2llc1tjbmFtZV0udmFsdWVcbiAgICAvLyAgICAgIHJldHVybiBcIlwiXG4gICAgLy8gIH1cblxuICAgIC8vICB0aGlzLmRlbGV0ZUNvb2tpZSA9IGZ1bmN0aW9uKGNuYW1lKXtcbiAgICAvLyAgICAgIGlmICh0aGlzLmNvb2tpZXMuaGFzT3duUHJvcGVydHkoY25hbWUpKXtcbiAgICAvLyAgICAgICAgICBkZWxldGUgdGhpcy5jb29raWVzW2NuYW1lXVxuICAgIC8vICAgICAgICAgIHRoaXMudXBkYXRlQ29va2llcygpXG4gICAgLy8gICAgICB9XG4gICAgLy8gIH1cblxuICAgIC8vICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmNvb2tpZXMpXG4gICAgLy8gIH1cblxuICAgIC8vICB0aGlzLnVwZGF0ZUNvb2tpZXMgPSBmdW5jdGlvbigpe1xuICAgIC8vICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgIC8vICAgICAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKHRoaXMuZXhkYXlzKjI0KjYwKjYwKjEwMDApKTtcbiAgICAvLyAgICAgIHZhciBleHBpcmVzID0gXCJleHBpcmVzPVwiK2QudG9VVENTdHJpbmcoKTtcbiAgICAvLyAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHRoaXMubmFtZSArIFwiPVwiICsgdGhpcy50b1N0cmluZygpICsgXCI7IFwiICsgZXhwaXJlcyArIFwiO3BhdGg9L1wiO1xuICAgIC8vICB9XG5cbiAgICAvLyAgdGhpcy5nZXRSZWxldmVudENvb2tpZXMgPSBmdW5jdGlvbigpe1xuICAgIC8vICAgICAgdmFyIGFsbF9jb29raWVzID0gXCJcIlxuICAgIC8vICAgICAgJHRoaXMgPSB0aGlzXG4gICAgLy8gICAgICBPYmplY3Qua2V5cyh0aGlzLmNvb2tpZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gICAgICAgICAgaWYgKCEkdGhpcy5leHBpcmUoa2V5KSl7XG4gICAgLy8gICAgICAgICAgICAgIGFsbF9jb29raWVzICs9IGtleSsnPScrJHRoaXMuY29va2llc1trZXldLnZhbHVlKycgJztcbiAgICAvLyAgICAgICAgICB9XG4gICAgLy8gICAgICB9KTtcbiAgICAvLyAgICAgIHJldHVybiBhbGxfY29va2llcy50cmltKClcbiAgICAvLyAgfVxuXG4gICAgLy8gIHRoaXMuY2hlY2tFeHBpcmUgPSBmdW5jdGlvbigpe1xuICAgIC8vICAgICAgJHRoaXMgPSB0aGlzXG4gICAgLy8gICAgICBPYmplY3Qua2V5cyh0aGlzLmNvb2tpZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gICAgICAgICAgJHRoaXMuZXhwaXJlKGtleSk7XG4gICAgLy8gICAgICB9KTtcbiAgICAvLyAgfSAgIFxuXG4gICAgLy8gIHRoaXMuZXhwaXJlID0gZnVuY3Rpb24oa2V5KXtcbiAgICAvLyAgICAgICRleHBpcmUgPSB0aGlzLmNvb2tpZXNba2V5XS5leHBpcmVcbiAgICAvLyAgICAgIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgLy8gICAgICB0YXJnZXRUaW1lID0gbmV3IERhdGUoJGV4cGlyZSkudmFsdWVPZigpO1xuICAgIC8vICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRhcmdldFRpbWUpIHtcbiAgICAvLyAgICAgICAgIHRoaXMuZGVsZXRlQ29va2llKGtleSlcbiAgICAvLyAgICAgICAgIHJldHVybiB0cnVlXG4gICAgLy8gICAgICB9XG4gICAgLy8gICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gIH1cbiAgICAvLyB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKiBkYXRhcG9pbnQgKioqKioqKioqKioqKioqKioqL1xuXG4gICAgLy8gLy8gRm9yIHRvZGF5cyBkYXRlO1xuICAgIC8vIERhdGUucHJvdG90eXBlLnRvZGF5ID0gZnVuY3Rpb24gKCkgeyBcbiAgICAvLyByZXR1cm4gKCh0aGlzLmdldERhdGUoKSA8IDEwKT9cIjBcIjpcIlwiKSArIHRoaXMuZ2V0RGF0ZSgpICtcIi9cIisoKCh0aGlzLmdldE1vbnRoKCkrMSkgPCAxMCk/XCIwXCI6XCJcIikgKyAodGhpcy5nZXRNb250aCgpKzEpICtcIi9cIisgdGhpcy5nZXRGdWxsWWVhcigpO1xuICAgIC8vIH1cblxuICAgIC8vIC8vIEZvciB0aGUgdGltZSBub3dcbiAgICAvLyBEYXRlLnByb3RvdHlwZS50aW1lTm93ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHJldHVybiAoKHRoaXMuZ2V0SG91cnMoKSA8IDEwKT9cIjBcIjpcIlwiKSArIHRoaXMuZ2V0SG91cnMoKSArXCI6XCIrICgodGhpcy5nZXRNaW51dGVzKCkgPCAxMCk/XCIwXCI6XCJcIikgKyB0aGlzLmdldE1pbnV0ZXMoKSArXCI6XCIrICgodGhpcy5nZXRTZWNvbmRzKCkgPCAxMCk/XCIwXCI6XCJcIikgKyB0aGlzLmdldFNlY29uZHMoKTtcbiAgICAvLyB9XG5cbiAgICAvLyBmdW5jdGlvbiBEYXRhUG9pbnQoKXsgXG4gICAgLy8gdGhpcy5pZHMgPSB7XG4gICAgLy8gcG9wdGluX2lkOiAnJyxcbiAgICAvLyBjbGllbnRfaWQgOiBcIlwiLFxuICAgIC8vIHVzZXJfaWQgOiBcIlwiLFxuICAgIC8vIHJlY29yZF9pZDonJ1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy50aW1lID0ge1xuICAgIC8vIGVudGVyZWRfdGltZTogJycsXG4gICAgLy8gYXBwZWFyZWRfdGltZSA6IFwiXCIsXG4gICAgLy8gY2xvc2VkX3RpbWUgOiBcIlwiLFxuICAgIC8vIGNvbnZlcnRlZF90aW1lIDpcIlwiXG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLmFkZHJlc3MgPSB7XG4gICAgLy8gY291bnRyeSA6ICcnLFxuICAgIC8vIGNpdHkgOiAnJyxcbiAgICAvLyB0aW1lX3pvbmUgOiAnJyxcbiAgICAvLyBlcnJvcjonJ1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5zdHlsZSA9IHtcbiAgICAvLyBiZ19jb2xvciA6IFwiXCIsXG4gICAgLy8gYmdfdHJhbnNwYXJlbmN5IDogXCJcIixcbiAgICAvLyBidXR0b25fYmdfY29sb3I6IFwiXCIsXG4gICAgLy8gYnV0dG9uX3RleHQ6IFwiXCIsXG4gICAgLy8gYnV0dG9uX3RleHRfc2l6ZTogXCJcIixcbiAgICAvLyBidXR0b25fdGV4dF9jb2xvcjogXCJcIixcbiAgICAvLyBidXR0b25fdGV4dF9mYW1pbHk6IFwiXCIsXG4gICAgLy8gYnV0dG9uX3RleHRfc3R5bGU6IFwiXCIsXG4gICAgLy8gdGV4dF9hbGw6XCJcIixcbiAgICAvLyB0ZXh0X2hlYWRlcjpcIlwiLFxuICAgIC8vIHRleHRfcF9hbGw6XCJcIixcbiAgICAvLyBlcnJvcjpcIlwiXG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLnNldHRpbmcgPSB7XG4gICAgLy8gY29udGVudF9sb2NrIDogZmFsc2UsXG4gICAgLy8gY3JlZGl0IDogdHJ1ZSxcbiAgICAvLyBpZl93YXNfeCA6IHRydWUsXG4gICAgLy8gd2hlbl94X2FwcGVhciA6ICcwJyxcbiAgICAvLyB4X2hvdmVyX3RleHQgOiAnJyxcbiAgICAvLyBhdXRvbWF0aWNfY2xvc2UgOiAnMCcsXG4gICAgLy8gcmVzdWxvdGlvbiA6ICcnLFxuICAgIC8vIGFwcGVhcmVkX3VybDogJycsXG4gICAgLy8gY2xvc2VkX2J5OiAnYnlfeCcsIC8vIGJ5IFggfCBjbGljayBvbiBiYWNrZ3JvdW5kIHwgY2xpY2sgb24gY2FjbmNlbCBidXR0b25cbiAgICAvLyBzY3JvbGxpbmdfcGVyY2VudDonJyxcbiAgICAvLyBjb252ZXJzaW9uOmZhbHNlLFxuICAgIC8vIGNvbnZlcnNpb25fdGFyZ2V0OlwiXCIsXG4gICAgLy8gcG9wdGluX3R5cGU6XCJcIixcbiAgICAvLyBwb3B0aW5fZm9ybWF0OlwiXCIsXG4gICAgLy8gcG9wdGluX3Bvc2l0aW9uOlwiXCIsXG4gICAgLy8gdHJpZ2dlcjpcIlwiLFxuICAgIC8vIHBhZ2V2aWV3czowLFxuICAgIC8vIHJlZmVycmVyOicnLFxuICAgIC8vIGVycm9yOlwiXCJcbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuZmllbGRzID0ge1xuICAgIC8vIGVtYWlsOiAgIHtuYW1lOidlbWFpbCcsYWN0aXZlOmZhbHNlLHZhbGlkYXRlOmZhbHNlLHJlcXVpcmU6ZmFsc2V9LFxuICAgIC8vIG5hbWU6ICAgIHtuYW1lOidmdWxsIG5hbWUnLGFjdGl2ZTpmYWxzZSx2YWxpZGF0ZTpmYWxzZSxyZXF1aXJlOmZhbHNlfSxcbiAgICAvLyBwaG9uZTogICB7bmFtZToncGhvbmUnLGFjdGl2ZTpmYWxzZSx2YWxpZGF0ZTpmYWxzZSxyZXF1aXJlOmZhbHNlfSxcbiAgICAvLyBtZXNzYWdlOntuYW1lOidtZXNzYWdlJyxhY3RpdmU6ZmFsc2UsdmFsaWRhdGU6ZmFsc2UscmVxdWlyZTpmYWxzZX0sXG4gICAgLy8gZnJlZV9maWVsZHM6W10sXG4gICAgLy8gZXJyb3I6XCJcIlxuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gc2hvd0xvZygnc2V0TG9jYXRpb24nKTtcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIHRyeXtcbiAgICAvLyBqUTIyNC5nZXRKU09OKCdodHRwczovL2ZyZWVnZW9pcC5uZXQvanNvbi8nKVxuICAgIC8vIC5kb25lKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gX3RoaXMuYWRkcmVzcy5jb3VudHJ5ID0gcmVzdWx0LmNvdW50cnlfbmFtZTtcbiAgICAvLyBfdGhpcy5hZGRyZXNzLmNpdHkgPSByZXN1bHQuY2l0eTtcbiAgICAvLyAvL190aGlzLmFkZHJlc3MudGltZV96b25lID0gcmVzdWx0LnRpbWVfem9uZTtcbiAgICAvLyBfdGhpcy5hZGRyZXNzLnRpbWVfem9uZSA9IG5ldyBEYXRlKCk7XG4gICAgLy8gfSkuY29tcGxldGUoZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBfdGhpcy52aWV3ZWQoKTtcbiAgICAvLyB9KTtcbiAgICAvLyB9Y2F0Y2goZXJyKXtcbiAgICAvLyB0aGlzLmFkZHJlc3MuZXJyb3IgPSBlcnI7XG4gICAgLy8gfVxuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5jdXJyZW50VGltZSA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gcmV0dXJuIG5ldyBEYXRlKCkudG9kYXkoKSArIFwiIFwiICsgbmV3IERhdGUoKS50aW1lTm93KCk7XG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLnNldElkcyA9IGZ1bmN0aW9uKHBvcHRpbl9pZCl7XG4gICAgLy8gdGhpcy5pZHMucG9wdGluX2lkPXBvcHRpbl9pZDtcbiAgICAvLyB0aGlzLmlkcy5jbGllbnRfaWQ9cXVlcnlfc3RyaW5nLmlkO1xuICAgIC8vIHRoaXMuaWRzLnVzZXJfaWQ9Z2V0VXNlcklkKCk7XG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLnNldEFwcGVhcmVkID0gZnVuY3Rpb24oKXtcbiAgICAvLyBzaG93TG9nKCdzZXRBcHBlYXJlZCcpO1xuICAgIC8vIHRoaXMudGltZS5hcHBlYXJlZF90aW1lID0gdGhpcy5jdXJyZW50VGltZSgpO1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5zZXRSZWNvcmRJZHMgPSBmdW5jdGlvbihpZCl7XG4gICAgLy8gdGhpcy5pZHMucmVjb3JkX2lkID0gaWQ7XG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLnNldENsb3NlZCA9IGZ1bmN0aW9uKHBvcHRpbl9pZCl7XG4gICAgLy8gdGhpcy50aW1lLmNsb3NlZF90aW1lID0gdGhpcy5jdXJyZW50VGltZSgpO1xuICAgIC8vIHRoaXMuc2V0Q2xvc2VkQnkocG9wdGluc1twb3B0aW5faWRdLnBvcHRpbl90cmlnZ2VyLmNsb3NlX3RyaWdnZXIpO1xuICAgIC8vIHRoaXMuY2xvc2VkKCk7XG5cbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuc2V0Q29udmVydGVkID0gZnVuY3Rpb24oKXtcbiAgICAvLyB0aGlzLnRpbWUuY29udmVydGVkX3RpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKCk7XG4gICAgLy8gdGhpcy5zZXR0aW5nLmNvbnZlcnNpb24gPSB0cnVlO1xuICAgIC8vIHRoaXMuY29udmVydGVkKCk7XG5cbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuc2V0Q2xvc2VkQnkgPSBmdW5jdGlvbih0eXBlKXtcbiAgICAvLyB2YXIgY2xvc2VfdHlwZSA9IHsneF9jbGljayc6J2J5IHgnLCdiZ19jbGljayc6J2NsaWNrIG9uIGJhY2tncm91bmQnLCdjYW5jZWxfY2xpY2snOidjbGljayBvbiBjYW5jZWwgYnV0dG9uJywnc3VibWl0JzonY2xvc2UgYWZ0ZXIgc3VibWl0JywnYXV0b19jbG9zZSc6J2Nsb3NlIGF1dG9tYXRpYycsJ3RpbWVyJzondGltZXIgY2xvc2UnfTtcbiAgICAvLyB0aGlzLnNldHRpbmcuY2xvc2VkX2J5ID0gY2xvc2VfdHlwZVt0eXBlXTsvLyBieSBYIHwgY2xpY2sgb24gYmFja2dyb3VuZCB8IGNsaWNrIG9uIGNhY25jZWwgYnV0dG9uXG4gICAgLy8gfSxcbiAgICAvLyB0aGlzLnNldFNldHRpbmdzID0gZnVuY3Rpb24ocG9wdGluLHRyaWdnZXIpe1xuICAgIC8vIHNob3dMb2coJ3NldFNldHRpbmdzJyk7XG4gICAgLy8gdHJ5e1xuICAgIC8vIHRoaXMuc2V0dGluZy50cmlnZ2VyICAgICAgICAgICAgID0gcG9wdGluc1twb3B0aW4ucG9wdGluX2lkXS5wb3B0aW5fdHJpZ2dlci50cmlnZ2VyO1xuICAgIC8vIHRoaXMuc2V0dGluZy5yZWZlcnJlciAgICAgICAgICAgID0gZ2V0UmVmZXJyZXIoKTtcbiAgICAvLyB0aGlzLnNldHRpbmcucmVzdWxvdGlvbiAgICAgID0gc2NyZWVuLmF2YWlsV2lkdGgrJyonK3NjcmVlbi5hdmFpbEhlaWdodDtcbiAgICAvLyB0aGlzLnNldHRpbmcuYXBwZWFyZWRfdXJsICAgICAgICA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIC8vIHRoaXMuc2V0dGluZy5zY3JvbGxpbmdfcGVyY2VudCAgID0galEyMjQod2luZG93KS5zY3JvbGxUb3AoKTtcbiAgICAvLyB0aGlzLnNldHRpbmcuY29udmVyc2lvbl90YXJnZXQgICA9IHBvcHRpbi5wb3B0aW5fdGFyZ2V0O1xuICAgIC8vIHRoaXMuc2V0dGluZy5wb3B0aW5fdHlwZSAgICAgICAgID0gcG9wdGluLnBvcHRpbl90eXBlO1xuICAgIC8vIHRoaXMuc2V0dGluZy5wb3B0aW5fZm9ybWF0ICAgICAgID0gcG9wdGluLnBvcHRpbl9mb3JtYXQ7XG4gICAgLy8gdGhpcy5zZXR0aW5nLnBhZ2V2aWV3cyAgICAgICAgICAgPSBnZXRQb3B0aW5QYWdldmlld3MocG9wdGluLnBvcHRpbl9pZCk7XG4gICAgLy8gdGhpcy5zZXR0aW5nLnBvcHRpbl9wb3NpdGlvbiAgICAgPSAgcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9sb2NhdGlvbjtcbiAgICAvLyB0aGlzLnNldHRpbmcuY3JlZGl0ICAgICAgICAgID0gcG9wdGluLmlmX2ZyZWVtaXVtO1xuICAgIC8vIHRoaXMuc2V0dGluZy5jb250ZW50X2xvY2sgICAgICAgID0gcG9wdGluLmRlc2lnbl9wcm9wZXJ0aWVzLnBvcHRpbl9kZXNpZ25fY29udGVudF9sb2NrO1xuICAgIC8vIHRoaXMuc2V0dGluZy5pZl93YXNfeCAgICAgICAgICAgID0gKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZS5zcGxpdCgnLScpPT09J3gnID8gdHJ1ZSA6ZmFsc2UpO1xuICAgIC8vIHRoaXMuc2V0dGluZy53aGVuX3hfYXBwZWFyICAgICAgID0gKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3Nob3dfeF9hZnRlcl9zZWM9PW51bGwgPyAwIDpwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfYWZ0ZXJfc2VjKTtcbiAgICAvLyB0aGlzLnNldHRpbmcueF9ob3Zlcl90ZXh0ICAgICAgICA9IChwb3B0aW4uZGVzaWduX3Byb3BlcnRpZXMucG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudD09bnVsbCA/IDAgOnBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX3Nob3dfeF9jb21tZW50KTtcbiAgICAvLyB0aGlzLnNldHRpbmcuYXV0b21hdGljX2Nsb3NlID0gKHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2F1dG9fY2xvc2Vfc2VjPT09dW5kZWZpbmVkID8gZmFsc2UgOnBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2F1dG9fY2xvc2Vfc2VjKTtcbiAgICAvLyB9Y2F0Y2goZXJyKXtcbiAgICAvLyB0aGlzLnNldHRpbmcuZXJyb3I9ZXJyO1xuICAgIC8vIH1cbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuc2V0U3R5bGUgPSBmdW5jdGlvbihwb3B0aW4pe1xuICAgIC8vIHNob3dMb2coJ3NldFN0eWxlJyk7XG4gICAgLy8gdHJ5e1xuICAgIC8vIHZhciAkdGhpcyA9IGpRMjI0KCcucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPScrcG9wdGluLnBvcHRpbl9pZCsnXSAuZHJhZ2dhYmxlLWNvbnRhaW5lcicpO1xuICAgIC8vIGlmICgocG9wdGluLmZvcm1hdD09IFwiZm9ybWF0XzNcIiB8fCBwb3B0aW4uZm9ybWF0PT0gXCJmb3JtYXRfOVwiKSYmcG9wdGluLnR5cGU9PSBcImxpZ2h0Ym94XCIpe1xuICAgIC8vIHRoaXMuc3R5bGUuYmdfY29sb3IgPSAoJHRoaXMuZmluZCgnLmFsdGVybmF0aXZlLWJhY2tncm91bmQnKS5maXJzdCgpLmNzcygnYmFja2dyb3VuZC1pbWFnZScpID09ICdub25lJyA/ICR0aGlzLmZpbmQoJy5hbHRlcm5hdGl2ZS1iYWNrZ3JvdW5kJykuZmlyc3QoKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKSA6ICdpbWcnKTtcbiAgICAvLyB0aGlzLnN0eWxlLmJnX3RyYW5zcGFyZW5jeSA9ICAkdGhpcy5maW5kKCcuYWx0ZXJuYXRpdmUtYmFja2dyb3VuZCcpLmZpcnN0KCkuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgLy8gfWVsc2V7XG4gICAgLy8gdGhpcy5zdHlsZS5iZ19jb2xvciA9ICgkdGhpcy5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSA9PSdub25lJyA/ICR0aGlzLmNzcygnYmFja2dyb3VuZC1jb2xvcicpIDogJ2ltZycpO1xuICAgIC8vIHRoaXMuc3R5bGUuYmdfdHJhbnNwYXJlbmN5ID0gJHRoaXMuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgLy8gfVxuICAgIC8vIGlmICgkdGhpcy5maW5kKCcucG9wdGluLWZvcm0tc3VibWl0LWJ1dHRvbicpLmlzKCc6dmlzaWJsZScpKVxuICAgIC8vIHRoaXMuc3R5bGUuYnV0dG9uX2JnX2NvbG9yID0gKCR0aGlzLmZpbmQoJy5wb3B0aW4tZm9ybS1zdWJtaXQtYnV0dG9uJykuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJykgPT0gJ25vbmUnID8gJHRoaXMuZmluZCgnLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24nKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKSA6ICdpbWcnKSxcbiAgICAvLyAkdGhpc190ZXh0ID0gJHRoaXMuZmluZCgnI3BvcHRpbkZvcm1TdWJtaXRUZXh0Jyk7XG4gICAgLy8gdGhpcy5zdHlsZS5idXR0b25fdGV4dD0gJHRoaXNfdGV4dC50ZXh0KCk7XG4gICAgLy8gdGhpcy5zdHlsZS5idXR0b25fdGV4dF9zaXplPSAkdGhpc190ZXh0LmNzcygnZm9udC1zaXplJyk7XG4gICAgLy8gdGhpcy5zdHlsZS5idXR0b25fdGV4dF9jb2xvcj0gJHRoaXNfdGV4dC5jc3MoJ2NvbG9yJyk7XG4gICAgLy8gdGhpcy5zdHlsZS5idXR0b25fdGV4dF9mYW1pbHk9ICR0aGlzX3RleHQuY3NzKCdmb250LWZhbWlseScpO1xuICAgIC8vIHRoaXMuc3R5bGUuYnV0dG9uX3RleHRfc3R5bGU9ICdib2xkOiAnKyR0aGlzX3RleHQuY3NzKCdmb250LXdoaWdodCcpKycgfCBpdGFsaWM6ICcrJHRoaXNfdGV4dC5jc3MoJ2ZvbnQtc3R5bGUnKSsnIHwgdW5kZXJsaW5lOicrJHRoaXNfdGV4dC5jc3MoJ3RleHQtZGVjb3JhdGlvbicpIDtcbiAgICAvLyB0aGlzLnN0eWxlLnRleHRfYWxsPSAkdGhpcy5maW5kKCdwOm5vdCgucG9wdGluLWZvcm0tc3VibWl0LWJ1dHRvbiknKS50ZXh0KCk7XG4gICAgLy8gdGhpcy5zdHlsZS50ZXh0X2hlYWRlcj0kdGhpcy5maW5kKCdwJykuZmlyc3QoKS50ZXh0KCk7XG4gICAgLy8gdGhpcy5zdHlsZS50ZXh0X3BfYWxsID0gJHRoaXMuZmluZCgncDpub3QoLnBvcHRpbi1mb3JtLXN1Ym1pdC1idXR0b24sIDpmaXJzdCknKS50ZXh0KCk7XG4gICAgLy8gfWNhdGNoKGVycil7XG4gICAgLy8gdGhpcy5zdHlsZS5lcnJvcj1lcnI7XG4gICAgLy8gfVxuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5zZXRGaWVsZHMgPSBmdW5jdGlvbihwb3B0aW4pe1xuICAgIC8vIHNob3dMb2coJ3NldEZpZWxkcycpO1xuICAgIC8vIHRyeXtcbiAgICAvLyB2YXIgJHRoaXMgPSBqUTIyNCgnLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD0nK3BvcHRpbi5wb3B0aW5faWQrJ10gLmlucHV0cy1jb250YWluZXIgaW5wdXQnKTtcbiAgICAvLyBpZiAoJHRoaXMubGVuZ3RoPjApe1xuICAgIC8vIGZvciAodmFyIGk9MDtpPCR0aGlzLmxlbmd0aDtpKyspe1xuICAgIC8vIGlmICgkdGhpc1tpXS5pZC5pbmRleE9mKCdwb3B0aW5EZXNpZ25JbnB1dEZyZWVGaWVsZCcpPi0xKXtcbiAgICAvLyB0aGlzLmZpZWxkcy5mcmVlX2ZpZWxkcy5wdXNoKHtuYW1lOmpRMjI0KCR0aGlzW2ldKS5hdHRyKCdwbGFjZWhvbGRlcicpLGFjdGl2ZTp0cnVlLHJlcXVpcmU6alEyMjQoJHRoaXNbaV0pLnByb3AoJ3JlcXVpcmVkJyl9KTtcbiAgICAvLyB9ZWxzZSBpZiAoJHRoaXNbaV0uaWQuaW5kZXhPZigncG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGQnKT4tMSl7XG4gICAgLy8gdmFyIHR5cGUgPSAkdGhpc1tpXS5pZC5zcGxpdCgncG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGQnKVsxXTtcbiAgICAvLyB0aGlzLmZpZWxkc1t0eXBlLnRvTG93ZXJDYXNlKCldLmFjdGl2ZSA9IHRydWU7XG4gICAgLy8gdGhpcy5maWVsZHNbdHlwZS50b0xvd2VyQ2FzZSgpXS5yZXF1aXJlID0galEyMjQoJHRoaXNbaV0pLnByb3AoJ3JlcXVpcmVkJyk7XG4gICAgLy8gdGhpcy5maWVsZHNbdHlwZS50b0xvd2VyQ2FzZSgpXS52YWxpZGF0ZSA9IChqUTIyNCgkdGhpc1tpXSkuYXR0cigndmFsaWRhdGUnKSA9PSBmYWxzZSB8fCBqUTIyNCgkdGhpc1tpXSkuYXR0cigndmFsaWRhdGUnKSA9PSB1bmRlZmluZWQgPyBmYWxzZTp0cnVlKTtcbiAgICAvLyB9XG4gICAgLy8gfVxuICAgIC8vIH1cbiAgICAvLyB9Y2F0Y2goZXJyKXtcbiAgICAvLyB0aGlzLmZpZWxkcy5lcnJvcj1lcnI7XG4gICAgLy8gfVxuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5vbkxvYWQgPSBmdW5jdGlvbihwb3B0aW5faWQpe1xuICAgIC8vIHRoaXMudGltZS5lbnRlcmVkX3RpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKCk7XG4gICAgLy8gdGhpcy5zZXRJZHMocG9wdGluX2lkKTtcbiAgICAvLyB9LFxuICAgIC8vIHRoaXMub25TaG93ID0gZnVuY3Rpb24ocG9wdGluKXtcbiAgICAvLyB0aGlzLnNldEFwcGVhcmVkKCk7XG4gICAgLy8gdGhpcy5zZXRTZXR0aW5ncyhwb3B0aW4pO1xuICAgIC8vIHRoaXMuc2V0U3R5bGUocG9wdGluKTtcbiAgICAvLyB0aGlzLnNldEZpZWxkcyhwb3B0aW4pO1xuICAgIC8vIHRoaXMuc2V0TG9jYXRpb24oKTtcbiAgICAvLyB9LFxuICAgIC8vIHRoaXMub25Db252ZXJzaW9uID0gZnVuY3Rpb24oKXtcbiAgICAvLyB0aGlzLnNldENvbnZlcnRlZCgpO1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5vbkNsb3NlID0gZnVuY3Rpb24ocG9wdGluX2lkKXtcbiAgICAvLyB0aGlzLnNldENsb3NlZChwb3B0aW5faWQpO1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy52aWV3ZWQgPSBmdW5jdGlvbigpe1xuICAgIC8vIHNob3dMb2coJ3ZpZXdlZCcpO1xuICAgIC8vIHZhciBkYXRhID0galEyMjQuZXh0ZW5kKCB7fSx0aGlzLmlkcyx0aGlzLnRpbWUsdGhpcy5hZGRyZXNzLHRoaXMuc2V0dGluZyx0aGlzLnN0eWxlLHRoaXMuZmllbGRzKTtcbiAgICAvLyB2YXIgdXJsID0gYXBpX2xpbmsrXCIvZGF0YXBvaW50cy92aWV3ZWQvXCIrcXVlcnlfc3RyaW5nLmlkO1xuICAgIC8vIHZhciBzdGVwID0gJ3ZpZXdlZCc7XG4gICAgLy8gdGhpcy5zZW5kKHVybCxzdGVwLGRhdGEpO1xuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5jb252ZXJ0ZWQgPSBmdW5jdGlvbigpe1xuICAgIC8vIGlmICh0aGlzLmlkcy5yZWNvcmRfaWQ9PScnIHx8IHRoaXMuaWRzLnJlY29yZF9pZD09dW5kZWZpbmVkKXtcbiAgICAvLyB0aGlzLnZpZXdlZCgpO1xuICAgIC8vIH1lbHNle1xuICAgIC8vIHZhciBkYXRhID0ge3JlY29yZF9pZDp0aGlzLmlkcy5yZWNvcmRfaWQsY29udmVyc2lvbjp0aGlzLnNldHRpbmcuY29udmVyc2lvbixjb252ZXJ0ZWRfdGltZTp0aGlzLnRpbWUuY29udmVydGVkX3RpbWV9O1xuICAgIC8vIHZhciB1cmwgPSBhcGlfbGluaytcIi9kYXRhcG9pbnRzL2NvbnZlcnRlZC9cIitxdWVyeV9zdHJpbmcuaWQ7XG4gICAgLy8gdmFyIHN0ZXAgPSAnY29udmVydGVkJztcbiAgICAvLyB0aGlzLnNlbmQodXJsLHN0ZXAsZGF0YSk7XG4gICAgLy8gfVxuICAgIC8vIH0sXG4gICAgLy8gdGhpcy5jbG9zZWQgPSBmdW5jdGlvbigpe1xuICAgIC8vIGlmICh0aGlzLmlkcy5yZWNvcmRfaWQ9PScnIHx8IHRoaXMuaWRzLnJlY29yZF9pZD09dW5kZWZpbmVkKXtcbiAgICAvLyB0aGlzLnZpZXdlZCgpO1xuICAgIC8vIH1lbHNle1xuICAgIC8vIHZhciBkYXRhID0ge3JlY29yZF9pZDp0aGlzLmlkcy5yZWNvcmRfaWQsY2xvc2VkX2J5OnRoaXMuc2V0dGluZy5jbG9zZWRfYnksY2xvc2VkX3RpbWU6dGhpcy50aW1lLmNsb3NlZF90aW1lfTtcbiAgICAvLyB2YXIgdXJsID0gYXBpX2xpbmsrXCIvZGF0YXBvaW50cy9jbG9zZWQvXCIrcXVlcnlfc3RyaW5nLmlkO1xuICAgIC8vIHZhciBzdGVwID0gJ2Nsb3NlZCc7XG4gICAgLy8gdGhpcy5zZW5kKHVybCxzdGVwLGRhdGEpO1xuICAgIC8vIH1cbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuYWpheENvbXBpbHRlID0gZnVuY3Rpb24oJHJlc3VsdCxzdGVwKXtcbiAgICAvLyBpZiAoJHJlc3VsdC5zdWNjZXNzPT10cnVlKXtcbiAgICAvLyBpZiAoc3RlcD09J3ZpZXdlZCcpXG4gICAgLy8gdGhpcy5zZXRSZWNvcmRJZHMoJHJlc3VsdC5kYXRhLmRhdGFwb2ludHNfaWQpO1xuICAgIC8vIH1lbHNle1xuICAgIC8vIGlmIChzdGVwIT09J3ZpZXdlZCcpXG4gICAgLy8gbW9uaXRvckVycm9yKCdkYXRhcG9pbnRzKCktPmFmdGVyX3NlbmQtPicrc3RlcCsnKCktPmVycm9yKCknLCRyZXN1bHQuZXJyb3IsJHJlc3VsdC5zdGF0dXMsJHJlc3VsdC5kYXRhLnJlc3BvbnNlVGV4dCx0aGlzLmlkcy5wb3B0aW5faWQpO1xuICAgIC8vIH1cbiAgICAvLyB9LFxuICAgIC8vIHRoaXMuc2VuZCA9IGZ1bmN0aW9uKHVybCxzdGVwLCRkYXRhKXtcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIHRyeXtcbiAgICAvLyBqUTIyNC5hamF4KHtcbiAgICAvLyB1cmw6IHVybCxcbiAgICAvLyB0eXBlOiAnZ2V0JyxcbiAgICAvLyBkYXRhOiAkZGF0YSxcbiAgICAvLyBkYXRhVHlwZTogJ2pzb24nLFxuICAgIC8vIGNhY2hlOiB0cnVlLFxuICAgIC8vIGFzeW5jOiB0cnVlLFxuICAgIC8vIH0sIFwianNvblwiKVxuICAgIC8vIC5kb25lKGZ1bmN0aW9uKGRhdGEpe1xuICAgIC8vIF90aGlzLmFqYXhDb21waWx0ZSh7c3VjY2VzczpkYXRhLnN1Y2Nlc3MsZGF0YTpkYXRhfSxzdGVwKTtcbiAgICAvLyB9KVxuICAgIC8vIC5mYWlsKGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAvLyBfdGhpcy5hamF4Q29tcGlsdGUoe3N1Y2Nlc3M6ZmFsc2UsZGF0YTp4aHIsc3RhdHVzOnN0YXR1cyxlcnJvcjplcnJvcn0sc3RlcCk7XG4gICAgLy8gfSk7XG4gICAgLy8gfWNhdGNoKGVycil7XG4gICAgLy8gbW9uaXRvckVycm9yKCdkYXRhcG9pbnRzKCktPnNlbmQoKS0+JytzdGVwKycoKS0+ZXJyb3IoKScsZXJyLCdPSycsZmFsc2UsX3RoaXMuaWRzLnBvcHRpbl9pZCk7XG4gICAgLy8gfVxuICAgIC8vIH1cbiAgICAvLyB9XG5cbiAgICAvLyBmdW5jdGlvbiBoaWRlRWZmZWN0KHBvcHRpbil7XG4gICAgLy8gIHZhciBzZWxlY3RlZEVmZmVjdCA9IHBvcHRpbi5kZXNpZ25fcHJvcGVydGllcy5wb3B0aW5fZGVzaWduX2VudHJ5X2VmZmVjdC5zcGxpdCgnLScpWzFdO1xuICAgIC8vICAvLyBNb3N0IGVmZmVjdCB0eXBlcyBuZWVkIG5vIG9wdGlvbnMgcGFzc2VkIGJ5IGRlZmF1bHRcbiAgICAvLyAgICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICAvLyAgICAgLy8gc29tZSBlZmZlY3RzIGhhdmUgcmVxdWlyZWQgcGFyYW1ldGVyc1xuICAgIC8vICB2YXIgdmVyID0galEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikub3V0ZXJXaWR0aCArMTAwO1xuICAgIC8vICB2YXIgaG9yID0galEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikub3V0ZXJIZWlnaHQrMTAwO1xuICAgIC8vICBzd2l0Y2goc2VsZWN0ZWRFZmZlY3Qpe1xuICAgIC8vICAgICAgY2FzZSBcInNjYWxlXCIgOlxuICAgIC8vICAgICAgICAgIG9wdGlvbnMgPSB7IHBlcmNlbnQ6IDEwIH07XG4gICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgXG4gICAgLy8gICAgICBjYXNlIFwic2l6ZVwiIDpcbiAgICAvLyAgICAgICAgICBvcHRpb25zID0geyB0bzogeyB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCB9IH07XG4gICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgXG4gICAgLy8gICAgICBjYXNlIFwidXBcIiA6XG4gICAgLy8gICAgICAgICAgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAndXAnIH07XG4gICAgLy8gICAgICAgICAgc2VsZWN0ZWRFZmZlY3QgPSBcInNsaWRlXCI7XG4gICAgLy8gICAgICAgICAgYnJlYWs7ICAgICAgXG4gICAgLy8gICAgICBjYXNlIFwiZG93blwiIDpcbiAgICAvLyAgICAgICAgICBvcHRpb25zID0geyBkaXJlY3Rpb246ICdkb3duJyB9O1xuICAgIC8vICAgICAgICAgIHNlbGVjdGVkRWZmZWN0ID0gXCJzbGlkZVwiO1xuICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgIFxuICAgIC8vICAgICAgY2FzZSBcImxlZnRcIiA6XG4gICAgLy8gICAgICAgICAgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnbGVmdCd9O1xuICAgIC8vICAgICAgICAgIHNlbGVjdGVkRWZmZWN0ID0gXCJzbGlkZVwiO1xuICAgIC8vICAgICAgICAgIGJyZWFrOyAgICAgIFxuICAgIC8vICAgICAgY2FzZSBcInJpZ2h0XCIgOlxuICAgIC8vICAgICAgICAgIG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ3JpZ2h0JyB9O1xuICAgIC8vICAgICAgICAgIHNlbGVjdGVkRWZmZWN0ID0gXCJzbGlkZVwiO1xuICAgIC8vICAgICAgICAgIGJyZWFrO1xuICAgIC8vICB9XG5cbiAgICAvLyAgalEyMjQoXCIucG9wdGluLXBvcHVwLWJhY2tncm91bmRbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl1cIikuZmFkZU91dCg1MDApO1xuICAgIC8vICB0cnl7XG4gICAgLy8gICAgICBpZiAodHlwZW9mIHdpbmRvdy4kICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuJC51aSAhPT0gdW5kZWZpbmVkKXtcbiAgICAvLyAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lclwiKS5oaWRlKHNlbGVjdGVkRWZmZWN0LCBvcHRpb25zLCA1MDApO1xuICAgIC8vICAgICAgfWVsc2UgaWYgKHR5cGVvZiB3aW5kb3cualF1ZXJ5ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cualF1ZXJ5LnVpICE9PSB1bmRlZmluZWQpe1xuICAgIC8vICAgICAgICAgIGpRdWVyeShcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikuaGlkZShzZWxlY3RlZEVmZmVjdCwgb3B0aW9ucywgNTAwKTtcbiAgICAvLyAgICAgIH1lbHNlIGlmIChqUTIyNC51aSAhPT0gdW5kZWZpbmVkKXtcbiAgICAvLyAgICAgICAgICBqUTIyNChcIi5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0sIC5wb3B0aW4tcG9wdXBbZGF0YS1wb3B0aW4taWQ9XCIrcG9wdGluLnBvcHRpbl9pZCtcIl0gLmRyYWdnYWJsZS1jb250YWluZXJcIikuaGlkZShzZWxlY3RlZEVmZmVjdCwgb3B0aW9ucywgNTAwKTtcbiAgICAvLyAgICAgIH1lbHNle1xuICAgIC8vICAgICAgICAgIGpRMjI0KFwiLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSwgLnBvcHRpbi1wb3B1cFtkYXRhLXBvcHRpbi1pZD1cIitwb3B0aW4ucG9wdGluX2lkK1wiXSAuZHJhZ2dhYmxlLWNvbnRhaW5lclwiKS5mYWRlT3V0KDUwMCk7XG4gICAgLy8gICAgICB9XG4gICAgLy8gIH1jYXRjaChlcnIpe1xuICAgIC8vICAgICAgalEyMjQoXCIucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdLCAucG9wdGluLXBvcHVwW2RhdGEtcG9wdGluLWlkPVwiK3BvcHRpbi5wb3B0aW5faWQrXCJdIC5kcmFnZ2FibGUtY29udGFpbmVyXCIpLmZhZGVPdXQoNTAwKTtcbiAgICAvLyAgfVxuICAgIC8vIH1cblxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ1MzQ6IDAsXG5cdDM5OTogMCxcblx0MjE5OiAwLFxuXHQ3OiAwLFxuXHQyNjE6IDAsXG5cdDI0NjogMCxcblx0NDcxOiAwLFxuXHQyMjogMCxcblx0MjQ3OiAwLFxuXHQ0Mzg6IDAsXG5cdDE1NDogMCxcblx0OTYzOiAwLFxuXHQ1MzY6IDAsXG5cdDUyMjogMCxcblx0OTUxOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJhcHBDb25maWdDaHVua0xvYWRpbmdHbG9iYWxcIl0gPSBzZWxmW1wiYXBwQ29uZmlnQ2h1bmtMb2FkaW5nR2xvYmFsXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzM5OSwyMTksNywyNjEsMjQ2LDQ3MSwyMiwyNDcsNDM4LDE1NCw5NjMsNTM2LDUyMiw5NTFdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg1NTcpKSlcbl9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszOTksMjE5LDcsMjYxLDI0Niw0NzEsMjIsMjQ3LDQzOCwxNTQsOTYzLDUzNiw1MjIsOTUxXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMjE1KSkpXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MSkpKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzM5OSwyMTksNywyNjEsMjQ2LDQ3MSwyMiwyNDcsNDM4LDE1NCw5NjMsNTM2LDUyMiw5NTFdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg4MzApKSlcbl9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszOTksMjE5LDcsMjYxLDI0Niw0NzEsMjIsMjQ3LDQzOCwxNTQsOTYzLDUzNiw1MjIsOTUxXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNzg3KSkpXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKSlcbl9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszOTksMjE5LDcsMjYxLDI0Niw0NzEsMjIsMjQ3LDQzOCwxNTQsOTYzLDUzNiw1MjIsOTUxXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNTgyKSkpXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MikpKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzM5OSwyMTksNywyNjEsMjQ2LDQ3MSwyMiwyNDcsNDM4LDE1NCw5NjMsNTM2LDUyMiw5NTFdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygxOTcpKSlcbl9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszOTksMjE5LDcsMjYxLDI0Niw0NzEsMjIsMjQ3LDQzOCwxNTQsOTYzLDUzNiw1MjIsOTUxXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNDE0KSkpXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDM3NSkpKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzM5OSwyMTksNywyNjEsMjQ2LDQ3MSwyMiwyNDcsNDM4LDE1NCw5NjMsNTM2LDUyMiw5NTFdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygxNDIpKSlcbl9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszOTksMjE5LDcsMjYxLDI0Niw0NzEsMjIsMjQ3LDQzOCwxNTQsOTYzLDUzNiw1MjIsOTUxXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMTE2KSkpXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIzMSkpKVxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzk5LDIxOSw3LDI2MSwyNDYsNDcxLDIyLDI0Nyw0MzgsMTU0LDk2Myw1MzYsNTIyLDk1MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MSkpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsInVuZGVmaW5lZCIsIndpbmRvdyIsInBpeGVsQWRkZWQiLCJzaG93TG9nIiwiZW52IiwicG9wdGluQ2hlY2tDb29raWUiLCJfY29uc29sZSIsImZvcm1hdHRlZENhbGxlckxpbmUiLCJFcnJvciIsInN0YWNrIiwic3BsaXQiLCJ0cmltIiwicmVwbGFjZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJtZXNzYWdlIiwiQXJyYXkiLCJfa2V5IiwiY29uc29sZSIsImluZm8iLCJhcHBseSIsImNvbmNhdCIsImVycm9yIiwid2l4Q2FydFRyaWdnZXIiLCJwcm9kdWN0IiwiYWN0aW9uIiwibG9nIiwid2l4X2NhcnRfdHJpZ2dlcl9wb3B0aW5zIiwicHJvZHVjdE9iaiIsInByb2R1Y3RfaWQiLCJpZCIsInByb2R1Y3RfbmFtZSIsIm5hbWUiLCJjYXRlZ29yeSIsIndpeENhcnRQcm9kdWN0QXJyIiwiSlNPTiIsInBhcnNlIiwicG9wdGluR2V0Q29va2llIiwidG90YWxDYXJ0VmFsdWUiLCJwYXJzZUZsb2F0IiwicHJpY2UiLCJxdWFudGl0eSIsInBvcHRpblNldENvb2tpZSIsInNvbWUiLCJlIiwib2JqSW5kZXgiLCJmaW5kSW5kZXgiLCJvYmoiLCJwdXNoIiwic3RyaW5naWZ5IiwialEyMjQiLCJlYWNoIiwiaW5kZXgiLCJwb3B0aW4iLCJ3aXhfY2FydF90cmlnZ2VyX2FjdGlvbiIsIndpeF9jYXJ0X3RyaWdnZXJfcHJvZHVjdHMiLCJhcHBlbmRQb3B0aW4iLCJoYW5kbGVDYXJ0SXRlbU9yQ2FydFZhbHVlQWN0aW9uIiwicmVtb3ZlZFByb2R1Y3QiLCJzcGxpY2UiLCJ3aXhfY2FydF90cmlnZ2VyX2NhcnRfc3BlY19maWx0ZXIiLCJ3aXhfY2FydF90cmlnZ2VyX2NhcnRfc3BlY192YWx1ZSIsImNhcnRTcGVjRmlsdGVyIiwiY2FydFNwZWNWYWx1ZSIsImNhcnRJdGVtT3JWYWx1ZUNvdW50Iiwic2V0Q2xpZW50SWQiLCJxdWVyeV9zdHJpbmciLCJTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsImdldENsaWVudElkIiwiY2xpZW50X2lkIiwicG9wdGluRGVwZW5kZW50RnVuY3Rpb24iLCJzZXRTaG9waWZ5Q2FydERldGFpbHNJZlNob3BpZnkiLCJzZXRSZWZlcnJlciIsInNldFByZXZpb3VzVXJsIiwiZGlzcGxheVBvcHRpbk9uQ2xpY2siLCJvblRleHRDbGlja0Nsb3NlIiwicG9wdGluSW5pdGlhdGUiLCJzZXRPcmlnaW5MYW5kaW5nUGFnZSIsInBvcHRpbl9kaXNhYmxlX2xvY2Fsc3RvcmFnZSIsInNldFByZXZpb3VzVmlzaXRlZFBhZ2VzIiwic2V0UHJldmlvdXNWaXNpdGVkUGFnZXNXaXRoVGltZVN0YW1wIiwic2V0QWxsVmlzaXRlZFBhZ2VzIiwic2hvcGlmeUJyb3dzZUFiYW5kb25tZW50IiwidXBkYXRlU2hvcGlmeUN1c3RvbWVyRGF0YSIsInNob3BpZnlfY3VzdG9tZXJfaWQiLCJTaG9waWZ5QW5hbHl0aWNzIiwibWV0YSIsInBhZ2UiLCJjdXN0b21lcklkIiwicmVzb3VyY2VUeXBlIiwicHJvZHVjdElkIiwicmVzb3VyY2VJZCIsInRvU3RyaW5nIiwicHJvZHVjdENhdGVnb3J5IiwidHlwZSIsInByb2R1Y3ROYW1lIiwidmFyaWFudHMiLCJzZXRUaW1lb3V0IiwiYnJvd3NlQWJhbmRvbm1lbnRQcm9kdWN0QXJyIiwiZ2V0IiwiYXBpX2xpbmsiLCJzdG9yZVNob3BpZnlQcm9kdWN0SW5jYXJ0IiwibnMiLCJmZXRjaCIsInJlc3BvbnNlIiwidGhpcyIsInRoZW4iLCJyZXMiLCJsb2NhdGlvbiIsIm9yaWdpbiIsImluY2x1ZGVzIiwidXJsIiwiY2xvbmUiLCJqc29uIiwiZGF0YSIsImFqYXgiLCJkYXRhVHlwZSIsImFzeW5jIiwiZG9uZSIsInByb2R1Y3RzQXJyIiwidG90YWxfY2FydF92YWx1ZSIsIml0ZW1zIiwiaXRlbSIsInByb2R1Y3RfdGl0bGUiLCJ0b3RhbF9wcmljZSIsIlNob3BpZnkiLCJzaG9wIiwic2hvcGlmeWxhbmd1YWdlUm91dGUiLCJjYXJ0IiwiY2FydF92YWx1ZSIsImRlZmluZWRfdGFnX2FyciIsInRhZ19pbnB1dCIsInByZSIsInZhbHVlIiwiaXRlbV9jb3VudCIsInN1Y2Nlc3MiLCJzaG9waWZ5X3ByaWNlX3J1bGVzIiwicHJpY2VfcnVsZXMiLCJvbmVfcnVsZSIsImlkeCIsInJ1bGUiLCJ0YXJnZXRfdHlwZSIsImFsbG9jYXRpb25fbWV0aG9kIiwidGFyZ2V0X3NlbGVjdGlvbiIsImNhcnRfdGhyZXNob2xkIiwicHJlcmVxdWlzaXRlX3N1YnRvdGFsX3JhbmdlIiwiZ3JlYXRlcl90aGFuX29yX2VxdWFsX3RvIiwicG9wdGluX3JlZmVycmVyIiwiZ2V0UmVmZXJyZXIiLCJkb2N1bWVudCIsInJlZmVycmVyIiwicG9wdGluX3JlZmVycmVyX3Byb3RvY29sIiwic3RhcnRzV2l0aCIsInNldEludGVydmFsIiwiaW5kZXhPZiIsImhvc3QiLCJyZWZlcnJlclVybCIsIlVSTCIsInJlZmVycmVyUGF0aCIsInBhdGhuYW1lIiwic2VhcmNoIiwicHJldmlvdXNQYWdlcyIsImxvY2FsU3RvcmFnZSIsInByZXZpb3VzUGFnZXNBcnJheSIsInBhZ2VJbmRleCIsImpvaW4iLCJsb2NhdGlvblVybCIsImhyZWYiLCJhbGxWaXNpdGVkUGFnZXMiLCJhbGxQYWdlc0FycmF5IiwiZ2V0Q3VycmVudERhdGVUaW1lIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwieWVhciIsIm1vbnRoIiwiZGF5IiwiZm9ybWF0VG9QYXJ0cyIsIkRhdGUiLCJyZWR1Y2UiLCJhY2MiLCJwYXJ0IiwiZ2V0UHJldmlvdXNWaXNpdGVkUGFnZXMiLCJnZXRBbGxWaXNpdGVkUGFnZXMiLCJnZXRQcmV2aW91c1Zpc2l0ZWRQYWdlc1dpdGhUaW1lU3RhbXAiLCJjdXJyZW50UGF0aFdpdGhUaW1lIiwicHJldmlvdXNQYWdlc1dpdGhUaW1lIiwicHJldmlvdXNQYWdlc1dpdGhUaW1lQXJyYXkiLCJnZXRQcmV2aW91c1Zpc2l0ZWRQYWdlc1dpdGhDdXJyZW50UGFnZSIsImN1cnJlbnRQYXRoIiwicG9wdGluX3ByZXZpb3VzX3VybCIsInByZXZpb3VzX3VybF9zcGEiLCJwb3B0aW5fc2luZ2xlX3BhZ2VfYXBwIiwicG9wdGluX3ByZXZpb3VzX3VybF9wcm90b2NvbCIsIm9uIiwiYWRkQ2xhc3MiLCJhdHRyIiwicHJldmVudERlZmF1bHQiLCJwb3B0aW5faWQiLCJzaG93UG9wdGluT25DbGljayIsImVyciIsIm1vbml0b3JFcnJvciIsImNoZWNrUG9wdGluQ2xvc2VDcml0ZXJpYSIsIm9mZiIsInRhcmdldCIsInBhcmVudHMiLCJwb3B0aW5zIiwicG9wdGluX3RyaWdnZXIiLCJjbG9zZV90cmlnZ2VyIiwiY2xvc2VQb3B0aW4iLCJzZXR1cENsaWNrUG9wdGlucyIsIiRwb3B0aW4iLCJ3aGVuIiwicG9wdGluX3VybCIsInRleHRTdGF0dXMiLCJqcVhIUiIsImFsbF9wb3B0aW5zIiwiY2xpY2tfcG9wdGlucyIsImluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0T25DbGljayIsIiRocmVmIiwiJGRpc3BsYXlfZmxhZyIsIiRzaG93X25vdyIsIiRjYW5jZWxfdmlzaXRvcl9jb3VudCIsIiRpc19mb3JtIiwic3Vic3RyIiwiZGlzcGxheSIsIl93aW5kb3ckbmF2aWdhdG9yIiwiX3dpbmRvdyRuYXZpZ2F0b3IyIiwiZG9tYWluIiwiY29va2llcyIsImdldFJlbGV2ZW50Q29va2llIiwiZ2V0Q3VzdG9tTmV3VmlzaXRTZXNzaW9uIiwidHJpZ2dlcnMiLCJnZXRBdXRvUGlsb3RzIiwicGFnZV90aXRsZSIsInRpdGxlIiwiY2FydF90b3RhbF9wcmljZSIsImNhcnRfdG90YWxfaXRlbXMiLCJjYXJ0X2l0ZW1zIiwiY2FydF9wcm9kdWN0c19pZHNfbGlzdCIsImJyb3dzZXJfbGFuZ3VhZ2UiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsIm9wZXJhdGluZ19zeXN0ZW0iLCJ1c2VyQWdlbnREYXRhIiwicGxhdGZvcm0iLCJjYXJ0X3Byb2R1Y3RzX29yZ19pZHNfbGlzdCIsImNhcnRfZGV0YWlscyIsImdldFNob3BpZnlDYXJ0RGV0YWlscyIsIm1hcCIsImFycmF5IiwidmFyaWFudF9pZCIsImxhbmRpbmdfaW5mbyIsInBvcHRpbl9sYW5kaW5nX3BhZ2UiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcmV2aW91c191cmwiLCJnZXRQcmV2aW91c1VybCIsImlmX21vYmlsZSIsImlmTW9iaWxlUG9wdGluIiwicG9wdGluX2Rpc3BsYXkiLCJvcmlnaW5fbGFuZGluZ19wYWdlIiwiZ2V0T3JpZ2luTGFuZGluZ1BhZ2UiLCJjYW5jZWxfdmlzaXRvcl9jb3VudCIsInByZXZpb3VzX3Zpc2l0ZWRfcGFnZXMiLCJwcmV2aW91c192aXNpdGVkX3BhZ2VzX3dpdGhfdGltZV9zdGFtcCIsImFsbF92aXNpdGVkX3BhZ2VzIiwic3RvcmVfaW50ZWdyYXRpb24iLCJzdG9yZV9pbnRlZ3JhdGlvbl9jdXN0b21lcl9pZCIsIndpeF9jYXJ0X2lkIiwicG9wX2NvdW50cnkiLCJjb3VudHJ5IiwicG9wX2NvdW50cnlfY29kZSIsImNvdW50cnlfY29kZSIsImlmX2ZyZWVtaXVtIiwidXNlcl9sYW5nIiwibGFuZyIsImZvbnREb3dubG9hZCIsImtleSIsImxhbmRpbmdfcGFnZV90ZWFzZXJfb24iLCJleHRyYWN0VGVhc2VyIiwiZmFpbCIsInhociIsInN0YXR1cyIsImluaXRpYXRlUHVsbFBvcHRpbnNSZXF1ZXN0Iiwic2hvdyIsInBvcHRpbl9sYW5kaW5nX3BhZ2VfdXJsIiwiZG93bmxvYWRQb3B0aW5PbkNsaWNrIiwic2hvd19ub3ciLCJmcm9tX3RlYXNlciIsInRlYXNlcl9wb3B0aW5fZGF0YSIsIk9iamVjdCIsInBvcHRpbl90ZW1wbGF0ZSIsInRpbWVyRG93bmxvYWQiLCJ3aGVlbERvd25sb2FkIiwiY29udmVydCIsInNob3duIiwicG9wdGluX2FjdGl2ZSIsInNjcm9sbF9mbGFnIiwibW91c2VfbGVhdmVfZmxhZyIsImNsaWNrX2NvdW50ZXIiLCJ0cmlnZ2VyIiwic2V0UG9wdGluU2l6ZSIsInNldEF1dG9QaWxvdCIsInBvcHRpbl90eXBlIiwibG9hZGJnQW5pbWF0aW9uT3ZlcmxheSIsImxvYWRwb3B0aW5OZXdzVGlja2VyIiwibG9hZGNvdXBvbmJ1dHRvbiIsInJlYWR5bGlua2J1dHRvbnMiLCJwb3B0aW5fZGlzcGxheV90cmlnZ2VyIiwicG9wdGluVmlld2VkIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsIkVjd2lkIiwicGFnZVN0YXRlIiwic3RhdGUiLCJwb3BfdXJscyIsIl90eXBlb2YiLCJhZGRFdmVudExpc3RlbmVyIiwicG9wIiwiZ2V0UG9wdGluTmV3VXNlciIsImdldFBvcHRpblZpZXdlZFNlc3Npb24iLCJnZXRTZXNzaW9uU3RvcmFnZUJ5S2V5IiwiZ2V0VXNlckNvdW50cnlDb2RlIiwicmVmZXJyZXJfdXJsIiwicmVhZHkiLCJwb3B0aW5Gb3JtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwb3B0aW5Gb3Jtc0xlbiIsInBvcHRpbkZvcm1zSURzIiwiaSIsImdldEF0dHJpYnV0ZSIsInByZXZpZXdQb3B0aW5JZCIsImVtcHR5IiwiY2MiLCJwb3B0aW5fZm9ybXNfaWQiLCJpZl9wYWdlX3JlZnJlc2hlZCIsImlmUGFnZVJlZnJlc2hlZCIsInBvcHRpbl92aWV3ZWRfdXJsIiwiZ2V0UG9wdGluVmlld2VkVXJsIiwicHJldmlvdXNfdmlzaXRlZF9wYWdlc193aXRoX2N1cnJlbnRfcGFnZSIsInByZXZpZXdfcG9wdGluX2lkIiwiY29udmVydGVkX2VtYWlsIiwiY2FydERhdGEiLCJhYl90ZXN0X3BhcmVudF9pZCIsImlzX3RlYXNlcnNfb24iLCJkb3dubG9hZFBvcHRpblRlbXBsYXRlRnJvbVMzIiwiaWZfZGlzcGxheSIsIm9uX2NsaWNrIiwid2l4RGV2ZWxvcGVyc0FuYWx5dGljcyIsIndpeF9jYXJ0X2RldGFpbHMiLCJjYXJ0SXRlbXMiLCJsaW5lSXRlbXMiLCJyb290Q2F0YWxvZ0l0ZW1JZCIsIm9yaWdpbmFsIiwic3VidG90YWwiLCJhbW91bnQiLCJpcyIsInBvcHRpbl9mb3JtX2lkIiwicG9wdGluX2Rpc3BsYXlfZm9ybSIsImlzX2NsaWVudF9yZXN0cmljdGlvbiIsInVwZ3JhZGVfcG9wdXBfc2V0dGluZyIsImNsaWVudF9yZXN0cmljdGlvbl9zZXR0aW5nIiwic2hvd1BvcHRpbkxpbWl0UG9wdXAiLCJzZXRHZW9sb2NhdGlvbkNvb2tpZXMiLCJkZWZhdWx0Q29va2llIiwiaXAiLCJ3aW5pZSIsInRlc3QiLCJ1c2VyQWdlbnQiLCJmb250X2xpbmsiLCJyZW1vdmUiLCJjZG5fc2VydmVyIiwicG9wdGluX2Rpc2FibGVfZmEiLCJjc3NfbGluayIsImFwcGVuZCIsInBvcHRpbl9kaXNhYmxlX2ZvbnRzIiwic2V0UG9wdGluU3R5bGUiLCJwb3B0aW5JbnB1dFZhbGlkYXRpb25zIiwidmFsaWRhdGVQb3B0aW5JbnB1dHMiLCJ0aGlzX3BvcCIsInBob25lSW5wdXQiLCJmaW5kIiwic3RyIiwicmFuZG9tSWQiLCJwYXJzZUludCIsIk1hdGgiLCJyYW5kb20iLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImlmVXNlcmxhbmdJc0hlIiwicGFyZW50IiwiY29udGFpbmVyIiwidGhpc19zY2FsZSIsImNzcyIsIm9mZnNldCIsInRvcCIsImxlZnQiLCJyZW1vdmVDbGFzcyIsInNhbml0aXplZFZhbHVlIiwicmVtb3ZlQXR0ciIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJpbnRsVGVsSW5wdXQiLCJpbml0aWFsQ291bnRyeSIsInRvTG93ZXJDYXNlIiwiYXV0b1BsYWNlaG9sZGVyIiwibmF0aW9uYWxNb2RlIiwidXRpbHNTY3JpcHQiLCJwcm9taXNlIiwiaW50bFRlbElucHV0VXRpbHMiLCJjdXJyZW50Rm9ybWF0IiwibnVtYmVyRm9ybWF0IiwiSU5URVJOQVRJT05BTCIsIk5BVElPTkFMIiwiZmxhZyIsInNsaWNlIiwiZm9ybWF0dGVkTnVtYmVyIiwiZm9ybWF0TnVtYmVyIiwiaW50Rm9ybWF0dGVkTnVtYmVyIiwiaXRpIiwiaW50bFRlbElucHV0R2xvYmFscyIsImdldEluc3RhbmNlIiwiaXNWYWxpZE51bWJlciIsInBvcHRpblBob25lVmFsaWRhdGlvbiIsImVtYWlsSW5wdXQiLCJwb3B0aW5fZWFmIiwiRW1haWxBdXRvRmlsbCIsImRvbWFpbnMiLCJhdXRvQ29tcGxldGVBZnRlciIsIm1pc3NwZWxsZWRWYXJpYXRpb25zIiwic3Vic2NyaWJlIiwib3JpZ2luYWxFbWFpbCIsImNsb25lZEVtYWlsIiwicGFyZW50UGFkZGluZyIsInZhbCIsIm91dFZhbHVlIiwicHJlcGVuZCIsImtleUNvZGUiLCJlbWFpbF9hZGRyZXNzIiwiZGlzcGF0Y2giLCJ0ZXh0IiwicG9wdGluRW1haWxWYWxpZGF0aW9uIiwiYmlydGhkYXlEYXRlSW5wdXQiLCJiaXJ0aGRheSIsImVycm9yX21lc3NhZ2UiLCJiaXJ0aGRheURhdGVWYWxpZGF0aW9uIiwicG9wdGluVmFsaWRhdGlvbkxvYWRlZCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJvbmxvYWQiLCJzY3JpcHQyIiwic3JjIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZGVzaWduX3Byb3BlcnRpZXMiLCJ0aW1lcl92ZXIiLCJwb3B0aW5fZm9ybWF0Iiwic2V0U2hvcGlmeVJlY2VudGx5Vmlld2VkUHJvZHVjdCIsInNob3BpZnlQcm9kdWN0c0pTT04iLCJnZXRTaG9waWZ5UmVjb21tZW5kZWRQcm9kdWN0cyIsInNldFBvcHRpbnNBcnJheSIsInNldFBvcHRpblRyaWdnZXIiLCJpc0VtYmVkZGVkUG9wdGluIiwiZGlzcGxheV9hZnRlcl9zZWNfYWN0aXZlIiwibmV3UG9wdGluIiwic2V0UHJldmlld1BvcHRpbiIsImRpc3BsYXlfYWZ0ZXJfZXhpdF93ZWJzaXRlX2FjdGl2ZSIsImhhc2giLCJQUSIsImlmQWN0aXZlIiwiaWZSZWxldmVudCIsIndoZW5Hb2luZ0JhY2siLCJtb3VzZWxlYXZlIiwiRW5nYWdlbWVudFdpdGhPdGhlclBvcHRpbnMiLCJzb3VyY2VDb2RlVGFyZ2V0IiwiY2xpZW50WSIsInJpZ2h0IiwiY2xpZW50V2lkdGgiLCJwYWdlWCIsImJvdHRvbSIsImhlaWdodCIsInRhZ05hbWUiLCJkaXNwbGF5X2FmdGVyX3NlY19hY3RpdmVfb24iLCJhY2NvdW50X2lkIiwic2V0X2F0Iiwibm93IiwiZXhwaXJ5X2F0IiwiY29va2llIiwidXNlcl9hcnJpdmFsX3RpbWUiLCJ1c2VyX3RpbWVfc3BlbnQiLCJldGEiLCJwb3B0aW5UaW1lRGVsYXlUcmlnZ2VyIiwiZGlzcGxheV9hZnRlcl9zY3JvbGxfYWN0aXZlIiwic2NyYXRjaFBvcHVwQWN0aXZlIiwic2Nyb2xUb1RyaWdnZXIiLCJzY3JvbGxUb3AiLCJkaXNwbGF5X2FmdGVyX3BhZ2VfY2xpY2tfbnVtYmVyX2FjdGl2ZSIsImRpc3BsYXlfYWZ0ZXJfdmlzaXRfcGFnZV9hY3RpdmUiLCJjb3VudGVyIiwiTnVtYmVyIiwiZF9mX3IiLCJkaXNwbGF5X2FmdGVyX2luYWN0aXZlX3NlY29uZHNfYWN0aXZlIiwiaW5hY3Rpdml0eV90aW1lciIsInRyaWdnZXJlZCIsInRyaWdnZXJQb3B0aW4iLCJyZXNldEluYWN0aXZpdHlUaW1lciIsImNsZWFyVGltZW91dCIsIm9ubW91c2Vtb3ZlIiwib25tb3VzZWRvd24iLCJvbnRvdWNoc3RhcnQiLCJvbmNsaWNrIiwib25rZXlwcmVzcyIsImluYWN0aXZpdHkiLCJzaG9waWZ5X2NhcnRfdHJpZ2dlcl9hY3RpdmUiLCJzaG9waWZ5X2xhbmdfcm91dGUiLCJsaXN0ZW5Ub0dsb2JhbFhociIsImluaXRYSFJMaXN0ZW5lciIsIndpeF9jYXJ0X3RyaWdnZXJfYWN0aXZlIiwiZGl2IiwiaW5uZXJIVE1MIiwiZGl2UG9wdXAiLCJxdWVyeVNlbGVjdG9yIiwicG9wdGluVHlwZSIsInBvcHRpbkxvY2F0aW9uIiwiaW5kaWNhdG9yUGFyZW50TWF4V2lkdGgiLCJpbmRpY2F0b3JSaWdodE9mZnNldCIsInRvcFB4IiwiZmllbGRfcG9wdGluX2hlaWdodCIsInBvcHVwUHJldmlld01lc3NhZ2UiLCJyb3V0ZXMiLCJyb290IiwieGhvb2siLCJhZnRlciIsInJlcXVlc3QiLCJfdXJsIiwic2hvcGlmeUNhcnRVcmkiLCJyZXF1ZXN0VXJsIiwiaXNGZXRjaCIsInJlYWR5U3RhdGUiLCJjaGVja0ludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNob3BpZnlfY2FydF90cmlnZ2VyX2FjdGlvbiIsInNob3BpZnlfY2FydF90cmlnZ2VyX3Byb2R1Y3RzIiwic3BlY2lmaWVkUHJvZHVjdHNBcnIiLCJyZXNwb25zZVByb2R1Y3RJZCIsIm9sZENhcnRQcm9kdWN0SWRzIiwibmV3UHJvZHVjdElkcyIsIk9sZHByb2R1Y3RJZCIsInNob3BpZnlfY2FydF90cmlnZ2VyX2NhcnRfc3BlY19maWx0ZXIiLCJzaG9waWZ5X2NhcnRfdHJpZ2dlcl9jYXJ0X3NwZWNfdmFsdWUiLCJHZXRJRVZlcnNpb24iLCJzQWdlbnQiLCJJZHgiLCJzdWJzdHJpbmciLCJtYXRjaCIsInBvcHRpbl9zdHlsZSIsImdldEVsZW1lbnRCeUlkIiwicG9wdGluX2FuaW1hdGlvbnMiLCJwb3B0aW5Kc0ZpbHRlciIsImNsaWNrIiwianNfZmlsdGVyIiwiZGlzcGxheV9pZl9zcGVjaWZpY19qc19hY3RpdmUiLCIkanNfYXJyYXkiLCJqc192YXJpYWJsZV9uYW1lIiwiaW5BcnJheSIsIlN0cmluZyIsImdldEFsbEpzVmFyaWFibGVzIiwiJHJlc3VsdF9hcnJheSIsImRpc3BsYXlfaWZfc3BlY2lmaWNfanMiLCJqc19uYW1lX3BhaXIiLCJqc192YWx1ZV9wYWlyIiwianNfc2hvd19wYWlyIiwiJGpzX25hbWVfcm9sZV9wYWlyIiwiJGpzX25hbWVfcm9sZSIsIiRqc19uYW1lX3ZhbHVlIiwiJGpzX3ZhbHVlX3JvbGVfcGFpciIsIiRqc192YWx1ZV9yb2xlIiwiJGpzX3ZhbHVlX3ZhbHVlIiwiJGpzX3Nob3dfdmFsdWUiLCJGdW5jdGlvbiIsIiRqc19uYW1lIiwiJGpzX3ZhbHVlIiwianNGaWx0ZXJDaGVja0lmSW5Sb2xlcyIsIiRmbGFnIiwiJGRvbnRfc2hvdyIsInBvcHRpbkNvb2tpZXNGaWx0ZXIiLCJjb29raWVfZmlsdGVyIiwiZGlzcGxheV9pZl9zcGVjaWZpY19jb29raWVfYWN0aXZlIiwiJGNvb2tpZXNfYXJyYXkiLCJnZXRBbGxDb29raWVzIiwiZGlzcGxheV9pZl9zcGVjaWZpY19jb29raWUiLCJjb29raWVfbmFtZV9wYWlyIiwiY29va2llX3ZhbHVlX3BhaXIiLCJjb29raWVfc2hvd19wYWlyIiwiJGNvb2tpZV9uYW1lX3JvbGVfcGFpciIsIiRjb29raWVfbmFtZV9yb2xlIiwiJGNvb2tpZV9uYW1lX3ZhbHVlIiwiJGNvb2tpZV92YWx1ZV9yb2xlX3BhaXIiLCIkY29va2llX3ZhbHVlX3JvbGUiLCIkY29va2llX3ZhbHVlX3ZhbHVlIiwiJGNvb2tpZV9zaG93X3ZhbHVlIiwiJGNfbmFtZSIsImNvb2tpZXNGaWx0ZXJDaGVja0lmSW5Sb2xlcyIsIiRjX3ZhbHVlIiwiJHJvbGUiLCIkZmF0aGVyIiwiJHNvbiIsImVuZHNXaXRoIiwiZnNob3ciLCJjdF9qdF9jaGVjayIsImlzTW9iaWxlQ29udGFpbmVyQXZhaWxhYmxlIiwicG9wdGluX2RhdGEiLCJ0ZW1wX2h0bWxfdGVhc2VyIiwib3V0ZXJIVE1MIiwiZm9udF9zdHlsZV9jc3MiLCJzdG9wX3Nob3dfY29udl91c2VyIiwic3RvcF9zaG93aW5nX3RvX2NvbnZlcnRlZF91c2VycyIsImNoZWNrX2NvbnZlcnNpb25fY29va2llIiwibG9hZFRlYXNlciIsInN3aXRjaF9tb2JpbGVfZWRpdG9yIiwieF9jbG9zZV9idXR0b24iLCJpc1RhYkVuYWJsZSIsImZjaGVjayIsInBvcHVwX3ZpZXdfY2hlY2siLCJoYXNTZWVuQVBvcHRpbiIsImxvYWRQb3B0aW5UZWFzZXIiLCJpc01vYmlsZUNvbnRhaW5lckF2YWlsYWJsZU9iaiIsImFuaW1hdGVUYWIiLCJ0ZWFzZXJfc2VsZWN0b3IiLCJwb3B0aW5UYWIiLCJwb3B0aW5BbmltYXRlVGFiIiwidGFiQW5pbWF0ZSIsInRvZ2dsZUNsYXNzIiwidGVhc2VyX2h0bWwiLCJ0YWJfdmFyaWF0aW9ucyIsInRlYXNlcl9tb2JpbGVfdmlld190eXBlIiwibW9iaWxlX3ZpZXdfdGVhc2VyX2h0bWwiLCJjc3NGaXhUZWFzZXJzIiwicHJvcCIsInNob3dUZWFzZXJFZmZlY3QiLCJldmVudCIsImhhc0NsYXNzIiwiaGlkZSIsInBvcHVwX2NoZWNrIiwic2hvd0VmZmVjdCIsInBvcHRpbl9uYW1lIiwiY3NzX3N0cmluZ190ZWFzZXJzIiwiYXR0cmlidXRlcyIsIiR0aGlzIiwic3BlY2lmaWVkIiwiZ2V0Rm9udCIsImV0eXBlIiwidGhpc19lZmZlY3RfcG9wdGluX3RlYXNlcl9zZWxlY3RvciIsInRlYXNlcl9lZmZlY3QiLCJhbmltYXRlQ2xhc3MiLCJlZmZlY3QiLCJleGl0T3V0IiwiY2xhc3NOYW1lIiwiYXBwZW5kUG9wdGluSW50ZXJuYWwiLCJzZXRQb3B0aW4iLCJjaGVja1F1ZXVlIiwiZGlzcGxheV9pZl9hZGJsb2NrX2FjdGl2ZSIsImdldFNjcmlwdCIsImVuZ2FnZW1lbnRfd2l0aF9vdGhlcl9wb3B0aW5fZmlsdGVyX2FjdGl2ZSIsImVuZ2FnZW1lbnRfd2l0aF9vdGhlcl9wb3B0aW5fZmlsdGVyIiwiZXhwbG9kZSIsInNob3dWYWx1ZSIsImNvbmRpdGlvbk9uZSIsImNvbmRpdGlvblR3byIsImNvbmRpdGlvblRocmVlIiwiY2xpZW50UG9wdGlucyIsImNvbmRpdGlvbk1ldCIsImhhc05vdFNlZW5BUG9wdGluIiwiaGFzQ2xvc2VkQVBvcHRpbiIsImhhc0NvbnZlcnRlZEFQb3B0aW4iLCJzb3VyY2VfY29kZV90YXJnZXRfYWN0aXZlIiwic291cmNlX2NvZGVfdGFyZ2V0X2h0bWwiLCJzb3VyY2VfY29kZSIsImh0bWwiLCJ0cmltbWVkU291cmNlQ29kZSIsInRyaW1tZWRDb2RlVGFyZ2V0Iiwic291cmNlX2NvZGVfdGFyZ2V0X3JvbGUiLCJnZXRRdWVyeVN0cmluZyIsInBhdGgiLCJuIiwiUmVnRXhwIiwiZXhlYyIsImRlY29kZVVSSSIsInBvcHRpbkZvcm1WYWxpZGF0aW9ucyIsInBvcF9sYW5nIiwicGFyZW50SWQiLCJkdF9vYmoiLCJkdCIsInZhbHVlX2lucHV0IiwiZHRSZWdFeHAiLCJjbGFzc19pbnB1dCIsInRhZ19sYWJlbCIsInRhZ19pbnB1dF9jdXN0b20iLCJ0b1VwcGVyQ2FzZSIsInRhZ19pbnB1dF9jdXN0b21fYnlfbmFtZSIsInNlbGVjdGVkX2lucHV0Iiwic3ViX2ZpZWxkcyIsInNlbGVjdGVkX2NoaWxkX2lucHV0IiwiY2hlY2tlZCIsIiRzZWxlY3RvciIsImN0cmxLZXkiLCJzaGlmdEtleSIsIm51bSIsImlzTmFOIiwiaXNJbnRlZ2VyIiwicm91bmRlZCIsInJvdW5kIiwiRVBTSUxPTiIsIm5vdCIsInRlbF9maWVsZCIsImNoZWNrYm94X2lucHV0cyIsImZpZWxkX3dyYXBwZXIiLCJkYXRlX2ZpZWxkIiwiaXNJcGhvbmVQb3B0aW4iLCJwaWNrYWRheV9saW5rIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsIm0iLCJwIiwiUGlrYWRheSIsImZpZWxkIiwieWVhclJhbmdlIiwiZm9ybWF0U3RyaWN0IiwiZm9ybWF0IiwiZGF0ZXBpY2tlckhlaWdodCIsImZvY3VzIiwiaXNGaXJlZm94UG9wdGluIiwic2VsZWN0X2lkeCIsInNlbGVjdF90eXBlIiwiaXNfY3VzdG9tIiwiaXNfc2luZ2xlIiwic2VsZWN0cyIsInNlbGVjdCIsImlzX211bHRpcGUiLCJzZWxlY3RfaWQiLCJnZXRFeHBsaWNpdENTU1Byb3BlcnR5IiwiZWxlbWVudCIsInByb3BlcnR5IiwiZ2V0RGVmYXVsdENTU1Byb3BlcnR5IiwidGVtcEVsZW1lbnQiLCJhcHBlbmRUbyIsImRlZmF1bHRWYWx1ZSIsInNlbGVjdF9wYXJlbnQiLCJzZWFyY2hfdGV4dCIsInNlYXJjaF9ub19yZXN1bHRfdGV4dCIsIndyYXBwZXIiLCJwb3B0aW5fb3B0X2dyb3VwIiwiaW5uZXJUZXh0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJtaW5QYWRkaW5nIiwibWluIiwiX2RlZmluZVByb3BlcnR5IiwiaGFzQm9yZGVyUmFkaXVzIiwib3B0R3JvdXAiLCJ2aXNpYmxlT3B0aW9ucyIsImZvY3VzZWRJbmRleCIsImZpbHRlciIsImVxIiwiZm9jdXNlZE9wdGlvbiIsImNoZWNrYm94IiwicG9zaXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJmaXJzdCIsImNsb3Nlc3QiLCJvcHRzIiwib3B0TGVuIiwidHh0VmFsdWUiLCJ0ZXh0Q29udGVudCIsIm9wdENsYXNzIiwidGhpc19lbCIsInNlbGVjdGVkSW5wdXRQYXJlbnQiLCJzZWxlY3RlZElucHV0IiwicG9wdGluTXVsdGlTZWxlY3RUZXh0cyIsInBvcHRpbk11bHRpU2VsZWN0VmFsdWVzIiwiYXV0b3BsYXlBdHRyU3dpdGNoIiwiYXR0MSIsImF0dDIiLCJwbGF5IiwicGF1c2UiLCJmYWtlRW1haWxEb21haW5zIiwid2luZG93SHQiLCJyZWRpcmVjdF91cmxfYmxhbmsiLCJyZWRpcmVjdF91cmxfaHRtbCIsInJlcGxhY2VXaXRoIiwicG9wdGluRW5jIiwicG9wdGluX2RhdGFfd2lkdGhfaGVpZ2h0IiwiZ2V0RGF0YVdpZHRoSGVpZ2h0IiwidGhpc19wb3B0aW5fd2lkdGgiLCJ0aGlzX3BvcHRpbl9oZWlnaHQiLCJwb3B0aW5fd2lkdGgiLCJwb3B0aW5fc2l6ZSIsIndpZHRoIiwicG9wdGluX2hlaWdodCIsInBvcHRpbl9hcmVhX2ZsYWciLCJnZXRQb3B0aW5Qb3NpdGlvbiIsImRpc2FibGVfcG9zdF9wbGF5X3NjcmVlbiIsIndoZWVsX2hhc19jb3Vwb24iLCJwb3B0aW5TcGluV2hlZWxJbml0IiwibW91c2VlbnRlciIsImNvbnZVcmwiLCJjb252UGF0aCIsInRhcmdldEhyZWYiLCJjb252SHJlZiIsImVuY29kZVVSSSIsImxpbmtfc2VsZWN0b3IiLCJsaW5rYnRuX3NyIiwibGlua19idXR0b25fY3NzX2NsYXNzIiwiaW5wdXQiLCJwb3B0aW5fbG9jYXRpb24iLCJjbG9zZV9zdHJpbmciLCJzdWJtaXRfc3RyaW5nIiwidGhpc19wYXJlbnQiLCJpbWdfbGluayIsIm92ZXJsYXlfY2xvbmUiLCJwb3B0aW5fZGVzaWduX2Nsb3NlX29wdGlvbnNfdHlwZSIsInRoaXNfY2xvc2VfaWNvbiIsInRoaXNfY2xvc2VfaWNvbl93aWR0aCIsInhfd2lkdGgiLCJuZXdfZGF0YSIsImlzU2FmYXJpUG9wdGluIiwiZnJfdGVtcGxhdGVzIiwicG9wdGluX2xhbmciLCJmaWVsZF9kZXNpbmciLCJ0aGlzX3BvcF93aWR0aCIsImZpZWxkX2NoZWNrYm94X3JlcXVpcmVkIiwiZmllbGRfY2hlY2tib3hfZGVmYXVsdF9tYXJrZWQiLCJjbG9zZUJ0bkF0dHIiLCJwYXJlbnRQb3B0aW5JZCIsInNldENsb3NlUG9wdGluT25YQ29va2llIiwiYnRuX2NvbnZfdHlwZSIsInBvcHRpbkNvbnZlcnNpb24iLCJvcGVuIiwicG9wdGluX3JlZGlyZWN0IiwicG9wdGluX2Zyb20iLCJwb3B0aW5fdG8iLCJyZWRpcmVjdFRvUG9wdGluIiwidGltZXJfY29udGFpbmVyIiwicG9pbnRzX2NvdW50IiwidGltZXJfbGVmdCIsInNldFRlbEZvck1vYmlsZSIsImRyYWdnYWJsZV9jb250YWluZXIiLCJpZkFuZHJvaWRQb3B0aW5LZXlib3JhZCIsImRpcmVjdGlvbiIsInBvcHRpbl9kZXNpZ25fZW50cnlfZWZmZWN0IiwicG9wdGluX2Rlc2lnbl9jb250ZW50X2xvY2siLCJwb3B0aW5fZGVzaWduX2F1dG9fY2xvc2UiLCJwb3B0aW5fZGVzaWduX2F1dG9fY2xvc2Vfc2VjIiwicG9wdGluX2Rlc2lnbl9jbG9zZV9vbl9zY3JlZW5fY2xpY2siLCJldnRfcG9wdGluX2lkIiwiaHRtbF9wb3B0aW5feF9idXR0b24iLCJjbG9zZVBvcHRpbk9uWGNsaWNrIiwicG9wdGluX2Rlc2lnbl9zaG93X3hfY29tbWVudCIsImh0bWxfYnV0dG9uX25vdGUiLCIkbm90ZSIsIiRtYXJnaW4iLCJpbml0aWFsaXplQ2xvc2VCdXR0b25Ob3RlIiwic2tpcF9lbiIsInNraXBfaGUiLCJodG1sX3BvcHRpbl9za2lwX2J1dHRvbiIsInBvcHRpbl9kZXNpZ25fc2hvd194X2FmdGVyX3NlYyIsInNraXBfYnV0dG9uX3NlY19jb3VudGVyIiwiZmlyc3RfY2xvc2VfYnV0dG9uIiwiaW50ZXJ2YWwiLCJjbG9zZV90ZXh0IiwiY2xvc2VfdGltZXJfdGV4dCIsInRoZXNlX3giLCJwb3B0aW5fYW5pbWF0aW9uX3NwZWVkIiwiX3RoaXMiLCJtdXRlX3ZpZGVvIiwiaXNfYXV0b3BsYXkiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJpZlNjcm9sbFZpc2libGUiLCJzaG93UG9wdGluSG9vayIsInNob3dQb3B0aW4iLCJzZXRBY2Nlc3NpYmlsaXR5IiwicmVzaXplX2RlbGF5Iiwid2luZG93UmVzaXplIiwiZG9SZXNpemVQb3B0aW4iLCJyZXNldFJlbGV2ZW50Q29va2llIiwic2hvcGlmeVByb2R1Y3RSZWNvbW1lbmRhdGlvbnMiLCJzY3JhdGNoUG9wdXBJbml0aWFsU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxZIiwidGFiQ291bnQiLCJzaG93UG9wdGluQ291bnQiLCJoYXNUYWJJbmRleCIsImxvd2VzdF90YWJpbmRleCIsInBsYWNlaG9sZGVyX3RleHQiLCJpc19ydGwiLCJpbnB1dF9kaXIiLCJ0aGlzVGFiSW5kZXgiLCJuZXdUYWJJbmRleCIsIndyYXBJbm5lciIsImhpZ2hlc3RfdGFiaW5kZXgiLCJmb2N1c0VtYmVkZGVkIiwiaXNQb3B0aW5MYW5kaW5nUGFnZSIsImZpcnN0SW5wdXQiLCJpc0FueUlucHV0Rm9jdXNlZCIsImlzRnVsbFNjcmVlbiIsInBvcHRpblNoaWZ0SGVsZCIsImZpcnN0X2lucHV0X3dyYXAiLCJrZXl1cCIsImNsb3NlQnRuIiwiYWN0aXZlRUwiLCJhY3RpdmVFbGVtZW50IiwibG93ZXN0X3RhYmluZGV4X2l0ZW0iLCJoaWdoZXN0X3RhYmluZGV4X2l0ZW0iLCJpc19wb3B0aW5fZW5kIiwiaXNfcG9wdGluX3N0YXJ0IiwiaWZIZWJyb3ciLCJ4IiwiY29udGVudCIsInNjcm9sbEhlaWdodCIsInRoaXNfY2xvc2VfYnV0dG9uIiwidGhpc19jbG9zZV9ub3RlIiwicG9wdGluX3NjYWxlIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwidGhpc19mYXJfbGVmdCIsImF1dG9fcGlsb3RfdHJpZ2dlciIsImxpdGdodGJveF9wb3B0aW5fd2lkdGgiLCJsaXRnaHRib3hfcG9wdGluX2hlaWdodCIsImJhcl9wb3B0aW5fd2lkdGgiLCJiYXJfcG9wdGluX2hlaWdodCIsImJhcl9wb3B0aW5faGVpZ2h0XzIiLCJiYXJfcG9wdGluX2hlaWdodF80IiwiYmFyX3BvcHRpbl9oZWlnaHRfNSIsInNzaWRlX3BvcHRpbl93aWR0aF8yIiwic3NpZGVfcG9wdGluX2hlaWdodCIsInNzaWRlX3BvcHRpbl93aWR0aCIsInNzaWRlX3BvcHRpbl93aWR0aF80Iiwic3NpZGVfcG9wdGluX2hlaWdodF80Iiwic3NpZGVfcG9wdGluX3dpZHRoXzE5Iiwic3NpZGVfcG9wdGluX2hlaWdodF8xOSIsImJzaWRlX3BvcHRpbl93aWR0aCIsImJzaWRlX3BvcHRpbl9oZWlnaHQiLCJicm93c2luZ19wb3B0aW5fd2lkdGgiLCJicm93c2luZ19wb3B0aW5faGVpZ2h0IiwiZnVsbHBhZ2VfcG9wdGluX3dpZHRoIiwiZnVsbHBhZ2VfcG9wdGluX2hlaWdodCIsImZ1bGxwYWdlX3BvcHRpbl93aWR0aF8yIiwiZnVsbHBhZ2VfcG9wdGluX2hlaWdodF8yIiwic29jaWFsX3BvcHRpbl93aWR0aCIsInNvY2lhbF9wb3B0aW5faGVpZ2h0Iiwic29jaWFsX3BvcHRpbl93aWR0aF8yIiwic29jaWFsX3BvcHRpbl9oZWlnaHRfMiIsInNvY2lhbF9wb3B0aW5fd2lkdGhfNCIsInNvY2lhbF9wb3B0aW5faGVpZ2h0XzQiLCJtb2JpbGVfcG9wdGluX3dpZHRoIiwibW9iaWxlX3BvcHRpbl9oZWlnaHQiLCJtb2JpbGVfcG9wdGluX3dpZHRoXzIiLCJtb2JpbGVfcG9wdGluX2hlaWdodF8yIiwibW9iaWxlX3BvcHRpbl9oZWlnaHRfNCIsIm1vYmlsZV9wb3B0aW5faGVpZ2h0XzUiLCJlbWJlZGRlZF9wb3B0aW5fd2lkdGhfMSIsImVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfMSIsImVtYmVkZGVkX3BvcHRpbl93aWR0aF8yIiwiZW1iZWRkZWRfcG9wdGluX2hlaWdodF8yIiwiZW1iZWRkZWRfcG9wdGluX3dpZHRoXzMiLCJlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzMiLCJlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNCIsImVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNCIsImVtYmVkZGVkX3BvcHRpbl93aWR0aF81IiwiZW1iZWRkZWRfcG9wdGluX2hlaWdodF81IiwiZW1iZWRkZWRfcG9wdGluX3dpZHRoXzYiLCJlbWJlZGRlZF9wb3B0aW5faGVpZ2h0XzYiLCJlbWJlZGRlZF9wb3B0aW5fd2lkdGhfNyIsImVtYmVkZGVkX3BvcHRpbl9oZWlnaHRfNyIsInBvcHRpbl9jZW50ZXIiLCJrZXlib2FyZCIsIm9fYm90dG9tIiwicGFkZGluZ19vIiwiaWZBbmRyb2lkUG9wdGluIiwiYW5pbWF0ZSIsImluc2VydFBvcHRpbkNyZWRpdCIsImNoaWxkcmVuIiwiaHRtbF9jcmVkaXQiLCJwb3B0aW5fY29tX3VybCIsInBvcHRpbl9pbF91cmwiLCJmb250X25hbWUiLCJjdXN0b21Gb250cyIsIl9mb250IiwidGhpc19ocmVmIiwicG9wdGluX2ZvbnRzIiwiZm9ybWF0dGVkX3NsdWciLCJmb250X3ByZWxvYWRfaWQiLCJmb250X2xpbmtfaWQiLCJwb3B0aW5fZ29vZ2xlX2ZvbnRzIiwicGFydF93aWR0aCIsIm50RGF0YSIsIm50RHVyYXRpb24iLCJudERpcmVjdGlvbiIsInBvcHRpbkV2ZW50RGV0YWlscyIsImV4dHJhcyIsImFzc2lnbiIsInBvcHRpbl90YXJnZXQiLCJ0YWIiLCJwb3B0aW5UaW1lciIsImNzc0ZpeCIsImlmX3BvcHRpbl9jcmVkaXQiLCJjbGVhclBvcHRpbkNyZWRpdCIsInNldFNvY2lhbFByb29mQmVoYXZlckludGVydmFsIiwicmVtb3ZlVGFiaHRtbCIsImluamVjdEZhY2Vib29rUGx1Z2luIiwiYW5pbWF0ZUJ1dHRvbiIsImFuaW1hdGVHaWZ0Ym94IiwiZ2FtaWZpZWRHaWZ0Ym94IiwiY291bnRTY3JhdGNoUHJvZ3Jlc3MiLCJwZXJjZW50Iiwic2hvd193aW5uaW5nX3NjcmVlbiIsImlmTGlua0NvbnZlcnNpb24iLCJwb3B0aW5TY3JhdGNoQ2FyZEluaXQiLCJsb2FkU2NyYXRjaENhcmRGdW5jdGlvbmFsaXR5IiwicHVzaEh0bWxEb3duIiwicGFkZGluZ1hCdXR0b24iLCJwb3B0aW5Gb3JtQ2xpY2tTdWJtaXQiLCJpbmplY3RfY2hhdF9zZGsiLCJmYWNlYm9va19tZXNzYW5nZXJfZGF0YV9yZWYiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpZl9odG1sX3BhZCIsInNjcmVlbiIsImltZyIsInBvcHRpbl9sb2FkY29udHJvbF9maXgiLCJ0aGlzX3dpZHRoIiwiaXNfY2xvc2VfYnV0dG9uIiwiZGF0YV93aWR0aCIsImNzc19zdHJpbmciLCJ0aW1lcl9jb250Iiwicm9sZSIsInRpbWVyIiwidGltZSIsInNlY29uZHMiLCJjb3VudF9kb3duIiwiZ2V0VGltZSIsImluaXRpYWxpemVDbG9jayIsImNoZWNrSWZUaW1lciIsInJlc2V0Q2xvY2siLCJlbmR0aW1lIiwiY2FsbGVyIiwidGltZXJfcG9wdGluIiwidCIsImdldFRpbWVSZW1haW5pbmciLCJjdXJyZW50U2VjIiwic2VjVGltZURpZmYiLCJhYnMiLCJwcmV2IiwibmV4dCIsImN1cnJlbnRNaW4iLCJtaW5UaW1lRGlmZiIsIm1pbnV0ZXMiLCJjdXJyZW50SHIiLCJoclRpbWVEaWZmIiwiaG91cnMiLCJjdXJyZW50RGF5IiwiZGF5VGltZURpZmYiLCJkYXlzIiwicHJlZml4MCIsInVwZGF0ZUNsb2NrIiwidG90YWwiLCJ1cGRhdGVDbG9ja0ludGVydmFsIiwiYWEiLCJzZWNvbmRQbGF5IiwibWludXRlUGxheSIsImhvdXJzUGxheSIsImRheXNQbGF5IiwidGltZV9zdHIiLCJkYXlzX3N0ciIsImhvdXJzX3N0ciIsIm1pbnV0ZV9zdHIiLCJzZWNvbmRfc3RyIiwiZmxpcF9jb250IiwiZmxpcF93cmFwIiwic2hvd3RpbWUiLCJ0aW1lcl9iZ19mbGlwX2NvbG9yIiwiY2xvY2siLCJmbG9vciIsInRoaXNfZm9ybSIsInJlZGlyZWN0X3VybCIsInRoaXNfanNfZm9ybSIsImNoZWNrYm94X3ZhbGlkaXR5IiwicmFkaW9fdmFsaWRpdHkiLCJkZWZhdWx0X2NoZWNrYm94IiwiZGVmYXVsdF9yYWRpbyIsInBob25lX2ZpZWxkIiwicmVwb3J0X251bWJlciIsInBob25lX251bWJlciIsImZpcnN0XzIiLCJmaXJzdF8zIiwiZW1haWxfZmllbGQiLCJ2YWxpZGF0ZUFjdGlvbiIsImNoZWNrX3R5cG9zIiwiY2hlY2tfYnVzaW5lc3NfZW1haWwiLCJyZXBvcnRfZW1haWwiLCJlbWFpbCIsImVtYWlsRG9tYWluIiwiaXNCdXNpbmVzc0VtYWlsIiwiYmlydGhkYXlGaWVsZCIsImNoZWNrVmFsaWRpdHkiLCJpc19zdWJtaXRfcG9wdGluX3J1biIsInN1Ym1pdFBvcHRpbiIsInN1Ym1pdF9wb3B0aW5fZGlzYWJsZV9pbnRlcnZhbCIsInJlcG9ydFZhbGlkaXR5Iiwic2hvcGlmeVByb2R1Y3RTZXR0aW5ncyIsInNob3BpZnlfcGFnZV90eXBlIiwicGFnZVR5cGUiLCJyZWNlbnRfcHJvZHVjdF9pZHMiLCJzZWxlY3RlZFZhcmlhbnRJZCIsInVuc2hpZnQiLCJzcHJKU09OIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfc2hvcGlmeVByb2R1Y3RzSlNPTiIsIl9zaG9waWZ5UHJvZHVjdHNKU09OMiIsIl9zaG9waWZ5UHJvZHVjdHNKU09OMyIsIl9zaG9waWZ5UHJvZHVjdHNKU09ONCIsIl9zaG9waWZ5UHJvZHVjdHNKU09ONSIsInBhcmFtIiwibWFudWFsX3Byb2R1Y3RzIiwiY291bnQiLCJfc2hvcGlmeVByb2R1Y3RzSlNPTjYiLCJfc2hvcGlmeVByb2R1Y3RzSlNPTjciLCJjYXRlZ29yeV9vcmlnaW5hbCIsInNlbmRQcm9kdWN0UmVjb21tZW5kYXRpb25SZXF1ZXN0IiwicmVzdWx0IiwiX3Jlc3VsdCRkYXRhIiwicHJvZCIsInByb2R1Y3RzIiwic2hvcGlmeVByb2R1Y3RDdXJyZW5jeSIsImN1cnJlbmN5IiwiZGlzcGxheVNob3BpZnlQcm9kdWN0RGF0YSIsInByb2R1Y3RWYXJpYW50SWRzIiwiZm9yRWFjaCIsInJldmVyc2UiLCJfcmVzdWx0JGRhdGEyIiwicGF5bG9hZCIsImNhbGxiYWNrIiwicG9wdGluSWQiLCJjYXJ0VmFyaWFudHMiLCJzaG9waWZ5TGF5b3V0V2lkdGgiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJjbnQiLCJwcm9kVG9EaXNwbGF5Iiwic2VsZWN0ZWRQcm9kc0FyciIsInYiLCJzZXR0aW5nT2JqIiwiaW1hZ2UiLCJib2R5X2h0bWwiLCJoYW5kbGUiLCJpbnZlbnRvcnlfcXVhbnRpdHkiLCJwcmVzZW50bWVudF9wcmljZXMiLCJjb21wYXJlX2F0X3ByaWNlIiwiY3VyclN5bWJvbE9iaiIsIkFFRCIsIkFGTiIsIkFMTCIsIkFNRCIsIkFORyIsIkFPQSIsIkFSUyIsIkFVRCIsIkFXRyIsIkFaTiIsIkJBTSIsIkJCRCIsIkJEVCIsIkJHTiIsIkJIRCIsIkJJRiIsIkJNRCIsIkJORCIsIkJPQiIsIkJPViIsIkJSTCIsIkJTRCIsIkJUQyIsIkJUTiIsIkJXUCIsIkJZTiIsIkJZUiIsIkJaRCIsIkNBRCIsIkNERiIsIkNIRSIsIkNIRiIsIkNIVyIsIkNMRiIsIkNMUCIsIkNOWSIsIkNPUCIsIkNPVSIsIkNSQyIsIkNVQyIsIkNVUCIsIkNWRSIsIkNaSyIsIkRKRiIsIkRLSyIsIkRPUCIsIkRaRCIsIkVFSyIsIkVHUCIsIkVSTiIsIkVUQiIsIkVUSCIsIkVVUiIsIkZKRCIsIkZLUCIsIkdCUCIsIkdFTCIsIkdHUCIsIkdIQyIsIkdIUyIsIkdJUCIsIkdNRCIsIkdORiIsIkdUUSIsIkdZRCIsIkhLRCIsIkhOTCIsIkhSSyIsIkhURyIsIkhVRiIsIklEUiIsIklMUyIsIklNUCIsIklOUiIsIklRRCIsIklSUiIsIklTSyIsIkpFUCIsIkpNRCIsIkpPRCIsIkpQWSIsIktFUyIsIktHUyIsIktIUiIsIktNRiIsIktQVyIsIktSVyIsIktXRCIsIktZRCIsIktaVCIsIkxBSyIsIkxCUCIsIkxLUiIsIkxSRCIsIkxTTCIsIkxUQyIsIkxUTCIsIkxWTCIsIkxZRCIsIk1BRCIsIk1ETCIsIk1HQSIsIk1LRCIsIk1NSyIsIk1OVCIsIk1PUCIsIk1STyIsIk1SVSIsIk1VUiIsIk1WUiIsIk1XSyIsIk1YTiIsIk1YViIsIk1ZUiIsIk1aTiIsIk5BRCIsIk5HTiIsIk5JTyIsIk5PSyIsIk5QUiIsIk5aRCIsIk9NUiIsIlBBQiIsIlBFTiIsIlBHSyIsIlBIUCIsIlBLUiIsIlBMTiIsIlBZRyIsIlFBUiIsIlJNQiIsIlJPTiIsIlJTRCIsIlJVQiIsIlJXRiIsIlNBUiIsIlNCRCIsIlNDUiIsIlNERyIsIlNFSyIsIlNHRCIsIlNIUCIsIlNMTCIsIlNPUyIsIlNSRCIsIlNTUCIsIlNURCIsIlNUTiIsIlNWQyIsIlNZUCIsIlNaTCIsIlRIQiIsIlRKUyIsIlRNVCIsIlRORCIsIlRPUCIsIlRSTCIsIlRSWSIsIlRURCIsIlRWRCIsIlRXRCIsIlRaUyIsIlVBSCIsIlVHWCIsIlVTRCIsIlVZSSIsIlVZVSIsIlVZVyIsIlVaUyIsIlZFRiIsIlZFUyIsIlZORCIsIlZVViIsIldTVCIsIlhBRiIsIlhCVCIsIlhDRCIsIlhPRiIsIlhQRiIsIlhTVSIsIlhVQSIsIllFUiIsIlpBUiIsIlpNVyIsIlpXRCIsIlpXTCIsImludmVudG9yeSIsImVsZSIsImN1cnJlbmN5X3N5bWJvbCIsImN1cnJlbmN5U3ltYm9sIiwiZGVzYyIsInNob3BpZnlfcHJvZF91cmwiLCJidXR0b25zX2FjdGlvbiIsInByb2RDb3VudCIsImxheW91dCIsImxlbiIsInNpemUiLCJ0aGlzX2xlZnQiLCJhcHBseVdpZHRoVG9TaG9waWZ5UHJvZHVjdHMiLCJwb3B0aW5SZWRpcmVjdFRvVXJsIiwiZ2FtaWZpZWRfcHJpemUiLCJyZWRpcmVjdF90byIsInJlZGlyZWN0X3RvX29wdGlvbnMiLCJyZWRpcmVjdF90b191cmwiLCIkalEyMjRfZGl2IiwiZW1wdHlfZmxhZyIsImhhc192YWx1ZSIsImZpZWxkc1RvQ2hlY2siLCIkaW5kZXgiLCJpZlN1Ym1pdEVtcHR5Rm9ybSIsInBvcHRpblN1Ym1pdHRlZCIsInBvcHRpbkVtYWlsRmllbGQiLCJwb3B0aW5GaXJzdEZpZWxkIiwiaW5wdXRCb3JkZXJBdHRyIiwib25JbnB1dEtleURvd24iLCJyZWRpcmVjdEFmdGVyQ29udmVyc2lvbiIsImFmdGVyUG9wdGluU3VibWl0IiwicmVkaXJlY3RfY2xvc2VfZGVsYXkiLCJkZWZhdWx0X2Nsb3NlX2RlbGF5IiwiX3dpbmRvdyRuYXZpZ2F0b3IzIiwiX3dpbmRvdyRuYXZpZ2F0b3I0IiwiY291bnRfY29udmVyc2lvbiIsImVsIiwicG9wdGluRXZlbnRCdXR0b24iLCJwb3B0aW5FdmVudEJ1dHRvblRleHQiLCJwb3B0aW5FdmVudEV4dHJhcyIsIm9uUG9wdGluU3VibWl0RXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50Iiwib25wb3B0aW5TdWJtaXQiLCJwbGFjZW9sZGVyIiwiY2hlY2tib3hfY2hlY2tlZCIsInBvcHRpbl9wYXJhbXMiLCJwX3RhcmdldCIsInZpc2l0b3IiLCJwb3B0aW5fZmllbGRzIiwiZnJlZU9wdGlvbnMiLCJuZXdfZXh0cmFfZmllbGRzIiwiYWxsX2V4dHJhX2ZpZWxkcyIsImlzX2FjdGl2ZSIsInNraXAiLCJ0aGlzX3R5cGUiLCJ0aGlzX2lkIiwidGhpc19uYW1lIiwidGhpc192YWx1ZSIsInRoaXNfcGxhY2Vob2xkZXIiLCJvcHRpb25WYWx1ZSIsInBhcmVudHNVbnRpbCIsInNpYmxpbmdzIiwic2VsZWN0ZWRPcHRpb24iLCJpc0FycmF5IiwicGxhY2Vob2xkZXIiLCJ2YWx1ZXMiLCJuZXdfZXh0cmFfZmllbGRzX3ZhbHVlcyIsImtleXMiLCJiYXNlX2ZpZWxkcyIsIm51bWJlciIsInRleHRhcmVhIiwiZGF0ZSIsInJhZGlvIiwiaGlkZGVuIiwidGVsIiwicHJvY2Vzc2VkUmFkaW9Hcm91cHMiLCJwcm9jZXNzZWRDaGVja2JveEdyb3VwcyIsInNwbGl0X25hbWVfZmllbGQiLCJyYWRpb0dyb3VwTmFtZSIsInJhZGlvUGFyZW50IiwiaXNCb29sZWFuRmllbGQiLCJzZWxlY3RlZFJhZGlvIiwiaXNDaGVja2VkIiwic2VsZWN0ZWRWYWx1ZSIsImNoZWNrYm94R3JvdXBOYW1lIiwiY29kZSIsImxhYmVsIiwiZ3JvdXAiLCJvYmpQcm9kIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImdldExlYWRlckNvb2tpZSIsInBhZ2VfdXJsIiwiY29uc2VudCIsImZpZWxkcyIsImNvdXBvbiIsInBvcHRpblZpZXdkQXJyIiwicG9wdGluX3ZpZXdfaWQiLCJ1cmxfY29udmVyc2lvbl9xdWVyeSIsImdldFBvcHRpbkNvbnZlcnNpb25GaWVsZHMiLCJjYWNoZSIsInZpZXdlcl9pZCIsImhhbmRsZUNvbnZlcnNpb25TdWNjZXNzIiwicG9wdGluRGVzaWduSW5wdXRUZXh0RmllbGRFbWFpbCIsImNsb3NlZENvb2tpZXNBcnJheSIsImdldENsb3NlQ29va2llc0FycmF5IiwiY2xvc2VkQ29va2llIiwidXBkYXRlQ29udmVyc2lvbkFjdGl2aXRpZXMiLCJYTUxIdHRwUmVxdWVzdCIsImVycm9yVGhyb3duIiwicmVzcG9uc2VUZXh0IiwiY29tcGxldGUiLCJwb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbiIsImhhbmRlU2hvcGlmeUFkZFRvQ2FydCIsImhhbmRlbFNob3BpZnlQcm9kUmVkaXJlY3RzIiwiYnV0dG9uUmVkaXJlY3RBZnRlckNsaWNrIiwicmVtb3ZlUG9wdGluSHRtbCIsInJlc3AiLCJyZWxvYWQiLCJ0YWdSZWZJZCIsInRhZ1RvQXBwZW5kIiwiYWRkVG9DYXJ0IiwiYnRuX2lkIiwiYWRkX3RvX2NhcnQiLCJzaG9waWZ5X2FkZF90b19jYXJ0XzIiLCJzaG9waWZ5X2FkZF90b19jYXJ0XzMiLCJzaG9waWZ5X2FkZF90b19jYXJ0XzQiLCJzaG9waWZ5X2FkZF90b19jYXJ0XzUiLCJzaG9waWZ5X2FkZF90b19jYXJ0XzYiLCJwcm9kdWN0X3F0eSIsInJlbG9hZF90eXBlIiwic3RhdHVzQ29kZSIsInJlc3BvbnNlT2JqZWN0Iiwic3RvcmVfbGFuZ3VhZ2Vfcm91dGUiLCJjYXJ0X3JlZGlyZWN0aW9uX3VybCIsInByb3RvY29sIiwicmVkaXJlY3RfZmxhZyIsInBvcHRpbl9kZXNpZ25fcmVkaXJlY3QiLCJjbGlja190eXBlIiwicG9wdGluX2Rlc2lnbl9yZWRpcmVjdF9zZW5kX2Zvcm1fZGF0YSIsInVybF9hcnJheSIsIm9ubHlPbmVRdWVzdGlvbk1hcmsiLCJ1cmxfZG9tYWluIiwic2hpZnQiLCJuZXdMb2NhdGlvbiIsImNsb3NlX3RoYW5rX3NjcmVlbl9zZWMiLCJwb3B0aW5fZGVzaWduX3RoYW5rX3NjcmVlbl9hdXRvX2Nsb3NlIiwicG9wdGluX2Rlc2lnbl90aGFua19zY3JlZW5fYXV0b19jbG9zZV9zZWMiLCJkaXJlY3RfY2FzZV9hbmNob3JUYWdUYXJnZXRQcm9wIiwiYW5jaG9yVGFnIiwiYW5jaG9yVGFnVGFyZ2V0UHJvcCIsImhyZWZBdHRyIiwiY2xvc2Vfc2NyZWVuX3NlYyIsInJlZGlyZWN0X2Nsb3NlIiwibmV3X2NvbnZlcnNpb25fcXVlcnkiLCJwb3B0aW5fZmllbGRzX3RlbXAiLCJmaWVsZF90eXBlX2FyciIsImZpZWxkX3ZhbHVlIiwiZmllbGRfa2V5IiwidGhpc19jb3VudCIsInRoaXNfc2hvcnRfbmFtZSIsInRoaXNNdWx0aVNlbGVjdFRleHRzIiwidGhpc011bHRpU2VsZWN0VmFsdWVzIiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZV9vYmoiLCJzaG9ydF9uYW1lIiwicXVlcnlfZmllbGRzIiwiY2xvc2VUaGFua1NjcmVlblNlYyIsInBvcHRpbl9kZXNpZ25fcmVkaXJlY3RfdXJsIiwicmVkaXJlY3RfcGhvbmUiLCJvbGRfYnRuX2xlZnQiLCJ0aGFua195b3VfYnV0dG9uX2Nsb3NlX2J0biIsInBvcHRpbl9hcmVhX2ZsYWdfc3VibWl0IiwiY2xvc2VTY3JlZW5TZWMiLCJ0aW1lb3V0IiwiaXNfd2lubmVyIiwiJGRpdiIsIiRidG4iLCJ0eHQiLCJkaXJlY3Rpb25fc3R5bGUiLCJtc2dIdG1sIiwic2V0QWNjZXNzaWJpbGl0eVRoYW5rQWZ0ZXJTdWJtaXQiLCJfcG9wdGluJGRlc2lnbl9wcm9wZXIiLCJfcG9wdGluJGRlc2lnbl9wcm9wZXIyIiwicmVkaXJlY3RGcm9tQnRucyIsImNvbnZlcnNpb25faWQiLCJpbnRlZ3JhdGlvbiIsImNvbnZlcnNpb25fY29kZSIsImFwcF9saW5rIiwic2V0T25jZUFEYXlDb29raWUiLCJzZXRQb3B0aW5WaWV3ZWRTZXNzaW9uIiwic2V0UG9wdGluVmlld2VkVXJsIiwic2V0T25jZUFWaXNpdCIsInNldEFCVGVzdFNlc3Npb24iLCJsYW5kaW5nX3BhZ2UiLCJvblBvcHRpblZpc2libGVFdmVudCIsImRhdGFfaGVpZ2h0IiwicG9zaXRpb25fY2VudGVyIiwic2NyZWVuX3dpZHRoIiwidXAiLCJzY3JlZW5faGVpZ2h0IiwicmVzaXplIiwicG9wdGluX2NvbnRhaW5lciIsImlmX3Jlc3BvbnNpY2VfZmxhZyIsImlzX25ldyIsInBvcHRpbl9zaXplX3dpZHRoIiwicG9wdGluX3NpemVfaGVpZ2h0IiwiYmVzdF93aW5kb3dfd2lkdGgiLCJ0aGlzX2NvbXBhcmFibGVfd2lkdGgiLCJ0aGlzX2NvbXBhcmFibGVfaGVpZ2h0Iiwid2luZG93X3dpZHRoIiwid2luZG93X2hlaWdodCIsInNjYWxlIiwicmVjYWx3IiwiZWxfbGVmdF9jYWwiLCJlbF9sZWZ0X2FkZCIsIm91dHNpZGVfYXJyIiwibWF4X2VsX2xlZnRfYWRkIiwiY29udGFpbmVyX3ciLCJjaGVja19lbGVtX2xyIiwiZWxlbSIsImNvbnQiLCJlbGVtX2RpciIsImVsZW1fZGlmZiIsImNoZWNrRWxlbWVudENyb3NzaW5nRGlyZWN0aW9uX2xyIiwiaXNFbXB0eU9iamVjdCIsIm1heCIsIm5ld193aWR0aCIsInJlQ2FjdWxhdGVXaWR0aGZvcm1vYmlsZSIsInJlY2FsaCIsImVsX3RvcF9jYWwiLCJlbF90b3BfYWRkIiwibWF4X2VsX3RvcF9hZGQiLCJjb250YWluZXJfaCIsImNoZWNrX2VsZW1fdGIiLCJjaGVja0VsZW1lbnRDcm9zc2luZ0RpcmVjdGlvbl90YiIsInJlQ2FjdWxhdGVoZWlnaHRmb3Jtb2JpbGUiLCJzY2FsZV93aWR0aCIsInNjYWxlX2hlaWdodCIsIm5ld19wb3Nfc2NhbGUiLCJ0aGlzX2NzcyIsImJhckh0bWxQYWRkaW5nIiwibmV3X3NjYWxlIiwiZW1iZWRkZWRfbGVmdCIsImVtYmVkZGVkX3RvcCIsImllVmVyc2lvbiIsInBvcF93cmFwcGVyc19jb250YWluZXIiLCJuZXdTY2FsZVRpbWVvdXQiLCJ0aGlzX2Zvcm1hdCIsInN0YXRpY19iZ19jb2xvciIsIm9wYWNpdHkiLCJmb3JtX3hfY2xvc2UiLCJ0aGlzX29yaWdpbmFsX3BvcyIsIm5ld19sZWZ0IiwiY29uc3Rfd2lkdGgiLCJjb25zdF9oZWlnaHQiLCJtaW5fZWxfbGVmdCIsIm1heF9lbF9yaWdodCIsIm1pbl9lbF90b3AiLCJtYXhfZWxfYm90dG9tIiwidGhpc190b3AiLCJ0aGlzX3JpZ2h0IiwidGhpc19ib3R0b20iLCJ0aGlzX3BvcHRpbl9jb250YWluZXIiLCJ0aGlzX3BvcHRpbl90aGFua195b3UiLCJ0aGlzX3BvcHRpbl9wbGF5X3NjcmVlbiIsInRoaXNfcG9wdGluX3dpbm5pbmdfc2NyZWVuIiwidGhpc19wb3B0aW5fbG9zaW5nX3NjcmVlbiIsImNvbnRhaW5lcl93aWR0aCIsImNvbnRhaW5lcl9tYXJnaW4iLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGFpbmVyX2NzcyIsImVsX3dpZHRoIiwiZHJhZ19jb250X3dpZHRoIiwiZWxfbGVmdCIsImNsb3NlX2J1dHRvbiIsInBvcHRpbl9jcmVkaXQiLCJ0aGlzX2NvbnRhaW5lcl9jc3MiLCJwYWRkaW5nX3RvcCIsInNldF91cmxfcHJvdG9jb2wiLCJ1cmxfcHJvdG9jb2wiLCJyZWxldmVudF9jb29raWUiLCJwYWlyIiwiJGtleSIsIiR2YWx1ZSIsImFwX3RyaWdnZXJzIiwicGxwIiwiZF9mX2EiLCJnZXRDdXJyZW50RGF0ZSIsInNldE9sZFZpc2l0b3JDb29raWUiLCJwb3B0aW5fbmV3X3Nlc3Npb24iLCJzZXRDdXN0b21OZXdWaXNpdFNlc3Npb24iLCJpbmNyZWFzZVRvdGFsV2Vic2l0ZVNlc3Npb24iLCJzZXROZXdQb3B0aW5WaXNpdG9yU2Vzc2lvbiIsIndpeF9jdXN0b21lcl9pZCIsImNsaWVudEVtYWlsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaG9zdG5hbWUiLCJhY3Rpdml0eSIsInZpc2l0b3JFbWFpbCIsInBvcHRpbl92aWV3ZWRfc2Vzc2lvbiIsInBvcHRpbl9vbmNlIiwic2V0UG9wdGluU2Vzc2lvbiIsInNldE5ld1VzZXJTZXNzaW9uIiwic2V0T2xkVXNlclNlc3Npb24iLCJnZXRPbmNlQVZpc2l0Q29va2llcyIsImN1cnJlbnRfZGF0ZSIsInRvSlNPTiIsImFiX3Rlc3QiLCJhbGxDb29raWVzIiwiX2Nvb2tpZSRzcGxpdDIiLCJfc2xpY2VkVG9BcnJheSIsImNuYW1lIiwiY3ZhbHVlIiwiZXhkYXlzIiwiZCIsInNldFRpbWUiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJjYSIsImMiLCJjaGFyQXQiLCJ0b2RheSIsImRkIiwiZ2V0RGF0ZSIsIm1tIiwiZ2V0TW9udGgiLCJ5eXl5IiwiZ2V0RnVsbFllYXIiLCJlcnJvcl9zdGVwIiwiY19zdGF0dXMiLCJ0aGlzX2VmZmVjdF9wb3B0aW4iLCJmaW5hbF9zY2FsZSIsInRoaXNfZWZmZWN0X3BvcHRpbl9jb250YWluZXIiLCJpbml0X3NjYWxlIiwiZW50cnlFZmZlY3QiLCJzZWxlY3RlZEVmZmVjdCIsInNjcm9sbCIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50IiwicGFyZW50Tm9kZSIsInBvcHRpbl9kZXNpZ25fZXhpdF9lZmZlY3QiLCJkcmFnX2NvbnQiLCJjaGVja19iYWNrZHJvcF9zdHlsZSIsImNoZWNrX2JhY2tkcm9wX3N0YXR1cyIsInBvcHRpblZpc2libGUiLCJoaWRlVGVhc2VyT25Qb3B1cFNob3ciLCJwZXJmb3JtYW5jZSIsIm5hdmlnYXRpb24iLCJwb3B0aW5CdXR0b24iLCJidG5BbmltYXRlIiwic3VibWl0QnRuQW5pbWF0aW9uSW50ZXJ2YWwiLCJwb3B0aW5DbG9zZUJ1dHRvbiIsImJ0bkNsb3NlQW5pbWF0ZSIsImNsb3NlQnRuQW5pbWF0aW9uSW50ZXJ2YWwiLCJwb3B0aW5saW5rQnV0dG9uIiwibGlua2J0bkFuaW1hdGUiLCJsaW5rYnRuX2lkIiwibGlua19pbnRlcnZhbF9hcnJheSIsInBvcHRpbkdpZnRib3giLCJnaWZ0Ym94QW5pbWF0ZSIsImdpZnRib3hDbnQiLCJnaWZ0Ym94QW5pbWF0aW9uSW50ZXJ2YWwiLCJieXRlcyIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYmluU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsIl90b0NvbnN1bWFibGVBcnJheSIsImJ0b2EiLCJwb3B0aW5EZWMiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImF0b2IiLCJVaW50OEFycmF5IiwiZnJvbSIsImNvZGVQb2ludEF0Iiwid2VpZ2h0SlNPTiIsInBvcHRpbkVuY1B6ZVZhbCIsInBvcHRpbkVuY1B6ZSIsInByaXplcyIsImNoYW5jZXMiLCJwcml6ZVdpbm5lciIsIndlaWdodFJhbmRvbSIsImxvb3Npbmdfb3B0aW9uIiwidG90YWxfcmVkaXJlY3RfY2xvc2VfZGVsYXkiLCJwcm9iIiwic3VtIiwiciIsInBvcHRpblNwaW5XaGVlbENhbGwiLCJwYXJlbnRFTCIsInNraXBzIiwicG9wV2hlZWwiLCJwcml6ZVNlbGVjdGVkSWR4IiwiX2xvb3AiLCJwcml6ZVNlbGVjdGVkIiwiY2FsbCIsInNwaW5BZnRlclN1Ym1pdCIsImNvdXBvbl90ZXh0IiwiY291cG9uX3R5cGUiLCJjb3Vwb25fZWxlbWVudF90ZXh0Iiwib25jb3Vwb25Db3B5RXZlbnQiLCJleGVjQ29tbWFuZCIsInRvb2x0aXBfZGl2IiwiY29waWVkX2VuIiwiY29waWVkX2hlIiwiZmFkZUluIiwiZmFkZU91dCIsImNvdXBvbl9jb3VudF9jb252ZXJzaW9uIiwiYnRudXJsIiwiX2FfYnRuX3RleHQiLCJsaW5rQnRuQXR0ciIsImxpbmtfcHN0ciIsImhhbmRsZXMiLCJiZ2FubXZhbCIsInNlbGVjdG9yIiwiY2FudmFzX2lkIiwiV2hlZWwiLCJTdGFycnlTa3kiLCJCYWxscyIsIlNub3dzIiwic3RhcnQiLCJSYWluIiwic3RhcnRDb25mZXR0aSIsImJnX2VmZmVjdF9vcGFjaXR5IiwidXBncmFkZV9wb3B1cCIsIiR0ZXJtIiwiJHJlc3VsdCIsIldJWF9BUFBfSUQiLCJwb3B0aW5fY2RuX3NlcnZlciIsInBhcmFtcyIsImhhcyIsImF2YWlsV2lkdGgiLCJwb3B0aW5FeGl0UG9wdXBTaG93biIsInZlbmRvciIsImN1cnJfeWVhciIsInBvcF9kYXlzIiwicG9wX21vbnRocyIsInByZXZfbW9uIiwic2V0TW9udGgiLCJ0b0xvY2FsZVN0cmluZyIsImN1cnJfbW9uIiwibmV4dF9tb24iLCJ5ZXN0X2RheSIsInNldERhdGUiLCJ5ZXN0X2RteSIsInllc3RfbWR5IiwiZ2V0RGF5IiwidG9kYXlfZGF5IiwidG9kYXlfZG15IiwidG9kYXlfbWR5IiwidG9tb19kYXkiLCJ0b21vX2RteSIsInRvbW9fbWR5IiwiYXR0ZW1wV2l4TG9naW4iLCJ1cmxPcmlnaW4iLCJtZW1iZXIiLCJyZWdpc3RlciIsImV2ZW50TmFtZSIsImV2ZW50RGF0YSIsImV2ZW50QWN0aW9uIiwiY3VzdG9tZXJfaWQiLCJzb3VyY2VfdGFibGUiLCJjb250ZW50VHlwZSIsIndpeEJyb3dzZUFiYW5kb25tZW50IiwiY2FydElkIiwib25wb3B0aW5DbG9zZSIsIm92ZXJmbG93Iiwic2Nyb2xsVG8iLCJwb3B0aW5QYWdlTG9hZGVkIiwicG9wdGluU3RhcnRlZCIsImNoZWNrVGltZU91dEFycmF5IiwicnVuUG9wdGluTm93IiwiY3VzdG9tZXJQcml2YWN5IiwiZ2V0VHJhY2tpbmdDb25zZW50IiwicnVuUG9wdGluTm93U3RhcnQiLCJzaG9waWZ5Q29va2llSW50ZXJ2YWwiLCJ1c2VyQ2FuQmVUcmFja2VkIiwic2NyaXB0X3RhZ3MiLCJxdWVyeSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3VycmVudFVSTCIsImRlY29kZVVSSUNvbXBvbmVudCIsInNldEoiLCJqUXVlcnkiLCJub0NvbmZsaWN0IiwidWkiLCJzZXREb2xhciIsIiQiLCJzZXRKUTIyNCIsImpfMiIsInNldEpxdWVyeSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImxlY2RuIiwibGVjc3NfbGluayIsInBvcHRpbkFmdGVyUGFnZUxvYWQiLCJwb3B0aW5fY29weV9qcSIsImpRX3Zlcl9hcnIiLCJmbiIsImpxdWVyeSIsImpfMSIsInBvcHRpbkluaXQiLCJwYWdlTG9hZENoZWNrIiwiY2hlY2tDb3VudCIsInNldENsb3NlQ29va2llIiwiY2xvc2VUYWJQb3B0aW5PblhjbGljayIsImNsb3NlX3BvcHRpbiIsInhfY2xvc2UiLCJiZ19jbGljayIsInNsaWRlVXAiLCJleGl0VGltZU91dCIsImZpcmVQb3B0aW4iLCJvblBvcHRpbkNsb3NlRXZlbnQiLCJQb3B0aW5RdWV1ZSIsImFjdGl2ZSIsImdldEFjdGl2ZSIsInNldEFjdGl2ZSIsInBvcHRpbl9jdXJyZW50X3VybCIsInB2cF9wYXRoIiwicHJldmlvdXNQYWdlc19zcGEiLCJwcmV2aW91c1BhZ2VzQXJyYXlfc3BhIiwidW5iaW5kIiwicG9wdGluQ2xpZW50TGltaXRMb2dTdGF0dXMiLCJjbGllbnRfc2VsZWN0IiwibG9nX2lkIiwiY2xvc2VVcGdyYWRlUG9wdXAiLCJtb3RlX3RoYW5fdHdvX2RheXMiLCJyZW1pbmRtZV9wb3B1cCIsInBvcHRpblVwZ3JhZGVEb250UmVtaW5kTWUiLCJwb3B0aW5VcGdyYWRlUmVtaW5kTWUiLCJjbG9zZVJlbWluZE1lUG9wdXAiLCJwb3B0aW5VcGdyYWRlUG9wdXBDbGljayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiTyIsImNodW5rSWRzIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImZ1bGZpbGxlZCIsImoiLCJldmVyeSIsIm8iLCJwcm90b3R5cGUiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJiaW5kIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=